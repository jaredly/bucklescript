[{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The Font Software, modified or unmodified, in part or in whole,\n must be distributed entirely under this license, and must not be\n distributed under any other license. The requirement for fonts to\n remain under this license does not apply to any document created\n using the Font Software.", "rendered": "The Font Software, modified or unmodified, in part or in whole,\n must be distributed entirely under this license, and must not be\n distributed under any other license. The requirement for fonts to\n remain under this license does not apply to any document created\n using the Font Software.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The name(s) of the Copyright Holder(s) or the Author(s) of the Font\n Software shall not be used to promote, endorse or advertise any\n Modified Version, except to acknowledge the contribution(s) of the\n Copyright Holder(s) and the Author(s) or with their explicit written\n permission.", "rendered": "The name(s) of the Copyright Holder(s) or the Author(s) of the Font\n Software shall not be used to promote, endorse or advertise any\n Modified Version, except to acknowledge the contribution(s) of the\n Copyright Holder(s) and the Author(s) or with their explicit written\n permission.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "No Modified Version of the Font Software may use the Reserved Font\n Name(s) unless explicit written permission is granted by the corresponding\n Copyright Holder. This restriction only applies to the primary font name as\n presented to the users.", "rendered": "No Modified Version of the Font Software may use the Reserved Font\n Name(s) unless explicit written permission is granted by the corresponding\n Copyright Holder. This restriction only applies to the primary font name as\n presented to the users.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Original or Modified Versions of the Font Software may be bundled,\n redistributed and/or sold with any software, provided that each copy\n contains the above copyright notice and this license. These can be\n included either as stand-alone text files, human-readable headers or\n in the appropriate machine-readable metadata fields within text or\n binary files as long as those fields can be easily viewed by the user.", "rendered": "Original or Modified Versions of the Font Software may be bundled,\n redistributed and/or sold with any software, provided that each copy\n contains the above copyright notice and this license. These can be\n included either as stand-alone text files, human-readable headers or\n in the appropriate machine-readable metadata fields within text or\n binary files as long as those fields can be easily viewed by the user.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Neither the Font Software nor any of its individual components,\n in Original or Modified Versions, may be sold by itself.", "rendered": "Neither the Font Software nor any of its individual components,\n in Original or Modified Versions, may be sold by itself.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "code block", "contents": "DISCLAIMER\n\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.", "rendered": "<pre><code>DISCLAIMER\n\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.</code></pre>", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "This license becomes null and void if any of the above conditions are\nnot met.", "rendered": "This license becomes null and void if any of the above conditions are\nnot met.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Termination", "title": "Termination", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Permission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:", "rendered": "Permission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Permission--amp--Conditions", "title": "Permission &amp; Conditions", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Author&quot; refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.", "rendered": "<code>&quot;Author&quot;</code> refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Modified Version&quot; refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.", "rendered": "<code>&quot;Modified Version&quot;</code> refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Original Version&quot; refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).", "rendered": "<code>&quot;Original Version&quot;</code> refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Reserved Font Name&quot; refers to any names specified as such after the\ncopyright statement(s).", "rendered": "<code>&quot;Reserved Font Name&quot;</code> refers to any names specified as such after the\ncopyright statement(s).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "&quot;Font Software&quot; refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.", "rendered": "<code>&quot;Font Software&quot;</code> refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Definitions", "title": "Definitions", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.", "rendered": "The OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.", "rendered": "The goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#Preamble", "title": "Preamble", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#SIL-Open-Font-License-v1.1", "title": "SIL Open Font License v1.1", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "", "rendered": "<hr/>", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "This license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL", "rendered": "This license is copied below, and is also available with a FAQ at:\nhttp://scripts.sil.org/OFL", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "This Font Software is licensed under the SIL Open Font License, Version 1.1.", "rendered": "This Font Software is licensed under the SIL Open Font License, Version 1.1.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Copyright 2015-2017, Belleve Invis (belleve@typeof.net).", "rendered": "<hr/><hr/>Copyright 2015-2017, Belleve Invis (belleve@typeof.net).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BELLEVE INVIS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "rendered": "THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL BELLEVE INVIS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:", "rendered": "Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "Copyright (c) 2015-2017 Belleve Invis (belleve@typeof.net).", "rendered": "Copyright (c) 2015-2017 Belleve Invis (belleve@typeof.net).", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html#", "title": "", "contents": "", "rendered": "", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The support code is licensed under Berkeley Software Distribution license.", "rendered": "The support code is licensed under Berkeley Software Distribution license.", "breadcrumb": "LICENSE"},
{"href": "./fonts/LICENSE.html", "title": "LICENSE", "contents": "The font is licensed under SIL OFL Version 1.1.", "rendered": "The font is licensed under SIL OFL Version 1.1.", "breadcrumb": "LICENSE"},
{"href": "./index.html", "title": "docs", "contents": "The new docs repo lives at https://github.com/BuckleScript/bucklescript.github.io", "rendered": "The new docs repo lives at https://github.com/BuckleScript/bucklescript.github.io", "breadcrumb": "docs"},
{"href": "./index.html#This-folder-is-deprecated.", "title": "This folder is deprecated.", "contents": "", "rendered": "", "breadcrumb": "docs"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html", "title": "example", "contents": "Content 3.2", "rendered": "Content 3.2", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html#External-3.2", "title": "External 3.2", "contents": "", "rendered": "", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html", "title": "example", "contents": "Content 3.1", "rendered": "Content 3.1", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html#External-3.1", "title": "External 3.1", "contents": "", "rendered": "", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html", "title": "example", "contents": "Content 2.1", "rendered": "Content 2.1", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html#External-2", "title": "External 2", "contents": "", "rendered": "", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html", "title": "example", "contents": "Content 1.2", "rendered": "Content 1.2", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html#External-1.2", "title": "External 1.2", "contents": "", "rendered": "", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html", "title": "example", "contents": "Note: This will only appear in the speaker notes window.", "rendered": "Note: This will only appear in the speaker notes window.", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html", "title": "example", "contents": "Content 1.1", "rendered": "Content 1.1", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html#External-1.1", "title": "External 1.1", "contents": "", "rendered": "", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/plugin/markdown/example.html#Markdown-Demo", "title": "Markdown Demo", "contents": "", "rendered": "", "breadcrumb": "example"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Open index.html in a browser to view it", "rendered": "Open index.html in a browser to view it", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Unzip and replace the example contents in index.html with your own", "rendered": "Unzip and replace the example contents in index.html with your own", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Download the latest version of reveal.js from https://github.com/hakimel/reveal.js/releases", "rendered": "Download the latest version of reveal.js from <a href=\"https://github.com/hakimel/reveal.js/releases\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">https://github.com/hakimel/reveal.js/releases</a>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Open http://localhost:8000 to view your presentation", "rendered": "Open <a href=\"http://localhost:8000\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://localhost:8000</a> to view your presentation", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "   $ grunt serve\n   ", "rendered": "<pre><code>   $ grunt serve\n   </code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Serve the presentation and monitor source files for changes", "rendered": "Serve the presentation and monitor source files for changes", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "   $ npm install\n   ", "rendered": "<pre><code>   $ npm install\n   </code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Install dependencies", "rendered": "Install dependencies", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "   $ cd reveal.js\n   ", "rendered": "<pre><code>   $ cd reveal.js\n   </code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Navigate to the reveal.js folder", "rendered": "Navigate to the reveal.js folder", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "   $ git clone https://github.com/hakimel/reveal.js.git\n   ", "rendered": "<pre><code>   $ git clone https://github.com/hakimel/reveal.js.git\n   </code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Clone the reveal.js repository", "rendered": "Clone the reveal.js repository", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Install Grunt", "rendered": "Install <a href=\"http://gruntjs.com/getting-started#installing-the-cli\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Grunt</a>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Install Node.js", "rendered": "Install <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Node.js</a>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Copyright (C) 2015 Hakim El Hattab, http://hakim.se", "rendered": "Copyright (C) 2015 Hakim El Hattab, http://hakim.se", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "MIT licensed", "rendered": "MIT licensed", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#License", "title": "License", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Folder-Structure", "title": "Folder Structure", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": " You can change the port by using grunt serve --port 8001.", "rendered": " You can change the port by using <code>grunt serve --port 8001</code>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code.", "rendered": "Some reveal.js features, like external Markdown and speaker notes, require that presentations run from a local web server. The following instructions will set up such a server as well as all of the development tasks needed to make edits to the reveal.js source code.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Full-setup", "title": "Full setup", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The core of reveal.js is very easy to install. You&#39;ll simply need to download a copy of this repository and open the index.html file directly in your browser.", "rendered": "The core of reveal.js is very easy to install. You&#39;ll simply need to download a copy of this repository and open the index.html file directly in your browser.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Basic-setup", "title": "Basic setup", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The basic setup is for authoring presentations only. The full setup gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.", "rendered": "The <strong>basic setup</strong> is for authoring presentations only. The <strong>full setup</strong> gives you access to all reveal.js features and plugins such as speaker notes as well as the development tasks needed to make changes to the source.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Installation", "title": "Installation", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Read MathJax&#39;s documentation if you need HTTPS delivery or serving of specific versions for stability.", "rendered": "Read MathJax&#39;s documentation if you need <a href=\"http://docs.mathjax.org/en/latest/start.html#secure-access-to-the-cdn\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">HTTPS delivery</a> or serving of <a href=\"http://docs.mathjax.org/en/latest/configuration.html#loading-mathjax-from-the-cdn\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">specific versions</a> for stability.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n\n    // other options ...\n\n    math: {\n        mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js',\n        config: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html\n    },\n    \n    dependencies: [\n        { src: 'plugin/math/math.js', async: true }\n    ]\n\n});", "rendered": "<pre><code>Reveal.initialize({\n\n    // other options ...\n\n    math: {\n        mathjax: 'https://cdn.mathjax.org/mathjax/latest/MathJax.js',\n        config: 'TeX-AMS_HTML-full'  // See http://docs.mathjax.org/en/latest/config-files.html\n    },\n    \n    dependencies: [\n        { src: 'plugin/math/math.js', async: true }\n    ]\n\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Below is an example of how the plugin can be configured. If you don&#39;t intend to change these values you do not need to include the math config object at all.", "rendered": "Below is an example of how the plugin can be configured. If you don&#39;t intend to change these values you do not need to include the <code>math</code> config object at all.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The plugin defaults to using LaTeX but that can be adjusted through the math configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you&#39;ll need to download a copy of the library and adjust the mathjax configuration value. ", "rendered": "The plugin defaults to using <a href=\"http://en.wikipedia.org/wiki/LaTeX\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">LaTeX</a> but that can be adjusted through the <code>math</code> configuration object. Note that MathJax is loaded from a remote server. If you want to use it offline you&#39;ll need to download a copy of the library and adjust the <code>mathjax</code> configuration value. ", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the MathJax library. To use it you&#39;ll need to include it as a reveal.js dependency, find our more about dependencies here.", "rendered": "If you want to display math equations in your presentation you can easily do so by including this plugin. The plugin is a very thin wrapper around the <a href=\"http://www.mathjax.org/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">MathJax</a> library. To use it you&#39;ll need to include it as a reveal.js dependency, <a href=\"#dependencies\" title=\"\">find our more about dependencies here</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#MathJax", "title": "MathJax", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\n        id: '1ea875674b17ca76', // Obtained from socket.io server\n        url: 'example.com:80' // Location of your socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/master.js', async: true },\n        { src: 'plugin/multiplex/client.js', async: true }\n\n        // other dependencies...\n    ]\n});", "rendered": "<pre><code>Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\n        id: '1ea875674b17ca76', // Obtained from socket.io server\n        url: 'example.com:80' // Location of your socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/master.js', async: true },\n        { src: 'plugin/multiplex/client.js', async: true }\n\n        // other dependencies...\n    ]\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Example configuration:", "rendered": "Example configuration:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don&#39;t want to use speaker notes). (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don&#39;t want your audience to mess with your slides while you&#39;re presenting. ;)", "rendered": "It can also play the role of static file server for your master presentation and client presentations at the same time (as long as you don&#39;t want to use speaker notes). (Open <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a> in two browsers. Navigate through the slides on one, and the other will update to match. Navigate through the slides on the second, and the first will update to match.) This is probably not desirable, because you don&#39;t want your audience to mess with your slides while you&#39;re presenting. ;)", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: null, // null so the clients do not have control of the master presentation\n        id: '1ea875674b17ca76', // id, obtained from socket.io server\n        url: 'example.com:80' // Location of your socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/client.js', async: true }\n\n        // other dependencies...\n    ]", "rendered": "<pre><code>Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: null, // null so the clients do not have control of the master presentation\n        id: '1ea875674b17ca76', // id, obtained from socket.io server\n        url: 'example.com:80' // Location of your socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/client.js', async: true }\n\n        // other dependencies...\n    ]</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Example configuration:", "rendered": "Example configuration:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The socket.io server can play the role of static file server for your client presentation, as in the example at http://revealjs-51546.onmodulus.net/. (Open http://revealjs-51546.onmodulus.net/ in two browsers. Navigate through the slides on one, and the other will update to match.)", "rendered": "The socket.io server can play the role of static file server for your client presentation, as in the example at <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a>. (Open <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a> in two browsers. Navigate through the slides on one, and the other will update to match.)", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#socket.io-server-as-file-static-server", "title": "socket.io server as file static server", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You are very welcome to point your presentations at the Socket.io server running at http://revealjs-51546.onmodulus.net/, but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.", "rendered": "You are very welcome to point your presentations at the Socket.io server running at <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a>, but availability and stability are not guaranteed. For anything mission critical I recommend you run your own server. It is simple to deploy to nodejitsu, heroku, your own environment, etc.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You&#39;ll need to generate a unique secret and token pair for your master and client presentations. To do so, visit http://example.com/token, where http://example.com is the location of your socket.io server. Or if you&#39;re going to use the socket.io server at http://revealjs-51546.onmodulus.net/, visit http://revealjs-51546.onmodulus.net/token.", "rendered": "You&#39;ll need to generate a unique secret and token pair for your master and client presentations. To do so, visit <code>http://example.com/token</code>, where <code>http://example.com</code> is the location of your socket.io server. Or if you&#39;re going to use the socket.io server at <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a>, visit <a href=\"http://revealjs-51546.onmodulus.net/token\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/token</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Or you use the socket.io server at http://revealjs-51546.onmodulus.net/.", "rendered": "Or you use the socket.io server at <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands:", "rendered": "Server that receives the slideChanged events from the master presentation and broadcasts them out to the connected client presentations. This needs to be publicly accessible. You can run your own socket.io server with the commands:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Socket.io-server", "title": "Socket.io server", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: null, // null so the clients do not have control of the master presentation\n        id: '1ea875674b17ca76', // id, obtained from socket.io server\n        url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/client.js', async: true }\n\n        // other dependencies...\n    ]\n});", "rendered": "<pre><code>Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: null, // null so the clients do not have control of the master presentation\n        id: '1ea875674b17ca76', // id, obtained from socket.io server\n        url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/client.js', async: true }\n\n        // other dependencies...\n    ]\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Example configuration:", "rendered": "Example configuration:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via http://example.com/path/to/presentation/client/index.html, with the configuration below causing them to connect to the socket.io server as clients.", "rendered": "Served from a publicly accessible static file server. Examples include: GitHub Pages, Amazon S3, Dreamhost, Akamai, etc. The more reliable, the better. Your audience can then access the client presentation via <code>http://example.com/path/to/presentation/client/index.html</code>, with the configuration below causing them to connect to the socket.io server as clients.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Client-presentation", "title": "Client presentation", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\n        id: '1ea875674b17ca76', // Obtained from socket.io server\n        url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/master.js', async: true },\n\n        // and if you want speaker notes\n        { src: 'plugin/notes-server/client.js', async: true }\n\n        // other dependencies...\n    ]\n});", "rendered": "<pre><code>Reveal.initialize({\n    // other options...\n\n    multiplex: {\n        // Example values. To generate your own, see the socket.io server instructions.\n        secret: '13652805320794272084', // Obtained from the socket.io server. Gives this (the master) control of the presentation\n        id: '1ea875674b17ca76', // Obtained from socket.io server\n        url: 'revealjs-51546.onmodulus.net:80' // Location of socket.io server\n    },\n\n    // Don't forget to add the dependencies\n    dependencies: [\n        { src: '//cdn.socket.io/socket.io-1.3.5.js', async: true },\n        { src: 'plugin/multiplex/master.js', async: true },\n\n        // and if you want speaker notes\n        { src: 'plugin/notes-server/client.js', async: true }\n\n        // other dependencies...\n    ]\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Example configuration:", "rendered": "Example configuration:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can then access your master presentation at http://localhost:1947", "rendered": "You can then access your master presentation at <code>http://localhost:1947</code>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute node plugin/notes-server in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server.", "rendered": "If you want to use the speaker notes plugin with your master presentation then make sure you have the speaker notes plugin configured correctly along with the configuration shown below, then execute <code>node plugin/notes-server</code> in the directory of your master presentation. The configuration below will cause it to connect to the socket.io server as a master, as well as launch your speaker-notes/static-file server.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter&#39;s) computer. (It&#39;s safer to run the master presentation from your own computer, so if the venue&#39;s Internet goes down it doesn&#39;t stop the show.) An example would be to execute the following commands in the directory of your master presentation: ", "rendered": "Served from a static file server accessible (preferably) only to the presenter. This need only be on your (the presenter&#39;s) computer. (It&#39;s safer to run the master presentation from your own computer, so if the venue&#39;s Internet goes down it doesn&#39;t stop the show.) An example would be to execute the following commands in the directory of your master presentation: ", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Master-presentation", "title": "Master presentation", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "More details:", "rendered": "More details:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The multiplex plugin needs the following 3 things to operate:", "rendered": "The multiplex plugin needs the following 3 things to operate:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at http://revealjs-51546.onmodulus.net/.", "rendered": "The multiplex plugin allows your audience to view the slides of the presentation you are controlling on their own phone, tablet or laptop. As the master presentation navigates the slides, all client presentations will update in real time. See a demo at <a href=\"http://revealjs-51546.onmodulus.net/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://revealjs-51546.onmodulus.net/</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Multiplexing", "title": "Multiplexing", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Then:", "rendered": "Then:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    ...\n\n    dependencies: [\n        { src: 'socket.io/socket.io.js', async: true },\n        { src: 'plugin/notes-server/client.js', async: true }\n    ]\n});", "rendered": "<pre><code>Reveal.initialize({\n    ...\n\n    dependencies: [\n        { src: 'socket.io/socket.io.js', async: true },\n        { src: 'plugin/notes-server/client.js', async: true }\n    ]\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "In some cases it can be desirable to run notes on a separate device from the one you&#39;re presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies:", "rendered": "In some cases it can be desirable to run notes on a separate device from the one you&#39;re presenting on. The Node.js-based notes plugin lets you do this using the same note definitions as its client side counterpart. Include the required scripts by adding the following dependencies:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Server-Side-Speaker-Notes", "title": "Server Side Speaker Notes", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section>\n\n# Title\n## Sub-title\n\nHere is some content...\n\nNote:\nThis will only display in the notes window.", "rendered": "<pre><code><section data-markdown=\"example.md\" data-separator=\"^\\n\\n\\n\" data-separator-vertical=\"^\\n\\n\" data-separator-notes=\"^Note:\"></section>\n\n# Title\n## Sub-title\n\nHere is some content...\n\nNote:\nThis will only display in the notes window.</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you&#39;re using the external Markdown plugin, you can add notes with the help of a special delimiter:", "rendered": "If you&#39;re using the external Markdown plugin, you can add notes with the help of a special delimiter:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the showNotes config value set to true.", "rendered": "Notes are only visible to you in the speaker view. If you wish to share your notes with the audience initialize reveal.js with the <code>showNotes</code> config value set to <code>true</code>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n    <h2>Some Slide</h2>\n\n    <aside class=\"notes\">\n        Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).\n    </aside>\n</section>", "rendered": "<pre><code><section>\n    <h2>Some Slide</h2>\n\n    <aside class=\"notes\">\n        Oh hey, these are some notes. They'll be hidden in your presentation, but you can see them if you open the speaker notes window (hit 's' on your keyboard).\n    </aside>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "When used locally, this feature requires that reveal.js runs from a local web server.", "rendered": "When used locally, this feature requires that reveal.js <a href=\"#full-setup\" title=\"\">runs from a local web server</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Alternatively you can add your notes in a data-notes attribute on the slide. Like &lt;section data-notes=&quot;Something important&quot;&gt;&lt;/section&gt;.", "rendered": "Alternatively you can add your notes in a <code>data-notes</code> attribute on the slide. Like <code>&lt;section data-notes=&quot;Something important&quot;&gt;&lt;/section&gt;</code>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Notes are defined by appending an &lt;aside&gt; element to a slide as seen below. You can add the data-markdown attribute to the aside element if you prefer writing notes using Markdown.", "rendered": "Notes are defined by appending an <code>&lt;aside&gt;</code> element to a slide as seen below. You can add the <code>data-markdown</code> attribute to the aside element if you prefer writing notes using Markdown.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven&#39;t written any notes. Press the &#39;s&#39; key on your keyboard to open the notes window.", "rendered": "reveal.js comes with a speaker notes plugin which can be used to present per-slide notes in a separate browser window. The notes window also gives you a preview of the next upcoming slide so it may be helpful even if you haven&#39;t written any notes. Press the &#39;s&#39; key on your keyboard to open the notes window.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Speaker-Notes", "title": "Speaker Notes", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you want to add a theme of your own see the instructions here: /css/theme/README.md.", "rendered": "If you want to add a theme of your own see the instructions here: <a href=\"https://github.com/hakimel/reveal.js/blob/master/css/theme/README.md\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">/css/theme/README.md</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\">", "rendered": "<pre><code><link rel=\"stylesheet\" href=\"css/theme/black.css\" id=\"theme\"></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Each theme is available as a separate stylesheet. To change theme you will need to replace black below with your desired theme name in index.html:", "rendered": "Each theme is available as a separate stylesheet. To change theme you will need to replace <strong>black</strong> below with your desired theme name in index.html:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The framework comes with a few different themes included:", "rendered": "The framework comes with a few different themes included:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Theming", "title": "Theming", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Alternatively you can use the decktape project.", "rendered": "Alternatively you can use the <a href=\"https://github.com/astefanutti/decktape\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">decktape</a> project.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Chrome Print Settings", "rendered": "<img src='https://s3.amazonaws.com/hakim-static/reveal-js/pdf-print-settings.png' alt='Chrome Print Settings' />", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use Google Chrome or Chromium.\nHere&#39;s an example of an exported presentation that&#39;s been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.", "rendered": "Presentations can be exported to PDF via a special print stylesheet. This feature requires that you use <a href=\"http://google.com/chrome\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Google Chrome</a> or <a href=\"https://www.chromium.org/Home\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Chromium</a>.\nHere&#39;s an example of an exported presentation that&#39;s been uploaded to SlideShare: http://www.slideshare.net/hakimel/revealjs-300.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#PDF-Export", "title": "PDF Export", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    ...,\n\n    // Exposes the reveal.js API through window.postMessage\n    postMessage: true,\n\n    // Dispatches all reveal.js events to the parent window through postMessage\n    postMessageEvents: false\n});", "rendered": "<pre><code>Reveal.initialize({\n    ...,\n\n    // Exposes the reveal.js API through window.postMessage\n    postMessage: true,\n\n    // Dispatches all reveal.js events to the parent window through postMessage\n    postMessageEvents: false\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "This cross-window messaging can be toggled on or off using configuration flags.", "rendered": "This cross-window messaging can be toggled on or off using configuration flags.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "window.addEventListener( 'message', function( event ) {\n    var data = JSON.parse( event.data );\n    if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) {\n        // Slide changed, see data.state for slide number\n    }\n} );", "rendered": "<pre><code>window.addEventListener( 'message', function( event ) {\n    var data = JSON.parse( event.data );\n    if( data.namespace === 'reveal' && data.eventName ==='slidechanged' ) {\n        // Slide changed, see data.state for slide number\n    }\n} );</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here&#39;s how you subscribe to them from the parent window:", "rendered": "When reveal.js runs inside of an iframe it can optionally bubble all of its events to the parent. Bubbled events are stringified JSON with three fields: namespace, eventName and state. Here&#39;s how you subscribe to them from the parent window:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );", "rendered": "<pre><code><window>.postMessage( JSON.stringify({ method: 'slide', args: [ 2 ] }), '*' );</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here&#39;s an example showing how you&#39;d make a reveal.js instance in the given window proceed to slide 2:", "rendered": "The framework has a built-in postMessage API that can be used when communicating with a presentation inside of another window. Here&#39;s an example showing how you&#39;d make a reveal.js instance in the given window proceed to slide 2:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#postMessage-API", "title": "postMessage API", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Limitations:", "rendered": "Limitations:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n    <h2>This video will use up the remaining space on the slide</h2>\n    <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video>\n</section>", "rendered": "<pre><code><section>\n    <h2>This video will use up the remaining space on the slide</h2>\n    <video class=\"stretch\" src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Sometimes it&#39;s desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the .stretch class to an element as seen below:", "rendered": "Sometimes it&#39;s desirable to have an element, like an image or video, stretch to consume as much space as possible within a given slide. This can be done by adding the <code>.stretch</code> class to an element as seen below:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Stretching-elements", "title": "Stretching elements", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Additionally the framework automatically pushes two post messages to all iframes, slide:start when the slide containing the iframe is made visible and slide:stop when it is hidden.", "rendered": "Additionally the framework automatically pushes two <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.postMessage\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">post messages</a> to all iframes, <code>slide:start</code> when the slide containing the iframe is made visible and <code>slide:stop</code> when it is hidden.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video>", "rendered": "<pre><code><video data-autoplay src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\"></video></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Add data-autoplay to your media element if you want it to automatically start playing when the slide is shown:", "rendered": "Add <code>data-autoplay</code> to your media element if you want it to automatically start playing when the slide is shown:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Embedded HTML5 &lt;video&gt;/&lt;audio&gt; and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a data-ignore attribute.", "rendered": "Embedded HTML5 <code>&lt;video&gt;</code>/<code>&lt;audio&gt;</code> and YouTube iframes are automatically paused when you navigate away from a slide. This can be disabled by decorating your element with a <code>data-ignore</code> attribute.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Embedded-media", "title": "Embedded media", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Just press »F« on your keyboard to show your presentation in fullscreen mode. Press the »ESC« key to exit fullscreen mode.", "rendered": "Just press »F« on your keyboard to show your presentation in fullscreen mode. Press the »ESC« key to exit fullscreen mode.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Fullscreen-mode", "title": "Fullscreen mode", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } );\nReveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } );\n\n// Toggle the overview mode programmatically\nReveal.toggleOverview();", "rendered": "<pre><code>Reveal.addEventListener( 'overviewshown', function( event ) { /* ... */ } );\nReveal.addEventListener( 'overviewhidden', function( event ) { /* ... */ } );\n\n// Toggle the overview mode programmatically\nReveal.toggleOverview();</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Press &quot;Esc&quot; or &quot;o&quot; keys to toggle the overview mode on and off. While you&#39;re in this mode, you can still navigate between slides,\nas if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks:", "rendered": "Press &quot;Esc&quot; or &quot;o&quot; keys to toggle the overview mode on and off. While you&#39;re in this mode, you can still navigate between slides,\nas if you were at 1,000 feet above your presentation. The overview mode comes with a few API hooks:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Overview-mode", "title": "Overview mode", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "// Shows the slide number using default formatting\nReveal.configure({ slideNumber: true });\n\n// Slide number formatting can be configured using these variables:\n//  \"h.v\":     horizontal . vertical slide number (default)\n//  \"h/v\":     horizontal / vertical slide number\n//    \"c\":     flattened slide number\n//  \"c/t\":     flattened slide number / total slides\nReveal.configure({ slideNumber: 'c/t' });\n\n", "rendered": "<pre><code>// Shows the slide number using default formatting\nReveal.configure({ slideNumber: true });\n\n// Slide number formatting can be configured using these variables:\n//  \"h.v\":     horizontal . vertical slide number (default)\n//  \"h/v\":     horizontal / vertical slide number\n//    \"c\":     flattened slide number\n//  \"c/t\":     flattened slide number / total slides\nReveal.configure({ slideNumber: 'c/t' });\n\n</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you would like to display the page number of the current slide you can do so using the slideNumber configuration value.", "rendered": "If you would like to display the page number of the current slide you can do so using the <code>slideNumber</code> configuration value.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Slide-number", "title": "Slide number", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n    <pre><code data-trim>\n(def lazy-fib\n  (concat\n   [0 1]\n   ((fn rfib [a b]\n        (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1)))\n    </code></pre>\n</section>", "rendered": "<pre><code><section>\n    <pre><code data-trim>\n(def lazy-fib\n  (concat\n   [0 1]\n   ((fn rfib [a b]\n        (lazy-cons (+ a b) (rfib b (+ a b)))) 0 1)))\n    </code></pre>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "By default, Reveal is configured with highlight.js for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the data-trim attribute is present surrounding whitespace is automatically removed.", "rendered": "By default, Reveal is configured with <a href=\"https://highlightjs.org/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">highlight.js</a> for code syntax highlighting. Below is an example with clojure code that will be syntax highlighted. When the <code>data-trim</code> attribute is present surrounding whitespace is automatically removed.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Code-syntax-highlighting", "title": "Code syntax highlighting", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.addEventListener( 'fragmentshown', function( event ) {\n    // event.fragment = the fragment DOM element\n} );\nReveal.addEventListener( 'fragmenthidden', function( event ) {\n    // event.fragment = the fragment DOM element\n} );", "rendered": "<pre><code>Reveal.addEventListener( 'fragmentshown', function( event ) {\n    // event.fragment = the fragment DOM element\n} );\nReveal.addEventListener( 'fragmenthidden', function( event ) {\n    // event.fragment = the fragment DOM element\n} );</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback.", "rendered": "Some libraries, like MathJax (see #505), get confused by the initially hidden fragment elements. Often times this can be fixed by calling their update or render function from this callback.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "When a slide fragment is either shown or hidden reveal.js will dispatch an event.", "rendered": "When a slide fragment is either shown or hidden reveal.js will dispatch an event.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Fragment-events", "title": "Fragment events", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n    <p class=\"fragment\" data-fragment-index=\"3\">Appears last</p>\n    <p class=\"fragment\" data-fragment-index=\"1\">Appears first</p>\n    <p class=\"fragment\" data-fragment-index=\"2\">Appears second</p>\n</section>", "rendered": "<pre><code><section>\n    <p class=\"fragment\" data-fragment-index=\"3\">Appears last</p>\n    <p class=\"fragment\" data-fragment-index=\"1\">Appears first</p>\n    <p class=\"fragment\" data-fragment-index=\"2\">Appears second</p>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The display order of fragments can be controlled using the data-fragment-index attribute.", "rendered": "The display order of fragments can be controlled using the <code>data-fragment-index</code> attribute.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n    <span class=\"fragment fade-in\">\n        <span class=\"fragment fade-out\">I'll fade in, then out</span>\n    </span>\n</section>", "rendered": "<pre><code><section>\n    <span class=\"fragment fade-in\">\n        <span class=\"fragment fade-out\">I'll fade in, then out</span>\n    </span>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second.", "rendered": "Multiple fragments can be applied to the same element sequentially by wrapping it, this will fade in the text on the first step and fade it back out on the second.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n    <p class=\"fragment grow\">grow</p>\n    <p class=\"fragment shrink\">shrink</p>\n    <p class=\"fragment fade-out\">fade-out</p>\n    <p class=\"fragment current-visible\">visible only once</p>\n    <p class=\"fragment highlight-current-blue\">blue only once</p>\n    <p class=\"fragment highlight-red\">highlight-red</p>\n    <p class=\"fragment highlight-green\">highlight-green</p>\n    <p class=\"fragment highlight-blue\">highlight-blue</p>\n</section>", "rendered": "<pre><code><section>\n    <p class=\"fragment grow\">grow</p>\n    <p class=\"fragment shrink\">shrink</p>\n    <p class=\"fragment fade-out\">fade-out</p>\n    <p class=\"fragment current-visible\">visible only once</p>\n    <p class=\"fragment highlight-current-blue\">blue only once</p>\n    <p class=\"fragment highlight-red\">highlight-red</p>\n    <p class=\"fragment highlight-green\">highlight-green</p>\n    <p class=\"fragment highlight-blue\">highlight-blue</p>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment:", "rendered": "The default fragment style is to start out invisible and fade in. This style can be changed by appending a different class to the fragment:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Fragments are used to highlight individual elements on a slide. Every element with the class fragment will be stepped through before moving on to the next slide. Here&#39;s an example: http://lab.hakim.se/reveal-js/#/fragments", "rendered": "Fragments are used to highlight individual elements on a slide. Every element with the class <code>fragment</code> will be stepped through before moving on to the next slide. Here&#39;s an example: http://lab.hakim.se/reveal-js/#/fragments", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Fragments", "title": "Fragments", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<a href=\"#\" class=\"navigate-left\">\n<a href=\"#\" class=\"navigate-right\">\n<a href=\"#\" class=\"navigate-up\">\n<a href=\"#\" class=\"navigate-down\">\n<a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide -->\n<a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide -->", "rendered": "<pre><code><a href=\"#\" class=\"navigate-left\">\n<a href=\"#\" class=\"navigate-right\">\n<a href=\"#\" class=\"navigate-up\">\n<a href=\"#\" class=\"navigate-down\">\n<a href=\"#\" class=\"navigate-prev\"> <!-- Previous vertical or horizontal slide -->\n<a href=\"#\" class=\"navigate-next\"> <!-- Next vertical or horizontal slide --></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an enabled class when it&#39;s a valid navigation route based on the current slide.", "rendered": "You can also add relative navigation links, similar to the built in reveal.js controls, by appending one of the following classes on any element. Note that each element is automatically given an <code>enabled</code> class when it&#39;s a valid navigation route based on the current slide.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<a href=\"#/2/2\">Link</a>\n<a href=\"#/some-slide\">Link</a>", "rendered": "<pre><code><a href=\"#/2/2\">Link</a>\n<a href=\"#/some-slide\">Link</a></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "It&#39;s easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute (&lt;section id=&quot;some-slide&quot;&gt;):", "rendered": "It&#39;s easy to link between slides. The first example below targets the index of another slide whereas the second targets a slide with an ID attribute (<code>&lt;section id=&quot;some-slide&quot;&gt;</code>):", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Internal-links", "title": "Internal links", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-transition=\"slide\">\n    The train goes on … \n</section>\n<section data-transition=\"slide\"> \n    and on … \n</section>\n<section data-transition=\"slide-in fade-out\"> \n    and stops.\n</section>\n<section data-transition=\"fade-in slide-out\"> \n    (Passengers entering and leaving)\n</section>\n<section data-transition=\"slide\">\n    And it starts again.\n</section>", "rendered": "<pre><code><section data-transition=\"slide\">\n    The train goes on … \n</section>\n<section data-transition=\"slide\"> \n    and on … \n</section>\n<section data-transition=\"slide-in fade-out\"> \n    and stops.\n</section>\n<section data-transition=\"fade-in slide-out\"> \n    (Passengers entering and leaving)\n</section>\n<section data-transition=\"slide\">\n    And it starts again.\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can also use different in and out transitions for the same slide:", "rendered": "You can also use different in and out transitions for the same slide:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-transition=\"zoom\">\n    <h2>This slide will override the presentation transition and zoom!</h2>\n</section>\n\n<section data-transition-speed=\"fast\">\n    <h2>Choose from three transition speeds: default, fast or slow!</h2>\n</section>", "rendered": "<pre><code><section data-transition=\"zoom\">\n    <h2>This slide will override the presentation transition and zoom!</h2>\n</section>\n\n<section data-transition-speed=\"fast\">\n    <h2>Choose from three transition speeds: default, fast or slow!</h2>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The global presentation transition is set using the transition config value. You can override the global transition for a specific slide by using the data-transition attribute:", "rendered": "The global presentation transition is set using the <code>transition</code> config value. You can override the global transition for a specific slide by using the <code>data-transition</code> attribute:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Slide-Transitions", "title": "Slide Transitions", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Make sure that the background size is much bigger than screen size to allow for some scrolling. View example.", "rendered": "Make sure that the background size is much bigger than screen size to allow for some scrolling. <a href=\"http://lab.hakim.se/reveal-js/?parallaxBackgroundImage=https%3A%2F%2Fs3.amazonaws.com%2Fhakim-static%2Freveal-js%2Freveal-parallax-1.jpg&parallaxBackgroundSize=2100px%20900px\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">View example</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n\n    // Parallax background image\n    parallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\"\n\n    // Parallax background size\n    parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto)\n\n    // Amount of pixels to move the parallax background per slide step,\n    // a value of 0 disables movement along the given axis\n    // These are optional, if they aren't specified they'll be calculated automatically\n    parallaxBackgroundHorizontal: 200,\n    parallaxBackgroundVertical: 50\n\n});", "rendered": "<pre><code>Reveal.initialize({\n\n    // Parallax background image\n    parallaxBackgroundImage: '', // e.g. \"https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg\"\n\n    // Parallax background size\n    parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\" - currently only pixels are supported (don't use % or auto)\n\n    // Amount of pixels to move the parallax background per slide step,\n    // a value of 0 disables movement along the given axis\n    // These are optional, if they aren't specified they'll be calculated automatically\n    parallaxBackgroundHorizontal: 200,\n    parallaxBackgroundVertical: 50\n\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional).", "rendered": "If you want to use a parallax scrolling background, set the first two config properties below when initializing reveal.js (the other two are optional).", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Parallax-Background", "title": "Parallax Background", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing backgroundTransition: &#39;slide&#39; to the Reveal.initialize() call. Alternatively you can set data-background-transition on any section with a background to override that specific transition.", "rendered": "Backgrounds transition using a fade animation by default. This can be changed to a linear sliding transition by passing <code>backgroundTransition: &#39;slide&#39;</code> to the <code>Reveal.initialize()</code> call. Alternatively you can set <code>data-background-transition</code> on any section with a background to override that specific transition.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-background=\"#ff0000\">\n    <h2>All CSS color formats are supported, like rgba() or hsl().</h2>\n</section>\n<section data-background=\"http://example.com/image.png\">\n    <h2>This slide will have a full-size background image.</h2>\n</section>\n<section data-background=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\">\n    <h2>This background image will be sized to 100px and repeated.</h2>\n</section>\n<section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop>\n    <h2>Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided.</h2>\n</section>\n<section data-background-iframe=\"https://slides.com\">\n    <h2>Embeds a web page as a background. Note that the page won't be interactive.</h2>\n</section>", "rendered": "<pre><code><section data-background=\"#ff0000\">\n    <h2>All CSS color formats are supported, like rgba() or hsl().</h2>\n</section>\n<section data-background=\"http://example.com/image.png\">\n    <h2>This slide will have a full-size background image.</h2>\n</section>\n<section data-background=\"http://example.com/image.png\" data-background-size=\"100px\" data-background-repeat=\"repeat\">\n    <h2>This background image will be sized to 100px and repeated.</h2>\n</section>\n<section data-background-video=\"https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.mp4,https://s3.amazonaws.com/static.slid.es/site/homepage/v1/homepage-video-editor.webm\" data-background-video-loop>\n    <h2>Video. Multiple sources can be defined using a comma separated list. Video will loop when the data-background-video-loop attribute is provided.</h2>\n</section>\n<section data-background-iframe=\"https://slides.com\">\n    <h2>Embeds a web page as a background. Note that the page won't be interactive.</h2>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a data-background attribute to your &lt;section&gt; elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples.", "rendered": "Slides are contained within a limited portion of the screen by default to allow them to fit any display and scale uniformly. You can apply full page backgrounds outside of the slide area by adding a <code>data-background</code> attribute to your <code>&lt;section&gt;</code> elements. Four different types of backgrounds are supported: color, image, video and iframe. Below are a few examples.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Slide-Backgrounds", "title": "Slide Backgrounds", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.addEventListener( 'somestate', function() {\n    // TODO: Sprinkle magic\n}, false );", "rendered": "<pre><code>Reveal.addEventListener( 'somestate', function() {\n    // TODO: Sprinkle magic\n}, false );</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Furthermore you can also listen to these changes in state via JavaScript:", "rendered": "Furthermore you can also listen to these changes in state via JavaScript:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you set data-state=&quot;somestate&quot; on a slide &lt;section&gt;, &quot;somestate&quot; will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.", "rendered": "If you set <code>data-state=&quot;somestate&quot;</code> on a slide <code>&lt;section&gt;</code>, &quot;somestate&quot; will be applied as a class on the document element when that slide is opened. This allows you to apply broad style changes to the page based on the active slide.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Slide-States", "title": "Slide States", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.slide( 1 );\n// we're on slide 1\n\nvar state = Reveal.getState();\n\nReveal.slide( 3 );\n// we're on slide 3\n\nReveal.setState( state );\n// we're back on slide 1", "rendered": "<pre><code>Reveal.slide( 1 );\n// we're on slide 1\n\nvar state = Reveal.getState();\n\nReveal.slide( 3 );\n// we're on slide 3\n\nReveal.setState( state );\n// we're back on slide 1</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The presentation&#39;s current state can be fetched by using the getState method. A state object contains all of the information required to put the presentation back as it was when getState was first called. Sort of like a snapshot. It&#39;s a simple object that can easily be stringified and persisted or sent over the wire.", "rendered": "The presentation&#39;s current state can be fetched by using the <code>getState</code> method. A state object contains all of the information required to put the presentation back as it was when <code>getState</code> was first called. Sort of like a snapshot. It&#39;s a simple object that can easily be stringified and persisted or sent over the wire.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Presentation-State", "title": "Presentation State", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.addEventListener( 'slidechanged', function( event ) {\n    // event.previousSlide, event.currentSlide, event.indexh, event.indexv\n} );", "rendered": "<pre><code>Reveal.addEventListener( 'slidechanged', function( event ) {\n    // event.previousSlide, event.currentSlide, event.indexh, event.indexv\n} );</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Some libraries, like MathJax (see #226), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback.", "rendered": "Some libraries, like MathJax (see <a href=\"https://github.com/hakimel/reveal.js/issues/226#issuecomment-10261609\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">#226</a>), get confused by the transforms and display states of slides. Often times, this can be fixed by calling their update or render function from this callback.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "A &#39;slidechanged&#39; event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes.", "rendered": "A &#39;slidechanged&#39; event is fired each time the slide is changed (regardless of state). The event object holds the index values of the current slide as well as a reference to the previous and current slide HTML nodes.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Slide-Changed-Event", "title": "Slide Changed Event", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "// Navigation\nReveal.slide( indexh, indexv, indexf );\nReveal.left();\nReveal.right();\nReveal.up();\nReveal.down();\nReveal.prev();\nReveal.next();\nReveal.prevFragment();\nReveal.nextFragment();\n\n// Toggle presentation states, optionally pass true/false to force on/off\nReveal.toggleOverview();\nReveal.togglePause();\nReveal.toggleAutoSlide();\n\n// Change a config value at runtime\nReveal.configure({ controls: true });\n\n// Returns the present configuration options\nReveal.getConfig();\n\n// Fetch the current scale of the presentation\nReveal.getScale();\n\n// Retrieves the previous and current slide elements\nReveal.getPreviousSlide();\nReveal.getCurrentSlide();\n\nReveal.getIndices(); // { h: 0, v: 0 } }\nReveal.getProgress(); // 0-1\nReveal.getTotalSlides();\n\n// Returns the speaker notes for the current slide\nReveal.getSlideNotes();\n\n// State checks\nReveal.isFirstSlide();\nReveal.isLastSlide();\nReveal.isOverview();\nReveal.isPaused();\nReveal.isAutoSliding();", "rendered": "<pre><code>// Navigation\nReveal.slide( indexh, indexv, indexf );\nReveal.left();\nReveal.right();\nReveal.up();\nReveal.down();\nReveal.prev();\nReveal.next();\nReveal.prevFragment();\nReveal.nextFragment();\n\n// Toggle presentation states, optionally pass true/false to force on/off\nReveal.toggleOverview();\nReveal.togglePause();\nReveal.toggleAutoSlide();\n\n// Change a config value at runtime\nReveal.configure({ controls: true });\n\n// Returns the present configuration options\nReveal.getConfig();\n\n// Fetch the current scale of the presentation\nReveal.getScale();\n\n// Retrieves the previous and current slide elements\nReveal.getPreviousSlide();\nReveal.getCurrentSlide();\n\nReveal.getIndices(); // { h: 0, v: 0 } }\nReveal.getProgress(); // 0-1\nReveal.getTotalSlides();\n\n// Returns the speaker notes for the current slide\nReveal.getSlideNotes();\n\n// State checks\nReveal.isFirstSlide();\nReveal.isLastSlide();\nReveal.isOverview();\nReveal.isPaused();\nReveal.isAutoSliding();</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The Reveal object exposes a JavaScript API for controlling navigation and reading state:", "rendered": "The <code>Reveal</code> object exposes a JavaScript API for controlling navigation and reading state:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#API", "title": "API", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section>\n  <img data-src=\"image.png\">\n  <iframe data-src=\"http://hakim.se\"></iframe>\n  <video>\n    <source data-src=\"video.webm\" type=\"video/webm\" />\n    <source data-src=\"video.mp4\" type=\"video/mp4\" />\n  </video>\n</section>", "rendered": "<pre><code><section>\n  <img data-src=\"image.png\">\n  <iframe data-src=\"http://hakim.se\"></iframe>\n  <video>\n    <source data-src=\"video.webm\" type=\"video/webm\" />\n    <source data-src=\"video.mp4\" type=\"video/mp4\" />\n  </video>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "To enable lazy loading all you need to do is change your &quot;src&quot; attributes to &quot;data-src&quot; as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible.", "rendered": "To enable lazy loading all you need to do is change your &quot;src&quot; attributes to &quot;data-src&quot; as shown below. This is supported for image, video, audio and iframe elements. Lazy loaded iframes will also unload when the containing slide is no longer visible.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "When working on presentation with a lot of media or iframe content it&#39;s important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the viewDistance configuration option.", "rendered": "When working on presentation with a lot of media or iframe content it&#39;s important to load lazily. Lazy loading means that reveal.js will only load content for the few slides nearest to the current slide. The number of slides that are preloaded is determined by the <code>viewDistance</code> configuration option.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Lazy-Loading", "title": "Lazy Loading", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If there&#39;s some part of your content that needs to remain accessible to touch events you&#39;ll need to highlight this by adding a data-prevent-swipe attribute to the element. One common example where this is useful is elements that need to be scrolled.", "rendered": "If there&#39;s some part of your content that needs to remain accessible to touch events you&#39;ll need to highlight this by adding a <code>data-prevent-swipe</code> attribute to the element. One common example where this is useful is elements that need to be scrolled.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the touch config option to false when initializing reveal.js.", "rendered": "You can swipe to navigate through a presentation on any touch-enabled device. Horizontal swipes change between horizontal slides, vertical swipes change between vertical slides. If you wish to disable this you can set the <code>touch</code> config option to false when initializing reveal.js.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Touch-Navigation", "title": "Touch Navigation", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.configure({\n  keyboard: {\n    13: 'next', // go to the next slide when the ENTER key is pressed\n    27: function() {}, // do something custom when ESC is pressed\n    32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding)\n  }\n});", "rendered": "<pre><code>Reveal.configure({\n  keyboard: {\n    13: 'next', // go to the next slide when the ENTER key is pressed\n    27: function() {}, // do something custom when ESC is pressed\n    32: null // don't do anything when SPACE is pressed (i.e. disable a reveal.js default binding)\n  }\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "If you&#39;re unhappy with any of the default keyboard bindings you can override them using the keyboard config option:", "rendered": "If you&#39;re unhappy with any of the default keyboard bindings you can override them using the <code>keyboard</code> config option:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Keyboard-Bindings", "title": "Keyboard Bindings", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Whenever the auto-slide mode is resumed or paused the autoslideresumed and autoslidepaused events are fired.", "rendered": "Whenever the auto-slide mode is resumed or paused the <code>autoslideresumed</code> and <code>autoslidepaused</code> events are fired.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-autoslide=\"2000\">\n    <p>After 2 seconds the first fragment will be shown.</p>\n    <p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p>\n    <p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p>\n</section>", "rendered": "<pre><code><section data-autoslide=\"2000\">\n    <p>After 2 seconds the first fragment will be shown.</p>\n    <p class=\"fragment\" data-autoslide=\"10000\">After 10 seconds the next fragment will be shown.</p>\n    <p class=\"fragment\">Now, the fragment is displayed for 2 seconds before the next slide is shown.</p>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can also override the slide duration for individual slides and fragments by using the data-autoslide attribute:", "rendered": "You can also override the slide duration for individual slides and fragments by using the <code>data-autoslide</code> attribute:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing »a« on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying autoSlideStoppable: false in your reveal.js config.", "rendered": "When this is turned on a control element will appear that enables users to pause and resume auto-sliding. Alternatively, sliding can be paused or resumed by pressing »a« on the keyboard. Sliding is paused automatically as soon as the user starts navigating. You can disable these controls by specifying <code>autoSlideStoppable: false</code> in your reveal.js config.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "// Slide every five seconds\nReveal.configure({\n  autoSlide: 5000\n});", "rendered": "<pre><code>// Slide every five seconds\nReveal.configure({\n  autoSlide: 5000\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides:", "rendered": "Presentations can be configured to progress through slides automatically, without any user input. To enable this you will need to tell the framework how many milliseconds it should wait between slides:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Auto-sliding", "title": "Auto-sliding", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.addEventListener( 'ready', function( event ) {\n    // event.currentSlide, event.indexh, event.indexv\n} );", "rendered": "<pre><code>Reveal.addEventListener( 'ready', function( event ) {\n    // event.currentSlide, event.indexh, event.indexv\n} );</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "A &#39;ready&#39; event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already &#39;ready&#39; you can call Reveal.isReady().", "rendered": "A &#39;ready&#39; event is fired when reveal.js has loaded all non-async dependencies and is ready to start navigating. To check if reveal.js is already &#39;ready&#39; you can call <code>Reveal.isReady()</code>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Ready-Event", "title": "Ready Event", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can add your own extensions using the same syntax. The following properties are available for each dependency object:", "rendered": "You can add your own extensions using the same syntax. The following properties are available for each dependency object:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n    dependencies: [\n        // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/\n        { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },\n\n        // Interpret Markdown in <section> elements\n        { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n        { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n\n        // Syntax highlight for <code> elements\n        { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\n\n        // Zoom in and out with Alt+click\n        { src: 'plugin/zoom-js/zoom.js', async: true },\n\n        // Speaker notes\n        { src: 'plugin/notes/notes.js', async: true },\n\n        // MathJax\n        { src: 'plugin/math/math.js', async: true }\n    ]\n});", "rendered": "<pre><code>Reveal.initialize({\n    dependencies: [\n        // Cross-browser shim that fully implements classList - https://github.com/eligrey/classList.js/\n        { src: 'lib/js/classList.js', condition: function() { return !document.body.classList; } },\n\n        // Interpret Markdown in <section> elements\n        { src: 'plugin/markdown/marked.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n        { src: 'plugin/markdown/markdown.js', condition: function() { return !!document.querySelector( '[data-markdown]' ); } },\n\n        // Syntax highlight for <code> elements\n        { src: 'plugin/highlight/highlight.js', async: true, callback: function() { hljs.initHighlightingOnLoad(); } },\n\n        // Zoom in and out with Alt+click\n        { src: 'plugin/zoom-js/zoom.js', async: true },\n\n        // Speaker notes\n        { src: 'plugin/notes/notes.js', async: true },\n\n        // MathJax\n        { src: 'plugin/math/math.js', async: true }\n    ]\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Reveal.js doesn&#39;t rely on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example:", "rendered": "Reveal.js doesn&#39;t <em>rely</em> on any third party scripts to work but a few optional libraries are included by default. These libraries are loaded as dependencies in the order they appear, for example:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Dependencies", "title": "Dependencies", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n\n    ...\n\n    // The \"normal\" size of the presentation, aspect ratio will be preserved\n    // when the presentation is scaled to fit different resolutions. Can be\n    // specified using percentage units.\n    width: 960,\n    height: 700,\n\n    // Factor of the display size that should remain empty around the content\n    margin: 0.1,\n\n    // Bounds for smallest/largest possible scale to apply to content\n    minScale: 0.2,\n    maxScale: 1.5\n\n});", "rendered": "<pre><code>Reveal.initialize({\n\n    ...\n\n    // The \"normal\" size of the presentation, aspect ratio will be preserved\n    // when the presentation is scaled to fit different resolutions. Can be\n    // specified using percentage units.\n    width: 960,\n    height: 700,\n\n    // Factor of the display size that should remain empty around the content\n    margin: 0.1,\n\n    // Bounds for smallest/largest possible scale to apply to content\n    minScale: 0.2,\n    maxScale: 1.5\n\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "See below for a list of configuration options related to sizing, including default values:", "rendered": "See below for a list of configuration options related to sizing, including default values:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport.", "rendered": "All presentations have a normal size, that is the resolution at which they are authored. The framework will automatically scale presentations uniformly based on this size to ensure that everything fits on any given display or viewport.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Presentation-Size", "title": "Presentation Size", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "// Turn autoSlide off\nReveal.configure({ autoSlide: 0 });\n\n// Start auto-sliding every 5s\nReveal.configure({ autoSlide: 5000 });", "rendered": "<pre><code>// Turn autoSlide off\nReveal.configure({ autoSlide: 0 });\n\n// Start auto-sliding every 5s\nReveal.configure({ autoSlide: 5000 });</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "The configuration can be updated after initialization using the configure method:", "rendered": "The configuration can be updated after initialization using the <code>configure</code> method:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "Reveal.initialize({\n\n    // Display controls in the bottom right corner\n    controls: true,\n\n    // Display a presentation progress bar\n    progress: true,\n\n    // Display the page number of the current slide\n    slideNumber: false,\n\n    // Push each slide change to the browser history\n    history: false,\n\n    // Enable keyboard shortcuts for navigation\n    keyboard: true,\n\n    // Enable the slide overview mode\n    overview: true,\n\n    // Vertical centering of slides\n    center: true,\n\n    // Enables touch navigation on devices with touch input\n    touch: true,\n\n    // Loop the presentation\n    loop: false,\n\n    // Change the presentation direction to be RTL\n    rtl: false,\n\n    // Turns fragments on and off globally\n    fragments: true,\n\n    // Flags if the presentation is running in an embedded mode,\n    // i.e. contained within a limited portion of the screen\n    embedded: false,\n\n    // Flags if we should show a help overlay when the questionmark\n    // key is pressed\n    help: true,\n\n    // Flags if speaker notes should be visible to all viewers\n    showNotes: false,\n\n    // Number of milliseconds between automatically proceeding to the\n    // next slide, disabled when set to 0, this value can be overwritten\n    // by using a data-autoslide attribute on your slides\n    autoSlide: 0,\n\n    // Stop auto-sliding after user input\n    autoSlideStoppable: true,\n\n    // Enable slide navigation via mouse wheel\n    mouseWheel: false,\n\n    // Hides the address bar on mobile devices\n    hideAddressBar: true,\n\n    // Opens links in an iframe preview overlay\n    previewLinks: false,\n\n    // Transition style\n    transition: 'default', // none/fade/slide/convex/concave/zoom\n\n    // Transition speed\n    transitionSpeed: 'default', // default/fast/slow\n\n    // Transition style for full page slide backgrounds\n    backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom\n\n    // Number of slides away from the current that are visible\n    viewDistance: 3,\n\n    // Parallax background image\n    parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\"\n\n    // Parallax background size\n    parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\"\n\n    // Amount to move parallax background (horizontal and vertical) on slide change\n    // Number, e.g. 100\n    parallaxBackgroundHorizontal: '',\n    parallaxBackgroundVertical: ''\n\n});", "rendered": "<pre><code>Reveal.initialize({\n\n    // Display controls in the bottom right corner\n    controls: true,\n\n    // Display a presentation progress bar\n    progress: true,\n\n    // Display the page number of the current slide\n    slideNumber: false,\n\n    // Push each slide change to the browser history\n    history: false,\n\n    // Enable keyboard shortcuts for navigation\n    keyboard: true,\n\n    // Enable the slide overview mode\n    overview: true,\n\n    // Vertical centering of slides\n    center: true,\n\n    // Enables touch navigation on devices with touch input\n    touch: true,\n\n    // Loop the presentation\n    loop: false,\n\n    // Change the presentation direction to be RTL\n    rtl: false,\n\n    // Turns fragments on and off globally\n    fragments: true,\n\n    // Flags if the presentation is running in an embedded mode,\n    // i.e. contained within a limited portion of the screen\n    embedded: false,\n\n    // Flags if we should show a help overlay when the questionmark\n    // key is pressed\n    help: true,\n\n    // Flags if speaker notes should be visible to all viewers\n    showNotes: false,\n\n    // Number of milliseconds between automatically proceeding to the\n    // next slide, disabled when set to 0, this value can be overwritten\n    // by using a data-autoslide attribute on your slides\n    autoSlide: 0,\n\n    // Stop auto-sliding after user input\n    autoSlideStoppable: true,\n\n    // Enable slide navigation via mouse wheel\n    mouseWheel: false,\n\n    // Hides the address bar on mobile devices\n    hideAddressBar: true,\n\n    // Opens links in an iframe preview overlay\n    previewLinks: false,\n\n    // Transition style\n    transition: 'default', // none/fade/slide/convex/concave/zoom\n\n    // Transition speed\n    transitionSpeed: 'default', // default/fast/slow\n\n    // Transition style for full page slide backgrounds\n    backgroundTransition: 'default', // none/fade/slide/convex/concave/zoom\n\n    // Number of slides away from the current that are visible\n    viewDistance: 3,\n\n    // Parallax background image\n    parallaxBackgroundImage: '', // e.g. \"'https://s3.amazonaws.com/hakim-static/reveal-js/reveal-parallax-1.jpg'\"\n\n    // Parallax background size\n    parallaxBackgroundSize: '', // CSS syntax, e.g. \"2100px 900px\"\n\n    // Amount to move parallax background (horizontal and vertical) on slide change\n    // Number, e.g. 100\n    parallaxBackgroundHorizontal: '',\n    parallaxBackgroundVertical: ''\n\n});</code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below.", "rendered": "At the end of your page you need to initialize reveal by running the following code. Note that all config values are optional and will default as specified below.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Configuration", "title": "Configuration", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-markdown>\n    <script type=\"text/template\">\n    <!-- .slide: data-background=\"#ff0000\" -->\n        Markdown content\n    </script>\n</section>", "rendered": "<pre><code><section data-markdown>\n    <script type=\"text/template\">\n    <!-- .slide: data-background=\"#ff0000\" -->\n        Markdown content\n    </script>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Special syntax (in html comment) is available for adding attributes to the slide &lt;section&gt; elements generated by your Markdown.", "rendered": "Special syntax (in html comment) is available for adding attributes to the slide <code>&lt;section&gt;</code> elements generated by your Markdown.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Slide-Attributes", "title": "Slide Attributes", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-markdown>\n    <script type=\"text/template\">\n        - Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n        - Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n    </script>\n</section>", "rendered": "<pre><code><section data-markdown>\n    <script type=\"text/template\">\n        - Item 1 <!-- .element: class=\"fragment\" data-fragment-index=\"2\" -->\n        - Item 2 <!-- .element: class=\"fragment\" data-fragment-index=\"1\" -->\n    </script>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things.", "rendered": "Special syntax (in html comment) is available for adding attributes to Markdown elements. This is useful for fragments, amongst other things.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Element-Attributes", "title": "Element Attributes", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-markdown=\"example.md\"  \n         data-separator=\"^\\n\\n\\n\"  \n         data-separator-vertical=\"^\\n\\n\"  \n         data-separator-notes=\"^Note:\"  \n         data-charset=\"iso-8859-15\">\n</section>", "rendered": "<pre><code><section data-markdown=\"example.md\"  \n         data-separator=\"^\\n\\n\\n\"  \n         data-separator-vertical=\"^\\n\\n\"  \n         data-separator-notes=\"^Note:\"  \n         data-charset=\"iso-8859-15\">\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "When used locally, this feature requires that reveal.js runs from a local web server.", "rendered": "When used locally, this feature requires that reveal.js <a href=\"#full-setup\" title=\"\">runs from a local web server</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The data-charset attribute is optional and specifies which charset to use when loading the external file.", "rendered": "You can write your content as a separate file and have reveal.js load it at runtime. Note the separator arguments which determine how slides are delimited in the external file. The <code>data-charset</code> attribute is optional and specifies which charset to use when loading the external file.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#External-Markdown", "title": "External Markdown", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<section data-markdown>\n    <script type=\"text/template\">\n        ## Page title\n\n        A paragraph with some text and a [link](http://hakim.se).\n    </script>\n</section>", "rendered": "<pre><code><section data-markdown>\n    <script type=\"text/template\">\n        ## Page title\n\n        A paragraph with some text and a [link](http://hakim.se).\n    </script>\n</section></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "This is based on data-markdown from Paul Irish modified to use marked to support Github Flavoured Markdown. Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks).", "rendered": "This is based on <a href=\"https://gist.github.com/1343518\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">data-markdown</a> from <a href=\"https://github.com/paulirish\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Paul Irish</a> modified to use <a href=\"https://github.com/chjj/marked\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">marked</a> to support <a href=\"https://help.github.com/articles/github-flavored-markdown\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Github Flavoured Markdown</a>. Sensitive to indentation (avoid mixing tabs and spaces) and line breaks (avoid consecutive breaks).", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "It&#39;s possible to write your slides using Markdown. To enable Markdown, add the data-markdown attribute to your &lt;section&gt; elements and wrap the contents in a &lt;script type=&quot;text/template&quot;&gt; like the example below.", "rendered": "It&#39;s possible to write your slides using Markdown. To enable Markdown, add the <code>data-markdown</code> attribute to your <code>&lt;section&gt;</code> elements and wrap the contents in a <code>&lt;script type=&quot;text/template&quot;&gt;</code> like the example below.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Markdown", "title": "Markdown", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "code block", "contents": "<div class=\"reveal\">\n    <div class=\"slides\">\n        <section>Single Horizontal Slide</section>\n        <section>\n            <section>Vertical Slide 1</section>\n            <section>Vertical Slide 2</section>\n        </section>\n    </div>\n</div>", "rendered": "<pre><code><div class=\"reveal\">\n    <div class=\"slides\">\n        <section>Single Horizontal Slide</section>\n        <section>\n            <section>Vertical Slide 1</section>\n            <section>Vertical Slide 2</section>\n        </section>\n    </div>\n</div></code></pre>", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Markup hierarchy needs to be &lt;div class=&quot;reveal&quot;&gt; &lt;div class=&quot;slides&quot;&gt; &lt;section&gt; where the &lt;section&gt; represents one slide and can be repeated indefinitely. If you place multiple &lt;section&gt;&#39;s inside of another &lt;section&gt; they will be shown as vertical slides. The first of the vertical slides is the &quot;root&quot; of the others (at the top), and it will be included in the horizontal sequence. For example:", "rendered": "Markup hierarchy needs to be <code>&lt;div class=&quot;reveal&quot;&gt; &lt;div class=&quot;slides&quot;&gt; &lt;section&gt;</code> where the <code>&lt;section&gt;</code> represents one slide and can be repeated indefinitely. If you place multiple <code>&lt;section&gt;</code>&#39;s inside of another <code>&lt;section&gt;</code> they will be shown as vertical slides. The first of the vertical slides is the &quot;root&quot; of the others (at the top), and it will be included in the horizontal sequence. For example:", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Markup", "title": "Markup", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Instructions", "title": "Instructions", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "Presentations are written using HTML or Markdown but there&#39;s also an online editor for those of you who prefer a graphical interface. Give it a try at http://slides.com.", "rendered": "Presentations are written using HTML or Markdown but there&#39;s also an online editor for those of you who prefer a graphical interface. Give it a try at <a href=\"http://slides.com\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">http://slides.com</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#Online-Editor", "title": "Online Editor", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#More-reading-", "title": "More reading:", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "reveal.js comes with a broad range of features including nested slides, Markdown contents, PDF export, speaker notes and a JavaScript API. It&#39;s best viewed in a modern browser but fallbacks are available to make sure your presentation can still be viewed elsewhere.", "rendered": "reveal.js comes with a broad range of features including <a href=\"https://github.com/hakimel/reveal.js#markup\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">nested slides</a>, <a href=\"https://github.com/hakimel/reveal.js#markdown\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Markdown contents</a>, <a href=\"https://github.com/hakimel/reveal.js#pdf-export\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">PDF export</a>, <a href=\"https://github.com/hakimel/reveal.js#speaker-notes\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">speaker notes</a> and a <a href=\"https://github.com/hakimel/reveal.js#api\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">JavaScript API</a>. It&#39;s best viewed in a modern browser but <a href=\"https://github.com/hakimel/reveal.js/wiki/Browser-Support\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">fallbacks</a> are available to make sure your presentation can still be viewed elsewhere.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html", "title": "REVEAL_JS", "contents": "A framework for easily creating beautiful presentations using HTML. Check out the live demo.", "rendered": "A framework for easily creating beautiful presentations using HTML. <a href=\"http://lab.hakim.se/reveal-js/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Check out the live demo</a>.", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/REVEAL_JS.html#reveal.js-Build-Status", "title": "reveal.js Build Status", "contents": "", "rendered": "", "breadcrumb": "REVEAL_JS"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "Include /css/theme/template/theme.scss\nThe template theme file which will generate final CSS output based on the currently defined variables.", "rendered": "<strong>Include <a href=\"https://github.com/hakimel/reveal.js/blob/master/css/theme/template/theme.scss\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">/css/theme/template/theme.scss</a></strong>\nThe template theme file which will generate final CSS output based on the currently defined variables.", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "Override\nThis is where you override the default theme. Either by specifying variables (see settings.scss for reference) or by adding any selectors and styles you please.", "rendered": "<strong>Override</strong>\nThis is where you override the default theme. Either by specifying variables (see <a href=\"https://github.com/hakimel/reveal.js/blob/master/css/theme/template/settings.scss\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">settings.scss</a> for reference) or by adding any selectors and styles you please.", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "Include /css/theme/template/settings.scss\nDeclares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3.", "rendered": "<strong>Include <a href=\"https://github.com/hakimel/reveal.js/blob/master/css/theme/template/settings.scss\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">/css/theme/template/settings.scss</a></strong>\nDeclares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3.", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "Include /css/theme/template/mixins.scss\nShared utility functions.", "rendered": "<strong>Include <a href=\"https://github.com/hakimel/reveal.js/blob/master/css/theme/template/mixins.scss\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">/css/theme/template/mixins.scss</a></strong>\nShared utility functions.", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "Each theme file does four things in the following order:", "rendered": "Each theme file does four things in the following order:", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "To create your own theme, start by duplicating a .scss file in /css/theme/source. It will be automatically compiled by Grunt from Sass to CSS (see the Gruntfile) when you run grunt css-themes.", "rendered": "To create your own theme, start by duplicating a <code>.scss</code> file in <a href=\"https://github.com/hakimel/reveal.js/blob/master/css/theme/source\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">/css/theme/source</a>. It will be automatically compiled by Grunt from Sass to CSS (see the <a href=\"https://github.com/hakimel/reveal.js/blob/master/Gruntfile.js\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Gruntfile</a>) when you run <code>grunt css-themes</code>.", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html#Creating-a-Theme", "title": "Creating a Theme", "contents": "", "rendered": "", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html", "title": "theme", "contents": "Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup", "rendered": "Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceding: https://github.com/hakimel/reveal.js#full-setup", "breadcrumb": "theme"},
{"href": "./slides/preview/reveal-js/css/theme/index.html#Dependencies", "title": "Dependencies", "contents": "", "rendered": "", "breadcrumb": "theme"},
{"href": "./slides/preview/CONTRIBUTING.html", "title": "CONTRIBUTING", "contents": "As far as see, the following would be nice enhancements", "rendered": "As far as see, the following would be nice enhancements", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/CONTRIBUTING.html#Enhancement-idea", "title": "Enhancement idea", "contents": "", "rendered": "", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/CONTRIBUTING.html", "title": "CONTRIBUTING", "contents": "This is currently a side project, so if anybody want to help me maintain and own this, please let me know.", "rendered": "This is currently a side project, so if anybody want to help me maintain and own this, please let me know.", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/CONTRIBUTING.html#Ownership", "title": "Ownership", "contents": "", "rendered": "", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/CONTRIBUTING.html", "title": "CONTRIBUTING", "contents": "Submit issues for any bugs or improvement ideas you have. Or even better, fix them and submit pull a request.", "rendered": "Submit issues for any bugs or improvement ideas you have. Or even better, fix them and submit pull a request.", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/CONTRIBUTING.html#Contributing", "title": "Contributing", "contents": "", "rendered": "", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/CONTRIBUTING.html", "title": "CONTRIBUTING", "contents": "There is a lot of room to improve bb-reveal and I am welcoming any contributions from the community. ", "rendered": "There is a lot of room to improve bb-reveal and I am welcoming any contributions from the community. ", "breadcrumb": "CONTRIBUTING"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "@bobzhang1988", "rendered": "@bobzhang1988", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Questions", "title": "Questions", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Wishes-from-OCaml-compiler-upstream", "title": "Wishes from OCaml compiler upstream", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "{ \"open\" : true }\n{ \"Content-Type\" : \"text\"}", "rendered": "<pre><code>{ \"open\" : true }\n{ \"Content-Type\" : \"text\"}</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Wishes-from-OCaml-compiler-upstream", "title": "Wishes from OCaml compiler upstream", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Wishes-from-OCaml-compiler-upstream", "title": "Wishes from OCaml compiler upstream", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Wishes-from-OCaml-compiler-upstream", "title": "Wishes from OCaml compiler upstream", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "OCaml data representation in JS", "rendered": "<a href=\"http://bucklescript.github.io/bucklescript/Manual.html#_runtime_representation\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">OCaml data representation in JS</a>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Data-representation", "title": "Data representation", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Semantics diverge", "rendered": "<a href=\"http://bucklescript.github.io/bucklescript/Manual.html#_semantics_difference_from_other_backends\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Semantics diverge</a>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Different-Semantics--from-other-back-ends", "title": "Different Semantics  from other back-ends", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "bsb -w", "rendered": "<pre><code>bsb -w</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Build and run", "rendered": "Build and run", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "{\n    \"name\": \"test\",\n    \"sources\": [\n        {\n            \"dir\": \"src\"\n        }\n    ]\n}\n\n", "rendered": "<pre><code>{\n    \"name\": \"test\",\n    \"sources\": [\n        {\n            \"dir\": \"src\"\n        }\n    ]\n}\n\n</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Create a JSON file to describe the build spec:", "rendered": "Create a JSON file to describe the build spec:", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "npm install bs-platform", "rendered": "<pre><code>npm install bs-platform</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Installation", "rendered": "Installation", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Easy-to-set-up", "title": "Easy to set up", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "var Pervasives = require(\"bs-platform/lib/js/pervasives\");\nvar Http       = require(\"http\");\n\nvar hostname = \"127.0.0.1\";\n\nfunction create_server(http) {\n  var server = http.createServer(function (_, resp) {\n        resp.statusCode = 200;\n        resp.setHeader(\"Content-Type\", \"text/plain\");\n        return resp.end(\"Hello world\\n\");\n      });\n  return server.listen(3000, hostname, function () {\n              console.log(\"Server running at http://\" + (hostname + (\":\" + (Pervasives.string_of_int(3000) + \"/\"))));\n              return /* () */0;\n            });\n}\n\ncreate_server(Http);", "rendered": "<pre><code>var Pervasives = require(\"bs-platform/lib/js/pervasives\");\nvar Http       = require(\"http\");\n\nvar hostname = \"127.0.0.1\";\n\nfunction create_server(http) {\n  var server = http.createServer(function (_, resp) {\n        resp.statusCode = 200;\n        resp.setHeader(\"Content-Type\", \"text/plain\");\n        return resp.end(\"Hello world\\n\");\n      });\n  return server.listen(3000, hostname, function () {\n              console.log(\"Server running at http://\" + (hostname + (\":\" + (Pervasives.string_of_int(3000) + \"/\"))));\n              return /* () */0;\n            });\n}\n\ncreate_server(Http);</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#FFI--HTTP-server-", "title": "FFI (HTTP server)", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "type req\nclass type _resp = object\n  method statusCode : int [@@bs.set]\n  method setHeader : string -> string -> unit\n  method end_ : string -> unit\nend [@bs]\nclass type _server = object\n  method listen : int -> string -> (unit -> unit [@bs]) -> unit\nend [@bs]\ntype server = _server Js.t\nclass type _http  = object\n  method createServer : (req  ->  resp  -> unit [@bs] ) ->  server\nend [@bs]\ntype http = _http Js.t\nexternal http : http  = \"\"  [@@bs.module]", "rendered": "<pre><code>type req\nclass type _resp = object\n  method statusCode : int [@@bs.set]\n  method setHeader : string -> string -> unit\n  method end_ : string -> unit\nend [@bs]\nclass type _server = object\n  method listen : int -> string -> (unit -> unit [@bs]) -> unit\nend [@bs]\ntype server = _server Js.t\nclass type _http  = object\n  method createServer : (req  ->  resp  -> unit [@bs] ) ->  server\nend [@bs]\ntype http = _http Js.t\nexternal http : http  = \"\"  [@@bs.module]</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#FFI-examples--FFI-bindings-to-NODEJS-http-module-", "title": "FFI examples (FFI bindings to NODEJS http module)", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "let port = 3000\nlet hostname = \"127.0.0.1\"\nlet create_server http  =\n  let server = http##createServer begin fun [@bs] req  resp  ->\n      resp##statusCode #= 200;\n      resp##setHeader \"Content-Type\" \"text/plain\";\n      resp##end_ \"Hello world\\n\"\n    end\n  in\n  server##listen port hostname  begin fun [@bs] () ->\n    Js.log (\"Server running at http://\"^ hostname ^ \":\" ^ Pervasives.string_of_int port ^ \"/\")\n  end\n\nlet () =\n  create_server Http_types.http", "rendered": "<pre><code>let port = 3000\nlet hostname = \"127.0.0.1\"\nlet create_server http  =\n  let server = http##createServer begin fun [@bs] req  resp  ->\n      resp##statusCode #= 200;\n      resp##setHeader \"Content-Type\" \"text/plain\";\n      resp##end_ \"Hello world\\n\"\n    end\n  in\n  server##listen port hostname  begin fun [@bs] () ->\n    Js.log (\"Server running at http://\"^ hostname ^ \":\" ^ Pervasives.string_of_int port ^ \"/\")\n  end\n\nlet () =\n  create_server Http_types.http</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#FFI-examples--http-server-using-Node.js-", "title": "FFI examples (http server using Node.js)", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "let f obj = obj##height + obj##width\nval f : [%obj: < height : int ; width : int ; .. > ] -> int\nlet a = f [%obj { height = 3; width = 32}] (* compiles *)\nlet b = f [%obj {height = 3 ; width  = 32; unused = 3 }] (* compiles *)", "rendered": "<pre><code>let f obj = obj##height + obj##width\nval f : [%obj: < height : int ; width : int ; .. > ] -> int\nlet a = f [%obj { height = 3; width = 32}] (* compiles *)\nlet b = f [%obj {height = 3 ; width  = 32; unused = 3 }] (* compiles *)</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#FFI-examples", "title": "FFI examples", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "type readline\ntype line_callback = string -> unit [@bs]\n(*  [bs] annotation to mark it as uncurried callback  *)\ntype close_callback = unit -> unit [@bs]\nexternal on : readline ->\n   ([ `line of line_callback\n    | `close of close_callback]\n     [@bs.string]) ->  unit = \"\" [@@bs.send]\n\nlet register readline =\n  on readline (`line begin fun s -> prerr_endline s end);\n  on readline (`close begin fun () -> prerr_endline \"finished\" end);\n  print_endline \"done\"", "rendered": "<pre><code>type readline\ntype line_callback = string -> unit [@bs]\n(*  [bs] annotation to mark it as uncurried callback  *)\ntype close_callback = unit -> unit [@bs]\nexternal on : readline ->\n   ([ `line of line_callback\n    | `close of close_callback]\n     [@bs.string]) ->  unit = \"\" [@@bs.send]\n\nlet register readline =\n  on readline (`line begin fun s -> prerr_endline s end);\n  on readline (`close begin fun () -> prerr_endline \"finished\" end);\n  print_endline \"done\"</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Typescript binding:", "rendered": "Typescript binding:", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#FFI-examples", "title": "FFI examples", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "var v = Math.exp(3.)", "rendered": "<pre><code>var v = Math.exp(3.)</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "external exp : float -> float = \"Math.exp\" [@@bs.val]\nlet v = exp 3.", "rendered": "<pre><code>external exp : float -> float = \"Math.exp\" [@@bs.val]\nlet v = exp 3.</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Users must write type declarations for existing\nJavaScript libraries", "rendered": "Users must write <em>type declarations</em> for existing\nJavaScript libraries", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#FFI----Calling-Javascript-from-OCaml-", "title": "FFI:  (Calling Javascript from OCaml)", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#A-brief-look-at-FFI--Call-OCaml-from-JS-", "title": "A brief look at FFI (Call OCaml from JS)", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "JS output size:", "rendered": "JS output size:", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Execution Time (node v7.2.0, BuckleScript + Google Closure, jsoo minify):", "rendered": "Execution Time (node v7.2.0, BuckleScript + Google Closure, jsoo minify):", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Balanced-tree-with-2-million-keys-insertion-and-deletion", "title": "Balanced tree with 2 million keys insertion and deletion", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Example:  balanced tree", "rendered": "<a href=\"http://bucklescript.github.io/bucklescript-playground/#Balanced_tree\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Example:  balanced tree</a>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#What-does-it-look-like-", "title": "What does it look like?", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Compiler pipelines", "rendered": "<a href=\"http://bucklescript.github.io/bucklescript/Manual.html#_high_level_compiler_workflow\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Compiler pipelines</a>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#A-brief-overview-of-compiler-pipeline", "title": "A brief overview of compiler pipeline", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Advantages of Js_of_ocaml:", "rendered": "Advantages of Js_of_ocaml:", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Highlights of BuckleScript:", "rendered": "Highlights of BuckleScript:", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Design-goals--differences-from-Js_of_ocaml-", "title": "Design goals (differences from Js_of_ocaml)", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "&lt;/blockquote&gt;", "rendered": "&lt;/blockquote&gt;", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "code block", "contents": "I'm on the Facebook Reason team, and we're using BuckleScript to compile OCaml into the best compiler output I've ever seen. People didn't recognize that my React components were generated, not hand-written.", "rendered": "<pre><code>I'm on the Facebook Reason team, and we're using BuckleScript to compile OCaml into the best compiler output I've ever seen. People didn't recognize that my React components were generated, not hand-written.</code></pre>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "<blockquote style= &#39;background: #f9f9f9; &#39;;&gt;", "rendered": "<blockquote style= &#39;background: #f9f9f9; &#39;;&gt;", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Current-status", "title": "Current status", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Why-JS", "title": "Why JS", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "", "rendered": "<hr/>", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Why-OCaml", "title": "Why OCaml", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#Why-BuckleScript-", "title": "Why BuckleScript?", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "===", "rendered": "===", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "December 6, 2016", "rendered": "December 6, 2016", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "OCaml Meetup in Paris", "rendered": "OCaml Meetup in Paris", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Hongbo Zhang, Bloomberg", "rendered": "Hongbo Zhang, Bloomberg", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html", "title": "overview", "contents": "Bringing OCaml to Javascript developers", "rendered": "Bringing OCaml to Javascript developers", "breadcrumb": "overview"},
{"href": "./slides/preview/Slides/bb-reveal-example/overview.html#BuckleScript", "title": "BuckleScript", "contents": "", "rendered": "", "breadcrumb": "overview"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "JS is where people are (npm: largest package manager 2 years ago)", "rendered": "JS is where people are (npm: <a href=\"http://www.modulecounts.com/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">largest package manager 2 years ago</a>)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "JS is everywhere (Electron for Desktop App, NodeJS on server\n side, huge potential on IoT)", "rendered": "JS is everywhere (Electron for Desktop App, NodeJS on server\n side, huge potential on <a href=\"https://blogs.windows.com/buildingapps/2015/05/12/bringing-node-js-to-windows-10-iot-core/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">IoT</a>)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "JS is the only language of the browser", "rendered": "JS is the only language of the browser", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Call Javascript from BuckleScript (type declarations like TypeScript)", "rendered": "Call Javascript from BuckleScript (type declarations like TypeScript)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Call BuckleScript from Typescript: BuckleScript emits .d.ts files\n for TypeScript compiler (experimental)", "rendered": "Call BuckleScript from Typescript: BuckleScript emits <code>.d.ts</code> files\n for TypeScript compiler (<em>experimental</em>)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Call BuckleScript from Javascript code (no extra work to do)", "rendered": "Call BuckleScript from Javascript code (no extra work to do)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Compile time slow", "rendered": "Compile time slow", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Readable output code, great editor", "rendered": "Readable output code, great editor", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Our own bundler for purely OCaml part", "rendered": "Our own bundler for purely OCaml part", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Optimizations", "rendered": "Optimizations", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Catching up with the latest compiler (currently work with 4.02.3)", "rendered": "Catching up with the latest compiler (currently work with 4.02.3)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Toolings and help get people started", "rendered": "Toolings and help get people started", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Bindings to existing JS library (using typescript compiler API)", "rendered": "Bindings to existing JS library (using typescript compiler API)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "More tests (currently around 1400 tests)", "rendered": "More tests (currently around 1400 tests)", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Future-work", "title": "Future work", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Demo", "title": "Demo", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Comparison-with--Js_of_ocaml", "title": "Comparison with  Js_of_ocaml", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": " BuckleScript will be even faster in the future with flambda enabled.", "rendered": " BuckleScript will be even faster in the future with flambda enabled.", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "             BS: 0m0.063s\n             TS: 0m1.427s\n   ", "rendered": "<pre><code>             BS: 0m0.063s\n             TS: 0m1.427s\n   </code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": " Two files: one file define 500 fib functions,\n one file call those 500 fib functions", "rendered": " Two files: one file define 500 fib functions,\n one file call those 500 fib functions", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": " A micro benchmark:", "rendered": " A micro benchmark:", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Comparison-with--Typescript", "title": "Comparison with  Typescript", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": " Source code\n        |\n        | parsing and preprocessing\n        |\n        v\n    Parsetree (untyped AST)\n        |\n        | type inference and checking\n        v\n    Typedtree (type-annotated AST)\n        |\n        | pattern-matching compilation\n        | elimination of modules and classes\n        v\n     Lambda ------------------------(our work)----------+\n      /   \\                                              \\\n     /     \\ closure conversion, inlining, uncurrying,    \\\n    v       \\  data representation strategy                \\\n Bytecode    \\                                              |\n    |         +-----+                                       |\n    |              Cmm                                      IR\n    |ocamlrun       |                                       |\n    |               | code generation                       | code generation\n    |               | assembly & linking                    |\n    v               v                                       v\n Interpreted    Compiled                                 Javacript(and meta data for optimizations)", "rendered": "<pre><code> Source code\n        |\n        | parsing and preprocessing\n        |\n        v\n    Parsetree (untyped AST)\n        |\n        | type inference and checking\n        v\n    Typedtree (type-annotated AST)\n        |\n        | pattern-matching compilation\n        | elimination of modules and classes\n        v\n     Lambda ------------------------(our work)----------+\n      /   \\                                              \\\n     /     \\ closure conversion, inlining, uncurrying,    \\\n    v       \\  data representation strategy                \\\n Bytecode    \\                                              |\n    |         +-----+                                       |\n    |              Cmm                                      IR\n    |ocamlrun       |                                       |\n    |               | code generation                       | code generation\n    |               | assembly & linking                    |\n    v               v                                       v\n Interpreted    Compiled                                 Javacript(and meta data for optimizations)</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#The-OCaml-compiler-workflow", "title": "The OCaml compiler workflow", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Leverage the (high-level, strongly typed) OCaml language tool-chain to generate optimized JS", "rendered": "Leverage the (high-level, strongly typed) OCaml language tool-chain to generate optimized JS", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Internals-of-BuckleScript---an-optimizing-JS-backend-for-OCaml", "title": "Internals of BuckleScript - an optimizing JS backend for OCaml", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "![](OCaml_Javascript_features.png)", "rendered": "<pre><code>![](OCaml_Javascript_features.png)</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": " Both OCaml and Javascript have similar concepts which make compiling OCaml to Javascript posible:", "rendered": " Both OCaml and Javascript have similar concepts which make compiling OCaml to Javascript posible:", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#How-can-it-be-possible---What--39-s-the-magic--", "title": "How can it be possible? (What&#39;s the magic?)", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "var Http_lib = require('./http_lib');\nvar http = require('http');\nHttp_lib.create_server(http);", "rendered": "<pre><code>var Http_lib = require('./http_lib');\nvar http = require('http');\nHttp_lib.create_server(http);</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "(** [Http_start.ml]*)\n\nlet () =\n  Http_lib.create_server Http_binding.http", "rendered": "<pre><code>(** [Http_start.ml]*)\n\nlet () =\n  Http_lib.create_server Http_binding.http</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#BuckleScript-Object-FFI---II", "title": "BuckleScript Object FFI - II", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Pure types, no Code generated, like tsd, but it is just plain\n OCaml program.", "rendered": "<em>Pure types, no Code generated</em>, like <em>tsd</em>, but it is just plain\n OCaml program.", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "(** Bindings for NodeJS [Http_binding.ml] *)\n\ntype req\n\ntype resp = <\n   statusCode__set : int -> unit [@uncurry] ;\n   setHeader : string * string -> unit [@uncurry] ;\n   end__ : string ->  unit [@uncurry]\n> Js.t\n\ntype server =  <\n   listen : int * string *  (unit -> unit [@uncurry]) -> unit [@uncurry];\n> Js.t\n\n\n\ntype http = <\n   createServer : (req  * resp  -> unit [@uncurry] ) ->  server [@uncurry]\n> Js.t\n\n\nexternal http : http  = \"http\"  [@@bs.val_of_module ]\n\n", "rendered": "<pre><code>(** Bindings for NodeJS [Http_binding.ml] *)\n\ntype req\n\ntype resp = <\n   statusCode__set : int -> unit [@uncurry] ;\n   setHeader : string * string -> unit [@uncurry] ;\n   end__ : string ->  unit [@uncurry]\n> Js.t\n\ntype server =  <\n   listen : int * string *  (unit -> unit [@uncurry]) -> unit [@uncurry];\n> Js.t\n\n\n\ntype http = <\n   createServer : (req  * resp  -> unit [@uncurry] ) ->  server [@uncurry]\n> Js.t\n\n\nexternal http : http  = \"http\"  [@@bs.val_of_module ]\n\n</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#BuckleScript-Object-FFI---II", "title": "BuckleScript Object FFI - II", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "var hostname = \"127.0.0.1\";\n\nfunction create_server(http) {\n  var server = http.createServer(function (_, resp) {\n        resp.statusCode = 200;\n        resp.setHeader(\"Content-Type\", \"text/plain\");\n        return resp.end(\"Hello world\\n\");\n      });\n  return server.listen(3000, hostname, function () {\n              console.log(\"Server running at http://\" + (hostname + (\":\" + (3000 + \"/\"))));\n              return /* () */0;\n            });\n}", "rendered": "<pre><code>var hostname = \"127.0.0.1\";\n\nfunction create_server(http) {\n  var server = http.createServer(function (_, resp) {\n        resp.statusCode = 200;\n        resp.setHeader(\"Content-Type\", \"text/plain\");\n        return resp.end(\"Hello world\\n\");\n      });\n  return server.listen(3000, hostname, function () {\n              console.log(\"Server running at http://\" + (hostname + (\":\" + (3000 + \"/\"))));\n              return /* () */0;\n            });\n}</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "(** [Http_lib.ml] *)\nlet port = 3000\nlet hostname = \"127.0.0.1\"\nlet create_server  http =\n  let server = http##createServer (fun %uncurry  (req,  resp)  ->\n      resp##statusCode__set 200; (* setter always ends with [__end] *)\n      resp##setHeader(\"Content-Type\", \"text/plain\");\n      resp##end__ \"Hello world\\n\" (* end is a key word in OCaml *)\n    )\n  in\n  server##listen(port, hostname,  fun %uncurry () ->\n      Js.log (\"Server running at http://\"^ hostname ^ \":\" ^ string_of_int port ^ \"/\")\n    )\n\n", "rendered": "<pre><code>(** [Http_lib.ml] *)\nlet port = 3000\nlet hostname = \"127.0.0.1\"\nlet create_server  http =\n  let server = http##createServer (fun %uncurry  (req,  resp)  ->\n      resp##statusCode__set 200; (* setter always ends with [__end] *)\n      resp##setHeader(\"Content-Type\", \"text/plain\");\n      resp##end__ \"Hello world\\n\" (* end is a key word in OCaml *)\n    )\n  in\n  server##listen(port, hostname,  fun %uncurry () ->\n      Js.log (\"Server running at http://\"^ hostname ^ \":\" ^ string_of_int port ^ \"/\")\n    )\n\n</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#BuckleScript-Object-FFI---I", "title": "BuckleScript Object FFI - I", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "\nvar v = Array.prototype.map.call(\n          [1,2,3],\n          (function(x){return x + 3}))", "rendered": "<pre><code>\nvar v = Array.prototype.map.call(\n          [1,2,3],\n          (function(x){return x + 3}))</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "external array_map : 'a array -> ('a -> 'b [@uncurry]) -> 'b array =\n  \"Array.prototype.map.call\" [@@bs.call ]\n\n\nlet v = array_map [|1,2,3|] (fun%uncurry x -> x+ 3 )", "rendered": "<pre><code>external array_map : 'a array -> ('a -> 'b [@uncurry]) -> 'b array =\n  \"Array.prototype.map.call\" [@@bs.call ]\n\n\nlet v = array_map [|1,2,3|] (fun%uncurry x -> x+ 3 )</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#BuckleScript-Function-FFI", "title": "BuckleScript Function FFI", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#BuckleScript--Javascript-Typescript-interaction", "title": "BuckleScript, Javascript/Typescript interaction", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "| Technology   |  Time(s) | Code Size  |\n|--------------|----------| -----------|\n| OCaml with Javascript Backend   |1186ms (Google Closure bundler: simple mode) |   1 KB |\n| Handwritten Facebook Javascript  |3415ms |  55.3 KBytes|", "rendered": "| Technology   |  Time(s) | Code Size  |\n|--------------|----------| -----------|\n| OCaml with Javascript Backend   |1186ms (Google Closure bundler: simple mode) |   1 KB |\n| Handwritten Facebook Javascript  |3415ms |  55.3 KBytes|", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Runtime performance of identical functionality:", "rendered": "Runtime performance of identical functionality:", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "// Immutable map from Facebook immutable library\n\n'use strict';\nvar Immutable = require('immutable');\nvar Map = Immutable.Map;\nvar m = new Map();\nfunction test(){\n    var count  = 1000000\n    for(var i = 0; i < count; ++i){\n        m = m.set(i, i );\n    }\n    for(var j = 0; j < count ; ++j){\n        m.get(j)\n    } }\ntest ()", "rendered": "<pre><code>// Immutable map from Facebook immutable library\n\n'use strict';\nvar Immutable = require('immutable');\nvar Map = Immutable.Map;\nvar m = new Map();\nfunction test(){\n    var count  = 1000000\n    for(var i = 0; i < count; ++i){\n        m = m.set(i, i );\n    }\n    for(var j = 0; j < count ; ++j){\n        m.get(j)\n    } }\ntest ()</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Comparison-with-hand-written-JS", "title": "Comparison with hand-written JS", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "\n\"use strict\";\nvar Int_map=require(\"./int_map.js\");\n\nfunction test() {\n  var m = /* Empty */0;\n  for(var i = 0; i <= 1000000; ++i){\n    m = add(i, i, m);\n  }\n  for(var j = 0; j <= 1000000; ++j){\n    find(j, m);\n  }\n  return /* () */0;\n}\n\ntest(/* () */0);", "rendered": "<pre><code>\n\"use strict\";\nvar Int_map=require(\"./int_map.js\");\n\nfunction test() {\n  var m = /* Empty */0;\n  for(var i = 0; i <= 1000000; ++i){\n    m = add(i, i, m);\n  }\n  for(var j = 0; j <= 1000000; ++j){\n    find(j, m);\n  }\n  return /* () */0;\n}\n\ntest(/* () */0);</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "code block", "contents": "let test () =\n  let m = ref IntMap.empty in\n  let count = 1000000 in\n  for i = 0 to count do\n    m := IntMap.add i i !m\n  done;\n  for j = 0 to count  do\n    ignore (IntMap.find j !m )\n  done;;\ntest()", "rendered": "<pre><code>let test () =\n  let m = ref IntMap.empty in\n  let count = 1000000 in\n  for i = 0 to count do\n    m := IntMap.add i i !m\n  done;\n  for j = 0 to count  do\n    ignore (IntMap.find j !m )\n  done;;\ntest()</code></pre>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#What-BuckleScript-looks-like", "title": "What BuckleScript looks like", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Benefits-of-BuckleScript", "title": "Benefits of BuckleScript", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Why-JS", "title": "Why JS", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#Why-OCaml", "title": "Why OCaml", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "May 19, 2016", "rendered": "May 19, 2016", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "Hongbo Zhang@Bloomberg", "rendered": "Hongbo Zhang@Bloomberg", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "", "rendered": "<img style='width: 550px;' alt='Drawing' title='OCamlscript' src='images/Slide3.PNG' />", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html#OCaml--lt-3-Javascript", "title": "OCaml &lt;3 Javascript", "contents": "", "rendered": "", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Buckle_meetup.html", "title": "Buckle_meetup", "contents": "class: center, middle", "rendered": "class: center, middle", "breadcrumb": "Buckle_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "It works with BuckleScript nicely", "rendered": "<a href=\"http://bucklescript.github.io/bucklescript/reason-demo/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">It works with BuckleScript nicely</a>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "It provides a Javascript like syntax and toolchain for editing, building, and sharing code", "rendered": "It provides a Javascript like syntax and toolchain for editing, building, and sharing code", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Reason is a new interface to OCaml created by the same people who\n created ReactJS, ReactNative", "rendered": "Reason is a new interface to OCaml created by the same people who\n created ReactJS, ReactNative", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Growing support to make OCaml more JavaScript friendly", "rendered": "Growing support to make OCaml more JavaScript friendly", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "             BS: 0m0.063s\n             TS: 0m1.427s\n   ", "rendered": "<pre><code>             BS: 0m0.063s\n             TS: 0m1.427s\n   </code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": " Expressive and efficient FFI is the major design goal", "rendered": " Expressive and efficient FFI is the major design goal", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "var Array = require(\"bs-platform/lib/js/array\")\nvar String = require(\"bs-platform/lib/js/string\")\nString.concat(\",\",Array.to_list([\"hello\",\"bucklescript\"]))", "rendered": "<pre><code>var Array = require(\"bs-platform/lib/js/array\")\nvar String = require(\"bs-platform/lib/js/string\")\nString.concat(\",\",Array.to_list([\"hello\",\"bucklescript\"]))</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Demo", "rendered": "<a href=\"https://tonicdev.com/npm/bs-platform\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Demo</a>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "OCaml standard library consumed by Javascript developers", "rendered": "<a href=\"http://caml.inria.fr/pub/docs/manual-ocaml/stdlib.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">OCaml standard library consumed by Javascript developers</a>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Publish and consume npm packages out of box", "rendered": "<a href=\"https://www.npmjs.com/package/bs-platform\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Publish and consume npm packages out of box</a>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "BuckleScript can also emit .d.ts files for TypeScript compiler (experimental)", "rendered": "BuckleScript can also emit <code>.d.ts</code> files for TypeScript compiler (<em>experimental</em>)", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Basic data types are closely matched (Array -&gt; Array, Tuple -&gt; Array, etc)", "rendered": "Basic data types are closely matched (Array -&gt; Array, Tuple -&gt; Array, etc)", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "OCaml signatures are respected (no extra work to do)", "rendered": "OCaml signatures are respected (no extra work to do)", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Follow me for the latest development on BuckleScript\n twitter @bobzhang1988", "rendered": "Follow me for the latest development on BuckleScript\n twitter @bobzhang1988", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Future-work", "title": "Future work", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Comparison-with--Elm--PureScript-and-GHCJS", "title": "Comparison with  Elm, PureScript and GHCJS", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "  function f(x,y,z) {return x + y + z}\n  var a = f(1,2,3)\n  var b = function(z){return f(1,2,z)}\n  ", "rendered": "<pre><code>  function f(x,y,z) {return x + y + z}\n  var a = f(1,2,3)\n  var b = function(z){return f(1,2,z)}\n  </code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": " Optimized  in BuckleScript(cross modules arities infererence)", "rendered": " <code>Optimized  in BuckleScript(cross modules arities infererence)</code>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "  function f(x){\n    return function (y){\n     return function (z){\n      return x + y + z\n     }\n    }\n  }\n  var a = f (1) (2) (3)\n  var b = f (1) (2)\n  ", "rendered": "<pre><code>  function f(x){\n    return function (y){\n     return function (z){\n      return x + y + z\n     }\n    }\n  }\n  var a = f (1) (2) (3)\n  var b = f (1) (2)\n  </code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": " Compilation used in PureScript", "rendered": " <code>Compilation used in PureScript</code>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "  let f x y z = x + y + z\n  let a = f 1 2 3\n  let b = f 1 2\n  ", "rendered": "<pre><code>  let f x y z = x + y + z\n  let a = f 1 2 3\n  let b = f 1 2\n  </code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Optimizations", "title": "Optimizations", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "https://github.com/bucklescript/bucklescript-addons/tree/master/examples/node-http-server", "rendered": "https://github.com/bucklescript/bucklescript-addons/tree/master/examples/node-http-server", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Demo--A-stand-alone-HTTP-server", "title": "Demo: A stand alone HTTP server", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "class type title = object\n  method title : string\n  end [@bs]\n\nclass type widget = object\n   inherit title\n   end [@bs]\n\nlet f (x : widget )  = (x :> title)", "rendered": "<pre><code>class type title = object\n  method title : string\n  end [@bs]\n\nclass type widget = object\n   inherit title\n   end [@bs]\n\nlet f (x : widget )  = (x :> title)</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "let f obj = obj##height + obj##width\nval f : [%bs.obj: < height : int ; width : int ; .. > ] -> int\nlet a = f [%bs.obj { height = 3; width = 32}] (* compiles *)\nlet b = f [%bs.obj {height = 3 ; width  = 32; unused = 3 }] (* compiles *)", "rendered": "<pre><code>let f obj = obj##height + obj##width\nval f : [%bs.obj: < height : int ; width : int ; .. > ] -> int\nlet a = f [%bs.obj { height = 3; width = 32}] (* compiles *)\nlet b = f [%bs.obj {height = 3 ; width  = 32; unused = 3 }] (* compiles *)</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-highlights--structural-typing-and-type-safe-JSON-literals", "title": "FFI highlights: structural typing and type safe JSON literals", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "type readline\nexternal on : readline ->\n  ([ `line of string -> unit  (* can be customized [@bs.as \"another_name\"]*)\n   | `close of unit -> unit ]\n     [@bs.string]) ->  unit = \"\" [@@bs.send]\n\nlet register readline =\n  on readline (`line begin fun s -> prerr_endline s end);\n  on readline (`close begin fun () -> prerr_endline \"finished\" end);\n  print_endline \"done\"", "rendered": "<pre><code>type readline\nexternal on : readline ->\n  ([ `line of string -> unit  (* can be customized [@bs.as \"another_name\"]*)\n   | `close of unit -> unit ]\n     [@bs.string]) ->  unit = \"\" [@@bs.send]\n\nlet register readline =\n  on readline (`line begin fun s -> prerr_endline s end);\n  on readline (`close begin fun () -> prerr_endline \"finished\" end);\n  print_endline \"done\"</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "interface readline {\n  on : (event:string, callback: Function)\n}", "rendered": "<pre><code>interface readline {\n  on : (event:string, callback: Function)\n}</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Typescript binding:", "rendered": "Typescript binding:", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-highlights--type-safe-event-handlers", "title": "FFI highlights: type-safe event handlers", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "external readFileSync :\n  name:string ->\n  ([`utf8 | `ascii] [@bs.string]) ->\n  string = \"\"\n  [@@bs.module \"fs\"]\n\nlet content = readFileSync `utf8  ~name:\"file.txt\"", "rendered": "<pre><code>external readFileSync :\n  name:string ->\n  ([`utf8 | `ascii] [@bs.string]) ->\n  string = \"\"\n  [@@bs.module \"fs\"]\n\nlet content = readFileSync `utf8  ~name:\"file.txt\"</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-highlights--String-and-int-literal-type", "title": "FFI highlights: String and int literal type", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "external array_map_this :\n  'a array -> ('obj -> 'a -> int -> 'b [@bs.this]) -> 'obj -> 'b array\n    = \"map\"  [@@bs.send]\nlet v =\n  let arr = [|1;2;3|] in\n  array_map_this arr (fun [@bs.this] o v i -> (o,v,i)) arr", "rendered": "<pre><code>external array_map_this :\n  'a array -> ('obj -> 'a -> int -> 'b [@bs.this]) -> 'obj -> 'b array\n    = \"map\"  [@@bs.send]\nlet v =\n  let arr = [|1;2;3|] in\n  array_map_this arr (fun [@bs.this] o v i -> (o,v,i)) arr</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "let f = fun [@bs.this] o x y -> body\nval f : 'o -> 'x -> 'y -> 'body [@bs.this]", "rendered": "<pre><code>let f = fun [@bs.this] o x y -> body\nval f : 'o -> 'x -> 'y -> 'body [@bs.this]</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-hightlights--built-in-this-callback-support", "title": "FFI hightlights: built-in this callback support", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "function f(x,y){\n  return x + y;\n}\nf (1,2)", "rendered": "<pre><code>function f(x,y){\n  return x + y;\n}\nf (1,2)</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Generated code", "rendered": "<code>Generated code</code>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "let f = fun [@bs] x y -> x + y\n\nlet u = f 1 2 [@bs]\nlet u = f 1  (* compile error *)\nlet u = f 1 2 3 (* compile error *)\n\nval f : int -> int -> int [@bs]", "rendered": "<pre><code>let f = fun [@bs] x y -> x + y\n\nlet u = f 1 2 [@bs]\nlet u = f 1  (* compile error *)\nlet u = f 1 2 3 (* compile error *)\n\nval f : int -> int -> int [@bs]</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-highlights--native-uncurried-calling-convention-support", "title": "FFI highlights: native uncurried calling convention support", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "external exp : float -> float = \"Math.exp\" [@@bs.val]\nlet v = exp 3.", "rendered": "<pre><code>external exp : float -> float = \"Math.exp\" [@@bs.val]\nlet v = exp 3.</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "A dummy example:", "rendered": "<hr/>A dummy example:", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "external val_name : types_to_js_object_or_function", "rendered": "<pre><code>external val_name : types_to_js_object_or_function</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Like typescript, users must write type declarations for existing\nJavaScript Libraries.", "rendered": "Like typescript, users must write <em>type declarations</em> for existing\nJavaScript Libraries.", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-part-two----Calling-Javascript-from-OCaml-", "title": "FFI part two : (Calling Javascript from OCaml)", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#FFI-part-one--Call-OCaml-from-Javascript-for-free-", "title": "FFI part one (Call OCaml from Javascript for free)", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Beyond-performance-", "title": "Beyond performance:", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": " ", "rendered": " <img style='width: 450px;' alt='Drawing' title='OCamlscript' src='images/compile-time.PNG' />", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Finishes-before-others-warm-up", "title": "Finishes before others warm up", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "| Technology   |  Time(ms) | Code Size  |\n|--------------|----------| -----------|\n| OCaml with Javascript Backend   |1186ms (Google Closure bundler: simple mode) |   1 KB |\n| Handwritten  Javascript  |3415ms |  55.3 KBytes|", "rendered": "| Technology   |  Time(ms) | Code Size  |\n|--------------|----------| -----------|\n| OCaml with Javascript Backend   |1186ms (Google Closure bundler: simple mode) |   1 KB |\n| Handwritten  Javascript  |3415ms |  55.3 KBytes|", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Runtime performance of identical functionality:", "rendered": "Runtime performance of identical functionality:", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "// Immutable map from  immutablejs library\n\n'use strict';\nvar Immutable = require('immutable');\nvar Map = Immutable.Map;\nvar m = new Map();\nfunction test(){\n    var count  = 1000000\n    for(var i = 0; i < count; ++i){\n        m = m.set(i, i );\n    }\n    for(var j = 0; j < count ; ++j){\n        m.get(j)\n    } }\ntest ()", "rendered": "<pre><code>// Immutable map from  immutablejs library\n\n'use strict';\nvar Immutable = require('immutable');\nvar Map = Immutable.Map;\nvar m = new Map();\nfunction test(){\n    var count  = 1000000\n    for(var i = 0; i < count; ++i){\n        m = m.set(i, i );\n    }\n    for(var j = 0; j < count ; ++j){\n        m.get(j)\n    } }\ntest ()</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Comparison-with-hand-written-JS", "title": "Comparison with hand-written JS", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "\n\"use strict\";\nvar Int_map=require(\"./int_map.js\");\n\nfunction test() {\n  var m = /* Empty */0;\n  for(var i = 0; i <= 1000000; ++i){\n    m = add(i, i, m);\n  }\n  for(var j = 0; j <= 1000000; ++j){\n    find(j, m);\n  }\n  return /* () */0;\n}\n\ntest(/* () */0);", "rendered": "<pre><code>\n\"use strict\";\nvar Int_map=require(\"./int_map.js\");\n\nfunction test() {\n  var m = /* Empty */0;\n  for(var i = 0; i <= 1000000; ++i){\n    m = add(i, i, m);\n  }\n  for(var j = 0; j <= 1000000; ++j){\n    find(j, m);\n  }\n  return /* () */0;\n}\n\ntest(/* () */0);</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Generated code", "rendered": "<code>Generated code</code>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "code block", "contents": "let test () =\n  let m = ref IntMap.empty in\n  let count = 1000000 in\n  for i = 0 to count do\n    m := IntMap.add i i !m\n  done;\n  for j = 0 to count  do\n    ignore (IntMap.find j !m )\n  done;;\ntest()", "rendered": "<pre><code>let test () =\n  let m = ref IntMap.empty in\n  let count = 1000000 in\n  for i = 0 to count do\n    m := IntMap.add i i !m\n  done;\n  for j = 0 to count  do\n    ignore (IntMap.find j !m )\n  done;;\ntest()</code></pre>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#A-small-example-of-BuckleScript", "title": "A small example of BuckleScript", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#R--amp--B---Reason--amp--BuckleScript-", "title": "R &amp; B ( Reason &amp; BuckleScript)", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Major-Benefits-of-BuckleScript", "title": "Major Benefits of BuckleScript", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#Why-target-JS-platform", "title": "Why target JS platform", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#What--39-s-BuckleScript", "title": "What&#39;s BuckleScript", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<hr/>", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "July 27, 2016", "rendered": "July 27, 2016", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "Hongbo Zhang@Bloomberg", "rendered": "Hongbo Zhang@Bloomberg", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "", "rendered": "<img style='width: 550px;' alt='Drawing' title='OCamlscript' src='images/Slide3.PNG' />", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html#OCaml--lt-3-Javascript", "title": "OCaml &lt;3 Javascript", "contents": "", "rendered": "", "breadcrumb": "Haskell_meetup"},
{"href": "./slides/Haskell_meetup.html", "title": "Haskell_meetup", "contents": "class: center, middle", "rendered": "class: center, middle", "breadcrumb": "Haskell_meetup"},
{"href": "./docson/index.html", "title": "docson", "contents": "Bitdeli Badge", "rendered": "<a href=\"https://bitdeli.com/free\" target=\"_blank\" rel=\"noopener nofollow\" title=\"Bitdeli Badge\" class=\"external-link\"><img src='https://d2weczhvl823v0.cloudfront.net/lbovet/docson/trend.png' alt='Bitdeli Badge' /></a>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Please pull-request your failing schemas in the tests/ folder and open an issue describing the expected result.", "rendered": "Please pull-request your failing schemas in the <code>tests/</code> folder and open an issue describing the expected result.", "breadcrumb": "docson"},
{"href": "./docson/index.html#Development", "title": "Development", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Not implemented:", "rendered": "Not implemented:", "breadcrumb": "docson"},
{"href": "./docson/index.html#Limitations", "title": "Limitations", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Examples:", "rendered": "Examples:", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "code block", "contents": "docson.doc(element, schema, ref)", "rendered": "<pre><code>docson.doc(element, schema, ref)</code></pre>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "You can also integrate Docson in your application and use its javascript API:", "rendered": "You can also integrate Docson in your application and use its javascript API:", "breadcrumb": "docson"},
{"href": "./docson/index.html#Integration", "title": "Integration", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "code block", "contents": "  <style>\n      .swagger-ui-wrap {\n          max-width: 1200px;\n      }\n      .swagger-ui-wrap .body-textarea {\n          width: 200px;\n      }\n  </style>", "rendered": "<pre><code>  <style>\n      .swagger-ui-wrap {\n          max-width: 1200px;\n      }\n      .swagger-ui-wrap .body-textarea {\n          width: 200px;\n      }\n  </style></code></pre>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "For a better layout of parameter models, you may want to change the width of some elements:", "rendered": "For a better layout of parameter models, you may <a href=\"https://github.com/lbovet/swagger-ui/blob/3f37722b03db6c48cc2a8460df26dda5f4d6f8e4/src/main/html/index.html#L20-L27\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">want to change the width of some elements</a>:", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "code block", "contents": "  <script src='https://raw2.github.com/lbovet/swagger-js/models-exposed/lib/swagger.js' type='text/javascript'></script>", "rendered": "<pre><code>  <script src='https://raw2.github.com/lbovet/swagger-js/models-exposed/lib/swagger.js' type='text/javascript'></script></code></pre>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "with ", "rendered": "with ", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "code block", "contents": "   <script src='/lib/swagger.js' type='text/javascript'></script>", "rendered": "<pre><code>   <script src='/lib/swagger.js' type='text/javascript'></script></code></pre>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Also, you will need a patched version of Swagger Client so that the raw json-schema model is visible from Docson. Either replace the swagger.js file in your Swagger UI disctribution or take it directly from github by replacing", "rendered": "Also, you will need a patched version of <a href=\"https://github.com/lbovet/swagger-js/blob/models-exposed/lib/swagger.js\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Swagger Client</a> so that the raw json-schema model is visible from Docson. Either replace the <code>swagger.js</code> file in your Swagger UI disctribution or take it directly from github by replacing", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "code block", "contents": "  <script src='/path-to-docson/docson-swagger.js' type='text/javascript'></script>", "rendered": "<pre><code>  <script src='/path-to-docson/docson-swagger.js' type='text/javascript'></script></code></pre>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "In Swagger UI&#39;s index.html, include the Swagger integration script after other script tags:", "rendered": "In Swagger UI&#39;s <code>index.html</code>, include the <a href=\"https://github.com/lbovet/swagger-ui/blob/3f37722b03db6c48cc2a8460df26dda5f4d6f8e4/src/main/html/index.html#L19\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Swagger integration script after other script tags</a>:", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "See how it looks like in the Swagger Docson example", "rendered": "See how it looks like in the <a href=\"http://lbovet.github.io/swagger-ui/dist/index.html\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Swagger Docson example</a>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "You can adapt Swagger UI to display Docson-generated model documentation instead of the builtin signatures.", "rendered": "You can adapt <a href=\"https://github.com/wordnik/swagger-ui\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Swagger UI</a> to display Docson-generated model documentation instead of the builtin signatures.", "breadcrumb": "docson"},
{"href": "./docson/index.html#Swagger", "title": "Swagger", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "See the widget example on jsfiddle.", "rendered": "See the <a href=\"http://jsfiddle.net/3kXu2/3/\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">widget example</a> on jsfiddle.", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "code block", "contents": "<script src=\"http://somewhere/path-to-docson/widget.js\" data-schema=\"/path-to-schema\">\n</script>", "rendered": "<pre><code><script src=\"http://somewhere/path-to-docson/widget.js\" data-schema=\"/path-to-schema\">\n</script></code></pre>", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "To include a Docson schema documentations on any page (wiki, ...) without worrying about messing up with javascript libraries and cross-origin issues:", "rendered": "To include a Docson schema documentations on any page (wiki, ...) without worrying about messing up with javascript libraries and cross-origin issues:", "breadcrumb": "docson"},
{"href": "./docson/index.html#Widget", "title": "Widget", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "You need to install Typson by yourself on your server. It must be in a directory named typson located at the same level as the docson directory.", "rendered": "You need to install <a href=\"https://github.com/lbovet/typson\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Typson</a> by yourself on your server. It must be in a directory named <code>typson</code> located at the same level as the <code>docson</code> directory.", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "For example, index.html#/typson/example/invoice/line.ts$InvoiceLine is the documentation of line.ts.", "rendered": "For example, <a href=\"http://lbovet.github.io/docson/index.html#/typson/example/invoice/line.ts$InvoiceLine\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">index.html#/typson/example/invoice/line.ts$InvoiceLine</a> is the documentation of <a href=\"https://github.com/lbovet/typson/blob/master/example/invoice/line.ts\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">line.ts</a>.", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "You can directly reference your JSON types defined as TypeScript interfaces. If the path ends with .ts, Docson will use Typson to convert the Type Scripts to schema in order to generate the documentation.", "rendered": "You can directly reference your JSON types defined as TypeScript interfaces. If the path ends with <code>.ts</code>, Docson will use <a href=\"https://github.com/lbovet/typson\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">Typson</a> to convert the Type Scripts to schema in order to generate the documentation.", "breadcrumb": "docson"},
{"href": "./docson/index.html#Typson", "title": "Typson", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Note that you can refer to a sub-schema by adding a json-pointer path as &#39;dollar-parameter&#39;: index.html#/docson/examples/example.json$items", "rendered": "Note that you can refer to a sub-schema by adding a json-pointer path as &#39;dollar-parameter&#39;: <a href=\"http://lbovet.github.io/docson/index.html#/docson/examples/example.json$items\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">index.html#/docson/examples/example.json$items</a>", "breadcrumb": "docson"},
{"href": "./docson/index.html#Usage", "title": "Usage", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html#Installation", "title": "Installation", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html#Features", "title": "Features", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Give Docson a JSON schema and it will generate a beautiful documentation.", "rendered": "Give Docson a JSON schema and it will generate a <a href=\"http://lbovet.github.io/docson/index.html#/docson/examples/example.json\" target=\"_blank\" rel=\"noopener nofollow\" title=\"\" class=\"external-link\">beautiful documentation</a>.", "breadcrumb": "docson"},
{"href": "./docson/index.html", "title": "docson", "contents": "Documentation for your JSON types.", "rendered": "Documentation for your JSON types.", "breadcrumb": "docson"},
{"href": "./docson/index.html#Docson", "title": "Docson", "contents": "", "rendered": "", "breadcrumb": "docson"},
{"href": "./api/Belt_HashMapString.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array((<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => array(int)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array key unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a), array((<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'a))) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array key ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => array(<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => array((<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-keepMapInPlace", "title": "keepMapInPlace", "contents": "keepMapInPlace t key option   unit  ", "rendered": "<h4 class='item'>let keepMapInPlace: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a), (<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'a) => option('a)) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-keepMapInPlaceU", "title": "keepMapInPlaceU", "contents": "keepMapInPlaceU t fn option unit  ", "rendered": "<h4 class='item'>let keepMapInPlaceU: (\n  <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a72 ], option('a))\n) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-reduce", "title": "reduce", "contents": "reduce t key      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b), 'c, ('c, <a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'b) => 'c) => 'c</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c4 * key * 'b24 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-forEach", "title": "forEach", "contents": "forEach t key unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b), (<a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'b) => unit) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'b25 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-remove", "title": "remove", "contents": "remove t key unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_HashMapString.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b), <a href=\"./api/Belt_HashMapString.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_HashMapString.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-set", "title": "set", "contents": "setDone tbl k v if k does not exist, add the binding k,v, otherwise, update the old value with the new v", "rendered": "<code>setDone tbl k v</code> if <code>k</code> does not exist, add the binding <code>k,v</code>, otherwise, update the old value with the new <code>v</code>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-set", "title": "set", "contents": "set t key unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_HashMapString.html#type-key\">key</a>, 'a) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b) => unit</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#value-make", "title": "make", "contents": "make int t hintSize", "rendered": "<h4 class='item'>let make: (~hintSize: int) => <a href=\"./api/Belt_HashMapString.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('b)</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html", "title": "Belt_HashMapString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html", "title": "Belt_HashMapString", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Belt_HashMapString.html#Belt_HashMapString", "title": "Belt_HashMapString", "contents": "", "rendered": "", "breadcrumb": "Belt_HashMapString"},
{"href": "./api/Node_child_process.html#value-readAs", "title": "readAs", "contents": "readAs spawnResult Js t ", "rendered": "<h4 class='item'>let readAs: <a href=\"./api/Node_child_process.html#type-spawnResult\">spawnResult</a> => <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(\n  &lt; pid : int; signal : string Js.null; status : int Js.null;\n  stderr : Node.string_buffer Js.null; stdout : Node.string_buffer Js.null &gt;\n)</h4>", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html#value-spawnSync", "title": "spawnSync", "contents": "spawnSync string spawnResult ", "rendered": "<h4 class='item'>let spawnSync: string => <a href=\"./api/Node_child_process.html#type-spawnResult\">spawnResult</a></h4>", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html#type-spawnResult", "title": "spawnResult", "contents": "spawnResult ", "rendered": "<h4 class='item'>type spawnResult</h4>", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html#value-execSync", "title": "execSync", "contents": "execSync string option string  ", "rendered": "<h4 class='item'>let execSync: (string, <a href=\"./api/Node_child_process.html#type-option\">option</a>) => string</h4>", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html#value-option", "title": "option", "contents": "option option string option string unit option cwd encoding ", "rendered": "<h4 class='item'>let option: (\n  ~?cwd: option(string),\n  ~?encoding: option(string),\n  unit\n) => <a href=\"./api/Node_child_process.html#type-option\">option</a></h4>", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html#type-option", "title": "option", "contents": "option ", "rendered": "<h4 class='item'>type option</h4>", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html", "title": "Node_child_process", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_child_process"},
{"href": "./api/Node_child_process.html", "title": "Node_child_process", "contents": "Node Child Process API", "rendered": "Node Child Process API", "breadcrumb": "Node_child_process"},
{"href": "./api/Belt_internalMapString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key N t key ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-addMutate", "title": "addMutate", "contents": "addMutate t key t   ", "rendered": "<h4 class='item'>let addMutate: (<a href=\"./api/Belt_internalMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a) => <a href=\"./api/Belt_internalMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-eq", "title": "eq", "contents": "eq N t key N t key bool   bool   ", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  ('a, 'a) => bool\n) => bool</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-eqU", "title": "eqU", "contents": "eqU N t key N t key fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'g1 * 'h1 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-eqAux", "title": "eqAux", "contents": "eqAux list node key list node key fn bool bool   ", "rendered": "<h4 class='item'>let eqAux: (\n  list(<a href=\"./api/Belt_internalMapString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)),\n  list(<a href=\"./api/Belt_internalMapString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'i1 * 'j1 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-cmp", "title": "cmp", "contents": "cmp N t key N t key int   int   ", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  ('a, 'a) => int\n) => int</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-cmpU", "title": "cmpU", "contents": "cmpU N t key N t key fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'l1 * 'm1 ], int)\n) => int</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-compareAux", "title": "compareAux", "contents": "compareAux list node key list node key fn int int   ", "rendered": "<h4 class='item'>let compareAux: (\n  list(<a href=\"./api/Belt_internalMapString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)),\n  list(<a href=\"./api/Belt_internalMapString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'n1 * 'o1 ], int)\n) => int</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-merge", "title": "merge", "contents": "merge N t key N t key key option option option    N t key   ", "rendered": "<h4 class='item'>let merge: (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  (<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, option('a), option('a)) => option('a)\n) => <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-mergeU", "title": "mergeU", "contents": "mergeU N t key N t key fn option N t key   ", "rendered": "<h4 class='item'>let mergeU: (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_3 of key * 'p1 option * 'q1 option ],\n    option('a)\n  )\n) => <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-split", "title": "split", "contents": "split key null node key N t key option N t key  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>(<a href=\"./api/Belt_internalMapString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a))) => (\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a),\n  option('a),\n  <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)\n)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-splitAux", "title": "splitAux", "contents": "splitAux key node key t option t  ", "rendered": "<h4 class='item'>let splitAux: (<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, <a href=\"./api/Belt_internalMapString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)) => (\n  <a href=\"./api/Belt_internalMapString.html#type-t\">t</a>('a),\n  option('a),\n  <a href=\"./api/Belt_internalMapString.html#type-t\">t</a>('a)\n)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-remove", "title": "remove", "contents": "remove N t key key N t key  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>) => <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-has", "title": "has", "contents": "has N t key key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault N t key key   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a) => 'a</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-getExn", "title": "getExn", "contents": "getExn N t key key  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>) => 'a</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined N t key key Undefined t  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>) => <a href=\"./api/Js.html#module-Undefined\" title=\"Js.Undefined\">Undefined</a>.<a href=\"./api/Js.html#type-Undefined.t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-get", "title": "get", "contents": "get N t key key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#value-add", "title": "add", "contents": "add N t key key N t key   ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a) => <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#type-t", "title": "t", "contents": "t N t key", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Belt_internalMapString.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapString.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html", "title": "Belt_internalMapString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html", "title": "Belt_internalMapString", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalMapString.html#Belt_internalMapString", "title": "Belt_internalMapString", "contents": "", "rendered": "", "breadcrumb": "Belt_internalMapString"},
{"href": "./api/Belt_internalAVLtree.html#value-removeMinAuxWithRootMutate", "title": "removeMinAuxWithRootMutate", "contents": "removeMinAuxWithRootMutate node node t  ", "rendered": "<h4 class='item'>let removeMinAuxWithRootMutate: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b)\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-balMutate", "title": "balMutate", "contents": "balMutate node node ", "rendered": "<h4 class='item'>let balMutate: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b) => <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-updateMutate", "title": "updateMutate", "contents": "updateMutate t cmp t    cmp", "rendered": "<h4 class='item'>let updateMutate: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  'a,\n  'b,\n  ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-fromArray", "title": "fromArray", "contents": "fromArray array cmp t  cmp", "rendered": "<h4 class='item'>let fromArray: (array(('a, 'b)), ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'id)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>(\n  'a,\n  'b\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-has", "title": "has", "contents": "has t cmp bool   cmp", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'a, ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a)) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-getExn", "title": "getExn", "contents": "getExn t cmp   cmp", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'a, ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a)) => 'b</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t cmp    cmp", "rendered": "<h4 class='item'>let getWithDefault: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  'a,\n  'b,\n  ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a)\n) => 'b</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t cmp undefined   cmp", "rendered": "<h4 class='item'>let getUndefined: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  'a,\n  ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a)\n) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-get", "title": "get", "contents": "get t cmp option   cmp", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'a, ~cmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a)) => option('b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-eq", "title": "eq", "contents": "eq t t cmp bool   bool   kcmp veq", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c),\n  ~kcmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a),\n  ~veq: ('b, 'c) => bool\n) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-eqU", "title": "eqU", "contents": "eqU t t cmp fn bool bool   kcmp veq", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c),\n  ~kcmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a),\n  ~veq: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b42 * 'c11 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-cmp", "title": "cmp", "contents": "cmp t t cmp int   int   kcmp vcmp", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c),\n  ~kcmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a),\n  ~vcmp: ('b, 'c) => int\n) => int</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t cmp fn int int   kcmp vcmp", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c),\n  ~kcmp: <a href=\"./api/Belt_internalAVLtree.html#type-cmp\">cmp</a>('a, 'a),\n  ~vcmp: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b43 * 'c12 ], int)\n) => int</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array(('a, 'b)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-fromSortedArrayRevAux", "title": "fromSortedArrayRevAux", "contents": "fromSortedArrayRevAux array int int t   ", "rendered": "<h4 class='item'>let fromSortedArrayRevAux: (array(('a, 'b)), int, int) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>(\n  'a,\n  'b\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-fromSortedArrayAux", "title": "fromSortedArrayAux", "contents": "fromSortedArrayAux array int int t   ", "rendered": "<h4 class='item'>let fromSortedArrayAux: (array(('a, 'b)), int, int) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>(\n  'a,\n  'b\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => array('b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => array('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => array(('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-fillArray", "title": "fillArray", "contents": "fillArray node int array int   ", "rendered": "<h4 class='item'>let fillArray: (<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b), int, array(('a, 'b))) => int</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => list(('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => int</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-lengthNode", "title": "lengthNode", "contents": "lengthNode node int ", "rendered": "<h4 class='item'>let lengthNode: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b) => int</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-partitionShared", "title": "partitionShared", "contents": "partitionShared t bool   t t  ", "rendered": "<h4 class='item'>let partitionShared: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => bool) => (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-partitionSharedU", "title": "partitionSharedU", "contents": "partitionSharedU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionSharedU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a156 * 'b44 ], bool)\n) => (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-keepMap", "title": "keepMap", "contents": "keepMap t option   t  ", "rendered": "<h4 class='item'>let keepMap: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => option('c)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>(\n  'a,\n  'c\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-keepMapU", "title": "keepMapU", "contents": "keepMapU t fn option t  ", "rendered": "<h4 class='item'>let keepMapU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a157 * 'b45 ], option('c))\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-keepShared", "title": "keepShared", "contents": "keepShared t bool   t  ", "rendered": "<h4 class='item'>let keepShared: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => bool) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-keepSharedU", "title": "keepSharedU", "contents": "keepSharedU t fn bool t  ", "rendered": "<h4 class='item'>let keepSharedU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a158 * 'b46 ], bool)\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-concatOrJoin", "title": "concatOrJoin", "contents": "concatOrJoin t option t t    ", "rendered": "<h4 class='item'>let concatOrJoin: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  'a,\n  option('b),\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-concat", "title": "concat", "contents": "concat t t t  ", "rendered": "<h4 class='item'>let concat: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-join", "title": "join", "contents": "join t t t    ", "rendered": "<h4 class='item'>let join: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'a, 'b, <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-some", "title": "some", "contents": "some t bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a159 * 'b47 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-every", "title": "every", "contents": "every t bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a160 * 'b48 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-reduce", "title": "reduce", "contents": "reduce t      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'c, ('c, 'a, 'b) => 'c) => 'c</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c13 * 'a161 * 'b49 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => 'c) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a162 * 'b50 ], 'c)\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'c)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('c, 'a), 'a => 'b) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('c, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('c, 'a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a163 ], 'b)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>(\n  'c,\n  'b\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-forEach", "title": "forEach", "contents": "forEach t unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), ('a, 'b) => unit) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a164 * 'b51 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-stackAllLeft", "title": "stackAllLeft", "contents": "stackAllLeft t list node list node  ", "rendered": "<h4 class='item'>let stackAllLeft: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), list(<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b))) => list(\n  <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b)\n)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'a) => bool</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-removeMinAuxWithRef", "title": "removeMinAuxWithRef", "contents": "removeMinAuxWithRef node ref ref t   ", "rendered": "<h4 class='item'>let removeMinAuxWithRef: (\n  <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('a, 'b),\n  <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>('a),\n  <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>('b)\n) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => option(('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => option(('a, 'b))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => option('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-minKey", "title": "minKey", "contents": "minKey t option ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b) => option('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-updateValue", "title": "updateValue", "contents": "updateValue node node  ", "rendered": "<h4 class='item'>let updateValue: (<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v), 'v) => <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-singleton", "title": "singleton", "contents": "singleton t  ", "rendered": "<h4 class='item'>let singleton: ('a, 'b) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-bal", "title": "bal", "contents": "bal t t t    ", "rendered": "<h4 class='item'>let bal: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'a, 'b, <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-create", "title": "create", "contents": "create t t t    ", "rendered": "<h4 class='item'>let create: (<a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b), 'a, 'b, <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('k, 'v) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('k, 'v)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#type-cmp", "title": "cmp", "contents": "cmp cmp", "rendered": "<h4 class='item'>type cmp('k, 'id) = <a href=\"./api/Belt_Id.html#type-cmp\" title=\"Belt_Id.cmp\">cmp</a>('k, 'id)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-return", "title": "return", "contents": "return null ", "rendered": "<h4 class='item'>let return: 'a => <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-toOpt", "title": "toOpt", "contents": "toOpt null option ", "rendered": "<h4 class='item'>let toOpt: <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>('a) => option('a)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-right", "title": "right", "contents": "right node t ", "rendered": "<h4 class='item'>let right: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('k, 'v)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-rightSet", "title": "rightSet", "contents": "rightSet node t unit  ", "rendered": "<h4 class='item'>let rightSet: (<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v), <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('k, 'v)) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-left", "title": "left", "contents": "left node t ", "rendered": "<h4 class='item'>let left: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v) => <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('k, 'v)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-leftSet", "title": "leftSet", "contents": "leftSet node t unit  ", "rendered": "<h4 class='item'>let leftSet: (<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v), <a href=\"./api/Belt_internalAVLtree.html#type-t\">t</a>('k, 'v)) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-height", "title": "height", "contents": "height node int ", "rendered": "<h4 class='item'>let height: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v) => int</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-value", "title": "value", "contents": "value node ", "rendered": "<h4 class='item'>let value: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v) => 'v</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-valueSet", "title": "valueSet", "contents": "valueSet node unit  ", "rendered": "<h4 class='item'>let valueSet: (<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v), 'v) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-key", "title": "key", "contents": "key node ", "rendered": "<h4 class='item'>let key: <a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v) => 'k</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#value-keySet", "title": "keySet", "contents": "keySet node unit  ", "rendered": "<h4 class='item'>let keySet: (<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('k, 'v), 'k) => unit</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#type-node", "title": "node", "contents": "node ", "rendered": "<h4 class='item'>type node('k, 'v)</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#type-t", "title": "t", "contents": "t null node", "rendered": "<h4 class='item'>type t('key, 'a) = <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>(<a href=\"./api/Belt_internalAVLtree.html#type-node\">node</a>('key, 'a))</h4>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html", "title": "Belt_internalAVLtree", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html", "title": "Belt_internalAVLtree", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html", "title": "Belt_internalAVLtree", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Belt_internalAVLtree.html#Belt_internalAVLtree", "title": "Belt_internalAVLtree", "contents": "", "rendered": "", "breadcrumb": "Belt_internalAVLtree"},
{"href": "./api/Js_dict.html#value-map", "title": "map", "contents": "map f dict maps dict to a new dictionary with the same keys, using f to map each value", "rendered": "<code>map f dict</code> maps <code>dict</code> to a new dictionary with the same keys, using <code>f</code> to map each value", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-map", "title": "map", "contents": "map fn t t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a22 ], 'b), <a href=\"./api/Js_dict.html#type-t\">t</a>('a)) => <a href=\"./api/Js_dict.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-fromArray", "title": "fromArray", "contents": "fromArray entries creates a new dictionary containing each (key, value) pair in entries", "rendered": "<code>fromArray entries</code> creates a new dictionary containing each <code>(key, value)</code> pair in <code>entries</code>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Js_dict.html#type-key\">key</a>, 'a)) => <a href=\"./api/Js_dict.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-fromList", "title": "fromList", "contents": "fromList entries creates a new dictionary containing each (key, value) pair in entries", "rendered": "<code>fromList entries</code> creates a new dictionary containing each <code>(key, value)</code> pair in <code>entries</code>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-fromList", "title": "fromList", "contents": "fromList list key t ", "rendered": "<h4 class='item'>let fromList: list((<a href=\"./api/Js_dict.html#type-key\">key</a>, 'a)) => <a href=\"./api/Js_dict.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-values", "title": "values", "contents": "entries dict returns the values in dict (ES2017)", "rendered": "<code>entries dict</code> returns the values in <code>dict</code> (ES2017)", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-values", "title": "values", "contents": "values t array ", "rendered": "<h4 class='item'>let values: <a href=\"./api/Js_dict.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-entries", "title": "entries", "contents": "entries dict returns the key value pairs in dict (ES2017)", "rendered": "<code>entries dict</code> returns the key value pairs in <code>dict</code> (ES2017)", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-entries", "title": "entries", "contents": "entries t array key ", "rendered": "<h4 class='item'>let entries: <a href=\"./api/Js_dict.html#type-t\">t</a>('a) => array((<a href=\"./api/Js_dict.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-unsafeDeleteKey", "title": "unsafeDeleteKey", "contents": "Experimental internal funciton", "rendered": "Experimental internal funciton", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-unsafeDeleteKey", "title": "unsafeDeleteKey", "contents": "unsafeDeleteKey fn unit", "rendered": "<h4 class='item'>let unsafeDeleteKey: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n  [ `Arity_2 of string t * string ],\n  unit\n)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-empty", "title": "empty", "contents": "empty () returns an empty dictionary", "rendered": "<code>empty ()</code> returns an empty dictionary", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-empty", "title": "empty", "contents": "empty unit t ", "rendered": "<h4 class='item'>let empty: unit => <a href=\"./api/Js_dict.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-keys", "title": "keys", "contents": "keys dict returns all the keys in the dictionary dict", "rendered": "<code>keys dict</code> returns all the keys in the dictionary <code>dict</code>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-keys", "title": "keys", "contents": "keys t array string ", "rendered": "<h4 class='item'>let keys: <a href=\"./api/Js_dict.html#type-t\">t</a>('a) => array(string)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-set", "title": "set", "contents": "set dict key value sets the key/value in dict", "rendered": "<code>set dict key value</code> sets the <code>key</code>/<code>value</code> in <code>dict</code>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-set", "title": "set", "contents": "set t key unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Js_dict.html#type-t\">t</a>('a), <a href=\"./api/Js_dict.html#type-key\">key</a>, 'a) => unit</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html", "title": "code block", "contents": "Array.iter (fun key -> Js.log (Js_dict.unsafeGet dic key)) (Js_dict.keys dict) ", "rendered": "<pre><code>Array.iter (fun key -> Js.log (Js_dict.unsafeGet dic key)) (Js_dict.keys dict) </code></pre>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-unsafeGet", "title": "unsafeGet", "contents": "unsafeGet dict key return the value if the key exists, otherwise an undefined value is returned. Must be used only when the existence of a key is certain. (i.e. when having called keys function previously.", "rendered": "<code>unsafeGet dict key</code> return the value if the <code>key</code> exists, otherwise an <strong>undefined</strong> value is returned. Must be used only when the existence of a key is certain. (i.e. when having called <code>keys</code> function previously.", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-unsafeGet", "title": "unsafeGet", "contents": "unsafeGet t key  ", "rendered": "<h4 class='item'>let unsafeGet: (<a href=\"./api/Js_dict.html#type-t\">t</a>('a), <a href=\"./api/Js_dict.html#type-key\">key</a>) => 'a</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-get", "title": "get", "contents": "get dict key returns None if the key is not found in the dictionary, Some value otherwise", "rendered": "<code>get dict key</code> returns <code>None</code> if the <code>key</code> is not found in the dictionary, <code>Some value</code> otherwise", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Js_dict.html#type-t\">t</a>('a), <a href=\"./api/Js_dict.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#type-key", "title": "key", "contents": "Key type", "rendered": "Key type", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#type-t", "title": "t", "contents": "This Dictionary type is mostly used with the Js_json.t type.", "rendered": "This Dictionary type is mostly used with the <code>Js_json.t</code> type.", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#type-t", "title": "t", "contents": "Dictionary type (ie an &#39;{ }&#39; JS object). However it is restricted to hold a single type; therefore values must have the same type.", "rendered": "Dictionary type (ie an &#39;{ }&#39; JS object). However it is restricted to hold a single type; therefore values must have the same type.", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html", "title": "Js_dict", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html", "title": "Js_dict", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_dict"},
{"href": "./api/Js_dict.html#Js_dict", "title": "Js_dict", "contents": "", "rendered": "", "breadcrumb": "Js_dict"},
{"href": "./api/Js_option.html#value-firstSome", "title": "firstSome", "contents": "firstSome option option option  ", "rendered": "<h4 class='item'>let firstSome: (option('a), option('a)) => option('a)</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-filter", "title": "filter", "contents": "filter fn bool option option  ", "rendered": "<h4 class='item'>let filter: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a17 ], bool),\n  option('a)\n) => option('a)</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-default", "title": "default", "contents": "default option  ", "rendered": "<h4 class='item'>let default: ('a, option('a)) => 'a</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault option  ", "rendered": "<h4 class='item'>let getWithDefault: ('a, option('a)) => 'a</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-map", "title": "map", "contents": "map fn option option  ", "rendered": "<h4 class='item'>let map: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a18 ], 'b),\n  option('a)\n) => option('b)</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-andThen", "title": "andThen", "contents": "andThen fn option option option  ", "rendered": "<h4 class='item'>let andThen: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a19 ], option('b)),\n  option('a)\n) => option('b)</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-equal", "title": "equal", "contents": "equal fn bool option option bool   ", "rendered": "<h4 class='item'>let equal: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a20 * 'b4 ], bool),\n  option('a),\n  option('b)\n) => bool</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-getExn", "title": "getExn", "contents": "getExn option ", "rendered": "<h4 class='item'>let getExn: option('a) => 'a</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-isNone", "title": "isNone", "contents": "isNone option bool ", "rendered": "<h4 class='item'>let isNone: option('a) => bool</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-isSomeValue", "title": "isSomeValue", "contents": "isSomeValue fn bool option bool   ", "rendered": "<h4 class='item'>let isSomeValue: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a21 * 'a21 ], bool),\n  'a,\n  option('a)\n) => bool</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-isSome", "title": "isSome", "contents": "isSome option bool ", "rendered": "<h4 class='item'>let isSome: option('a) => bool</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#value-some", "title": "some", "contents": "some option ", "rendered": "<h4 class='item'>let some: 'a => option('a)</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#type-t", "title": "t", "contents": "t option", "rendered": "<h4 class='item'>type t('a) = option('a)</h4>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html", "title": "Js_option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html", "title": "Js_option", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_option"},
{"href": "./api/Js_option.html#Js_option", "title": "Js_option", "contents": "", "rendered": "", "breadcrumb": "Js_option"},
{"href": "./api/Belt_HashSetString.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => array(int)</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array key unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, array(<a href=\"./api/Belt_HashSetString.html#type-key\">key</a>)) => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_HashSetString.html#type-key\">key</a>) => <a href=\"./api/Belt_HashSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array(<a href=\"./api/Belt_HashSetString.html#type-key\">key</a>) => <a href=\"./api/Belt_HashSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => array(<a href=\"./api/Belt_HashSetString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => int</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-reduce", "title": "reduce", "contents": "reduce t key     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, 'c, ('c, <a href=\"./api/Belt_HashSetString.html#type-key\">key</a>) => 'c) => 'c</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_HashSetString.html#type-t\">t</a>,\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'c7 * key ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-forEach", "title": "forEach", "contents": "forEach t key unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetString.html#type-key\">key</a> => unit) => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of key ], unit)) => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-remove", "title": "remove", "contents": "remove t key unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetString.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetString.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => <a href=\"./api/Belt_HashSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-add", "title": "add", "contents": "add t key unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_HashSetString.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetString.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_HashSetString.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#value-make", "title": "make", "contents": "make int t hintSize", "rendered": "<h4 class='item'>let make: (~hintSize: int) => <a href=\"./api/Belt_HashSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html", "title": "Belt_HashSetString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html", "title": "Belt_HashSetString", "contents": "See HashSet", "rendered": "<strong>See</strong> HashSet", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html", "title": "Belt_HashSetString", "contents": "It is more efficient in general, the API is the same with HashSet except its key type is fixed, and identity is not needed(using the built-in one)", "rendered": "It is more efficient in general, the API is the same with HashSet except its key type is fixed, and identity is not needed(using the built-in one)", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_HashSetString.html", "title": "Belt_HashSetString", "contents": "This module is HashSet specialized with key type to be a primitive type.", "rendered": "This module is HashSet specialized with key type to be a primitive type.", "breadcrumb": "Belt_HashSetString"},
{"href": "./api/Belt_MutableSet.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array id t  id", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: (\n  array('value),\n  ~id: <a href=\"./api/Belt_MutableSet.html#type-id\">id</a>('value, 'id)\n) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-ofArray", "title": "ofArray", "contents": "ofArray array id t  id", "rendered": "<h4 class='item'>let ofArray: (array('k), ~id: <a href=\"./api/Belt_MutableSet.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('k, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('a, 'a) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-split", "title": "split", "contents": "split s x returns a triple ((l, r), present), where l is the set of elements of s that are strictly less than x; r is the set of elements of s that are strictly greater than x; present is false if s contains no element equal to x, or true if s contains an element equal to x. l,r are freshly made, no sharing with s", "rendered": "<code>split s x</code> returns a triple <code>((l, r), present)</code>, where <code>l</code> is the set of elements of <code>s</code> that are strictly less than <code>x</code>; <code>r</code> is the set of elements of <code>s</code> that are strictly greater than <code>x</code>; <code>present</code> is <code>false</code> if <code>s</code> contains no element equal to <code>x</code>, or <code>true</code> if <code>s</code> contains an element equal to <code>x</code>. <code>l,r</code> are freshly made, no sharing with <code>s</code>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-split", "title": "split", "contents": "split t t t bool  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => (\n  (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)),\n  bool\n)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-getExn", "title": "getExn", "contents": "getExn t  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => 'value</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(\n  'value\n)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-get", "title": "get", "contents": "get t option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => option('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => option('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => option('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-toArray", "title": "toArray", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => array('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => list('value)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id) => int</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-partition", "title": "partition", "contents": "partition p s returns a pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition p s</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-partition", "title": "partition", "contents": "partition t bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value => bool) => (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)\n)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value2 ], bool)\n) => (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id))</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-keep", "title": "keep", "contents": "keep s p returns the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep s p</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-keep", "title": "keep", "contents": "keep t bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value => bool) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value3 ], bool)\n) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>.", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-some", "title": "some", "contents": "some t bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value => bool) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value4 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-every", "title": "every", "contents": "every s p checks if all elements of the set satisfy the predicate p. Order unspecified", "rendered": "<code>every s p</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-every", "title": "every", "contents": "every t bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value => bool) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value5 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-reduce", "title": "reduce", "contents": "In increasing order.", "rendered": "In increasing order.", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'a, ('a, 'value) => 'a) => 'a</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a103 * 'value6 ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f in turn to all elements of m. In increasing order", "rendered": "<code>forEach m f</code> applies <code>f</code> in turn to all elements of <code>m</code>. In increasing order", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value => unit) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value7 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-eq", "title": "eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-cmp", "title": "cmp", "contents": "cmp t t int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)) => int</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-diff", "title": "diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-intersect", "title": "intersect", "contents": "intersect t t t  ", "rendered": "<h4 class='item'>let intersect: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-union", "title": "union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array unit  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), array('value)) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-removeCheck", "title": "removeCheck", "contents": "removeCheck t bool  ", "rendered": "<h4 class='item'>let removeCheck: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-remove", "title": "remove", "contents": "remove t unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), array('value)) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-addCheck", "title": "addCheck", "contents": "addCheck t bool  ", "rendered": "<h4 class='item'>let addCheck: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-add", "title": "add", "contents": "add t unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id), 'value) => unit</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-has", "title": "has", "contents": "has t bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'a), 'value) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('a, 'a) => bool</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('k, 'id) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('k, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array id t  id", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: (\n  array('value),\n  ~id: <a href=\"./api/Belt_MutableSet.html#type-id\">id</a>('value, 'id)\n) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-fromArray", "title": "fromArray", "contents": "fromArray array id t  id", "rendered": "<h4 class='item'>let fromArray: (array('k), ~id: <a href=\"./api/Belt_MutableSet.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('k, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#value-make", "title": "make", "contents": "make id t id", "rendered": "<h4 class='item'>let make: (~id: <a href=\"./api/Belt_MutableSet.html#type-id\">id</a>('value, 'id)) => <a href=\"./api/Belt_MutableSet.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#type-id", "title": "id", "contents": "id comparable", "rendered": "<h4 class='item'>type id('k, 'id) = <a href=\"./api/Belt_Id.html#type-comparable\" title=\"Belt_Id.comparable\">comparable</a>('k, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('k, 'id)</h4>", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#module-String", "title": "String", "contents": "Specalized when key type is string, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>string</code>, more efficient than the gerneic type", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html#module-Int", "title": "Int", "contents": "Specalized when key type is int, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>int</code>, more efficient than the gerneic type", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html", "title": "Belt_MutableSet", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html", "title": "Belt_MutableSet", "contents": "Same as Belt.Set, but mutable.", "rendered": "Same as Belt.Set, but mutable.", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_MutableSet.html", "title": "Belt_MutableSet", "contents": "A mutable sorted set module which allows customize compare behavior.", "rendered": "A <em>mutable</em> sorted set module which allows customize <em>compare</em> behavior.", "breadcrumb": "Belt_MutableSet"},
{"href": "./api/Belt_internalAVLset.html#value-removeMinAuxWithRootMutate", "title": "removeMinAuxWithRootMutate", "contents": "removeMinAuxWithRootMutate node node t  ", "rendered": "<h4 class='item'>let removeMinAuxWithRootMutate: (<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>(\n  'a\n)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-balMutate", "title": "balMutate", "contents": "balMutate node node ", "rendered": "<h4 class='item'>let balMutate: <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a) => <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-addMutate", "title": "addMutate", "contents": "addMutate cmp t t cmp  ", "rendered": "<h4 class='item'>let addMutate: (~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-fromArray", "title": "fromArray", "contents": "fromArray array cmp t  cmp", "rendered": "<h4 class='item'>let fromArray: (array('a), ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-getExn", "title": "getExn", "contents": "getExn t cmp   cmp", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a, ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => 'a</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t cmp undefined   cmp", "rendered": "<h4 class='item'>let getUndefined: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  'a,\n  ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)\n) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-get", "title": "get", "contents": "get t cmp option   cmp", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a, ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => option('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-subset", "title": "subset", "contents": "subset t t cmp bool   cmp", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-eq", "title": "eq", "contents": "eq t t cmp bool   cmp", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-cmp", "title": "cmp", "contents": "cmp t t cmp int   cmp", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => int</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-has", "title": "has", "contents": "has t cmp bool   cmp", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a, ~cmp: <a href=\"./api/Belt_internalAVLset.html#type-cmp\">cmp</a>('a, 'b)) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array('a) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-fromSortedArrayRevAux", "title": "fromSortedArrayRevAux", "contents": "fromSortedArrayRevAux array int int t   ", "rendered": "<h4 class='item'>let fromSortedArrayRevAux: (array('a), int, int) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-fromSortedArrayAux", "title": "fromSortedArrayAux", "contents": "fromSortedArrayAux array int int t   ", "rendered": "<h4 class='item'>let fromSortedArrayAux: (array('a), int, int) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-fillArray", "title": "fillArray", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-fillArray", "title": "fillArray", "contents": "fillArray node int array int   ", "rendered": "<h4 class='item'>let fillArray: (<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a), int, array('a)) => int</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => list('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-lengthNode", "title": "lengthNode", "contents": "lengthNode node int ", "rendered": "<h4 class='item'>let lengthNode: <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a) => int</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-partitionCopy", "title": "partitionCopy", "contents": "partitionCopy t bool  t t  ", "rendered": "<h4 class='item'>let partitionCopy: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => bool) => (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-partitionCopyU", "title": "partitionCopyU", "contents": "partitionCopyU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionCopyU: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a145 ], bool)\n) => (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-partitionShared", "title": "partitionShared", "contents": "partitionShared t bool  t t  ", "rendered": "<h4 class='item'>let partitionShared: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => bool) => (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-partitionSharedU", "title": "partitionSharedU", "contents": "partitionSharedU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionSharedU: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a146 ], bool)\n) => (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-keepCopy", "title": "keepCopy", "contents": "keepCopy t bool  t  ", "rendered": "<h4 class='item'>let keepCopy: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => bool) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-keepCopyU", "title": "keepCopyU", "contents": "keepCopyU t fn bool t  ", "rendered": "<h4 class='item'>let keepCopyU: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a147 ], bool)\n) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-keepShared", "title": "keepShared", "contents": "keepShared t bool  t  ", "rendered": "<h4 class='item'>let keepShared: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => bool) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-keepSharedU", "title": "keepSharedU", "contents": "keepSharedU t fn bool t  ", "rendered": "<h4 class='item'>let keepSharedU: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a148 ], bool)\n) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-concatShared", "title": "concatShared", "contents": "concatShared t t t  ", "rendered": "<h4 class='item'>let concatShared: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-joinShared", "title": "joinShared", "contents": "joinShared t t t   ", "rendered": "<h4 class='item'>let joinShared: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a, <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-some", "title": "some", "contents": "some t bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => bool) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a149 ], bool)) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-every", "title": "every", "contents": "every t bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => bool) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a150 ], bool)) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'b, ('b, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b38 * 'a151 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a => unit) => unit</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a152 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-stackAllLeft", "title": "stackAllLeft", "contents": "stackAllLeft t list node list node  ", "rendered": "<h4 class='item'>let stackAllLeft: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), list(<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a))) => list(<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a))</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-removeMinAuxWithRef", "title": "removeMinAuxWithRef", "contents": "removeMinAuxWithRef node ref t  ", "rendered": "<h4 class='item'>let removeMinAuxWithRef: (<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('a), <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>('a)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-singleton", "title": "singleton", "contents": "singleton t ", "rendered": "<h4 class='item'>let singleton: 'a => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-bal", "title": "bal", "contents": "bal t t t   ", "rendered": "<h4 class='item'>let bal: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a, <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-create", "title": "create", "contents": "create t t t   ", "rendered": "<h4 class='item'>let create: (<a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a), 'a, <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-return", "title": "return", "contents": "return null ", "rendered": "<h4 class='item'>let return: 'a => <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-toOpt", "title": "toOpt", "contents": "toOpt null option ", "rendered": "<h4 class='item'>let toOpt: <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>('a) => option('a)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#type-cmp", "title": "cmp", "contents": "cmp cmp", "rendered": "<h4 class='item'>type cmp('a, 'b) = <a href=\"./api/Belt_Id.html#type-cmp\" title=\"Belt_Id.cmp\">cmp</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-right", "title": "right", "contents": "right node t ", "rendered": "<h4 class='item'>let right: <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('value)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-rightSet", "title": "rightSet", "contents": "rightSet node t unit  ", "rendered": "<h4 class='item'>let rightSet: (<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('value)) => unit</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-left", "title": "left", "contents": "left node t ", "rendered": "<h4 class='item'>let left: <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value) => <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('value)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-leftSet", "title": "leftSet", "contents": "leftSet node t unit  ", "rendered": "<h4 class='item'>let leftSet: (<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value), <a href=\"./api/Belt_internalAVLset.html#type-t\">t</a>('value)) => unit</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-height", "title": "height", "contents": "height node int ", "rendered": "<h4 class='item'>let height: <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value) => int</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#value-value", "title": "value", "contents": "value node ", "rendered": "<h4 class='item'>let value: <a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value) => 'value</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#type-node", "title": "node", "contents": "node ", "rendered": "<h4 class='item'>type node('value)</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#type-t", "title": "t", "contents": "t null node", "rendered": "<h4 class='item'>type t('value) = <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>(<a href=\"./api/Belt_internalAVLset.html#type-node\">node</a>('value))</h4>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html", "title": "Belt_internalAVLset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html", "title": "Belt_internalAVLset", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html", "title": "Belt_internalAVLset", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Belt_internalAVLset.html#Belt_internalAVLset", "title": "Belt_internalAVLset", "contents": "", "rendered": "", "breadcrumb": "Belt_internalAVLset"},
{"href": "./api/Js_re.html#value-test", "title": "test", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-test", "title": "test", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test'><p>MDN</p>\n</a>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html", "title": "code block", "contents": "(* A simple implementation of Js.String.startsWith *)\n\nlet str = \"hello world!\"\n\nlet startsWith substring target =\n  Js.Re.fromString (\"^\" ^ substring)\n    |> Js.Re.test target\n\nlet () = Js.log (str |> startsWith \"hello\") (* prints \"true\" *)", "rendered": "<pre><code>(* A simple implementation of Js.String.startsWith *)\n\nlet str = \"hello world!\"\n\nlet startsWith substring target =\n  Js.Re.fromString (\"^\" ^ substring)\n    |> Js.Re.test target\n\nlet () = Js.log (str |> startsWith \"hello\") (* prints \"true\" *)</code></pre>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-test", "title": "test", "contents": "returns true if a match is found, false otherwise", "rendered": "<strong>returns</strong> <code>true</code> if a match is found, <code>false</code> otherwise", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-test", "title": "test", "contents": "tests whether the given RegExp object will match a given string", "rendered": "tests whether the given RegExp object will match a given string", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-test", "title": "test", "contents": "test string t bool  ", "rendered": "<h4 class='item'>let test: (string, <a href=\"./api/Js_re.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-exec", "title": "exec", "contents": "exec string t option result  ", "rendered": "<h4 class='item'>let exec: (string, <a href=\"./api/Js_re.html#type-t\">t</a>) => option(<a href=\"./api/Js_re.html#type-result\">result</a>)</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-unicode", "title": "unicode", "contents": "returns a bool indicating whether the unicode flag is set", "rendered": "returns a bool indicating whether the <code>unicode</code> flag is set", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-unicode", "title": "unicode", "contents": "unicode t bool ", "rendered": "<h4 class='item'>let unicode: <a href=\"./api/Js_re.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-sticky", "title": "sticky", "contents": "returns a bool indicating whether the sticky flag is set", "rendered": "returns a bool indicating whether the <code>sticky</code> flag is set", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-sticky", "title": "sticky", "contents": "sticky t bool ", "rendered": "<h4 class='item'>let sticky: <a href=\"./api/Js_re.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-source", "title": "source", "contents": "returns the pattern as a string", "rendered": "returns the pattern as a string", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-source", "title": "source", "contents": "source t string ", "rendered": "<h4 class='item'>let source: <a href=\"./api/Js_re.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-multiline", "title": "multiline", "contents": "returns a bool indicating whether the multiline flag is set", "rendered": "returns a bool indicating whether the <code>multiline</code> flag is set", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-multiline", "title": "multiline", "contents": "multiline t bool ", "rendered": "<h4 class='item'>let multiline: <a href=\"./api/Js_re.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-setLastIndex", "title": "setLastIndex", "contents": "sets the index at which the next match will start its search from", "rendered": "sets the index at which the next match will start its search from", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-setLastIndex", "title": "setLastIndex", "contents": "setLastIndex t int unit  ", "rendered": "<h4 class='item'>let setLastIndex: (<a href=\"./api/Js_re.html#type-t\">t</a>, int) => unit</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-lastIndex", "title": "lastIndex", "contents": "lastIndex t int ", "rendered": "<h4 class='item'>let lastIndex: <a href=\"./api/Js_re.html#type-t\">t</a> => int</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-ignoreCase", "title": "ignoreCase", "contents": "returns a bool indicating whether the ignoreCase flag is set", "rendered": "returns a bool indicating whether the <code>ignoreCase</code> flag is set", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-ignoreCase", "title": "ignoreCase", "contents": "ignoreCase t bool ", "rendered": "<h4 class='item'>let ignoreCase: <a href=\"./api/Js_re.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-global", "title": "global", "contents": "returns a bool indicating whether the global flag is set", "rendered": "returns a bool indicating whether the <code>global</code> flag is set", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-global", "title": "global", "contents": "global t bool ", "rendered": "<h4 class='item'>let global: <a href=\"./api/Js_re.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-flags", "title": "flags", "contents": "returns the enabled flags as a string", "rendered": "returns the enabled flags as a string", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-flags", "title": "flags", "contents": "flags t string ", "rendered": "<h4 class='item'>let flags: <a href=\"./api/Js_re.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-fromStringWithFlags", "title": "fromStringWithFlags", "contents": "fromStringWithFlags string string t  flags", "rendered": "<h4 class='item'>let fromStringWithFlags: (string, ~flags: string) => <a href=\"./api/Js_re.html#type-t\">t</a></h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-fromString", "title": "fromString", "contents": "fromString string t ", "rendered": "<h4 class='item'>let fromString: string => <a href=\"./api/Js_re.html#type-t\">t</a></h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-input", "title": "input", "contents": "the original input string", "rendered": "the original input string", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-input", "title": "input", "contents": "input result string ", "rendered": "<h4 class='item'>let input: <a href=\"./api/Js_re.html#type-result\">result</a> => string</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-index", "title": "index", "contents": "0-based index of the match in the input string", "rendered": "0-based index of the match in the input string", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-index", "title": "index", "contents": "index result int ", "rendered": "<h4 class='item'>let index: <a href=\"./api/Js_re.html#type-result\">result</a> => int</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-matches", "title": "matches", "contents": "Use captures instead.", "rendered": "Use <code>captures</code> instead.", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-matches", "title": "matches", "contents": "Deprecated: Use captures instead.\n\n", "rendered": "Deprecated: <p>Use <code>captures</code> instead.</p>\n", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-matches", "title": "matches", "contents": "an array of the matches, the first is the full match and the remaining are the substring matches", "rendered": "an array of the matches, the first is the full match and the remaining are the substring matches", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-matches", "title": "matches", "contents": "matches result array string ", "rendered": "<h4 class='item'>let matches: <a href=\"./api/Js_re.html#type-result\">result</a> => array(string)</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-captures", "title": "captures", "contents": "an array of the match and captures, the first is the full match and the remaining are the substring captures", "rendered": "an array of the match and captures, the first is the full match and the remaining are the substring captures", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#value-captures", "title": "captures", "contents": "captures result array nullable string ", "rendered": "<h4 class='item'>let captures: <a href=\"./api/Js_re.html#type-result\">result</a> => array(<a href=\"./api/Js.html#type-nullable\" title=\"Js.nullable\">nullable</a>(string))</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#type-result", "title": "result", "contents": "the result of a executing a RegExp on a string", "rendered": "the result of a executing a RegExp on a string", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#type-result", "title": "result", "contents": "result ", "rendered": "<h4 class='item'>type result</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#type-t", "title": "t", "contents": "the RegExp object", "rendered": "the RegExp object", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Js_re"},
{"href": "./api/Js_re.html", "title": "Js_re", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_re"},
{"href": "./api/Belt_internalMapInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key N t key ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-addMutate", "title": "addMutate", "contents": "addMutate t key t   ", "rendered": "<h4 class='item'>let addMutate: (<a href=\"./api/Belt_internalMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a) => <a href=\"./api/Belt_internalMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-eq", "title": "eq", "contents": "eq N t key N t key bool   bool   ", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  ('a, 'a) => bool\n) => bool</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-eqU", "title": "eqU", "contents": "eqU N t key N t key fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 's * 't ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-eqAux", "title": "eqAux", "contents": "eqAux list node key list node key fn bool bool   ", "rendered": "<h4 class='item'>let eqAux: (\n  list(<a href=\"./api/Belt_internalMapInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)),\n  list(<a href=\"./api/Belt_internalMapInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'u * 'w ], bool)\n) => bool</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-cmp", "title": "cmp", "contents": "cmp N t key N t key int   int   ", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  ('a, 'a) => int\n) => int</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-cmpU", "title": "cmpU", "contents": "cmpU N t key N t key fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'x * 'y ], int)\n) => int</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-compareAux", "title": "compareAux", "contents": "compareAux list node key list node key fn int int   ", "rendered": "<h4 class='item'>let compareAux: (\n  list(<a href=\"./api/Belt_internalMapInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)),\n  list(<a href=\"./api/Belt_internalMapInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'z * 'd1 ], int)\n) => int</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-merge", "title": "merge", "contents": "merge N t key N t key key option option option    N t key   ", "rendered": "<h4 class='item'>let merge: (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  (<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, option('a), option('a)) => option('a)\n) => <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-mergeU", "title": "mergeU", "contents": "mergeU N t key N t key fn option N t key   ", "rendered": "<h4 class='item'>let mergeU: (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_3 of key * 'e1 option * 'f1 option ],\n    option('a)\n  )\n) => <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-split", "title": "split", "contents": "split key null node key N t key option N t key  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, <a href=\"./api/Js.html#type-null\" title=\"Js.null\">null</a>(<a href=\"./api/Belt_internalMapInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a))) => (\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a),\n  option('a),\n  <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)\n)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-splitAux", "title": "splitAux", "contents": "splitAux key node key t option t  ", "rendered": "<h4 class='item'>let splitAux: (<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, <a href=\"./api/Belt_internalMapInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)) => (\n  <a href=\"./api/Belt_internalMapInt.html#type-t\">t</a>('a),\n  option('a),\n  <a href=\"./api/Belt_internalMapInt.html#type-t\">t</a>('a)\n)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-remove", "title": "remove", "contents": "remove N t key key N t key  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>) => <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-has", "title": "has", "contents": "has N t key key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault N t key key   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a) => 'a</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-getExn", "title": "getExn", "contents": "getExn N t key key  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>) => 'a</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined N t key key Undefined t  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>) => <a href=\"./api/Js.html#module-Undefined\" title=\"Js.Undefined\">Undefined</a>.<a href=\"./api/Js.html#type-Undefined.t\">t</a>('a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-get", "title": "get", "contents": "get N t key key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#value-add", "title": "add", "contents": "add N t key key N t key   ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a), <a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a) => <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#type-t", "title": "t", "contents": "t N t key", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Belt_internalMapInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalMapInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalMapInt.html#type-key\">key</a>, 'a)</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#type-key", "title": "key", "contents": "key int", "rendered": "<h4 class='item'>type key = int</h4>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html", "title": "Belt_internalMapInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html", "title": "Belt_internalMapInt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalMapInt.html#Belt_internalMapInt", "title": "Belt_internalMapInt", "contents": "", "rendered": "", "breadcrumb": "Belt_internalMapInt"},
{"href": "./api/Belt_internalBuckets.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'a) => array(int)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b) => array(('a, 'b))</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b) => array('b)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'a) => array('a)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-fillArray", "title": "fillArray", "contents": "fillArray int array bucket int   ", "rendered": "<h4 class='item'>let fillArray: (int, array(('a, 'b)), <a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b)) => int</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-keepMapInPlace", "title": "keepMapInPlace", "contents": "keepMapInPlace t option   unit  ", "rendered": "<h4 class='item'>let keepMapInPlace: (\n  <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b),\n  ('a, 'b) => option('b)\n) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-keepMapInPlaceU", "title": "keepMapInPlaceU", "contents": "keepMapInPlaceU t fn option unit  ", "rendered": "<h4 class='item'>let keepMapInPlaceU: (\n  <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a153 * 'b39 ], option('b))\n) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-reduce", "title": "reduce", "contents": "reduce t      ", "rendered": "<h4 class='item'>let reduce: (\n  <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b),\n  'c,\n  ('c, 'a, 'b) => 'c\n) => 'c</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c10 * 'a154 * 'b40 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-forEach", "title": "forEach", "contents": "forEach t   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b), ('a, 'b) => 'c) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('a, 'a, 'a, 'b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a155 * 'b41 ], 'c)\n) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('hash, 'eq, 'a, 'b) => <a href=\"./api/Belt_internalBuckets.html#type-t\">t</a>('hash, 'eq, 'a, 'b)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-next", "title": "next", "contents": "next bucket opt bucket ", "rendered": "<h4 class='item'>let next: <a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b) => <a href=\"./api/Belt_internalBuckets.html#type-C.opt\" title=\"C.opt\">opt</a>(<a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b))</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-nextSet", "title": "nextSet", "contents": "nextSet bucket opt bucket unit  ", "rendered": "<h4 class='item'>let nextSet: (<a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b), <a href=\"./api/Belt_internalBuckets.html#type-C.opt\" title=\"C.opt\">opt</a>(<a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b))) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-value", "title": "value", "contents": "value bucket ", "rendered": "<h4 class='item'>let value: <a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b) => 'b</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-valueSet", "title": "valueSet", "contents": "valueSet bucket unit  ", "rendered": "<h4 class='item'>let valueSet: (<a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b), 'b) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-key", "title": "key", "contents": "key bucket ", "rendered": "<h4 class='item'>let key: <a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b) => 'a</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-keySet", "title": "keySet", "contents": "keySet bucket unit  ", "rendered": "<h4 class='item'>let keySet: (<a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b), 'a) => unit</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#value-bucket", "title": "bucket", "contents": "bucket opt bucket bucket key value next", "rendered": "<h4 class='item'>let bucket: (\n  ~key: 'a,\n  ~value: 'b,\n  ~next: <a href=\"./api/Belt_internalBuckets.html#type-C.opt\" title=\"C.opt\">opt</a>(<a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b))\n) => <a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#type-t", "title": "t", "contents": "t container bucket", "rendered": "<h4 class='item'>type t('hash, 'eq, 'a, 'b) = <a href=\"./api/Belt_internalBuckets.html#type-C.container\" title=\"C.container\">container</a>(\n  'hash,\n  'eq,\n  <a href=\"./api/Belt_internalBuckets.html#type-bucket\">bucket</a>('a, 'b)\n)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#type-bucket", "title": "bucket", "contents": "bucket ", "rendered": "<h4 class='item'>type bucket('a, 'b)</h4>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html", "title": "Belt_internalBuckets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html", "title": "Belt_internalBuckets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html", "title": "Belt_internalBuckets", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Belt_internalBuckets.html#Belt_internalBuckets", "title": "Belt_internalBuckets", "contents": "", "rendered": "", "breadcrumb": "Belt_internalBuckets"},
{"href": "./api/Node_fs.html#value-writeFileAsUtf8Sync", "title": "writeFileAsUtf8Sync", "contents": "writeFileAsUtf8Sync string string unit  ", "rendered": "<h4 class='item'>let writeFileAsUtf8Sync: (string, string) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-writeFileSync", "title": "writeFileSync", "contents": "writeFileSync string string unit   ", "rendered": "<h4 class='item'>let writeFileSync: (\n  string,\n  string,\n  [ `ascii | `base64 | `binary | `hex | `latin1 | `ucs2 | `utf16le | `utf8 ]\n) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-existsSync", "title": "existsSync", "contents": "existsSync string bool ", "rendered": "<h4 class='item'>let existsSync: string => bool</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-readFileAsUtf8Sync", "title": "readFileAsUtf8Sync", "contents": "readFileAsUtf8Sync string string ", "rendered": "<h4 class='item'>let readFileAsUtf8Sync: string => string</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-readFileSync", "title": "readFileSync", "contents": "readFileSync string string  ", "rendered": "<h4 class='item'>let readFileSync: (\n  string,\n  [ `ascii | `base64 | `binary | `hex | `latin1 | `ucs2 | `utf16le | `utf8 ]\n) => string</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-openSync", "title": "openSync", "contents": "openSync path unit  ", "rendered": "<h4 class='item'>let openSync: (\n  <a href=\"./api/Node_fs.html#type-path\">path</a>,\n  [ `Append\n| `Append_fail_if_exists\n| `Append_read\n| `Append_read_fail_if_exists\n| `Read\n| `Read_write\n| `Read_write_sync\n| `Write\n| `Write_fail_if_exists\n| `Write_read\n| `Write_read_fail_if_exists ]\n) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-rmdirSync", "title": "rmdirSync", "contents": "rmdirSync string unit ", "rendered": "<h4 class='item'>let rmdirSync: string => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-unlinkSync", "title": "unlinkSync", "contents": "unlinkSync string unit ", "rendered": "<h4 class='item'>let unlinkSync: string => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-readlinkSync", "title": "readlinkSync", "contents": "readlinkSync string string ", "rendered": "<h4 class='item'>let readlinkSync: string => string</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-fchownSync", "title": "fchownSync", "contents": "fchownSync fd int int unit  uid gid", "rendered": "<h4 class='item'>let fchownSync: (<a href=\"./api/Node_fs.html#type-fd\">fd</a>, ~uid: int, ~gid: int) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-chownSync", "title": "chownSync", "contents": "chownSync string int int unit  uid gid", "rendered": "<h4 class='item'>let chownSync: (string, ~uid: int, ~gid: int) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-truncateSync", "title": "truncateSync", "contents": "truncateSync string int unit  ", "rendered": "<h4 class='item'>let truncateSync: (string, int) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-ftruncateSync", "title": "ftruncateSync", "contents": "ftruncateSync fd int unit  ", "rendered": "<h4 class='item'>let ftruncateSync: (<a href=\"./api/Node_fs.html#type-fd\">fd</a>, int) => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-Watch.close", "title": "Watch.close", "contents": "close t unit ", "rendered": "<h4 class='item'>let close: <a href=\"./api/Node_fs.html#type-Watch.t\">t</a> => unit</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-Watch.on", "title": "Watch.on", "contents": "there is no need to accept listener, since we return a watcher back it can register event listener there . Currently we introduce a type string_buffer, for the filename, it will be Buffer when the encoding is `utf8. This is dependent type which can be tracked by GADT in some way, but to make things simple, let&#39;s just introduce an or type", "rendered": "there is no need to accept listener, since we return a <code>watcher</code> back it can register event listener there . Currently we introduce a type <code>string_buffer</code>, for the <code>filename</code>, it will be <code>Buffer</code> when the encoding is `utf8. This is dependent type which can be tracked by GADT in some way, but to make things simple, let&#39;s just introduce an or type", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-Watch.on", "title": "Watch.on", "contents": "on t t  ", "rendered": "<h4 class='item'>let on: (\n  [ `change of (string -&gt; Node.string_buffer -&gt; unit [@bs])\n| `error of (unit -&gt; unit [@bs]) ],\n  <a href=\"./api/Node_fs.html#type-Watch.t\">t</a>\n) => <a href=\"./api/Node_fs.html#type-Watch.t\">t</a></h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-Watch.watch", "title": "Watch.watch", "contents": "there is no need to accept listener, since we return a watcher back it can register event listener there . Currently we introduce a type string_buffer, for the filename, it will be Buffer when the encoding is `utf8. This is dependent type which can be tracked by GADT in some way, but to make things simple, let&#39;s just introduce an or type", "rendered": "there is no need to accept listener, since we return a <code>watcher</code> back it can register event listener there . Currently we introduce a type <code>string_buffer</code>, for the <code>filename</code>, it will be <code>Buffer</code> when the encoding is `utf8. This is dependent type which can be tracked by GADT in some way, but to make things simple, let&#39;s just introduce an or type", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-Watch.watch", "title": "Watch.watch", "contents": "watch string option config unit t  config ", "rendered": "<h4 class='item'>let watch: (string, ~?config: option(<a href=\"./api/Node_fs.html#type-Watch.config\">config</a>), unit) => <a href=\"./api/Node_fs.html#type-Watch.t\">t</a></h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-Watch.config", "title": "Watch.config", "contents": "config option bool option bool option Js_string t unit config persistent recursive encoding ", "rendered": "<h4 class='item'>let config: (\n  ~?persistent: option(bool),\n  ~?recursive: option(bool),\n  ~?encoding: option(<a href=\"./api/Js_string.html\">Js_string</a>.<a href=\"./api/Js_string.html#type-t\">t</a>),\n  unit\n) => <a href=\"./api/Node_fs.html#type-Watch.config\">config</a></h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#type-Watch.config", "title": "Watch.config", "contents": "config ", "rendered": "<h4 class='item'>type config</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#type-Watch.t", "title": "Watch.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#module-Watch", "title": "Watch", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#module-Watch", "title": "Watch", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#type-path", "title": "path", "contents": "The relative path to a filename can be used. Remember, however, that this path will be relative to process.cwd().", "rendered": "The relative path to a filename can be used. Remember, however, that this path will be relative to <code>process.cwd()</code>.", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#type-path", "title": "path", "contents": "path string", "rendered": "<h4 class='item'>type path = string</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#type-fd", "title": "fd", "contents": "fd int", "rendered": "<h4 class='item'>type fd = int</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-renameSync", "title": "renameSync", "contents": "renameSync string string ", "rendered": "<h4 class='item'>let renameSync: string => string</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-readdirSync", "title": "readdirSync", "contents": "Most fs functions let you omit the callback argument. If you do, a default callback is used that rethrows errors. To get a trace to the original call site, set the `NODE_DEBUG` environment variable:", "rendered": "Most fs functions let you omit the callback argument. If you do, a default callback is used that rethrows errors. To get a trace to the original call site, set the `NODE_DEBUG` environment variable:", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html#value-readdirSync", "title": "readdirSync", "contents": "readdirSync string array string ", "rendered": "<h4 class='item'>let readdirSync: string => array(string)</h4>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html", "title": "Node_fs", "contents": "refernce documentation", "rendered": "refernce documentation", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html", "title": "Node_fs", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html", "title": "Node_fs", "contents": "See: refernce documentation\n\n", "rendered": "See: <a href='https://blogs.janestreet.com/a-and-a/'><p>refernce documentation</p>\n</a>", "breadcrumb": "Node_fs"},
{"href": "./api/Node_fs.html", "title": "Node_fs", "contents": "Node FS API", "rendered": "Node FS API", "breadcrumb": "Node_fs"},
{"href": "./api/Belt_Id.html#value-getCmpInternal", "title": "getCmpInternal", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-getCmpInternal", "title": "getCmpInternal", "contents": "getCmpInternal cmp fn int ", "rendered": "<h4 class='item'>let getCmpInternal: <a href=\"./api/Belt_Id.html#type-cmp\">cmp</a>('a, 'id) => <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n  [ `Arity_2 of 'a136 * 'a136 ],\n  int\n)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-getEqInternal", "title": "getEqInternal", "contents": "getEqInternal eq fn bool ", "rendered": "<h4 class='item'>let getEqInternal: <a href=\"./api/Belt_Id.html#type-eq\">eq</a>('a, 'id) => <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n  [ `Arity_2 of 'a137 * 'a137 ],\n  bool\n)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-getHashInternal", "title": "getHashInternal", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-getHashInternal", "title": "getHashInternal", "contents": "getHashInternal hash fn int ", "rendered": "<h4 class='item'>let getHashInternal: <a href=\"./api/Belt_Id.html#type-hash\">hash</a>('a, 'id) => <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n  [ `Arity_1 of 'a138 ],\n  int\n)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-hashable", "title": "hashable", "contents": "hashable int  bool   hash eq", "rendered": "<h4 class='item'>let hashable: (\n  ~hash: 'a => int,\n  ~eq: (\n    'a,\n    'a\n  ) => bool\n) => (module Hashable with type t = 'a139)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-hashableU", "title": "hashableU", "contents": "hashableU fn int fn bool hash eq", "rendered": "<h4 class='item'>let hashableU: (\n  ~hash: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a140 ], int),\n  ~eq: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_2 of 'a140 * 'a140 ],\n    bool\n  )\n) => (module Hashable with type t = 'a140)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hashable", "title": "hashable", "contents": "The idea of a unique identity when created is that it makes sure two hash sets would type mismatch if they use different comparison function", "rendered": "The idea of a unique identity when created is that it makes sure two hash sets would type mismatch if they use different comparison function", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hashable", "title": "hashable", "contents": "It can be created using function hashableU or hashable.", "rendered": "It can be created using function hashableU or hashable.", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hashable", "title": "hashable", "contents": "Unlike normal functions, when created, it comes with a unique identity (guaranteed by the type system).", "rendered": "Unlike normal functions, when created, it comes with a unique identity (guaranteed by the type system).", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hashable", "title": "hashable", "contents": "(&#39;key, &#39;id) hashable is a module of functions, here it only includes hash, eq.", "rendered": "<code>(&#39;key, &#39;id) hashable</code> is a module of functions, here it only includes <code>hash</code>, <code>eq</code>.", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hashable", "title": "hashable", "contents": "hashable ", "rendered": "<h4 class='item'>type hashable(\n  'key,\n  'id\n) = (module Hashable with type identity = 'id and type t = 'key2)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-comparable", "title": "comparable", "contents": "comparable int   cmp", "rendered": "<h4 class='item'>let comparable: (\n  ~cmp: (\n    'a,\n    'a\n  ) => int\n) => (module Comparable with type t = 'a141)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#value-comparableU", "title": "comparableU", "contents": "comparableU fn int cmp", "rendered": "<h4 class='item'>let comparableU: (\n  ~cmp: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_2 of 'a142 * 'a142 ],\n    int\n  )\n) => (module Comparable with type t = 'a142)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-comparable", "title": "comparable", "contents": "The idea of a unique identity when created is that it makes sure two sets would type mismatch if they use different comparison function", "rendered": "The idea of a unique identity when created is that it makes sure two sets would type mismatch if they use different comparison function", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-comparable", "title": "comparable", "contents": "It can be created using function comparableU orcomparable.", "rendered": "It can be created using function comparableU orcomparable.", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-comparable", "title": "comparable", "contents": "Unlike normal functions, when created, it comes with a unique identity (guaranteed by the type system).", "rendered": "Unlike normal functions, when created, it comes with a unique identity (guaranteed by the type system).", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-comparable", "title": "comparable", "contents": "(&#39;key, &#39;id) cmparable is a module of functions, here it only includes cmp.", "rendered": "<code>(&#39;key, &#39;id) cmparable</code> is a module of functions, here it only includes <code>cmp</code>.", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-comparable", "title": "comparable", "contents": "comparable ", "rendered": "<h4 class='item'>type comparable(\n  'key,\n  'id\n) = (module Comparable with type identity = 'id0 and type t = 'key3)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-cmp", "title": "cmp", "contents": "Its runtime representation is a cmp function, but signed with a type parameter, so that different hash functions type mismatch", "rendered": "Its runtime representation is a <code>cmp</code> function, but signed with a type parameter, so that different hash functions type mismatch", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-cmp", "title": "cmp", "contents": "(&#39;a,&#39;id) cmp", "rendered": "<code>(&#39;a,&#39;id) cmp</code>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-cmp", "title": "cmp", "contents": "cmp ", "rendered": "<h4 class='item'>type cmp('a, 'id)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-eq", "title": "eq", "contents": "Its runtime represenation is an eq function, but signed with a type parameter, so that different hash functions type mismatch", "rendered": "Its runtime represenation is an <code>eq</code> function, but signed with a type parameter, so that different hash functions type mismatch", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-eq", "title": "eq", "contents": "(&#39;a, &#39;id) eq", "rendered": "<code>(&#39;a, &#39;id) eq</code>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-eq", "title": "eq", "contents": "eq ", "rendered": "<h4 class='item'>type eq('a, 'id)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hash", "title": "hash", "contents": "Its runtime represenation is a hash function, but signed with a type parameter, so that different hash functions type mismatch", "rendered": "Its runtime represenation is a <code>hash</code> function, but signed with a type parameter, so that different hash functions type mismatch", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hash", "title": "hash", "contents": "(&#39;a, &#39;id) hash", "rendered": "<code>(&#39;a, &#39;id) hash</code>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html#type-hash", "title": "hash", "contents": "hash ", "rendered": "<h4 class='item'>type hash('a, 'id)</h4>", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html", "title": "Belt_Id", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html", "title": "Belt_Id", "contents": "It create a unique identifer per module of functions so that different data structures with slightly different comparison functions won&#39;t mix.", "rendered": "It create a unique identifer per module of functions so that different data structures with slightly different comparison functions won&#39;t mix.", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html", "title": "Belt_Id", "contents": "Provide utiliites to create identified comparators or hashes for data structures used below.", "rendered": "Provide utiliites to create identified comparators or hashes for data structures used below.", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Id.html", "title": "Belt_Id", "contents": "Id", "rendered": "Id", "breadcrumb": "Belt_Id"},
{"href": "./api/Belt_Set.html#value-packIdData", "title": "packIdData", "contents": "the packed collection", "rendered": "the packed collection", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-packIdData", "title": "packIdData", "contents": "Returns: the packed collection\n\n", "rendered": "Returns: <p>the packed collection</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-packIdData", "title": "packIdData", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-packIdData", "title": "packIdData", "contents": "packIdData ~id ~data", "rendered": "<code>packIdData ~id ~data</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-packIdData", "title": "packIdData", "contents": "packIdData id Belt_SetDict t t id data", "rendered": "<h4 class='item'>let packIdData: (\n  ~id: <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id),\n  ~data: <a href=\"./api/Belt_SetDict.html\">Belt_SetDict</a>.<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)\n) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getId", "title": "getId", "contents": "the identity of s0", "rendered": "the identity of <code>s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getId", "title": "getId", "contents": "Returns: the identity of s0\n\n", "rendered": "Returns: <p>the identity of <code>s0</code></p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getId", "title": "getId", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getId", "title": "getId", "contents": "getId s0", "rendered": "<code>getId s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getId", "title": "getId", "contents": "getId t id ", "rendered": "<h4 class='item'>let getId: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getData", "title": "getData", "contents": "the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing", "rendered": "the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getData", "title": "getData", "contents": "Returns: the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing\n\n", "rendered": "Returns: <p>the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getData", "title": "getData", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getData", "title": "getData", "contents": "getData s0", "rendered": "<code>getData s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getData", "title": "getData", "contents": "getData t Belt_SetDict t ", "rendered": "<h4 class='item'>let getData: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Belt_SetDict.html\">Belt_SetDict</a>.<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "Below are operations only when better performance needed, it is still safe API but more verbose. More API will be exposed by needs", "rendered": "Below are operations only when better performance needed, it is still safe API but more verbose. More API will be exposed by needs", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_Set.html#type-t\">t</a>('a, 'a) => unit</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-split", "title": "split", "contents": "a tuple ((smaller, larger), present), present is true when ele exist in set", "rendered": "a tuple <code>((smaller, larger), present)</code>, <code>present</code> is true when <code>ele</code> exist in <code>set</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-split", "title": "split", "contents": "Returns: a tuple ((smaller, larger), present), present is true when ele exist in set\n\n", "rendered": "Returns: <p>a tuple <code>((smaller, larger), present)</code>, <code>present</code> is true when <code>ele</code> exist in <code>set</code></p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-split", "title": "split", "contents": "split set ele", "rendered": "<code>split set ele</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-split", "title": "split", "contents": "split t t t bool  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => (\n  (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)),\n  bool\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getExn", "title": "getExn", "contents": "raise if not exist", "rendered": "<strong>raise</strong> if not exist", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getExn", "title": "getExn", "contents": "See get", "rendered": "<strong>See</strong> get", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getExn", "title": "getExn", "contents": "getExn t  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => 'value</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getUndefined", "title": "getUndefined", "contents": "See get", "rendered": "<strong>See</strong> get", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(\n  'value\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-get", "title": "get", "contents": "the reference of the value k&#39; which is equivalent to k using the comparator specifiecd by this collection, None if it does not exist", "rendered": "the reference of the value <code>k&#39;</code> which is equivalent to <code>k</code> using the comparator specifiecd by this collection, <code>None</code> if it does not exist", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-get", "title": "get", "contents": "Returns: the reference of the value k&#39; which is equivalent to k using the comparator specifiecd by this collection, None if it does not exist\n\n", "rendered": "Returns: <p>the reference of the value <code>k&#39;</code> which is equivalent to <code>k</code> using the comparator specifiecd by this collection, <code>None</code> if it does not exist</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-get", "title": "get", "contents": "get s0 k", "rendered": "<code>get s0 k</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-get", "title": "get", "contents": "get t option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => option('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maxUndefined", "title": "maxUndefined", "contents": "the maximum element of the collection, None if it is empty", "rendered": "the maximum element of the collection, <code>None</code> if it is empty", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maxUndefined", "title": "maxUndefined", "contents": "Returns: the maximum element of the collection, None if it is empty\n\n", "rendered": "Returns: <p>the maximum element of the collection, <code>None</code> if it is empty</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maxUndefined", "title": "maxUndefined", "contents": "maximum s0", "rendered": "<code>maximum s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maximum", "title": "maximum", "contents": "the maximum element of the collection, None if it is empty", "rendered": "the maximum element of the collection, <code>None</code> if it is empty", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maximum", "title": "maximum", "contents": "Returns: the maximum element of the collection, None if it is empty\n\n", "rendered": "Returns: <p>the maximum element of the collection, <code>None</code> if it is empty</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maximum", "title": "maximum", "contents": "maximum s0", "rendered": "<code>maximum s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => option('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minUndefined", "title": "minUndefined", "contents": "the minimum element of the collection, undefined if it is empty", "rendered": "the minimum element of the collection, <code>undefined</code> if it is empty", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minUndefined", "title": "minUndefined", "contents": "Returns: the minimum element of the collection, undefined if it is empty\n\n", "rendered": "Returns: <p>the minimum element of the collection, <code>undefined</code> if it is empty</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined s0", "rendered": "<code>minUndefined s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minimum", "title": "minimum", "contents": "the minimum element of the collection, None if it is empty", "rendered": "the minimum element of the collection, <code>None</code> if it is empty", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minimum", "title": "minimum", "contents": "Returns: the minimum element of the collection, None if it is empty\n\n", "rendered": "Returns: <p>the minimum element of the collection, <code>None</code> if it is empty</p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minimum", "title": "minimum", "contents": "minimum s0", "rendered": "<code>minimum s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => option('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-toList", "title": "toList", "contents": "See toArray", "rendered": "<strong>See</strong> toArray", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => list('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\ntoArray s0 = [|2;3;5;6|];;\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\ntoArray s0 = [|2;3;5;6|];;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-toArray", "title": "toArray", "contents": "toArray s0", "rendered": "<code>toArray s0</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => array('value)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nsize s0 = 4;;\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nsize s0 = 4;;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-size", "title": "size", "contents": "size s", "rendered": "<code>size s</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id) => int</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-partition", "title": "partition", "contents": "partition m p returns a pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition m p</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-partition", "title": "partition", "contents": "partition t bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value => bool) => (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value8 ], bool)\n) => (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id))</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-keep", "title": "keep", "contents": "keep m p returns the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep m p</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-keep", "title": "keep", "contents": "keep t bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value => bool) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value9 ], bool)\n) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-some", "title": "some", "contents": "some t bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value => bool) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value10 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-every", "title": "every", "contents": "every p s checks if all elements of the set satisfy the predicate p. Order unspecified.", "rendered": "<code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-every", "title": "every", "contents": "every t bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value => bool) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value11 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nreduce s0 [] Bs.List.add = [6;5;3;2];;\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nreduce s0 [] Bs.List.add = [6;5;3;2];;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-reduce", "title": "reduce", "contents": "In increasing order.", "rendered": "In increasing order.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'a, ('a, 'value) => 'a) => 'a</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a106 * 'value12 ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet acc = ref [] ;;\nforEach s0 (fun x -> acc := x !acc);;\n!acc = [6;5;3;2];;\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet acc = ref [] ;;\nforEach s0 (fun x -> acc := x !acc);;\n!acc = [6;5;3;2];;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-forEach", "title": "forEach", "contents": "forEach s f applies f in turn to all elements of s. In increasing order", "rendered": "<code>forEach s f</code> applies <code>f</code> in turn to all elements of <code>s</code>. In increasing order", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value => unit) => unit</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value13 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-eq", "title": "eq", "contents": "true if toArray s0 = toArray s1", "rendered": "true if <code>toArray s0 = toArray s1</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-eq", "title": "eq", "contents": "Returns: true if toArray s0 = toArray s1\n\n", "rendered": "Returns: <p>true if <code>toArray s0 = toArray s1</code></p>\n", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-eq", "title": "eq", "contents": "eq s0 s1", "rendered": "<code>eq s0 s1</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-eq", "title": "eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-cmp", "title": "cmp", "contents": "Total ordering between sets. Can be used as the ordering function for doing sets of sets. It compare size first and then iterate over each element following the order of elements", "rendered": "Total ordering between sets. Can be used as the ordering function for doing sets of sets. It compare <code>size</code> first and then iterate over each element following the order of elements", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-cmp", "title": "cmp", "contents": "cmp t t int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)) => int</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\nlet s2 = intersect s0 s1;;\nsubset s2 s0 = true;;\nsubset s2 s1 = true;;\nsubset s1 s0 = false;;\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\nlet s2 = intersect s0 s1;;\nsubset s2 s0 = true;;\nsubset s2 s1 = true;;\nsubset s1 s0 = false;;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-subset", "title": "subset", "contents": "subset s0 s1", "rendered": "<code>subset s0 s1</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\ntoArray (intersect s0 s1) =  [|2;3;5|]\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\ntoArray (intersect s0 s1) =  [|2;3;5|]\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-diff", "title": "diff", "contents": "intersect s0 s1", "rendered": "<code>intersect s0 s1</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-diff", "title": "diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\ntoArray (intersect s0 s1) =  [|2;3;5|]\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\ntoArray (intersect s0 s1) =  [|2;3;5|]\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-intersect", "title": "intersect", "contents": "intersect s0 s1", "rendered": "<code>intersect s0 s1</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-intersect", "title": "intersect", "contents": "intersect t t t  ", "rendered": "<h4 class='item'>let intersect: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\ntoArray (union s0 s1) =  [|1;2;3;4;5;6|]\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|5;2;3;5;6|]];;\nlet s1 = fromArray ~id:(module IntCmp) [|5;2;3;1;5;4;|];;\ntoArray (union s0 s1) =  [|1;2;3;4;5;6|]\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-union", "title": "union", "contents": "union s0 s1", "rendered": "<code>union s0 s1</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-union", "title": "union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-removeMany", "title": "removeMany", "contents": "Removing each of xs to s, note unlike remove, the reference of return value might be changed even if none in xs exists s", "rendered": "Removing each of <code>xs</code> to <code>s</code>, note unlike remove, the reference of return value might be changed even if none in <code>xs</code> exists <code>s</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-removeMany", "title": "removeMany", "contents": "removeMany s xs", "rendered": "<code>removeMany s xs</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array t  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), array('value)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-remove", "title": "remove", "contents": "Adding each of xs to s, note unlike add, the reference of return value might be changed even if all values in xs exist s", "rendered": "Adding each of <code>xs</code> to <code>s</code>, note unlike add, the reference of return value might be changed even if all values in <code>xs</code> exist <code>s</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-remove", "title": "remove", "contents": "mergeMany s xs", "rendered": "<code>mergeMany s xs</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-remove", "title": "remove", "contents": "remove t t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-mergeMany", "title": "mergeMany", "contents": "Adding each of xs to s, note unlike add, the reference of return value might be changed even if all values in xs exist s", "rendered": "Adding each of <code>xs</code> to <code>s</code>, note unlike add, the reference of return value might be changed even if all values in <code>xs</code> exist <code>s</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany s xs", "rendered": "<code>mergeMany s xs</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array t  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), array('value)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s0 = make ~id:(module IntCmp);;\nlet s1 = add s0 1 ;;\nlet s2 = add s1 2;;\nlet s3 = add s2 2;;\ntoArray s0 = [||];;\ntoArray s1 = [|1|];;\ntoArray s2 = [|1;2|];;\ntoArray s3 = [|1;2|];;\ns2 == s3;;\n", "rendered": "<pre><code>let s0 = make ~id:(module IntCmp);;\nlet s1 = add s0 1 ;;\nlet s2 = add s1 2;;\nlet s3 = add s2 2;;\ntoArray s0 = [||];;\ntoArray s1 = [|1|];;\ntoArray s2 = [|1;2|];;\ntoArray s3 = [|1;2|];;\ns2 == s3;;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-add", "title": "add", "contents": "add s x If x was already in s, s is returned unchanged.", "rendered": "<code>add s x</code> If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-add", "title": "add", "contents": "add t t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "isEmpty (fromArray [||] ~id:(module IntCmp)) = true;;\nisEmpty (fromArray [|1|] ~id:(module IntCmp)) = true;;\n", "rendered": "<pre><code>isEmpty (fromArray [||] ~id:(module IntCmp)) = true;;\nisEmpty (fromArray [|1|] ~id:(module IntCmp)) = true;;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-has", "title": "has", "contents": "has t bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id), 'value) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "isEmpty (fromArray [||] ~id:(module IntCmp)) = true;;\nisEmpty (fromArray [|1|] ~id:(module IntCmp)) = true;;\n", "rendered": "<pre><code>isEmpty (fromArray [||] ~id:(module IntCmp)) = true;;\nisEmpty (fromArray [|1|] ~id:(module IntCmp)) = true;;\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_Set.html#type-t\">t</a>('a, 'a) => bool</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "Unsafe", "rendered": "<strong>Unsafe</strong>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "The same as fromArray except it is after assuming the input array x is already sorted", "rendered": "The same as fromArray except it is after assuming the input array <code>x</code> is already sorted", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe xs ~id", "rendered": "<code>fromSortedArrayUnsafe xs ~id</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array id t  id", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: (\n  array('value),\n  ~id: <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id)\n) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array id t  id", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: (\n  array('value),\n  ~id: <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id)\n) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "toArray (fromArray [1;3;2;4] (module IntCmp)) = [1;2;3;4]\n", "rendered": "<pre><code>toArray (fromArray [1;3;2;4] (module IntCmp)) = [1;2;3;4]\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-fromArray", "title": "fromArray", "contents": "fromArray xs ~id", "rendered": "<code>fromArray xs ~id</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-fromArray", "title": "fromArray", "contents": "fromArray array id t  id", "rendered": "<h4 class='item'>let fromArray: (array('value), ~id: <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-ofArray", "title": "ofArray", "contents": "ofArray array id t  id", "rendered": "<h4 class='item'>let ofArray: (array('value), ~id: <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>(\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "code block", "contents": "let s = make ~id:(module IntCmp)\n", "rendered": "<pre><code>let s = make ~id:(module IntCmp)\n</code></pre>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-make", "title": "make", "contents": "make ~id creates a new set by taking in the comparator", "rendered": "<code>make ~id</code> creates a new set by taking in the comparator", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#value-make", "title": "make", "contents": "make id t id", "rendered": "<h4 class='item'>let make: (~id: <a href=\"./api/Belt_Set.html#type-id\">id</a>('value, 'id)) => <a href=\"./api/Belt_Set.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#type-id", "title": "id", "contents": "The identity needed for making a set from scratch", "rendered": "The identity needed for making a set from scratch", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#type-id", "title": "id", "contents": "id comparable", "rendered": "<h4 class='item'>type id('value, 'id) = <a href=\"./api/Belt_Id.html#type-comparable\" title=\"Belt_Id.comparable\">comparable</a>('value, 'id)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#type-t", "title": "t", "contents": "&#39;identity the identity of the collection", "rendered": "<code>&#39;identity</code> the identity of the collection", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#type-t", "title": "t", "contents": "&#39;value is the element type", "rendered": "<code>&#39;value</code> is the element type", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#type-t", "title": "t", "contents": "(&#39;value, &#39;identity) t", "rendered": "<code>(&#39;value, &#39;identity) t</code>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('value, 'identity)</h4>", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#module-Dict", "title": "Dict", "contents": "This module seprate identity from data, it is a bit more verbsoe but slightly more efficient due to the fact that there is no need to pack identity and data back after each operation", "rendered": "This module seprate identity from data, it is a bit more verbsoe but slightly more efficient due to the fact that there is no need to pack identity and data back after each operation", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#module-String", "title": "String", "contents": "Specalized when value type is string, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "rendered": "Specalized when value type is <code>string</code>, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html#module-Int", "title": "Int", "contents": "Specalized when value type is int, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "rendered": "Specalized when value type is <code>int</code>, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "on below will assume a predeclared comparator module for integers, IntCmp", "rendered": "on below will assume a predeclared comparator module for integers, IntCmp", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "Set.make ~id:(module PairComparator) .Set.add mySet (1, 2)", "rendered": "Set.make ~id:(module PairComparator) .Set.add mySet (1, 2)", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "ator = Belt.Id.MakeComparable(struct int ) (b0, b1) = ves.compare a0 b0 with ives.compare a1 b1", "rendered": "ator = Belt.Id.MakeComparable(struct int ) (b0, b1) = ves.compare a0 b0 with ives.compare a1 b1", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "is module&#39;s usage of identity, `make` and others, please see entation of Belt, A special encoding for collection safety.", "rendered": "is module&#39;s usage of identity, `make` and others, please see entation of Belt, <strong>A special encoding for collection safety</strong>.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "uses balanced binary trees, and therefore searching time logarithmic in the size of the map.", "rendered": "uses balanced binary trees, and therefore searching time logarithmic in the size of the map.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_Set.html", "title": "Belt_Set", "contents": "A immutable sorted set module which allows customize compare behavior.", "rendered": "A <em>immutable</em> sorted set module which allows customize <em>compare</em> behavior.", "breadcrumb": "Belt_Set"},
{"href": "./api/Belt_SortArrayString.html#value-diff", "title": "diff", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-diff", "title": "diff", "contents": "diff array element int int array element int int array element int int        ", "rendered": "<h4 class='item'>let diff: (\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int\n) => int</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-intersect", "title": "intersect", "contents": "intersect array element int int array element int int array element int int        ", "rendered": "<h4 class='item'>let intersect: (\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int\n) => int</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-union", "title": "union", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-union", "title": "union", "contents": "union array element int int array element int int array element int int        ", "rendered": "<h4 class='item'>let union: (\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>),\n  int\n) => int</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-binarySearch", "title": "binarySearch", "contents": "for example, if key is smaller than all elements return -1 since lnot (-1) = 0 if key is larger than all elements return - (len + 1) since lnot (-(len+1)) = len", "rendered": "for example, if <code>key</code> is smaller than all elements return <code>-1</code> since <code>lnot (-1) = 0</code> if <code>key</code> is larger than all elements return <code>- (len + 1)</code> since <code>lnot (-(len+1)) = len</code>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-binarySearch", "title": "binarySearch", "contents": "If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)", "rendered": "If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-binarySearch", "title": "binarySearch", "contents": "If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.", "rendered": "If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-binarySearch", "title": "binarySearch", "contents": "binarySearch array element element int  ", "rendered": "<h4 class='item'>let binarySearch: (array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>), <a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>) => int</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-stableSort", "title": "stableSort", "contents": "The same as stableSortBy except the comparator is fixed", "rendered": "The same as stableSortBy except the comparator is fixed", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-stableSort", "title": "stableSort", "contents": "stableSort array element array element ", "rendered": "<h4 class='item'>let stableSort: array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>) => array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>)</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-stableSortInPlace", "title": "stableSortInPlace", "contents": "The same as stableSortInPlaceBy except the comparator is fixed", "rendered": "The same as stableSortInPlaceBy except the comparator is fixed", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-stableSortInPlace", "title": "stableSortInPlace", "contents": "stableSortInPlace array element unit ", "rendered": "<h4 class='item'>let stableSortInPlace: array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>) => unit</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-isSorted", "title": "isSorted", "contents": "sorted xs return true if xs is in non strict increasing order", "rendered": "<code>sorted xs</code> return true if <code>xs</code> is in non strict increasing order", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-isSorted", "title": "isSorted", "contents": "isSorted array element bool ", "rendered": "<h4 class='item'>let isSorted: array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>) => bool</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "+n means increasing order -n means negative order", "rendered": "<code>+n</code> means increasing order <code>-n</code> means negative order", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "Returns: +n means increasing order -n means negative order\n\n", "rendered": "Returns: <p><code>+n</code> means increasing order <code>-n</code> means negative order</p>\n", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "The same as strictlySortedLength except the comparator is fixed", "rendered": "The same as strictlySortedLength except the comparator is fixed", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "strictlySortedLength array element int ", "rendered": "<h4 class='item'>let strictlySortedLength: array(<a href=\"./api/Belt_SortArrayString.html#type-element\">element</a>) => int</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html#type-element", "title": "element", "contents": "element string", "rendered": "<h4 class='item'>type element = string</h4>", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html", "title": "Belt_SortArrayString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Belt_SortArrayString.html", "title": "Belt_SortArrayString", "contents": "This is a specialized module for Belt_SortArray, the docs in that module also applies here, except the comparator is fixed and inlined", "rendered": "This is a specialized module for Belt_SortArray, the docs in that module also applies here, except the comparator is fixed and inlined", "breadcrumb": "Belt_SortArrayString"},
{"href": "./api/Js_obj.html#value-keys", "title": "keys", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html#value-keys", "title": "keys", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys'><p>MDN</p>\n</a>", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html#value-keys", "title": "keys", "contents": "keys obj returns an array of the keys of obj&#39;s own enumerable properties", "rendered": "<code>keys obj</code> returns an array of the keys of <code>obj</code>&#39;s own enumerable properties", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html#value-keys", "title": "keys", "contents": "keys Js t array string ", "rendered": "<h4 class='item'>let keys: <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>('a) => array(string)</h4>", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html#value-assign", "title": "assign", "contents": "assign Js t Js t Js t  ", "rendered": "<h4 class='item'>let assign: (\n  <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(&lt; .. &gt;),\n  <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(&lt; .. &gt;)\n) => <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(&lt; .. &gt;)</h4>", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html#value-empty", "title": "empty", "contents": "empty () returns the empty object \\{\\}", "rendered": "<code>empty ()</code> returns the empty object <code>\\{\\}</code>", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html#value-empty", "title": "empty", "contents": "empty unit Js t ", "rendered": "<h4 class='item'>let empty: unit => <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(&lt; .. &gt;)</h4>", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html", "title": "Js_obj", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_obj"},
{"href": "./api/Js_obj.html", "title": "Js_obj", "contents": "Provides functions for inspecting and maniplating native JavaScript objects", "rendered": "Provides functions for inspecting and maniplating native JavaScript objects", "breadcrumb": "Js_obj"},
{"href": "./api/Js_global.html#value-decodeURIComponent", "title": "decodeURIComponent", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURIComponent", "title": "decodeURIComponent", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent'><p>MDN</p>\n</a>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURIComponent", "title": "decodeURIComponent", "contents": "Decodes a URL-enmcoded string produced by encodeURIComponent", "rendered": "Decodes a URL-enmcoded string produced by <code>encodeURIComponent</code>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURIComponent", "title": "decodeURIComponent", "contents": "decodeURIComponent string string ", "rendered": "<h4 class='item'>let decodeURIComponent: string => string</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURIComponent", "title": "encodeURIComponent", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURIComponent", "title": "encodeURIComponent", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent'><p>MDN</p>\n</a>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURIComponent", "title": "encodeURIComponent", "contents": "URL-encodes a string, including characters with special meaning in a URI.", "rendered": "URL-encodes a string, including characters with special meaning in a URI.", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURIComponent", "title": "encodeURIComponent", "contents": "encodeURIComponent string string ", "rendered": "<h4 class='item'>let encodeURIComponent: string => string</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURI", "title": "decodeURI", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURI", "title": "decodeURI", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURI'><p>MDN</p>\n</a>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURI", "title": "decodeURI", "contents": "Decodes a URL-enmcoded string produced by encodeURI", "rendered": "Decodes a URL-enmcoded string produced by <code>encodeURI</code>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-decodeURI", "title": "decodeURI", "contents": "decodeURI string string ", "rendered": "<h4 class='item'>let decodeURI: string => string</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURI", "title": "encodeURI", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURI", "title": "encodeURI", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURI'><p>MDN</p>\n</a>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURI", "title": "encodeURI", "contents": "URL-encodes a string.", "rendered": "URL-encodes a string.", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-encodeURI", "title": "encodeURI", "contents": "encodeURI string string ", "rendered": "<h4 class='item'>let encodeURI: string => string</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-setTimeout", "title": "setTimeout", "contents": "setTimeout unit unit  int timeoutId  ", "rendered": "<h4 class='item'>let setTimeout: (unit => unit, int) => <a href=\"./api/Js_global.html#type-timeoutId\">timeoutId</a></h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-setInterval", "title": "setInterval", "contents": "setInterval unit unit  int intervalId  ", "rendered": "<h4 class='item'>let setInterval: (unit => unit, int) => <a href=\"./api/Js_global.html#type-intervalId\">intervalId</a></h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearTimeout", "title": "clearTimeout", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearTimeout", "title": "clearTimeout", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearTimeout'><p>MDN</p>\n</a>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html", "title": "code block", "contents": "(* A simple model of a code monkey's brain *)\n\nlet timer = ref Js.Nullable.null\n\nlet work () =\n  IO.closeHackerNewsTab ()\n\nlet procrastinate mins =\n  Js.Nullable.iter !timer (fun[\\@bs] timer -> Js.Global.clearTimeout timer);\n  timer := Js.Nullable.return (Js.Global.setTimeout work (mins * 60 * 1000))", "rendered": "<pre><code>(* A simple model of a code monkey's brain *)\n\nlet timer = ref Js.Nullable.null\n\nlet work () =\n  IO.closeHackerNewsTab ()\n\nlet procrastinate mins =\n  Js.Nullable.iter !timer (fun[\\@bs] timer -> Js.Global.clearTimeout timer);\n  timer := Js.Nullable.return (Js.Global.setTimeout work (mins * 60 * 1000))</code></pre>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearTimeout", "title": "clearTimeout", "contents": "Clear a timeout started by setTimeout", "rendered": "Clear a timeout started by setTimeout", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearTimeout", "title": "clearTimeout", "contents": "clearTimeout timeoutId unit ", "rendered": "<h4 class='item'>let clearTimeout: <a href=\"./api/Js_global.html#type-timeoutId\">timeoutId</a> => unit</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearInterval", "title": "clearInterval", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearInterval", "title": "clearInterval", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/clearInterval'><p>MDN</p>\n</a>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html", "title": "code block", "contents": "(* API for a somewhat aggressive snoozing alarm clock *)\n\nlet interval = ref Js.Nullable.null\n\nlet remind () =\n  Js.log \"Wake Up!\";\n  IO.punchSleepyGuy ()\n  \nlet snooze mins =\n  interval := Js.Nullable.return (Js.Global.setInterval remind (mins * 60 * 1000))\n  \nlet cancel () =\n  Js.Nullable.iter !interval (fun[\\@bs] intervalId -> Js.Global.clearInterval intervalId)", "rendered": "<pre><code>(* API for a somewhat aggressive snoozing alarm clock *)\n\nlet interval = ref Js.Nullable.null\n\nlet remind () =\n  Js.log \"Wake Up!\";\n  IO.punchSleepyGuy ()\n  \nlet snooze mins =\n  interval := Js.Nullable.return (Js.Global.setInterval remind (mins * 60 * 1000))\n  \nlet cancel () =\n  Js.Nullable.iter !interval (fun[\\@bs] intervalId -> Js.Global.clearInterval intervalId)</code></pre>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearInterval", "title": "clearInterval", "contents": "Clear an interval started by setInterval", "rendered": "Clear an interval started by setInterval", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#value-clearInterval", "title": "clearInterval", "contents": "clearInterval intervalId unit ", "rendered": "<h4 class='item'>let clearInterval: <a href=\"./api/Js_global.html#type-intervalId\">intervalId</a> => unit</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#type-timeoutId", "title": "timeoutId", "contents": "Identify timeout started by setTimeout", "rendered": "Identify timeout started by setTimeout", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#type-timeoutId", "title": "timeoutId", "contents": "timeoutId ", "rendered": "<h4 class='item'>type timeoutId</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#type-intervalId", "title": "intervalId", "contents": "Identify an interval started by setInterval", "rendered": "Identify an interval started by setInterval", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html#type-intervalId", "title": "intervalId", "contents": "intervalId ", "rendered": "<h4 class='item'>type intervalId</h4>", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html", "title": "Js_global", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_global"},
{"href": "./api/Js_global.html", "title": "Js_global", "contents": "Contains functions available in the global scope (window in a browser context)", "rendered": "Contains functions available in the global scope (<code>window</code> in a browser context)", "breadcrumb": "Js_global"},
{"href": "./api/Belt_SortArray.html#value-diff", "title": "diff", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-diff", "title": "diff", "contents": "diff array int int array int int array int int   int         ", "rendered": "<h4 class='item'>let diff: (\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  ('a, 'a) => int\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-diffU", "title": "diffU", "contents": "diffU array int int array int int array int fn int int         ", "rendered": "<h4 class='item'>let diffU: (\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a112 * 'a112 ], int)\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-intersect", "title": "intersect", "contents": "union src src1ofs src1len src2 src2ofs src2len dst dstofs cmp return the offset in the output array", "rendered": "<code>union src src1ofs src1len src2 src2ofs src2len dst dstofs cmp</code> return the <code>offset</code> in the output array", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-intersect", "title": "intersect", "contents": "intersect array int int array int int array int int   int         ", "rendered": "<h4 class='item'>let intersect: (\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  ('a, 'a) => int\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-intersectU", "title": "intersectU", "contents": "intersectU array int int array int int array int fn int int         ", "rendered": "<h4 class='item'>let intersectU: (\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a113 * 'a113 ], int)\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-union", "title": "union", "contents": "union src src1ofs src1len src2 src2ofs src2len dst dstofs cmp assume src and src2 is strictly sorted. for equivalent elements, it is picked from src also assume that dst is large enough to store all elements", "rendered": "<code>union src src1ofs src1len src2 src2ofs src2len dst dstofs cmp</code> assume <code>src</code> and <code>src2</code> is strictly sorted. for equivalent elements, it is picked from <code>src</code> also assume that <code>dst</code> is large enough to store all elements", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-union", "title": "union", "contents": "union array int int array int int array int int   int         ", "rendered": "<h4 class='item'>let union: (\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  ('a, 'a) => int\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-unionU", "title": "unionU", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-unionU", "title": "unionU", "contents": "unionU array int int array int int array int fn int int         ", "rendered": "<h4 class='item'>let unionU: (\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  int,\n  array('a),\n  int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a114 * 'a114 ], int)\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html", "title": "code block", "contents": "binarySearchBy [|1;2;3;4;33;35;36|] 33 = 4;;\nlnot (binarySearchBy [|1;3;5;7|] 4) = 2;;\n", "rendered": "<pre><code>binarySearchBy [|1;2;3;4;33;35;36|] 33 = 4;;\nlnot (binarySearchBy [|1;3;5;7|] 4) = 2;;\n</code></pre>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-binarySearchBy", "title": "binarySearchBy", "contents": "for example, if key is smaller than all elements return -1 since lnot (-1) = 0 if key is larger than all elements return - (len + 1) since lnot (-(len+1)) = len", "rendered": "for example, if <code>key</code> is smaller than all elements return <code>-1</code> since <code>lnot (-1) = 0</code> if <code>key</code> is larger than all elements return <code>- (len + 1)</code> since <code>lnot (-(len+1)) = len</code>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-binarySearchBy", "title": "binarySearchBy", "contents": "If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)", "rendered": "If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-binarySearchBy", "title": "binarySearchBy", "contents": "If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.", "rendered": "If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-binarySearchBy", "title": "binarySearchBy", "contents": "binarySearchBy array int   int   ", "rendered": "<h4 class='item'>let binarySearchBy: (array('a), 'a, ('a, 'a) => int) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-binarySearchByU", "title": "binarySearchByU", "contents": "binarySearchByU array fn int int   ", "rendered": "<h4 class='item'>let binarySearchByU: (\n  array('a),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a115 * 'a115 ], int)\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortBy", "title": "stableSortBy", "contents": "The same as stableSortInPlaceBy except that xs is not modified", "rendered": "The same as stableSortInPlaceBy except that <code>xs</code> is not modified", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortBy", "title": "stableSortBy", "contents": "a fresh array", "rendered": "a fresh array", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortBy", "title": "stableSortBy", "contents": "Returns: a fresh array\n\nThe same as stableSortInPlaceBy except that xs is not modified\n\n", "rendered": "Returns: <p>a fresh array</p>\n<p>The same as stableSortInPlaceBy except that <code>xs</code> is not modified</p>\n", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortBy", "title": "stableSortBy", "contents": "stableSort xs cmp", "rendered": "<code>stableSort xs cmp</code>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortBy", "title": "stableSortBy", "contents": "stableSortBy array int   array  ", "rendered": "<h4 class='item'>let stableSortBy: (array('a), ('a, 'a) => int) => array('a)</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortByU", "title": "stableSortByU", "contents": "stableSortByU array fn int array  ", "rendered": "<h4 class='item'>let stableSortByU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a116 * 'a116 ], int)\n) => array('a)</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortInPlaceBy", "title": "stableSortInPlaceBy", "contents": "Sort xs in place using comparator cmp, the stable means if the elements are equal, their order will be preserved", "rendered": "Sort xs in place using comparator <code>cmp</code>, the stable means if the elements are equal, their order will be preserved", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortInPlaceBy", "title": "stableSortInPlaceBy", "contents": "stableSortBy xs cmp", "rendered": "<code>stableSortBy xs cmp</code>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortInPlaceBy", "title": "stableSortInPlaceBy", "contents": "stableSortInPlaceBy array int   unit  ", "rendered": "<h4 class='item'>let stableSortInPlaceBy: (\n  array('a),\n  ('a, 'a) => int\n) => unit</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-stableSortInPlaceByU", "title": "stableSortInPlaceByU", "contents": "stableSortInPlaceByU array fn int unit  ", "rendered": "<h4 class='item'>let stableSortInPlaceByU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a117 * 'a117 ], int)\n) => unit</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html", "title": "code block", "contents": "isSorted [|1;1;2;3;4|] (fun x y -> compare x y)) = true\n", "rendered": "<pre><code>isSorted [|1;1;2;3;4|] (fun x y -> compare x y)) = true\n</code></pre>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-isSorted", "title": "isSorted", "contents": "true if array is increasingly sorted (equal is okay )", "rendered": "true if array is increasingly sorted (equal is okay )", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-isSorted", "title": "isSorted", "contents": "Returns: true if array is increasingly sorted (equal is okay )\n\nisSorted [|1;1;2;3;4|] (fun x y -&gt; compare x y)) = true\n", "rendered": "Returns: <p>true if array is increasingly sorted (equal is okay )</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='50' id='block-50'><code>isSorted [|1;1;2;3;4|] (fun x y -&gt; compare x y)) = true</code></pre>\n  \n  <script type='docre-source' data-block-id=\"50\">#open Belt_SortArray\nisSorted [|1;1;2;3;4|] (fun x y -> compare x y)) = true\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-8:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='50-alt' id='block-50-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-isSorted", "title": "isSorted", "contents": "isSorted arr cmp", "rendered": "<code>isSorted arr cmp</code>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-isSorted", "title": "isSorted", "contents": "isSorted array int   bool  ", "rendered": "<h4 class='item'>let isSorted: (array('a), ('a, 'a) => int) => bool</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-isSortedU", "title": "isSortedU", "contents": "isSortedU array fn int bool  ", "rendered": "<h4 class='item'>let isSortedU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a118 * 'a118 ], int)\n) => bool</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html", "title": "code block", "contents": "strictlySortedLength [|1;2;3;4;3|] (fun x y -> x < y) = 4;;\nstrictlySortedLength [||] (fun x y -> x < y) = 0;;\nstrictlySortedLength [|1|] (fun x y -> x < y) = 1;;\nstrictlySortedLength [|4;3;2;1|] (fun x y -> x < y) = -4;;\n", "rendered": "<pre><code>strictlySortedLength [|1;2;3;4;3|] (fun x y -> x < y) = 4;;\nstrictlySortedLength [||] (fun x y -> x < y) = 0;;\nstrictlySortedLength [|1|] (fun x y -> x < y) = 1;;\nstrictlySortedLength [|4;3;2;1|] (fun x y -> x < y) = -4;;\n</code></pre>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "strictlySortedLenght xs cmp return +n means increasing order -n means negative order", "rendered": "<code>strictlySortedLenght xs cmp</code> return <code>+n</code> means increasing order <code>-n</code> means negative order", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "strictlySortedLength array bool   int  ", "rendered": "<h4 class='item'>let strictlySortedLength: (\n  array('a),\n  ('a, 'a) => bool\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#value-strictlySortedLengthU", "title": "strictlySortedLengthU", "contents": "strictlySortedLengthU array fn bool int  ", "rendered": "<h4 class='item'>let strictlySortedLengthU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a119 * 'a119 ], bool)\n) => int</h4>", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#module-String", "title": "String", "contents": "Specalized when key type is string, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>string</code>, more efficient than the gerneic type", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html#module-Int", "title": "Int", "contents": "Specalized when key type is int, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>int</code>, more efficient than the gerneic type", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html", "title": "Belt_SortArray", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArray.html", "title": "Belt_SortArray", "contents": "A module for Array sort relevant utiliites", "rendered": "A module for Array sort relevant utiliites", "breadcrumb": "Belt_SortArray"},
{"href": "./api/Belt_SortArrayInt.html#value-diff", "title": "diff", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-diff", "title": "diff", "contents": "diff array element int int array element int int array element int int        ", "rendered": "<h4 class='item'>let diff: (\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int\n) => int</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-intersect", "title": "intersect", "contents": "intersect array element int int array element int int array element int int        ", "rendered": "<h4 class='item'>let intersect: (\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int\n) => int</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-union", "title": "union", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-union", "title": "union", "contents": "union array element int int array element int int array element int int        ", "rendered": "<h4 class='item'>let union: (\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int,\n  int,\n  array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>),\n  int\n) => int</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-binarySearch", "title": "binarySearch", "contents": "for example, if key is smaller than all elements return -1 since lnot (-1) = 0 if key is larger than all elements return - (len + 1) since lnot (-(len+1)) = len", "rendered": "for example, if <code>key</code> is smaller than all elements return <code>-1</code> since <code>lnot (-1) = 0</code> if <code>key</code> is larger than all elements return <code>- (len + 1)</code> since <code>lnot (-(len+1)) = len</code>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-binarySearch", "title": "binarySearch", "contents": "If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)", "rendered": "If value is not found and value is greater than all elements in array, the negative number returned is the bitwise complement of (the index of the last element plus 1)", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-binarySearch", "title": "binarySearch", "contents": "If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.", "rendered": "If value is not found and value is less than one or more elements in array, the negative number returned is the bitwise complement of the index of the first element that is larger than value.", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-binarySearch", "title": "binarySearch", "contents": "binarySearch array element element int  ", "rendered": "<h4 class='item'>let binarySearch: (array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>), <a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>) => int</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-stableSort", "title": "stableSort", "contents": "The same as stableSortBy except the comparator is fixed", "rendered": "The same as stableSortBy except the comparator is fixed", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-stableSort", "title": "stableSort", "contents": "stableSort array element array element ", "rendered": "<h4 class='item'>let stableSort: array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>) => array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>)</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-stableSortInPlace", "title": "stableSortInPlace", "contents": "The same as stableSortInPlaceBy except the comparator is fixed", "rendered": "The same as stableSortInPlaceBy except the comparator is fixed", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-stableSortInPlace", "title": "stableSortInPlace", "contents": "stableSortInPlace array element unit ", "rendered": "<h4 class='item'>let stableSortInPlace: array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>) => unit</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-isSorted", "title": "isSorted", "contents": "sorted xs return true if xs is in non strict increasing order", "rendered": "<code>sorted xs</code> return true if <code>xs</code> is in non strict increasing order", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-isSorted", "title": "isSorted", "contents": "isSorted array element bool ", "rendered": "<h4 class='item'>let isSorted: array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>) => bool</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "+n means increasing order -n means negative order", "rendered": "<code>+n</code> means increasing order <code>-n</code> means negative order", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "Returns: +n means increasing order -n means negative order\n\n", "rendered": "Returns: <p><code>+n</code> means increasing order <code>-n</code> means negative order</p>\n", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "The same as strictlySortedLength except the comparator is fixed", "rendered": "The same as strictlySortedLength except the comparator is fixed", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#value-strictlySortedLength", "title": "strictlySortedLength", "contents": "strictlySortedLength array element int ", "rendered": "<h4 class='item'>let strictlySortedLength: array(<a href=\"./api/Belt_SortArrayInt.html#type-element\">element</a>) => int</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html#type-element", "title": "element", "contents": "element int", "rendered": "<h4 class='item'>type element = int</h4>", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html", "title": "Belt_SortArrayInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Belt_SortArrayInt.html", "title": "Belt_SortArrayInt", "contents": "This is a specialized module for Belt_SortArray, the docs in that module also applies here, except the comparator is fixed and inlined", "rendered": "This is a specialized module for Belt_SortArray, the docs in that module also applies here, except the comparator is fixed and inlined", "breadcrumb": "Belt_SortArrayInt"},
{"href": "./api/Js_promise.html#value-catch", "title": "catch", "contents": "catch error t  t t  ", "rendered": "<h4 class='item'>let catch: (<a href=\"./api/Js_promise.html#type-error\">error</a> => <a href=\"./api/Js_promise.html#type-t\">t</a>('a), <a href=\"./api/Js_promise.html#type-t\">t</a>('a)) => <a href=\"./api/Js_promise.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-then_", "title": "then_", "contents": "then_ t  t t  ", "rendered": "<h4 class='item'>let then_: ('a => <a href=\"./api/Js_promise.html#type-t\">t</a>('b), <a href=\"./api/Js_promise.html#type-t\">t</a>('a)) => <a href=\"./api/Js_promise.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-race", "title": "race", "contents": "race array t t ", "rendered": "<h4 class='item'>let race: array(<a href=\"./api/Js_promise.html#type-t\">t</a>('a)) => <a href=\"./api/Js_promise.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-all6", "title": "all6", "contents": "all6 t t t t t t t ", "rendered": "<h4 class='item'>let all6: (\n  <a href=\"./api/Js_promise.html#type-t\">t</a>('a0),\n  <a href=\"./api/Js_promise.html#type-t\">t</a>('a1),\n  <a href=\"./api/Js_promise.html#type-t\">t</a>('a2),\n  <a href=\"./api/Js_promise.html#type-t\">t</a>('a3),\n  <a href=\"./api/Js_promise.html#type-t\">t</a>('a4),\n  <a href=\"./api/Js_promise.html#type-t\">t</a>('a5)\n) => <a href=\"./api/Js_promise.html#type-t\">t</a>(('a0, 'a1, 'a2, 'a3, 'a4, 'a5))</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-all5", "title": "all5", "contents": "all5 t t t t t t ", "rendered": "<h4 class='item'>let all5: (<a href=\"./api/Js_promise.html#type-t\">t</a>('a0), <a href=\"./api/Js_promise.html#type-t\">t</a>('a1), <a href=\"./api/Js_promise.html#type-t\">t</a>('a2), <a href=\"./api/Js_promise.html#type-t\">t</a>('a3), <a href=\"./api/Js_promise.html#type-t\">t</a>('a4)) => <a href=\"./api/Js_promise.html#type-t\">t</a>(\n  ('a0, 'a1, 'a2, 'a3, 'a4)\n)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-all4", "title": "all4", "contents": "all4 t t t t t ", "rendered": "<h4 class='item'>let all4: (<a href=\"./api/Js_promise.html#type-t\">t</a>('a0), <a href=\"./api/Js_promise.html#type-t\">t</a>('a1), <a href=\"./api/Js_promise.html#type-t\">t</a>('a2), <a href=\"./api/Js_promise.html#type-t\">t</a>('a3)) => <a href=\"./api/Js_promise.html#type-t\">t</a>(\n  ('a0, 'a1, 'a2, 'a3)\n)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-all3", "title": "all3", "contents": "all3 t t t t ", "rendered": "<h4 class='item'>let all3: (<a href=\"./api/Js_promise.html#type-t\">t</a>('a0), <a href=\"./api/Js_promise.html#type-t\">t</a>('a1), <a href=\"./api/Js_promise.html#type-t\">t</a>('a2)) => <a href=\"./api/Js_promise.html#type-t\">t</a>(('a0, 'a1, 'a2))</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-all2", "title": "all2", "contents": "all2 t t t ", "rendered": "<h4 class='item'>let all2: (<a href=\"./api/Js_promise.html#type-t\">t</a>('a0), <a href=\"./api/Js_promise.html#type-t\">t</a>('a1)) => <a href=\"./api/Js_promise.html#type-t\">t</a>(('a0, 'a1))</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-all", "title": "all", "contents": "all array t t array ", "rendered": "<h4 class='item'>let all: array(<a href=\"./api/Js_promise.html#type-t\">t</a>('a)) => <a href=\"./api/Js_promise.html#type-t\">t</a>(array('a))</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-reject", "title": "reject", "contents": "reject exn t ", "rendered": "<h4 class='item'>let reject: exn => <a href=\"./api/Js_promise.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-resolve", "title": "resolve", "contents": "resolve t ", "rendered": "<h4 class='item'>let resolve: 'a => <a href=\"./api/Js_promise.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#value-make", "title": "make", "contents": "make fn unit fn unit unit resolve reject t ", "rendered": "<h4 class='item'>let make: (\n  ~resolve: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a23 ], unit),\n  ~reject: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of exn ], unit)\n) => unit => <a href=\"./api/Js_promise.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#type-error", "title": "error", "contents": "error ", "rendered": "<h4 class='item'>type error</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Js_promise"},
{"href": "./api/Js_promise.html", "title": "Js_promise", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_promise"},
{"href": "./api/Belt_MutableStack.html#value-dynamicPopIter", "title": "dynamicPopIter", "contents": "dynamicPopIter s f  apply f to each element of s. The item is poped before applying f, s will be empty after this opeartion. This function is useful for worklist algorithm", "rendered": "<code>dynamicPopIter s f </code> apply <code>f</code> to each element of <code>s</code>. The item is poped before applying <code>f</code>, <code>s</code> will be empty after this opeartion. This function is useful for worklist algorithm", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-dynamicPopIter", "title": "dynamicPopIter", "contents": "dynamicPopIter t unit  unit  ", "rendered": "<h4 class='item'>let dynamicPopIter: (<a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a), 'a => unit) => unit</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-dynamicPopIterU", "title": "dynamicPopIterU", "contents": "dynamicPopIterU t fn unit unit  ", "rendered": "<h4 class='item'>let dynamicPopIterU: (\n  <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a110 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a), 'a => unit) => unit</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a111 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-top", "title": "top", "contents": "top t option ", "rendered": "<h4 class='item'>let top: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-topUndefined", "title": "topUndefined", "contents": "topUndefined t undefined ", "rendered": "<h4 class='item'>let topUndefined: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-pop", "title": "pop", "contents": "pop t option ", "rendered": "<h4 class='item'>let pop: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-popUndefined", "title": "popUndefined", "contents": "popUndefined t undefined ", "rendered": "<h4 class='item'>let popUndefined: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-push", "title": "push", "contents": "push t unit  ", "rendered": "<h4 class='item'>let push: (<a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a), 'a) => unit</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-copy", "title": "copy", "contents": "Discard all elements from the stack.", "rendered": "Discard all elements from the stack.", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-clear", "title": "clear", "contents": "Discard all elements from the stack.", "rendered": "Discard all elements from the stack.", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-make", "title": "make", "contents": "a new stack, initially empty.", "rendered": "a new stack, initially empty.", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-make", "title": "make", "contents": "Returns: a new stack, initially empty.\n\n", "rendered": "Returns: <p>a new stack, initially empty.</p>\n", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Belt_MutableStack.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html", "title": "Belt_MutableStack", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html", "title": "Belt_MutableStack", "contents": "This module implements stacks, with in-place modification.", "rendered": "This module implements stacks, with in-place modification.", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Belt_MutableStack.html", "title": "Belt_MutableStack", "contents": "First in last out stack.", "rendered": "First in last out stack.", "breadcrumb": "Belt_MutableStack"},
{"href": "./api/Js_cast.html#value-floatOfInt", "title": "floatOfInt", "contents": "floatOfInt i returns the float value of i", "rendered": "<code>floatOfInt i</code> returns the float value of <code>i</code>", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html#value-floatOfInt", "title": "floatOfInt", "contents": "floatOfInt int float ", "rendered": "<h4 class='item'>let floatOfInt: int => float</h4>", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html#value-intOfBool", "title": "intOfBool", "contents": "intOfBool b returns 1 for when b is true and 0 when b is false", "rendered": "<code>intOfBool b</code> returns <code>1</code> for when <code>b</code> is <code>true</code> and <code>0</code> when <code>b</code> is <code>false</code>", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html#value-intOfBool", "title": "intOfBool", "contents": "intOfBool bool int ", "rendered": "<h4 class='item'>let intOfBool: bool => int</h4>", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html", "title": "Js_cast", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html", "title": "Js_cast", "contents": "If for any reason, the runtime representation changes, those function will be modified accordingly.", "rendered": "If for any reason, the runtime representation changes, those function will be modified accordingly.", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html", "title": "Js_cast", "contents": "This modules acts as the single place for such conversion.", "rendered": "This modules acts as the <strong>single place</strong> for such conversion.", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html", "title": "Js_cast", "contents": "Different OCaml types might share the same represention in the BuckleScript runtime; while this is a compiler internal knowledge, applications might benefit from having a safe and zero cost conversion between those types.", "rendered": "Different OCaml types might share the same represention in the BuckleScript runtime; while this is a compiler internal knowledge, applications might benefit from having a safe and zero cost conversion between those types.", "breadcrumb": "Js_cast"},
{"href": "./api/Js_cast.html", "title": "Js_cast", "contents": "Safe cast between OCaml values which share the same runtime representation", "rendered": "Safe cast between OCaml values which share the same runtime representation", "breadcrumb": "Js_cast"},
{"href": "./api/Js_vector.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set t int unit   ", "rendered": "<h4 class='item'>let unsafe_set: (<a href=\"./api/Js_vector.html#type-t\">t</a>('a), int, 'a) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get t int  ", "rendered": "<h4 class='item'>let unsafe_get: (<a href=\"./api/Js_vector.html#type-t\">t</a>('a), int) => 'a</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-append", "title": "append", "contents": "append x a returns a fresh array with x appended to a", "rendered": "<code>append x a</code> returns a fresh array with x appended to a", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-append", "title": "append", "contents": "append t t  ", "rendered": "<h4 class='item'>let append: ('a, <a href=\"./api/Js_vector.html#type-t\">t</a>('a)) => <a href=\"./api/Js_vector.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "size", "rendered": "size", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "callback", "rendered": "callback", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "when n is negative", "rendered": "when <code>n</code> is negative", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "Raises: RangeErrorwhen n is negative\n\n", "rendered": "Raises: RangeError<p>when <code>n</code> is negative</p>\n", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "Param: fncallback\n\n", "rendered": "Param: fn<p>callback</p>\n", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "Param: nsize\n\n", "rendered": "Param: n<p>size</p>\n", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-init", "title": "init", "contents": "init int fn t  ", "rendered": "<h4 class='item'>let init: (int, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], 'a)) => <a href=\"./api/Js_vector.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; Sys.max_array_length. If the value of x is a floating-point number, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; Sys.max_array_length</code>. If the value of <code>x</code> is a floating-point number, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-make", "title": "make", "contents": "Array.make n x returns a fresh array of length n, initialized with x. All the elements of this new array are initially physically equal to x (in the sense of the == predicate). Consequently, if x is mutable, it is shared among all elements of the array, and modifying x through one of the array entries will modify all other entries at the same time.", "rendered": "<code>Array.make n x</code> returns a fresh array of length <code>n</code>, initialized with <code>x</code>. All the elements of this new array are initially physically equal to <code>x</code> (in the sense of the <code>==</code> predicate). Consequently, if <code>x</code> is mutable, it is shared among all elements of the array, and modifying <code>x</code> through one of the array entries will modify all other entries at the same time.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-make", "title": "make", "contents": "make int t  ", "rendered": "<h4 class='item'>let make: (int, 'a) => <a href=\"./api/Js_vector.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-set", "title": "set", "contents": "Raise Invalid_argument &quot;index out of bounds&quot; if n is outside the range 0 to Array.length a - 1.", "rendered": "Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside the range 0 to <code>Array.length a - 1</code>.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-set", "title": "set", "contents": "Array.set a n x modifies array a in place, replacing element number n with x. You can also write a.(n) &lt;- x instead of Array.set a n x.", "rendered": "<code>Array.set a n x</code> modifies array <code>a</code> in place, replacing element number <code>n</code> with <code>x</code>. You can also write <code>a.(n) &lt;- x</code> instead of <code>Array.set a n x</code>.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-set", "title": "set", "contents": "set t int unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Js_vector.html#type-t\">t</a>('a), int, 'a) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-get", "title": "get", "contents": "Raise Invalid_argument &quot;index out of bounds&quot; if n is outside the range 0 to (Array.length a - 1).", "rendered": "Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside the range 0 to <code>(Array.length a - 1)</code>.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-get", "title": "get", "contents": "Array.get a n returns the element number n of array a. The first element has number 0. The last element has number Array.length a - 1. You can also write a.(n) instead of Array.get a n.", "rendered": "<code>Array.get a n</code> returns the element number <code>n</code> of array <code>a</code>. The first element has number 0. The last element has number <code>Array.length a - 1</code>. You can also write <code>a.(n)</code> instead of <code>Array.get a n</code>.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-get", "title": "get", "contents": "get t int  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Js_vector.html#type-t\">t</a>('a), int) => 'a</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-length", "title": "length", "contents": "Return the length (number of elements) of the given array.", "rendered": "Return the length (number of elements) of the given array.", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Js_vector.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-foldRight", "title": "foldRight", "contents": "foldRight fn t   ", "rendered": "<h4 class='item'>let foldRight: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b0 * 'a0 ], 'a),\n  <a href=\"./api/Js_vector.html#type-t\">t</a>('b),\n  'a\n) => 'a</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft fn t   ", "rendered": "<h4 class='item'>let foldLeft: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a1 * 'b1 ], 'a),\n  'a,\n  <a href=\"./api/Js_vector.html#type-t\">t</a>('b)\n) => 'a</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-mapi", "title": "mapi", "contents": "mapi fn t t  ", "rendered": "<h4 class='item'>let mapi: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a2 ], 'b), <a href=\"./api/Js_vector.html#type-t\">t</a>('a)) => <a href=\"./api/Js_vector.html#type-t\">t</a>(\n  'b\n)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-map", "title": "map", "contents": "map fn t t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a3 ], 'b), <a href=\"./api/Js_vector.html#type-t\">t</a>('a)) => <a href=\"./api/Js_vector.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Js_vector.html#type-t\">t</a>('a) => list('a)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-iteri", "title": "iteri", "contents": "iteri fn unit t unit  ", "rendered": "<h4 class='item'>let iteri: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a4 ], unit),\n  <a href=\"./api/Js_vector.html#type-t\">t</a>('a)\n) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-iter", "title": "iter", "contents": "iter fn unit t unit  ", "rendered": "<h4 class='item'>let iter: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a5 ], unit), <a href=\"./api/Js_vector.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-memByRef", "title": "memByRef", "contents": "memByRef t bool  ", "rendered": "<h4 class='item'>let memByRef: ('a, <a href=\"./api/Js_vector.html#type-t\">t</a>('a)) => bool</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-copy", "title": "copy", "contents": "shallow copy", "rendered": "shallow copy", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Js_vector.html#type-t\">t</a>('a) => <a href=\"./api/Js_vector.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-pushBack", "title": "pushBack", "contents": "pushBack t unit  ", "rendered": "<h4 class='item'>let pushBack: ('a, <a href=\"./api/Js_vector.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-empty", "title": "empty", "contents": "empty t unit ", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Js_vector.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#value-filterInPlace", "title": "filterInPlace", "contents": "filterInPlace fn bool t unit  ", "rendered": "<h4 class='item'>let filterInPlace: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a6 ], bool),\n  <a href=\"./api/Js_vector.html#type-t\">t</a>('a)\n) => unit</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#type-t", "title": "t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html", "title": "Js_vector", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html", "title": "Js_vector", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_vector"},
{"href": "./api/Js_vector.html#Js_vector", "title": "Js_vector", "contents": "", "rendered": "", "breadcrumb": "Js_vector"},
{"href": "./api/Belt_HashMap.html#value-ofArray", "title": "ofArray", "contents": "ofArray array id t  id", "rendered": "<h4 class='item'>let ofArray: (\n  array(('key, 'value)),\n  ~id: <a href=\"./api/Belt_HashMap.html#type-id\">id</a>('key, 'id)\n) => <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('a, 'a, 'a) => array(int)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array unit  ", "rendered": "<h4 class='item'>let mergeMany: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  array(('key, 'value))\n) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-fromArray", "title": "fromArray", "contents": "fromArray array id t  id", "rendered": "<h4 class='item'>let fromArray: (\n  array(('key, 'value)),\n  ~id: <a href=\"./api/Belt_HashMap.html#type-id\">id</a>('key, 'id)\n) => <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('a, 'value, 'a) => array('value)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'a, 'a) => array('key)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id) => array(('key, 'value))</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-size", "title": "size", "contents": "size tbl returns the number of bindings in tbl. It takes constant time.", "rendered": "<code>size tbl</code> returns the number of bindings in <code>tbl</code>. It takes constant time.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('a, 'a, 'a) => int</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-keepMapInPlace", "title": "keepMapInPlace", "contents": "keepMapInPlace t option   unit  ", "rendered": "<h4 class='item'>let keepMapInPlace: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  ('key, 'value) => option('value)\n) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-keepMapInPlaceU", "title": "keepMapInPlaceU", "contents": "keepMapInPlaceU t fn option unit  ", "rendered": "<h4 class='item'>let keepMapInPlaceU: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'key * 'value ], option('value))\n) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-reduce", "title": "reduce", "contents": "The order in which the bindings are passed to f is unspecified. However, if the table contains several bindings for the same key, they are passed to f in reverse order of introduction, that is, the most recent binding is passed first.", "rendered": "The order in which the bindings are passed to <code>f</code> is unspecified. However, if the table contains several bindings for the same key, they are passed to <code>f</code> in reverse order of introduction, that is, the most recent binding is passed first.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-reduce", "title": "reduce", "contents": "reduce  tbl init f computes (f kN dN ... (f k1 d1 init)...), where k1 ... kN are the keys of all bindings in tbl, and d1 ... dN are the associated values. Each binding is presented exactly once to f.", "rendered": "<code>reduce  tbl init f</code> computes <code>(f kN dN ... (f k1 d1 init)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>tbl</code>, and <code>d1 ... dN</code> are the associated values. Each binding is presented exactly once to <code>f</code>.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-reduce", "title": "reduce", "contents": "reduce t      ", "rendered": "<h4 class='item'>let reduce: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  'c,\n  ('c, 'key, 'value) => 'c\n) => 'c</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c3 * 'key0 * 'value0 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-forEach", "title": "forEach", "contents": "forEach tbl f applies f to all bindings in table tbl. f receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to f.", "rendered": "<code>forEach tbl f</code> applies <code>f</code> to all bindings in table <code>tbl</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to <code>f</code>.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-forEach", "title": "forEach", "contents": "forEach t unit   unit  ", "rendered": "<h4 class='item'>let forEach: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  ('key, 'value) => unit\n) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'key1 * 'value1 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-remove", "title": "remove", "contents": "remove t unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id), 'key) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-has", "title": "has", "contents": "has tbl x checks if x is bound in tbl.", "rendered": "<code>has tbl x</code> checks if <code>x</code> is bound in <code>tbl</code>.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-has", "title": "has", "contents": "has t bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id), 'key) => bool</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-get", "title": "get", "contents": "get t option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id), 'key) => option('value)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id) => <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-set", "title": "set", "contents": "set tbl k v if k does not exist, add the binding k,v, otherwise, update the old value with the new v", "rendered": "<code>set tbl k v</code> if <code>k</code> does not exist, add the binding <code>k,v</code>, otherwise, update the old value with the new <code>v</code>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-set", "title": "set", "contents": "set t unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id), 'key, 'value) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('a, 'a, 'a) => bool</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-clear", "title": "clear", "contents": "Empty a hash table.", "rendered": "Empty a hash table.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_HashMap.html#type-t\">t</a>('key, 'value, 'id) => unit</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#value-make", "title": "make", "contents": "make int id t hintSize id", "rendered": "<h4 class='item'>let make: (~hintSize: int, ~id: <a href=\"./api/Belt_HashMap.html#type-id\">id</a>('key, 'id)) => <a href=\"./api/Belt_HashMap.html#type-t\">t</a>(\n  'key,\n  'value,\n  'id\n)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#type-id", "title": "id", "contents": "id hashable", "rendered": "<h4 class='item'>type id('a, 'id) = <a href=\"./api/Belt_Id.html#type-hashable\" title=\"Belt_Id.hashable\">hashable</a>('a, 'id)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#type-t", "title": "t", "contents": "The type of hash tables from type &#39;key to type &#39;value.", "rendered": "The type of hash tables from type <code>&#39;key</code> to type <code>&#39;value</code>.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('key, 'value, 'id)</h4>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#module-String", "title": "String", "contents": "Specalized when key type is string, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>string</code>, more efficient than the gerneic type", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html#module-Int", "title": "Int", "contents": "Specalized when key type is int, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>int</code>, more efficient than the gerneic type", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "Since this is an mutable data strucure, s1 will contain two pairs.", "rendered": "Since this is an mutable data strucure, <code>s1</code> will contain two pairs.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "code block", "contents": "let () =\n  add s1 0 \"3\";\n  add s1 1 \"3\"", "rendered": "<pre><code>let () =\n  add s1 0 \"3\";\n  add s1 1 \"3\"</code></pre>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "We can add elements to the collection:", "rendered": "We can add elements to the collection:", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "code block", "contents": "val s0 :  (int, I0.identity) t\nval s1 :  (int, I1.identity) t", "rendered": "<pre><code>val s0 :  (int, I0.identity) t\nval s1 :  (int, I1.identity) t</code></pre>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "Here the compiler would infer s0 and s1 having different type so that it would not mix.", "rendered": "Here the compiler would infer <code>s0</code> and <code>s1</code> having different type so that it would not mix.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "The invariant must be held: for two elements who are equal, their hashed value should be the same", "rendered": "The invariant must be held: for two elements who are <em>equal</em>, their hashed value should be the same", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "code block", "contents": "type t = int \nmodule I0 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff_ff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s0 : (_, string,_) t = make ~hintSize:40 ~id:(module I0)\nmodule I1 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s1 : (_, string,_) t  = make ~hintSize:40 ~id:(module I1)", "rendered": "<pre><code>type t = int \nmodule I0 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff_ff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s0 : (_, string,_) t = make ~hintSize:40 ~id:(module I0)\nmodule I1 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s1 : (_, string,_) t  = make ~hintSize:40 ~id:(module I1)</code></pre>", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "For example:", "rendered": "For example:", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "All data are parameterized by not its only type but also a unique identity in the time of initialization, so that two HashMaps of ints initialized with different hash functions will have different type.", "rendered": "All data are parameterized by not its only type but also a unique identity in the time of initialization, so that two <em>HashMaps of ints</em> initialized with different <em>hash</em> functions will have different type.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_HashMap.html", "title": "Belt_HashMap", "contents": "A mutable Hash map which allows customized hash behavior.", "rendered": "A <strong>mutable</strong> Hash map which allows customized hash behavior.", "breadcrumb": "Belt_HashMap"},
{"href": "./api/Belt_SetDict.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('a, 'a) => unit</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-split", "title": "split", "contents": "split t cmp t t bool   cmp", "rendered": "<h4 class='item'>let split: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  'value,\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => ((<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)), bool)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-getExn", "title": "getExn", "contents": "getExn t cmp   cmp", "rendered": "<h4 class='item'>let getExn: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  'value,\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => 'value</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t cmp undefined   cmp", "rendered": "<h4 class='item'>let getUndefined: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  'value,\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-get", "title": "get", "contents": "get t cmp option   cmp", "rendered": "<h4 class='item'>let get: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  'value,\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => option('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => option('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => option('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-toArray", "title": "toArray", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => array('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => list('value)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id) => int</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-partition", "title": "partition", "contents": "partition m p returns a pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition m p</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-partition", "title": "partition", "contents": "partition t bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), 'value => bool) => (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)\n)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value14 ], bool)\n) => (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id))</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-keep", "title": "keep", "contents": "keep m p returns the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep m p</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-keep", "title": "keep", "contents": "keep t bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), 'value => bool) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value15 ], bool)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-some", "title": "some", "contents": "some t bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), 'value => bool) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value16 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-every", "title": "every", "contents": "every p s checks if all elements of the set satisfy the predicate p. Order unspecified", "rendered": "<code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-every", "title": "every", "contents": "every t bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), 'value => bool) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value17 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-reduce", "title": "reduce", "contents": "In increasing order.", "rendered": "In increasing order.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), 'a, ('a, 'value) => 'a) => 'a</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a107 * 'value18 ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-forEach", "title": "forEach", "contents": "forEach s f applies f in turn to all elements of s. In increasing order", "rendered": "<code>forEach s f</code> applies <code>f</code> in turn to all elements of <code>s</code>. In increasing order", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id), 'value => unit) => unit</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'value19 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-eq", "title": "eq", "contents": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "rendered": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-eq", "title": "eq", "contents": "eq t t cmp bool   cmp", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-cmp", "title": "cmp", "contents": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "rendered": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-cmp", "title": "cmp", "contents": "cmp t t cmp int   cmp", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => int</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-subset", "title": "subset", "contents": "subset t t cmp bool   cmp", "rendered": "<h4 class='item'>let subset: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-diff", "title": "diff", "contents": "diff t t cmp t   cmp", "rendered": "<h4 class='item'>let diff: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-intersect", "title": "intersect", "contents": "intersect t t cmp t   cmp", "rendered": "<h4 class='item'>let intersect: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-union", "title": "union", "contents": "union t t cmp t   cmp", "rendered": "<h4 class='item'>let union: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array cmp t   cmp", "rendered": "<h4 class='item'>let removeMany: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  array('value),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-remove", "title": "remove", "contents": "remove m x If x was not in m, m is returned reference unchanged.", "rendered": "<code>remove m x</code> If <code>x</code> was not in <code>m</code>, <code>m</code> is returned reference unchanged.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-remove", "title": "remove", "contents": "remove t cmp t   cmp", "rendered": "<h4 class='item'>let remove: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  'value,\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array cmp t   cmp", "rendered": "<h4 class='item'>let mergeMany: (\n  <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id),\n  array('value),\n  ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('value, 'id)\n) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-add", "title": "add", "contents": "add s x If x was already in s, s is returned unchanged.", "rendered": "<code>add s x</code> If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-add", "title": "add", "contents": "add t cmp t   cmp", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('k, 'id), 'k, ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('k, 'id)) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('k, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-has", "title": "has", "contents": "has t cmp bool   cmp", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_SetDict.html#type-t\">t</a>('k, 'id), 'k, ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('k, 'id)) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('a, 'a) => bool</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array('value) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-fromArray", "title": "fromArray", "contents": "fromArray array cmp t  cmp", "rendered": "<h4 class='item'>let fromArray: (array('k), ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('k, 'id)) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('k, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array t ", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: array('value) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-ofArray", "title": "ofArray", "contents": "ofArray array cmp t  cmp", "rendered": "<h4 class='item'>let ofArray: (array('k), ~cmp: <a href=\"./api/Belt_SetDict.html#type-cmp\">cmp</a>('k, 'id)) => <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('k, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_SetDict.html#type-t\">t</a>('value, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#type-cmp", "title": "cmp", "contents": "cmp cmp", "rendered": "<h4 class='item'>type cmp('key, 'id) = <a href=\"./api/Belt_Id.html#type-cmp\" title=\"Belt_Id.cmp\">cmp</a>('key, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('key, 'id)</h4>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html", "title": "Belt_SetDict", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html", "title": "Belt_SetDict", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_SetDict.html#Belt_SetDict", "title": "Belt_SetDict", "contents": "", "rendered": "", "breadcrumb": "Belt_SetDict"},
{"href": "./api/Belt_HashSetInt.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => array(int)</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array key unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, array(<a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>)) => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>) => <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array(<a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>) => <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => array(<a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => int</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-reduce", "title": "reduce", "contents": "reduce t key     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, 'c, ('c, <a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>) => 'c) => 'c</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>,\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'c8 * key ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-forEach", "title": "forEach", "contents": "forEach t key unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetInt.html#type-key\">key</a> => unit) => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of key ], unit)) => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-remove", "title": "remove", "contents": "remove t key unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-add", "title": "add", "contents": "add t key unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_HashSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_HashSetInt.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#value-make", "title": "make", "contents": "make int t hintSize", "rendered": "<h4 class='item'>let make: (~hintSize: int) => <a href=\"./api/Belt_HashSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html#type-key", "title": "key", "contents": "key int", "rendered": "<h4 class='item'>type key = int</h4>", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html", "title": "Belt_HashSetInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html", "title": "Belt_HashSetInt", "contents": "See HashSet", "rendered": "<strong>See</strong> HashSet", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html", "title": "Belt_HashSetInt", "contents": "It is more efficient in general, the API is the same with HashSet except its key type is fixed, and identity is not needed(using the built-in one)", "rendered": "It is more efficient in general, the API is the same with HashSet except its key type is fixed, and identity is not needed(using the built-in one)", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Belt_HashSetInt.html", "title": "Belt_HashSetInt", "contents": "This module is HashSet specialized with key type to be a primitive type.", "rendered": "This module is HashSet specialized with key type to be a primitive type.", "breadcrumb": "Belt_HashSetInt"},
{"href": "./api/Js_array.html#value-somei", "title": "somei", "contents": "somei int bool   t bool  ", "rendered": "<h4 class='item'>let somei: (('a, int) => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => bool</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-some", "title": "some", "contents": "some bool  t bool  ", "rendered": "<h4 class='item'>let some: ('a => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => bool</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-reduceRighti", "title": "reduceRighti", "contents": "reduceRighti int    t   ", "rendered": "<h4 class='item'>let reduceRighti: (('b, 'a, int) => 'b, 'b, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => 'b</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-reduceRight", "title": "reduceRight", "contents": "reduceRight   t   ", "rendered": "<h4 class='item'>let reduceRight: (('b, 'a) => 'b, 'b, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => 'b</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-reducei", "title": "reducei", "contents": "reducei int    t   ", "rendered": "<h4 class='item'>let reducei: (('b, 'a, int) => 'b, 'b, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => 'b</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-reduce", "title": "reduce", "contents": "reduce   t   ", "rendered": "<h4 class='item'>let reduce: (('b, 'a) => 'b, 'b, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => 'b</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-mapi", "title": "mapi", "contents": "mapi int   t t  ", "rendered": "<h4 class='item'>let mapi: (('a, int) => 'b, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-map", "title": "map", "contents": "map  t t  ", "rendered": "<h4 class='item'>let map: ('a => 'b, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-forEachi", "title": "forEachi", "contents": "forEachi int unit   t unit  ", "rendered": "<h4 class='item'>let forEachi: (('a, int) => unit, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-forEach", "title": "forEach", "contents": "forEach unit  t unit  ", "rendered": "<h4 class='item'>let forEach: ('a => unit, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-findIndexi", "title": "findIndexi", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-findIndexi", "title": "findIndexi", "contents": "findIndexi int bool   t int  ", "rendered": "<h4 class='item'>let findIndexi: (('a, int) => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-findIndex", "title": "findIndex", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-findIndex", "title": "findIndex", "contents": "findIndex bool  t int  ", "rendered": "<h4 class='item'>let findIndex: ('a => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-findi", "title": "findi", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-findi", "title": "findi", "contents": "findi int bool   t option  ", "rendered": "<h4 class='item'>let findi: (('a, int) => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => option('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-find", "title": "find", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-find", "title": "find", "contents": "find bool  t option  ", "rendered": "<h4 class='item'>let find: ('a => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => option('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-filteri", "title": "filteri", "contents": "filteri int bool   t t  ", "rendered": "<h4 class='item'>let filteri: (('a, int) => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-filter", "title": "filter", "contents": "should we use bool or boolan seems they are intechangeable here", "rendered": "should we use <code>bool</code> or <code>boolan</code> seems they are intechangeable here", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-filter", "title": "filter", "contents": "filter bool  t t  ", "rendered": "<h4 class='item'>let filter: ('a => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-everyi", "title": "everyi", "contents": "everyi int bool   t bool  ", "rendered": "<h4 class='item'>let everyi: (('a, int) => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => bool</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-every", "title": "every", "contents": "every bool  t bool  ", "rendered": "<h4 class='item'>let every: ('a => bool, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => bool</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-toLocaleString", "title": "toLocaleString", "contents": "toLocaleString t string ", "rendered": "<h4 class='item'>let toLocaleString: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => string</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-toString", "title": "toString", "contents": "toString t string ", "rendered": "<h4 class='item'>let toString: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => string</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-slice_start", "title": "slice_start", "contents": "slice_start int t t  ", "rendered": "<h4 class='item'>let slice_start: (int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-sliceFrom", "title": "sliceFrom", "contents": "sliceFrom int t t  ", "rendered": "<h4 class='item'>let sliceFrom: (int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-slice_copy", "title": "slice_copy", "contents": "slice_copy unit t t  ", "rendered": "<h4 class='item'>let slice_copy: (unit, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-slice", "title": "slice", "contents": "slice int int t t start end_ ", "rendered": "<h4 class='item'>let slice: (~start: int, ~end_: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-lastIndexOf_start", "title": "lastIndexOf_start", "contents": "lastIndexOf_start t int  ", "rendered": "<h4 class='item'>let lastIndexOf_start: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-lastIndexOfFrom", "title": "lastIndexOfFrom", "contents": "lastIndexOfFrom int t int  from ", "rendered": "<h4 class='item'>let lastIndexOfFrom: ('a, ~from: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-lastIndexOf", "title": "lastIndexOf", "contents": "lastIndexOf t int  ", "rendered": "<h4 class='item'>let lastIndexOf: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-joinWith", "title": "joinWith", "contents": "joinWith string t string  ", "rendered": "<h4 class='item'>let joinWith: (string, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => string</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-join", "title": "join", "contents": "join t string ", "rendered": "<h4 class='item'>let join: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => string</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-indexOfFrom", "title": "indexOfFrom", "contents": "indexOfFrom int t int  from ", "rendered": "<h4 class='item'>let indexOfFrom: ('a, ~from: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-indexOf", "title": "indexOf", "contents": "indexOf t int  ", "rendered": "<h4 class='item'>let indexOf: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-includes", "title": "includes", "contents": "ES2016", "rendered": "ES2016", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-includes", "title": "includes", "contents": "includes t bool  ", "rendered": "<h4 class='item'>let includes: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => bool</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-concatMany", "title": "concatMany", "contents": "concatMany array t t t  ", "rendered": "<h4 class='item'>let concatMany: (array(<a href=\"./api/Js_array.html#type-t\">t</a>('a)), <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-concat", "title": "concat", "contents": "concat t t t  ", "rendered": "<h4 class='item'>let concat: (<a href=\"./api/Js_array.html#type-t\">t</a>('a), <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-append", "title": "append", "contents": "append t t  ", "rendered": "<h4 class='item'>let append: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-unshiftMany", "title": "unshiftMany", "contents": "unshiftMany array t int  ", "rendered": "<h4 class='item'>let unshiftMany: (array('a), <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-unshift", "title": "unshift", "contents": "unshift t int  ", "rendered": "<h4 class='item'>let unshift: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-removeCountInPlace", "title": "removeCountInPlace", "contents": "removeCountInPlace int int t t pos count ", "rendered": "<h4 class='item'>let removeCountInPlace: (\n  ~pos: int,\n  ~count: int,\n  <a href=\"./api/Js_array.html#type-t\">t</a>('a)\n) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-removeFromInPlace", "title": "removeFromInPlace", "contents": "removeFromInPlace int t t pos ", "rendered": "<h4 class='item'>let removeFromInPlace: (~pos: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-spliceInPlace", "title": "spliceInPlace", "contents": "spliceInPlace int int array t t pos remove add ", "rendered": "<h4 class='item'>let spliceInPlace: (\n  ~pos: int,\n  ~remove: int,\n  ~add: array('a),\n  <a href=\"./api/Js_array.html#type-t\">t</a>('a)\n) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-sortInPlaceWith", "title": "sortInPlaceWith", "contents": "sortInPlaceWith int   t t  ", "rendered": "<h4 class='item'>let sortInPlaceWith: (('a, 'a) => int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-sortInPlace", "title": "sortInPlace", "contents": "sortInPlace t t ", "rendered": "<h4 class='item'>let sortInPlace: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-shift", "title": "shift", "contents": "shift t option ", "rendered": "<h4 class='item'>let shift: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-reverseInPlace", "title": "reverseInPlace", "contents": "reverseInPlace t t ", "rendered": "<h4 class='item'>let reverseInPlace: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-pushMany", "title": "pushMany", "contents": "pushMany array t int  ", "rendered": "<h4 class='item'>let pushMany: (array('a), <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-push", "title": "push", "contents": "push t int  ", "rendered": "<h4 class='item'>let push: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-pop", "title": "pop", "contents": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push", "rendered": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-pop", "title": "pop", "contents": "pop t option ", "rendered": "<h4 class='item'>let pop: <a href=\"./api/Js_array.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fillRangeInPlace", "title": "fillRangeInPlace", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fillRangeInPlace", "title": "fillRangeInPlace", "contents": "fillRangeInPlace int int t t  start end_ ", "rendered": "<h4 class='item'>let fillRangeInPlace: (\n  'a,\n  ~start: int,\n  ~end_: int,\n  <a href=\"./api/Js_array.html#type-t\">t</a>('a)\n) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fillFromInPlace", "title": "fillFromInPlace", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fillFromInPlace", "title": "fillFromInPlace", "contents": "fillFromInPlace int t t  from ", "rendered": "<h4 class='item'>let fillFromInPlace: ('a, ~from: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fillInPlace", "title": "fillInPlace", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fillInPlace", "title": "fillInPlace", "contents": "fillInPlace t t  ", "rendered": "<h4 class='item'>let fillInPlace: ('a, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copyWithinFromRange", "title": "copyWithinFromRange", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copyWithinFromRange", "title": "copyWithinFromRange", "contents": "copyWithinFromRange int int int t t to_ start end_ ", "rendered": "<h4 class='item'>let copyWithinFromRange: (\n  ~to_: int,\n  ~start: int,\n  ~end_: int,\n  <a href=\"./api/Js_array.html#type-t\">t</a>('a)\n) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copyWithinFrom", "title": "copyWithinFrom", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copyWithinFrom", "title": "copyWithinFrom", "contents": "copyWithinFrom int int t t to_ from ", "rendered": "<h4 class='item'>let copyWithinFrom: (~to_: int, ~from: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copyWithin", "title": "copyWithin", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-copyWithin", "title": "copyWithin", "contents": "copyWithin int t t to_ ", "rendered": "<h4 class='item'>let copyWithin: (~to_: int, <a href=\"./api/Js_array.html#type-t\">t</a>('a)) => <a href=\"./api/Js_array.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-length", "title": "length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-isArray", "title": "isArray", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-isArray", "title": "isArray", "contents": "isArray bool ", "rendered": "<h4 class='item'>let isArray: 'a => bool</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fromMap", "title": "fromMap", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-fromMap", "title": "fromMap", "contents": "fromMap array_like  array  ", "rendered": "<h4 class='item'>let fromMap: (<a href=\"./api/Js_array.html#type-array_like\">array_like</a>('a), 'a => 'b) => array('b)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-from", "title": "from", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#value-from", "title": "from", "contents": "from array_like array ", "rendered": "<h4 class='item'>let from: <a href=\"./api/Js_array.html#type-array_like\">array_like</a>('a) => array('b)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#type-array_like", "title": "array_like", "contents": "array_like ", "rendered": "<h4 class='item'>type array_like('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html#type-t", "title": "t", "contents": "t array", "rendered": "<h4 class='item'>type t('a) = array('a)</h4>", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html", "title": "Js_array", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_array"},
{"href": "./api/Js_array.html", "title": "Js_array", "contents": "JavaScript Array API", "rendered": "JavaScript Array API", "breadcrumb": "Js_array"},
{"href": "./api/Belt_internalBucketsType.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty container bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('a, 'a, 'a) => bool</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-clear", "title": "clear", "contents": "clear container unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-make", "title": "make", "contents": "make int container hash eq hintSize", "rendered": "<h4 class='item'>let make: (\n  ~hash: 'hash,\n  ~eq: 'eq,\n  ~hintSize: int\n) => <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'a)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-emptyOpt", "title": "emptyOpt", "contents": "emptyOpt undefined", "rendered": "<h4 class='item'>let emptyOpt: <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-return", "title": "return", "contents": "return opt ", "rendered": "<h4 class='item'>let return: 'a => <a href=\"./api/Belt_internalBucketsType.html#type-opt\">opt</a>('a)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-toOpt", "title": "toOpt", "contents": "toOpt opt option ", "rendered": "<h4 class='item'>let toOpt: <a href=\"./api/Belt_internalBucketsType.html#type-opt\">opt</a>('a) => option('a)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-eq", "title": "eq", "contents": "eq container ", "rendered": "<h4 class='item'>let eq: <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c) => 'eq</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-hash", "title": "hash", "contents": "hash container ", "rendered": "<h4 class='item'>let hash: <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c) => 'hash</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-buckets", "title": "buckets", "contents": "buckets container array opt ", "rendered": "<h4 class='item'>let buckets: <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c) => array(<a href=\"./api/Belt_internalBucketsType.html#type-opt\">opt</a>('c))</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-bucketsSet", "title": "bucketsSet", "contents": "bucketsSet container array opt unit  ", "rendered": "<h4 class='item'>let bucketsSet: (\n  <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c),\n  array(<a href=\"./api/Belt_internalBucketsType.html#type-opt\">opt</a>('c))\n) => unit</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-size", "title": "size", "contents": "size container int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c) => int</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-sizeSet", "title": "sizeSet", "contents": "sizeSet container int unit  ", "rendered": "<h4 class='item'>let sizeSet: (<a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c), int) => unit</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#value-container", "title": "container", "contents": "container int array opt container size buckets hash eq", "rendered": "<h4 class='item'>let container: (\n  ~size: int,\n  ~buckets: array(<a href=\"./api/Belt_internalBucketsType.html#type-opt\">opt</a>('c)),\n  ~hash: 'hash,\n  ~eq: 'eq\n) => <a href=\"./api/Belt_internalBucketsType.html#type-container\">container</a>('hash, 'eq, 'c)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#type-container", "title": "container", "contents": "container ", "rendered": "<h4 class='item'>type container('hash, 'eq, 'c)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html", "title": "Belt_internalBucketsType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#type-opt", "title": "opt", "contents": "opt undefined", "rendered": "<h4 class='item'>type opt('a) = <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html", "title": "Belt_internalBucketsType", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html", "title": "Belt_internalBucketsType", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_internalBucketsType.html#Belt_internalBucketsType", "title": "Belt_internalBucketsType", "contents": "", "rendered": "", "breadcrumb": "Belt_internalBucketsType"},
{"href": "./api/Belt_Range.html#value-someBy", "title": "someBy", "contents": "equivalent to Belt.Array.(some (rangeBy start finish ~step) p)", "rendered": "equivalent to <code>Belt.Array.(some (rangeBy start finish ~step) p)</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-someBy", "title": "someBy", "contents": "See rangeBy", "rendered": "<strong>See</strong> rangeBy", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-someBy", "title": "someBy", "contents": "someBy start finish ~step  p", "rendered": "<code>someBy start finish ~step  p</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-someBy", "title": "someBy", "contents": "someBy int int int int bool  bool   step ", "rendered": "<h4 class='item'>let someBy: (int, int, ~step: int, int => bool) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-someByU", "title": "someByU", "contents": "someByU int int int fn bool bool   step ", "rendered": "<h4 class='item'>let someByU: (\n  int,\n  int,\n  ~step: int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-some", "title": "some", "contents": "equivalent to Belt.Array.(some (range start finish) p)", "rendered": "equivalent to <code>Belt.Array.(some (range start finish) p)</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-some", "title": "some", "contents": "some start finish p", "rendered": "<code>some start finish p</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-some", "title": "some", "contents": "some int int int bool  bool   ", "rendered": "<h4 class='item'>let some: (int, int, int => bool) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-someU", "title": "someU", "contents": "someU int int fn bool bool   ", "rendered": "<h4 class='item'>let someU: (int, int, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], bool)) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-everyBy", "title": "everyBy", "contents": "equivalent to Belt.Array.(every (rangeBy start finish ~step) p)", "rendered": "equivalent to <code>Belt.Array.(every (rangeBy start finish ~step) p)</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-everyBy", "title": "everyBy", "contents": "See rangeBy", "rendered": "<strong>See</strong> rangeBy", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-everyBy", "title": "everyBy", "contents": "everyBy start finish ~step p", "rendered": "<code>everyBy start finish ~step p</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-everyBy", "title": "everyBy", "contents": "everyBy int int int int bool  bool   step ", "rendered": "<h4 class='item'>let everyBy: (int, int, ~step: int, int => bool) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-everyByU", "title": "everyByU", "contents": "everyByU int int int fn bool bool   step ", "rendered": "<h4 class='item'>let everyByU: (\n  int,\n  int,\n  ~step: int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-every", "title": "every", "contents": "equivalent to Belt.Array.(every (range start finish) p )", "rendered": "equivalent to <code>Belt.Array.(every (range start finish) p )</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-every", "title": "every", "contents": "every start finish p", "rendered": "<code>every start finish p</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-every", "title": "every", "contents": "every int int int bool  bool   ", "rendered": "<h4 class='item'>let every: (int, int, int => bool) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-everyU", "title": "everyU", "contents": "everyU int int fn bool bool   ", "rendered": "<h4 class='item'>let everyU: (\n  int,\n  int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-forEach", "title": "forEach", "contents": "equivalent to Belt.Array.(forEach (range start finish) action)", "rendered": "equivalent to <code>Belt.Array.(forEach (range start finish) action)</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-forEach", "title": "forEach", "contents": "forEach start finish action", "rendered": "<code>forEach start finish action</code>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-forEach", "title": "forEach", "contents": "forEach int int int unit  unit   ", "rendered": "<h4 class='item'>let forEach: (int, int, int => unit) => unit</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html#value-forEachU", "title": "forEachU", "contents": "forEachU int int fn unit unit   ", "rendered": "<h4 class='item'>let forEachU: (\n  int,\n  int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], unit)\n) => unit</h4>", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html", "title": "Belt_Range", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_Range.html", "title": "Belt_Range", "contents": "A small module to provide a inclusive range operations [start, finsish], it use a for-loop internally instead of creating an array", "rendered": "A small module to provide a inclusive range operations <code>[start, finsish]</code>, it use a for-loop internally instead of creating an array", "breadcrumb": "Belt_Range"},
{"href": "./api/Belt_HashSet.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'a) => array(int)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id), array('a)) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-fromArray", "title": "fromArray", "contents": "fromArray array id t  id", "rendered": "<h4 class='item'>let fromArray: (array('a), ~id: <a href=\"./api/Belt_HashSet.html#type-id\">id</a>('a, 'id)) => <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-ofArray", "title": "ofArray", "contents": "ofArray array id t  id", "rendered": "<h4 class='item'>let ofArray: (array('a), ~id: <a href=\"./api/Belt_HashSet.html#type-id\">id</a>('a, 'id)) => <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id) => array('a)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'a) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id) => int</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-reduce", "title": "reduce", "contents": "Order unspecified.", "rendered": "Order unspecified.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id), 'c, ('c, 'a) => 'c) => 'c</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'c6 * 'a74 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-forEach", "title": "forEach", "contents": "Order unspecified.", "rendered": "Order unspecified.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id), 'a => unit) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a75 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-remove", "title": "remove", "contents": "remove t unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id), 'a) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-has", "title": "has", "contents": "has t bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id), 'a) => bool</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id) => <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-add", "title": "add", "contents": "add t unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id), 'a) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'a) => bool</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id) => unit</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#value-make", "title": "make", "contents": "make int id t hintSize id", "rendered": "<h4 class='item'>let make: (~hintSize: int, ~id: <a href=\"./api/Belt_HashSet.html#type-id\">id</a>('a, 'id)) => <a href=\"./api/Belt_HashSet.html#type-t\">t</a>('a, 'id)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#type-id", "title": "id", "contents": "id hashable", "rendered": "<h4 class='item'>type id('a, 'id) = <a href=\"./api/Belt_Id.html#type-hashable\" title=\"Belt_Id.hashable\">hashable</a>('a, 'id)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "The type of hash tables from type &#39;a to type &#39;b.", "rendered": "The type of hash tables from type <code>&#39;a</code> to type <code>&#39;b</code>.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'id)</h4>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#module-String", "title": "String", "contents": "Specalized when key type is string, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>string</code>, more efficient than the gerneic type", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html#module-Int", "title": "Int", "contents": "Specalized when key type is int, more efficient than the gerneic type", "rendered": "Specalized when key type is <code>int</code>, more efficient than the gerneic type", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "Since this is an mutable data strucure, s1 will contain two pairs.", "rendered": "Since this is an mutable data strucure, <code>s1</code> will contain two pairs.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "code block", "contents": "let () =\n  add s1 0;\n  add s1 1", "rendered": "<pre><code>let () =\n  add s1 0;\n  add s1 1</code></pre>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "We can add elements to the collection:", "rendered": "We can add elements to the collection:", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "code block", "contents": "val s0 :  (int, I0.identity) t\nval s1 :  (int, I1.identity) t", "rendered": "<pre><code>val s0 :  (int, I0.identity) t\nval s1 :  (int, I1.identity) t</code></pre>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "Here the compiler would infer s0 and s1 having different type so that it would not mix.", "rendered": "Here the compiler would infer <code>s0</code> and <code>s1</code> having different type so that it would not mix.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "The invariant must be held: for two elements who are equal, their hashed value should be the same", "rendered": "The invariant must be held: for two elements who are <em>equal</em>, their hashed value should be the same", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "code block", "contents": "type t = int \nmodule I0 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff_ff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s0 = make ~id:(module I0) ~hintSize:40\nmodule I1 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s1 = make ~id:(module I1) ~hintSize:40", "rendered": "<pre><code>type t = int \nmodule I0 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff_ff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s0 = make ~id:(module I0) ~hintSize:40\nmodule I1 =\n  (val Belt.Id.hashableU\n      ~hash:(fun[\\@bs] (a : t)  -> a & 0xff)\n      ~eq:(fun[\\@bs] a b -> a = b)\n  )\nlet s1 = make ~id:(module I1) ~hintSize:40</code></pre>", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "For example:", "rendered": "For example:", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "All data are parameterized by not its only type but also a unique identity in the time of initialization, so that two HashSets of ints initialized with different hash functions will have different type.", "rendered": "All data are parameterized by not its only type but also a unique identity in the time of initialization, so that two <em>HashSets of ints</em> initialized with different <em>hash</em> functions will have different type.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_HashSet.html", "title": "Belt_HashSet", "contents": "A mutable Hash set which allows customized hash behavior.", "rendered": "A <strong>mutable</strong> Hash set which allows customized hash behavior.", "breadcrumb": "Belt_HashSet"},
{"href": "./api/Belt_MutableSetInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-split", "title": "split", "contents": "split s key return a fresh copy of each", "rendered": "<code>split s key</code> return a fresh copy of each", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-split", "title": "split", "contents": "split t value t t bool  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => ((<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>), bool)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-getExn", "title": "getExn", "contents": "getExn t value value  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t value undefined value  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-get", "title": "get", "contents": "get t value option value  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => option(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined value ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-maximum", "title": "maximum", "contents": "maximum t option value ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => option(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined value ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-minimum", "title": "minimum", "contents": "minimum t option value ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => option(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-toArray", "title": "toArray", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-toArray", "title": "toArray", "contents": "toArray t array value ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-toList", "title": "toList", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-toList", "title": "toList", "contents": "toList t list value ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => list(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => int</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-partition", "title": "partition", "contents": "partition s p returns a fresh copy pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition s p</code> returns a fresh copy pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-partition", "title": "partition", "contents": "partition t value bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a> => bool) => (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => (\n  <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>,\n  <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>\n)</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-keep", "title": "keep", "contents": "keep s p returns a fresh copy of the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep s p</code> returns a fresh copy of the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-keep", "title": "keep", "contents": "keep t value bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a> => bool) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p. Oder unspecified.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>. Oder unspecified.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-some", "title": "some", "contents": "some t value bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-every", "title": "every", "contents": "every p s checks if all elements of the set satisfy the predicate p. Order unspecified.", "rendered": "<code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-every", "title": "every", "contents": "every t value bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-reduce", "title": "reduce", "contents": "Iterate in increasing order.", "rendered": "Iterate in increasing order.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-reduce", "title": "reduce", "contents": "reduce t value     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, 'a, ('a, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => 'a) => 'a</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>,\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a105 * value ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-forEach", "title": "forEach", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-forEach", "title": "forEach", "contents": "forEach t value unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a> => unit) => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], unit)) => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-eq", "title": "eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-cmp", "title": "cmp", "contents": "cmp t t int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-diff", "title": "diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-intersect", "title": "intersect", "contents": "intersect t t t  ", "rendered": "<h4 class='item'>let intersect: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-union", "title": "union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array value unit  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)) => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-removeCheck", "title": "removeCheck", "contents": "removeCheck t value bool  ", "rendered": "<h4 class='item'>let removeCheck: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-remove", "title": "remove", "contents": "remove t value unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array value unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>)) => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-addCheck", "title": "addCheck", "contents": "addCheck t value bool  ", "rendered": "<h4 class='item'>let addCheck: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-add", "title": "add", "contents": "add t value unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => unit</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-has", "title": "has", "contents": "has t value bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a> => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-ofArray", "title": "ofArray", "contents": "ofArray array value t ", "rendered": "<h4 class='item'>let ofArray: array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array value t ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_MutableSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Belt_MutableSetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#type-t", "title": "t", "contents": "The type of sets.", "rendered": "The type of sets.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#type-value", "title": "value", "contents": "The type of the set elements.", "rendered": "The type of the set elements.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html#type-value", "title": "value", "contents": "value int", "rendered": "<h4 class='item'>type value = int</h4>", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html", "title": "Belt_MutableSetInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html", "title": "Belt_MutableSetInt", "contents": "See MutableSet", "rendered": "<strong>See</strong> MutableSet", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html", "title": "Belt_MutableSetInt", "contents": "It is more efficient in general, the API is the same with MutableSet except its key type is fixed, and identity is not needed(using the built-in one)", "rendered": "It is more efficient in general, the API is the same with MutableSet except its key type is fixed, and identity is not needed(using the built-in one)", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_MutableSetInt.html", "title": "Belt_MutableSetInt", "contents": "This module is MutableSet specialized with key type to be a primitive type.", "rendered": "This module is MutableSet specialized with key type to be a primitive type.", "breadcrumb": "Belt_MutableSetInt"},
{"href": "./api/Belt_internalSetString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array value N t value ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-addMutate", "title": "addMutate", "contents": "addMutate N t value value N t value  ", "rendered": "<h4 class='item'>let addMutate: (<a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>), <a href=\"./api/Belt_internalSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-getExn", "title": "getExn", "contents": "getExn t value value  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_internalSetString.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_internalSetString.html#type-value\">value</a></h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t value Undefined t value  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_internalSetString.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetString.html#type-value\">value</a>) => <a href=\"./api/Js.html#module-Undefined\" title=\"Js.Undefined\">Undefined</a>.<a href=\"./api/Js.html#type-Undefined.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-get", "title": "get", "contents": "get t value option value  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_internalSetString.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetString.html#type-value\">value</a>) => option(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_internalSetString.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetString.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-eq", "title": "eq", "contents": "eq t N t value bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_internalSetString.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)) => bool</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-cmp", "title": "cmp", "contents": "cmp N t value N t value int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>), <a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)) => int</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-compareAux", "title": "compareAux", "contents": "compareAux list node value list node value int  ", "rendered": "<h4 class='item'>let compareAux: (\n  list(<a href=\"./api/Belt_internalSetString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)),\n  list(<a href=\"./api/Belt_internalSetString.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>))\n) => int</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#value-has", "title": "has", "contents": "has t value bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_internalSetString.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetString.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#type-t", "title": "t", "contents": "t N t value", "rendered": "<h4 class='item'>type t = <a href=\"./api/Belt_internalSetString.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetString.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#type-value", "title": "value", "contents": "value string", "rendered": "<h4 class='item'>type value = string</h4>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html", "title": "Belt_internalSetString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html", "title": "Belt_internalSetString", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Belt_internalSetString.html#Belt_internalSetString", "title": "Belt_internalSetString", "contents": "", "rendered": "", "breadcrumb": "Belt_internalSetString"},
{"href": "./api/Node.html#value-test", "title": "test", "contents": "We expect a good inliner will eliminate such boxing in the future", "rendered": "We expect a good inliner will eliminate such boxing in the future", "breadcrumb": "Node"},
{"href": "./api/Node.html#value-test", "title": "test", "contents": "test string_buffer string_buffer_kind ", "rendered": "<h4 class='item'>let test: <a href=\"./api/Node.html#type-string_buffer\">string_buffer</a> => (<a href=\"./api/Node.html#type-string_buffer_kind\">string_buffer_kind</a>('a), 'a)</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html#type-string_buffer_kind", "title": "string_buffer_kind", "contents": "string_buffer_kind string_buffer_kind string string_buffer_kind buffer", "rendered": "<h4 class='item'>type string_buffer_kind('_) = \n  | String: <a href=\"./api/Node.html#type-string_buffer_kind\">string_buffer_kind</a>(string)\n  | Buffer: <a href=\"./api/Node.html#type-string_buffer_kind\">string_buffer_kind</a>(<a href=\"./api/Node.html#type-buffer\">buffer</a>)\n</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html#type-buffer", "title": "buffer", "contents": "buffer ", "rendered": "<h4 class='item'>type buffer</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html#type-string_buffer", "title": "string_buffer", "contents": "string_buffer ", "rendered": "<h4 class='item'>type string_buffer</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html#type-node_require", "title": "node_require", "contents": "node_require Js t", "rendered": "<h4 class='item'>type node_require = <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(\n  &lt; main : node_module Js.undefined; resolve : (string -&gt; string [@bs]) &gt;\n)</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html#type-node_module", "title": "node_module", "contents": "node_module Js t", "rendered": "<h4 class='item'>type node_module = <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(\n  &lt; children : node_module array; exports : node_exports; filename : string;\n  id : string; loaded : bool; parrent : node_module Js.null_undefined;\n  paths : string array &gt;\n)</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html#type-node_exports", "title": "node_exports", "contents": "node_exports ", "rendered": "<h4 class='item'>type node_exports</h4>", "breadcrumb": "Node"},
{"href": "./api/Node.html", "title": "Node", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node"},
{"href": "./api/Node.html", "title": "Node", "contents": "Placeholder for Node bindings", "rendered": "Placeholder for Node bindings", "breadcrumb": "Node"},
{"href": "./api/Belt_MutableMapString.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t key   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => 'b) => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a85 ], 'b)\n) => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), 'a => 'b) => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a86 ], 'b)) => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-update", "title": "update", "contents": "update t key option option  unit   ", "rendered": "<h4 class='item'>let update: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, option('a) => option('a)) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-updateU", "title": "updateU", "contents": "updateU t key fn option unit   ", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a87 option ], option('a))\n) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-set", "title": "set", "contents": "add m x y do the in-place modification, return m for chaining. If x was already bound in m, its previous binding disappears.", "rendered": "<code>add m x y</code> do the in-place modification, return <code>m</code> for chaining. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-set", "title": "set", "contents": "set t key unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-removeMany", "title": "removeMany", "contents": "remove m x do the in-place modification", "rendered": "<code>remove m x</code> do the in-place modification", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array key unit  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), array(<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>)) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-remove", "title": "remove", "contents": "remove m x do the in-place modification", "rendered": "<code>remove m x</code> do the in-place modification", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-remove", "title": "remove", "contents": "remove t key unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-getExn", "title": "getExn", "contents": "getExn t key  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>) => 'a</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t key   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => 'a</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t key undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined key ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-maximum", "title": "maximum", "contents": "maximum t option key ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => option((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined key ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-minimum", "title": "minimum", "contents": "minimum t option key ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => option((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option key ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-minKey", "title": "minKey", "contents": "minKey t option key ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array key ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => array(<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-toArray", "title": "toArray", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => array((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-toList", "title": "toList", "contents": "toList t list key ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => list((<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p. The application order of p is unspecified.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>. The application order of <code>p</code> is unspecified.", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-some", "title": "some", "contents": "some t key bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a88 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p. The application order of p is unspecified.", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>. The application order of <code>p</code> is unspecified.", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-every", "title": "every", "contents": "every t key bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a89 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-reduce", "title": "reduce", "contents": "reduce t key      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), 'b, ('b, <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'b29 * key * 'a90 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the key as first argument, and the associated value as second argument. The application order of f is in increasing order.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. The application order of <code>f</code> is in increasing order.", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-forEach", "title": "forEach", "contents": "forEach t key unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>, 'a) => unit) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a91 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-eq", "title": "eq", "contents": "eq m1 m2 cmp", "rendered": "<code>eq m1 m2 cmp</code>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), ('a, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a92 * 'a92 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-cmp", "title": "cmp", "contents": "cmp m1 m2 cmp First compare by size, if size is the same, compare by key, value pair", "rendered": "<code>cmp m1 m2 cmp</code> First compare by size, if size is the same, compare by key, value pair", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), ('a, 'a) => int) => int</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a93 * 'a93 ], int)\n) => int</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapString.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Belt_MutableMapString.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html", "title": "Belt_MutableMapString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html", "title": "Belt_MutableMapString", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_MutableMapString.html#Belt_MutableMapString", "title": "Belt_MutableMapString", "contents": "", "rendered": "", "breadcrumb": "Belt_MutableMapString"},
{"href": "./api/Belt_SetInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-split", "title": "split", "contents": "split x s returns a triple (l, present, r), where l is the set of elements of s that are strictly less than x; r is the set of elements of s that are strictly greater than x; present is false if s contains no element equal to x, or true if s contains an element equal to x.", "rendered": "<code>split x s</code> returns a triple <code>(l, present, r)</code>, where <code>l</code> is the set of elements of <code>s</code> that are strictly less than <code>x</code>; <code>r</code> is the set of elements of <code>s</code> that are strictly greater than <code>x</code>; <code>present</code> is <code>false</code> if <code>s</code> contains no element equal to <code>x</code>, or <code>true</code> if <code>s</code> contains an element equal to <code>x</code>.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-split", "title": "split", "contents": "split t value t t bool  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => ((<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>), bool)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-getExn", "title": "getExn", "contents": "getExn t value value  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-value\">value</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t value undefined value  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-get", "title": "get", "contents": "get t value option value  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => option(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined value ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-maximum", "title": "maximum", "contents": "maximum t option value ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => option(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined value ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-minimum", "title": "minimum", "contents": "minimum t option value ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => option(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-toArray", "title": "toArray", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-toArray", "title": "toArray", "contents": "toArray t array value ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-toList", "title": "toList", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-toList", "title": "toList", "contents": "toList t list value ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => list(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => int</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-partition", "title": "partition", "contents": "partition p s returns a pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition p s</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-partition", "title": "partition", "contents": "partition t value bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a> => bool) => (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => (\n  <a href=\"./api/Belt_SetInt.html#type-t\">t</a>,\n  <a href=\"./api/Belt_SetInt.html#type-t\">t</a>\n)</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-keep", "title": "keep", "contents": "keep p s returns the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep p s</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-keep", "title": "keep", "contents": "keep t value bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a> => bool) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p. Oder unspecified.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>. Oder unspecified.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-some", "title": "some", "contents": "some t value bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-every", "title": "every", "contents": "every p s checks if all elements of the set satisfy the predicate p. Order unspecified.", "rendered": "<code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-every", "title": "every", "contents": "every t value bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-reduce", "title": "reduce", "contents": "Iterate in increasing order.", "rendered": "Iterate in increasing order.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-reduce", "title": "reduce", "contents": "reduce t value     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, 'a, ('a, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => 'a) => 'a</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_SetInt.html#type-t\">t</a>,\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a109 * value ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-forEach", "title": "forEach", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-forEach", "title": "forEach", "contents": "forEach t value unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a> => unit) => unit</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], unit)) => unit</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-eq", "title": "eq", "contents": "eq s1 s2 tests whether the sets s1 and s2 are equal, that is, contain equal elements.", "rendered": "<code>eq s1 s2</code> tests whether the sets <code>s1</code> and <code>s2</code> are equal, that is, contain equal elements.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-eq", "title": "eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-cmp", "title": "cmp", "contents": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "rendered": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-cmp", "title": "cmp", "contents": "cmp t t int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-subset", "title": "subset", "contents": "subset s1 s2 tests whether the set s1 is a subset of the set s2.", "rendered": "<code>subset s1 s2</code> tests whether the set <code>s1</code> is a subset of the set <code>s2</code>.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-diff", "title": "diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-intersect", "title": "intersect", "contents": "intersect t t t  ", "rendered": "<h4 class='item'>let intersect: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-union", "title": "union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-t\">t</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-removeMany", "title": "removeMany", "contents": "If x was not in s, s is returned unchanged.", "rendered": "If <code>x</code> was not in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array value t  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-remove", "title": "remove", "contents": "If x was not in s, s is returned unchanged.", "rendered": "If <code>x</code> was not in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-remove", "title": "remove", "contents": "remove t value t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-mergeMany", "title": "mergeMany", "contents": "If x was already in s, s is returned unchanged.", "rendered": "If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array value t  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>)) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-add", "title": "add", "contents": "If x was already in s, s is returned unchanged.", "rendered": "If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-add", "title": "add", "contents": "add t value t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-has", "title": "has", "contents": "has t value bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_SetInt.html#type-t\">t</a>, <a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_SetInt.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array value t ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-ofArray", "title": "ofArray", "contents": "ofArray array value t ", "rendered": "<h4 class='item'>let ofArray: array(<a href=\"./api/Belt_SetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_SetInt.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#type-t", "title": "t", "contents": "The type of sets.", "rendered": "The type of sets.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#type-value", "title": "value", "contents": "The type of the set elements.", "rendered": "The type of the set elements.", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html#type-value", "title": "value", "contents": "value int", "rendered": "<h4 class='item'>type value = int</h4>", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html", "title": "Belt_SetInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html", "title": "Belt_SetInt", "contents": "See Set", "rendered": "<strong>See</strong> Set", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_SetInt.html", "title": "Belt_SetInt", "contents": "This module is Set specialized with value type to be a primitive type. It is more efficient in general, the API is the same with Belt_Set except its value type is fixed, and identity is not needed(using the built-in one)", "rendered": "This module is Set specialized with value type to be a primitive type. It is more efficient in general, the API is the same with Belt_Set except its value type is fixed, and identity is not needed(using the built-in one)", "breadcrumb": "Belt_SetInt"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "let arr = [|\"ant\";\"bee\";\"cat\";\"dog\";\"elk\"|] in\nlet () = truncateToLengthUnsafe arr 3 in\narr = [|\"ant\";\"bee\";\"cat\"|] = true;;\n", "rendered": "<pre><code>let arr = [|\"ant\";\"bee\";\"cat\";\"dog\";\"elk\"|] in\nlet () = truncateToLengthUnsafe arr 3 in\narr = [|\"ant\";\"bee\";\"cat\"|] = true;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-truncateToLengthUnsafe", "title": "truncateToLengthUnsafe", "contents": "If n is less than zero;raises a RangeError.", "rendered": "If <code>n</code> is less than zero;raises a <code>RangeError</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-truncateToLengthUnsafe", "title": "truncateToLengthUnsafe", "contents": "If n is greater than the length of xs;the extra elements are set to Js.Null_undefined.null", "rendered": "If <code>n</code> is greater than the length of <code>xs</code>;the extra elements are set to <code>Js.Null_undefined.null</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-truncateToLengthUnsafe", "title": "truncateToLengthUnsafe", "contents": "Unsafe truncateToLengthUnsafe xs n sets length of array xs to n.", "rendered": "<strong>Unsafe</strong> <code>truncateToLengthUnsafe xs n</code> sets length of array <code>xs</code> to <code>n</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-truncateToLengthUnsafe", "title": "truncateToLengthUnsafe", "contents": "truncateToLengthUnsafe array int unit  ", "rendered": "<h4 class='item'>let truncateToLengthUnsafe: (array('a), int) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-eq", "title": "eq", "contents": "otherwise compare items one by one using f xi yi;and return true if all results are true;false otherwise", "rendered": "otherwise compare items one by one using <code>f xi yi</code>;and return true if all results are true;false otherwise", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-eq", "title": "eq", "contents": "return false if length is not the same", "rendered": "return false if length is not the same", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "eq [|1; 2; 3|] [|-1; -2; -3|] (fun a b -> abs a = abs b) = true\n", "rendered": "<pre><code>eq [|1; 2; 3|] [|-1; -2; -3|] (fun a b -> abs a = abs b) = true\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-eq", "title": "eq", "contents": "eq xs ys", "rendered": "<code>eq xs ys</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-eq", "title": "eq", "contents": "eq array array bool   bool   ", "rendered": "<h4 class='item'>let eq: (array('a), array('a), ('a, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-eqU", "title": "eqU", "contents": "eqU array array fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  array('a),\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a120 * 'a120 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "The comparison returns the first non-zero result of f;or zero if f returns zero for all x and y.", "rendered": "The comparison returns the first non-zero result of <code>f</code>;or zero if <code>f</code> returns zero for all <code>x</code> and <code>y</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "a positive number if x is “greater than” y", "rendered": "a positive number if <code>x</code> is “greater than” <code>y</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "zero if x is “equal to” y", "rendered": "zero if <code>x</code> is “equal to” <code>y</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "a negative number if x is “less than” y", "rendered": "a negative number if <code>x</code> is “less than” <code>y</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "Otherwise compare one by one f x y. f returns", "rendered": "Otherwise compare one by one <code>f x y</code>. <code>f</code> returns", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "Compared by length if length xs &lt;&gt; length ys;returning -1 iflength xs &lt; length ys or 1 if length xs &gt; length ys", "rendered": "Compared by length if <code>length xs &lt;&gt; length ys</code>;returning -1 if<code>length xs &lt; length ys</code> or 1 if <code>length xs &gt; length ys</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "cmp [|1; 3; 5|] [|1; 4; 2|] (fun a b -> compare a b) = -1;;\ncmp [|1; 3; 5|] [|1; 2; 3|] (fun a b -> compare a b) = 1;;\ncmp [|1; 3; 5|] [|1; 3; 5|] (fun a b -> compare a b) = 0;;\n", "rendered": "<pre><code>cmp [|1; 3; 5|] [|1; 4; 2|] (fun a b -> compare a b) = -1;;\ncmp [|1; 3; 5|] [|1; 2; 3|] (fun a b -> compare a b) = 1;;\ncmp [|1; 3; 5|] [|1; 3; 5|] (fun a b -> compare a b) = 0;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "cmp xs ys f", "rendered": "<code>cmp xs ys f</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmp", "title": "cmp", "contents": "cmp array array int   int   ", "rendered": "<h4 class='item'>let cmp: (array('a), array('a), ('a, 'a) => int) => int</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-cmpU", "title": "cmpU", "contents": "cmpU array array fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  array('a),\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a121 * 'a121 ], int)\n) => int</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "some2 [|0;2|] [|1;0;3|] (>) = true ;;\n(some2 [||] [|1|] (fun   x y -> x > y)) =  false;;\n(some2 [|2;3|] [|1;4|] (fun   x y -> x > y)) = true;;\n", "rendered": "<pre><code>some2 [|0;2|] [|1;0;3|] (>) = true ;;\n(some2 [||] [|1|] (fun   x y -> x > y)) =  false;;\n(some2 [|2;3|] [|1;4|] (fun   x y -> x > y)) = true;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some2", "title": "some2", "contents": "some2 xs ys p returns true if p xi yi is true for any pair of elements up to the shorter length (i.e. min (length xs) (length ys))", "rendered": "<code>some2 xs ys p</code> returns true if <code>p xi yi</code> is true for any pair of elements up to the shorter length (i.e. <code>min (length xs) (length ys)</code>)", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some2", "title": "some2", "contents": "some2 array array bool   bool   ", "rendered": "<h4 class='item'>let some2: (array('a), array('b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some2U", "title": "some2U", "contents": "some2U array array fn bool bool   ", "rendered": "<h4 class='item'>let some2U: (\n  array('a),\n  array('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a122 * 'b31 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "every2 [|1;2;3|] [|0;1|] (>) = true;;\nevery2 [||] [|1|] (fun  x y -> x > y) = true;;\nevery2 [|2;3|] [|1|] (fun  x y -> x > y) = true;;\nevery2 [|0;1|] [|5;0|] (fun x y -> x > y) = false;\n", "rendered": "<pre><code>every2 [|1;2;3|] [|0;1|] (>) = true;;\nevery2 [||] [|1|] (fun  x y -> x > y) = true;;\nevery2 [|2;3|] [|1|] (fun  x y -> x > y) = true;;\nevery2 [|0;1|] [|5;0|] (fun x y -> x > y) = false;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every2", "title": "every2", "contents": "every2 xs ys p returns true if p xi yi is true for all pairs of elements up to the shorter length (i.e. min (length xs) (length ys))", "rendered": "<code>every2 xs ys p</code> returns true if <code>p xi yi</code> is true for all pairs of elements up to the shorter length (i.e. <code>min (length xs) (length ys)</code>)", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every2", "title": "every2", "contents": "every2 array array bool   bool   ", "rendered": "<h4 class='item'>let every2: (array('a), array('b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every2U", "title": "every2U", "contents": "every2U array array fn bool bool   ", "rendered": "<h4 class='item'>let every2U: (\n  array('a),\n  array('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a123 * 'b32 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "every [|1; 3; 5|] (fun x -> x mod 2 = 1) = true;;\nevery [|1; -3; 5|] (fun x -> x > 0) = false;;\n", "rendered": "<pre><code>every [|1; 3; 5|] (fun x -> x mod 2 = 1) = true;;\nevery [|1; -3; 5|] (fun x -> x > 0) = false;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every", "title": "every", "contents": "true if all elements satisfy p;where p is a predicate: a function taking an element and returning a bool.", "rendered": "true if all elements satisfy <code>p</code>;where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every", "title": "every", "contents": "Returns: true if all elements satisfy p;where p is a predicate: a function taking an element and returning a bool.\n\nevery [|1; 3; 5|] (fun x -&gt; x mod 2 = 1) = true;;\nevery [|1; -3; 5|] (fun x -&gt; x &gt; 0) = false;;\n", "rendered": "Returns: <p>true if all elements satisfy <code>p</code>;where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='78' id='block-78'><code>every [|1; 3; 5|] (fun x -&gt; x mod 2 = 1) = true;;\nevery [|1; -3; 5|] (fun x -&gt; x &gt; 0) = false;;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"78\">#open Belt_Array\nevery [|1; 3; 5|] (fun x -> x mod 2 = 1) = true;;\nevery [|1; -3; 5|] (fun x -> x > 0) = false;;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-5:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='78-alt' id='block-78-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every", "title": "every", "contents": "every xs p", "rendered": "<code>every xs p</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-every", "title": "every", "contents": "every array bool  bool  ", "rendered": "<h4 class='item'>let every: (array('a), 'a => bool) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-everyU", "title": "everyU", "contents": "everyU array fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a124 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "some [|2; 3; 4|] (fun x -> x mod 2 = 1) = true;;\nsome [|-1; -3; -5|] (fun x -> x > 0) = false;;\n", "rendered": "<pre><code>some [|2; 3; 4|] (fun x -> x mod 2 = 1) = true;;\nsome [|-1; -3; -5|] (fun x -> x > 0) = false;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some", "title": "some", "contents": "true if at least one of the elements in xs satifies p;where p is a predicate: a function taking an element and returning a bool.", "rendered": "true if at least one of the elements in <code>xs</code> satifies <code>p</code>;where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some", "title": "some", "contents": "Returns: true if at least one of the elements in xs satifies p;where p is a predicate: a function taking an element and returning a bool.\n\nsome [|2; 3; 4|] (fun x -&gt; x mod 2 = 1) = true;;\nsome [|-1; -3; -5|] (fun x -&gt; x &gt; 0) = false;;\n", "rendered": "Returns: <p>true if at least one of the elements in <code>xs</code> satifies <code>p</code>;where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='77' id='block-77'><code>some [|2; 3; 4|] (fun x -&gt; x mod 2 = 1) = true;;\nsome [|-1; -3; -5|] (fun x -&gt; x &gt; 0) = false;;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"77\">#open Belt_Array\nsome [|2; 3; 4|] (fun x -> x mod 2 = 1) = true;;\nsome [|-1; -3; -5|] (fun x -> x > 0) = false;;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-4:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='77-alt' id='block-77-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some", "title": "some", "contents": "some xs p", "rendered": "<code>some xs p</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-some", "title": "some", "contents": "some array bool  bool  ", "rendered": "<h4 class='item'>let some: (array('a), 'a => bool) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-someU", "title": "someU", "contents": "someU array fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a125 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "reduceReverse2 [|1;2;3|] [|1;2|] 0 (fun acc x y -> acc + x + y) = 6\n", "rendered": "<pre><code>reduceReverse2 [|1;2;3|] [|1;2|] 0 (fun acc x y -> acc + x + y) = 6\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverse2", "title": "reduceReverse2", "contents": "reduceReverse2 xs ys init f Reduces two arrays xs and ys;taking items starting at min (length xs) (length ys) down to and including zero.", "rendered": "<code>reduceReverse2 xs ys init f</code> Reduces two arrays <code>xs</code> and <code>ys</code>;taking items starting at <code>min (length xs) (length ys)</code> down to and including zero.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverse2", "title": "reduceReverse2", "contents": "reduceReverse2 array array       ", "rendered": "<h4 class='item'>let reduceReverse2: (\n  array('a),\n  array('b),\n  'c,\n  ('c, 'a, 'b) => 'c\n) => 'c</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverse2U", "title": "reduceReverse2U", "contents": "reduceReverse2U array array fn    ", "rendered": "<h4 class='item'>let reduceReverse2U: (\n  array('a),\n  array('b),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c9 * 'a126 * 'b33 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "reduceReverse [|\"a\";\"b\";\"c\";\"d\"|] \"\" (^) = \"dcba\";;\n", "rendered": "<pre><code>reduceReverse [|\"a\";\"b\";\"c\";\"d\"|] \"\" (^) = \"dcba\";;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverse", "title": "reduceReverse", "contents": "Works like reduce;except that function f is applied to each item of xs from the last back to the first.", "rendered": "Works like reduce;except that function <code>f</code> is applied to each item of <code>xs</code> from the last back to the first.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverse", "title": "reduceReverse", "contents": "reduceReverse xs init f", "rendered": "<code>reduceReverse xs init f</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverse", "title": "reduceReverse", "contents": "reduceReverse array     ", "rendered": "<h4 class='item'>let reduceReverse: (array('b), 'a, ('a, 'b) => 'a) => 'a</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceReverseU", "title": "reduceReverseU", "contents": "reduceReverseU array fn   ", "rendered": "<h4 class='item'>let reduceReverseU: (\n  array('b),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a127 * 'b34 ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "reduce [|2;3;4|] 1 (+) = 10;;\nreduce [|\"a\";\"b\";\"c\";\"d\"|] \"\" (^) = \"abcd\";;\n", "rendered": "<pre><code>reduce [|2;3;4|] 1 (+) = 10;;\nreduce [|\"a\";\"b\";\"c\";\"d\"|] \"\" (^) = \"abcd\";;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduce", "title": "reduce", "contents": "Applies f to each element of xs from beginning to end. Function f has two parameters: the item from the list and an “accumulator”;which starts with a value of init. reduce returns the final value of the accumulator.", "rendered": "Applies <code>f</code> to each element of <code>xs</code> from beginning to end. Function <code>f</code> has two parameters: the item from the list and an “accumulator”;which starts with a value of <code>init</code>. <code>reduce</code> returns the final value of the accumulator.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduce", "title": "reduce", "contents": "reduce xs init f", "rendered": "<code>reduce xs init f</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduce", "title": "reduce", "contents": "reduce array     ", "rendered": "<h4 class='item'>let reduce: (array('b), 'a, ('a, 'b) => 'a) => 'a</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reduceU", "title": "reduceU", "contents": "reduceU array fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  array('b),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a128 * 'b35 ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "mapWithIndex [|1;2;3|] (fun i x -> i + x) =\n[|0 + 1; 1 + 2; 2 + 3|]\n", "rendered": "<pre><code>mapWithIndex [|1;2;3|] (fun i x -> i + x) =\n[|0 + 1; 1 + 2; 2 + 3|]\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex xs f applies f to each element of xs. Function f takes two arguments: the index starting from 0 and the element from xs.", "rendered": "<code>mapWithIndex xs f</code> applies <code>f</code> to each element of <code>xs</code>. Function <code>f</code> takes two arguments: the index starting from 0 and the element from <code>xs</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex xs f ", "rendered": "<code>mapWithIndex xs f </code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex array int   array  ", "rendered": "<h4 class='item'>let mapWithIndex: (array('a), (int, 'a) => 'b) => array('b)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-mapWithIndexU", "title": "mapWithIndexU", "contents": "mapWithIndexU array fn array  ", "rendered": "<h4 class='item'>let mapWithIndexU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a129 ], 'b)\n) => array('b)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-forEachWithIndex", "title": "forEachWithIndex", "contents": "forEachWithIndex array int unit   unit  ", "rendered": "<h4 class='item'>let forEachWithIndex: (array('a), (int, 'a) => unit) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-forEachWithIndexU", "title": "forEachWithIndexU", "contents": "forEachWithIndexU array fn unit unit  ", "rendered": "<h4 class='item'>let forEachWithIndexU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a130 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "keepMap [|1;2;3|] (fun x -> if x mod 2 then Some x else None)\n= [| 2 |]\n", "rendered": "<pre><code>keepMap [|1;2;3|] (fun x -> if x mod 2 then Some x else None)\n= [| 2 |]\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keepMap", "title": "keepMap", "contents": "a new array that keep all elements that return a non-None applied p", "rendered": "a new array that keep all elements that return a non-None applied <code>p</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keepMap", "title": "keepMap", "contents": "Returns: a new array that keep all elements that return a non-None applied p\n\nkeepMap [|1;2;3|] (fun x -&gt; if x mod 2 then Some x else None)\n= [| 2 |]\n", "rendered": "Returns: <p>a new array that keep all elements that return a non-None applied <code>p</code></p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='72' id='block-72'><code>keepMap [|1;2;3|] (fun x -&gt; if x mod 2 then Some x else None)\n= [| 2 |]</code></pre>\n  \n  <script type='docre-source' data-block-id=\"72\">#open Belt_Array\nkeepMap [|1;2;3|] (fun x -> if x mod 2 then Some x else None)\n= [| 2 |]\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-7:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='72-alt' id='block-72-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keepMap", "title": "keepMap", "contents": "keepMap xs p", "rendered": "<code>keepMap xs p</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keepMap", "title": "keepMap", "contents": "keepMap array option  array  ", "rendered": "<h4 class='item'>let keepMap: (array('a), 'a => option('b)) => array('b)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keepMapU", "title": "keepMapU", "contents": "keepMapU array fn option array  ", "rendered": "<h4 class='item'>let keepMapU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a131 ], option('b))\n) => array('b)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "keep [|1;2;3|] (fun x -> x mod  2 = 0) = [|2|]\n", "rendered": "<pre><code>keep [|1;2;3|] (fun x -> x mod  2 = 0) = [|2|]\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keep", "title": "keep", "contents": "a new array that keep all elements satisfy p", "rendered": "a new array that keep all elements satisfy <code>p</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keep", "title": "keep", "contents": "Returns: a new array that keep all elements satisfy p\n\nkeep [|1;2;3|] (fun x -&gt; x mod  2 = 0) = [|2|]\n", "rendered": "Returns: <p>a new array that keep all elements satisfy <code>p</code></p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='71' id='block-71'><code>keep [|1;2;3|] (fun x -&gt; x mod  2 = 0) = [|2|]</code></pre>\n  \n  <script type='docre-source' data-block-id=\"71\">#open Belt_Array\nkeep [|1;2;3|] (fun x -> x mod  2 = 0) = [|2|]\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-4:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='71-alt' id='block-71-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keep", "title": "keep", "contents": "keep xs p ", "rendered": "<code>keep xs p </code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keep", "title": "keep", "contents": "keep array bool  array  ", "rendered": "<h4 class='item'>let keep: (array('a), 'a => bool) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-keepU", "title": "keepU", "contents": "keepU array fn bool array  ", "rendered": "<h4 class='item'>let keepU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a132 ], bool)\n) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "map [|1;2|] (fun x-> x + 1) = [|3;4|]\n", "rendered": "<pre><code>map [|1;2|] (fun x-> x + 1) = [|3;4|]\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-map", "title": "map", "contents": "a new array by calling f for each element of xs from the beginning to end", "rendered": "a new array by calling <code>f</code> for each element of <code>xs</code> from the beginning to end", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-map", "title": "map", "contents": "Returns: a new array by calling f for each element of xs from the beginning to end\n\nmap [|1;2|] (fun x-&gt; x + 1) = [|3;4|]\n", "rendered": "Returns: <p>a new array by calling <code>f</code> for each element of <code>xs</code> from the beginning to end</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='70' id='block-70'><code>map [|1;2|] (fun x-&gt; x + 1) = [|3;4|]</code></pre>\n  \n  <script type='docre-source' data-block-id=\"70\">#open Belt_Array\nmap [|1;2|] (fun x-> x + 1) = [|3;4|]\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-3:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='70-alt' id='block-70-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-map", "title": "map", "contents": "map xs f ", "rendered": "<code>map xs f </code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-map", "title": "map", "contents": "map array  array  ", "rendered": "<h4 class='item'>let map: (array('a), 'a => 'b) => array('b)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-mapU", "title": "mapU", "contents": "mapU array fn array  ", "rendered": "<h4 class='item'>let mapU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a133 ], 'b)\n) => array('b)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-forEach", "title": "forEach", "contents": "forEach array unit  unit  ", "rendered": "<h4 class='item'>let forEach: (array('a), 'a => unit) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-forEachU", "title": "forEachU", "contents": "forEachU array fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  array('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a134 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blitUnsafe", "title": "blitUnsafe", "contents": "Unsafe blit without bounds checking", "rendered": "<strong>Unsafe</strong> blit without bounds checking", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blitUnsafe", "title": "blitUnsafe", "contents": "blitUnsafe array int array int int unit src srcOffset dst dstOffset len", "rendered": "<h4 class='item'>let blitUnsafe: (\n  ~src: array('a),\n  ~srcOffset: int,\n  ~dst: array('a),\n  ~dstOffset: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "Belt.Array.blit ~src: v1 ~srcOffset: 4 ~dst: v2 ~dstOffset: 2 ~len: 3 ->\n  [|20;21;14;15;16;25;26;27|]\nBelt.Array.blit ~src: v1 ~srcOffset: 4 ~dst: v1 ~dstOffset: 2 ~len: 3 ->\n  [|10;11;14;15;16;15;16;17|]\n", "rendered": "<pre><code>Belt.Array.blit ~src: v1 ~srcOffset: 4 ~dst: v2 ~dstOffset: 2 ~len: 3 ->\n  [|20;21;14;15;16;25;26;27|]\nBelt.Array.blit ~src: v1 ~srcOffset: 4 ~dst: v1 ~dstOffset: 2 ~len: 3 ->\n  [|10;11;14;15;16;15;16;17|]\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blit", "title": "blit", "contents": "For each of the examples;presume that v1 = [|10;11;12;13;14;15;16;17|] and v2 = [|20;21;22;23;24;25;26;27|]. The result shown is the content of the destination array.", "rendered": "For each of the examples;presume that <code>v1 = [|10;11;12;13;14;15;16;17|]</code> and <code>v2 = [|20;21;22;23;24;25;26;27|]</code>. The result shown is the content of the destination array.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blit", "title": "blit", "contents": "offset can be negative;-1 means len - 1;if len + offset is still negative;it will be set as 0", "rendered": "<code>offset</code> can be negative;<code>-1</code> means <code>len - 1</code>;if <code>len + offset</code> is still negative;it will be set as 0", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blit", "title": "blit", "contents": "It works correctly even if v1 and v2 are the same array;and the source and destination chunks overlap.", "rendered": "It works correctly even if <code>v1</code> and <code>v2</code> are the same array;and the source and destination chunks overlap.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blit", "title": "blit", "contents": "copies len elements from array v1;starting at element number o1;to array v2, starting at element number o2.", "rendered": "copies <code>len</code> elements from array <code>v1</code>;starting at element number <code>o1</code>;to array <code>v2</code>, starting at element number <code>o2</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blit", "title": "blit", "contents": "blit ~src:v1 ~srcOffset:o1 ~dst:v2 ~dstOffset:o2 ~len", "rendered": "<code>blit ~src:v1 ~srcOffset:o1 ~dst:v2 ~dstOffset:o2 ~len</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-blit", "title": "blit", "contents": "blit array int array int int unit src srcOffset dst dstOffset len", "rendered": "<h4 class='item'>let blit: (\n  ~src: array('a),\n  ~srcOffset: int,\n  ~dst: array('a),\n  ~dstOffset: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "\nlet arr = makeBy 5 (fun i -> i) ;;\nfill arr ~offset:2 ~len:2 9 ;;\narr = [|0;1;9;9;4|];;\nfill arr ~offset:7 ~len:2 8;;\narr = [|0;1;9;9;4|];;\n", "rendered": "<pre><code>\nlet arr = makeBy 5 (fun i -> i) ;;\nfill arr ~offset:2 ~len:2 9 ;;\narr = [|0;1;9;9;4|];;\nfill arr ~offset:7 ~len:2 8;;\narr = [|0;1;9;9;4|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-fill", "title": "fill", "contents": "fill arr offset:(-1) len:1  means fill the last element, if the array does not have enough data;fill will ignore it", "rendered": "<code>fill arr offset:(-1) len:1 </code> means fill the last element, if the array does not have enough data;<code>fill</code> will ignore it", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-fill", "title": "fill", "contents": "offset can be negative;and is evaluated as length arr - offset", "rendered": "<code>offset</code> can be negative;and is evaluated as <code>length arr - offset</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-fill", "title": "fill", "contents": "Modifies arr in place, storing x in elements number offset to offset + len - 1.", "rendered": "Modifies <code>arr</code> in place, storing <code>x</code> in elements number <code>offset</code> to <code>offset + len - 1</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-fill", "title": "fill", "contents": "fill arr ~offset ~len x", "rendered": "<code>fill arr ~offset ~len x</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-fill", "title": "fill", "contents": "fill array int int unit  offset len ", "rendered": "<h4 class='item'>let fill: (array('a), ~offset: int, ~len: int, 'a) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-copy", "title": "copy", "contents": "a copy of a;that is;a fresh array containing the same elements as a.", "rendered": "a copy of <code>a</code>;that is;a fresh array containing the same elements as <code>a</code>.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-copy", "title": "copy", "contents": "Returns: a copy of a;that is;a fresh array containing the same elements as a.\n\n", "rendered": "Returns: <p>a copy of <code>a</code>;that is;a fresh array containing the same elements as <code>a</code>.</p>\n", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-copy", "title": "copy", "contents": "copy a", "rendered": "<code>copy a</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-copy", "title": "copy", "contents": "copy array array ", "rendered": "<h4 class='item'>let copy: array('a) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "slice [|10;11;12;13;14;15;16|] ~offset: 2 ~len: 3 = [|12;13;14|];;\nslice [|10;11;12;13;14;15;16|] ~offset: (-4) ~len: 3 = [|13;14;15|];;\nslice [|10;11;12;13;14;15;16|] ~offset:4  ~len:9 = [|14;15;16|];;\n", "rendered": "<pre><code>slice [|10;11;12;13;14;15;16|] ~offset: 2 ~len: 3 = [|12;13;14|];;\nslice [|10;11;12;13;14;15;16|] ~offset: (-4) ~len: 3 = [|13;14;15|];;\nslice [|10;11;12;13;14;15;16|] ~offset:4  ~len:9 = [|14;15;16|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-slice", "title": "slice", "contents": "if len is negative;returns the empty array.", "rendered": "if <code>len</code> is negative;returns the empty array.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-slice", "title": "slice", "contents": "if the array does not have enough data;slice extracts through the end of sequence.", "rendered": "if the array does not have enough data;<code>slice</code> extracts through the end of sequence.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-slice", "title": "slice", "contents": "slice xs (-len) len will return a copy of the array", "rendered": "<code>slice xs (-len) len</code> will return a copy of the array", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-slice", "title": "slice", "contents": "offset can be negative;and is evaluated as length xs - offset slice xs -1 1 means get the last element as a singleton array", "rendered": "<code>offset</code> can be negative;and is evaluated as <code>length xs - offset</code> <code>slice xs -1 1</code> means get the last element as a singleton array", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-slice", "title": "slice", "contents": "slice xs offset len creates a new array with the len elements of xs starting at offset for", "rendered": "<code>slice xs offset len</code> creates a new array with the <code>len</code> elements of <code>xs</code> starting at <code>offset</code> for", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-slice", "title": "slice", "contents": "slice array int int array  offset len", "rendered": "<h4 class='item'>let slice: (array('a), ~offset: int, ~len: int) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "concatMany [| [|1;2;3|]; [|4;5;6|]; [|7;8|] |] = [|1;2;3;4;5;6;7;8|];;\n", "rendered": "<pre><code>concatMany [| [|1;2;3|]; [|4;5;6|]; [|7;8|] |] = [|1;2;3;4;5;6;7;8|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concatMany", "title": "concatMany", "contents": "a fresh array as the concatenation of xss (an array of arrays)", "rendered": "a fresh array as the concatenation of <code>xss</code> (an array of arrays)", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concatMany", "title": "concatMany", "contents": "Returns: a fresh array as the concatenation of xss (an array of arrays)\n\nconcatMany [| [|1;2;3|]; [|4;5;6|]; [|7;8|] |] = [|1;2;3;4;5;6;7;8|];;\n", "rendered": "Returns: <p>a fresh array as the concatenation of <code>xss</code> (an array of arrays)</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='66' id='block-66'><code>concatMany [| [|1;2;3|]; [|4;5;6|]; [|7;8|] |] = [|1;2;3;4;5;6;7;8|];;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"66\">#open Belt_Array\nconcatMany [| [|1;2;3|]; [|4;5;6|]; [|7;8|] |] = [|1;2;3;4;5;6;7;8|];;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-10:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='66-alt' id='block-66-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concatMany", "title": "concatMany", "contents": "concatMany xss", "rendered": "<code>concatMany xss</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concatMany", "title": "concatMany", "contents": "concatMany array array array ", "rendered": "<h4 class='item'>let concatMany: array(array('a)) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "concat [|1;2;3|] [|4;5|] = [|1;2;3;4;5|];;\nconcat [| |] [|\"a\";\"b\";\"c\"|] = [|\"a\";\"b\";\"c\"|];;\n", "rendered": "<pre><code>concat [|1;2;3|] [|4;5|] = [|1;2;3;4;5|];;\nconcat [| |] [|\"a\";\"b\";\"c\"|] = [|\"a\";\"b\";\"c\"|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concat", "title": "concat", "contents": "a fresh array containing the concatenation of the arrays v1 and v2;so even if v1 or v2 is empty;it can not be shared", "rendered": "a fresh array containing the concatenation of the arrays <code>v1</code> and <code>v2</code>;so even if <code>v1</code> or <code>v2</code> is empty;it can not be shared", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concat", "title": "concat", "contents": "Returns: a fresh array containing the concatenation of the arrays v1 and v2;so even if v1 or v2 is empty;it can not be shared\n\nconcat [|1;2;3|] [|4;5|] = [|1;2;3;4;5|];;\nconcat [| |] [|&quot;a&quot;;&quot;b&quot;;&quot;c&quot;|] = [|&quot;a&quot;;&quot;b&quot;;&quot;c&quot;|];;\n", "rendered": "Returns: <p>a fresh array containing the concatenation of the arrays <code>v1</code> and <code>v2</code>;so even if <code>v1</code> or <code>v2</code> is empty;it can not be shared</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='65' id='block-65'><code>concat [|1;2;3|] [|4;5|] = [|1;2;3;4;5|];;\nconcat [| |] [|&quot;a&quot;;&quot;b&quot;;&quot;c&quot;|] = [|&quot;a&quot;;&quot;b&quot;;&quot;c&quot;|];;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"65\">#open Belt_Array\nconcat [|1;2;3|] [|4;5|] = [|1;2;3;4;5|];;\nconcat [| |] [|\"a\";\"b\";\"c\"|] = [|\"a\";\"b\";\"c\"|];;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-6:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='65-alt' id='block-65-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concat", "title": "concat", "contents": "concat xs ys", "rendered": "<code>concat xs ys</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-concat", "title": "concat", "contents": "concat array array array  ", "rendered": "<h4 class='item'>let concat: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-zipBy", "title": "zipBy", "contents": "zipBy array array   array   ", "rendered": "<h4 class='item'>let zipBy: (array('a), array('b), ('a, 'b) => 'c) => array(\n  'c\n)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-zipByU", "title": "zipByU", "contents": "zipByU array array fn array   ", "rendered": "<h4 class='item'>let zipByU: (\n  array('a),\n  array('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a135 * 'b36 ], 'c)\n) => array('c)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "zip [|1;2] [|3;4;5|] = [| (1,3); (2;4) |]\n", "rendered": "<pre><code>zip [|1;2] [|3;4;5|] = [| (1,3); (2;4) |]\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-zip", "title": "zip", "contents": "Create an array of pairs from corresponding elements of a and b. Stop with the shorter array", "rendered": "Create an array of pairs from corresponding elements of <code>a</code> and <code>b</code>. Stop with the shorter array", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-zip", "title": "zip", "contents": "zip a b", "rendered": "<code>zip a b</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-zip", "title": "zip", "contents": "zip array array array  ", "rendered": "<h4 class='item'>let zip: (array('a), array('b)) => array(('a, 'b))</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeByAndShuffle", "title": "makeByAndShuffle", "contents": "Equivalent to shuffle (makeBy n f)", "rendered": "Equivalent to <code>shuffle (makeBy n f)</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeByAndShuffle", "title": "makeByAndShuffle", "contents": "makeByAndShuffle n f", "rendered": "<code>makeByAndShuffle n f</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeByAndShuffle", "title": "makeByAndShuffle", "contents": "makeByAndShuffle int int  array  ", "rendered": "<h4 class='item'>let makeByAndShuffle: (int, int => 'a) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeByAndShuffleU", "title": "makeByAndShuffleU", "contents": "makeByAndShuffleU int fn array  ", "rendered": "<h4 class='item'>let makeByAndShuffleU: (\n  int,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], 'a)\n) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeBy", "title": "makeBy", "contents": "makeBy int int  array  ", "rendered": "<h4 class='item'>let makeBy: (int, int => 'a) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeByU", "title": "makeByU", "contents": "makeByU int fn array  ", "rendered": "<h4 class='item'>let makeByU: (int, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], 'a)) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "range 0 3 =  [|0;1;2;3|];;\nrange 3 0 =  [||] ;;\nrange 3 3 = [|3|];;\n", "rendered": "<pre><code>range 0 3 =  [|0;1;2;3|];;\nrange 3 0 =  [||] ;;\nrange 3 3 = [|3|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-rangeBy", "title": "rangeBy", "contents": "range start finish create an inclusive array", "rendered": "<code>range start finish</code> create an inclusive array", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-rangeBy", "title": "rangeBy", "contents": "rangeBy int int int array int   step", "rendered": "<h4 class='item'>let rangeBy: (int, int, ~step: int) => array(int)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "range 0 3 =  [|0;1;2;3|];;\nrange 3 0 =  [||] ;;\nrange 3 3 = [|3|];;\n", "rendered": "<pre><code>range 0 3 =  [|0;1;2;3|];;\nrange 3 0 =  [||] ;;\nrange 3 3 = [|3|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-range", "title": "range", "contents": "range start finish create an inclusive array", "rendered": "<code>range start finish</code> create an inclusive array", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-range", "title": "range", "contents": "range int int array int  ", "rendered": "<h4 class='item'>let range: (int, int) => array(int)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-make", "title": "make", "contents": "an empty array when n is negative.", "rendered": "an empty array when <code>n</code> is negative.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-make", "title": "make", "contents": "Returns: an empty array when n is negative.\n\n", "rendered": "Returns: <p>an empty array when <code>n</code> is negative.</p>\n", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-make", "title": "make", "contents": "make n e return an array of size n filled with value e", "rendered": "<code>make n e</code> return an array of size <code>n</code> filled with value <code>e</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-make", "title": "make", "contents": "make int array  ", "rendered": "<h4 class='item'>let make: (int, 'a) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeUninitializedUnsafe", "title": "makeUninitializedUnsafe", "contents": "mple&quot;);;", "rendered": "mple&quot;);;", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeUninitializedUnsafe", "title": "makeUninitializedUnsafe", "contents": ";; undefined *)", "rendered": ";; undefined *)", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeUninitializedUnsafe", "title": "makeUninitializedUnsafe", "contents": "makeUninitializedUnsafe n", "rendered": "<code>makeUninitializedUnsafe n</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeUninitializedUnsafe", "title": "makeUninitializedUnsafe", "contents": "makeUninitializedUnsafe int array ", "rendered": "<h4 class='item'>let makeUninitializedUnsafe: int => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "let arr: string Js.undefined array = makeUninitialized 5;;\ngetExn arr 0 = Js.undefined;;\n", "rendered": "<pre><code>let arr: string Js.undefined array = makeUninitialized 5;;\ngetExn arr 0 = Js.undefined;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeUninitialized", "title": "makeUninitialized", "contents": "makeUninitialized n creates an array of length n filled with the undefined value. You must specify the type of data that will eventually fill the array.", "rendered": "<code>makeUninitialized n</code> creates an array of length <code>n</code> filled with the undefined value. You must specify the type of data that will eventually fill the array.", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-makeUninitialized", "title": "makeUninitialized", "contents": "makeUninitialized int array undefined ", "rendered": "<h4 class='item'>let makeUninitialized: int => array(<a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a))</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "reverse [|10;11;12;13;14|] = [|14;13;12;11;10|];;\n", "rendered": "<pre><code>reverse [|10;11;12;13;14|] = [|14;13;12;11;10|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reverse", "title": "reverse", "contents": "a fresh array with items in arr in reverse order", "rendered": "a fresh array with items in <code>arr</code> in reverse order", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reverse", "title": "reverse", "contents": "Returns: a fresh array with items in arr in reverse order\n\nreverse [|10;11;12;13;14|] = [|14;13;12;11;10|];;\n", "rendered": "Returns: <p>a fresh array with items in <code>arr</code> in reverse order</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='60' id='block-60'><code>reverse [|10;11;12;13;14|] = [|14;13;12;11;10|];;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"60\">#open Belt_Array\nreverse [|10;11;12;13;14|] = [|14;13;12;11;10|];;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-7:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='60-alt' id='block-60-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reverse", "title": "reverse", "contents": "reverse arr", "rendered": "<code>reverse arr</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reverse", "title": "reverse", "contents": "reverse array array ", "rendered": "<h4 class='item'>let reverse: array('a) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "let arr = [|10;11;12;13;14|];;\nlet () = reverseInPlace arr;;\narr = [|14;13;12;11;10|];;\n", "rendered": "<pre><code>let arr = [|10;11;12;13;14|];;\nlet () = reverseInPlace arr;;\narr = [|14;13;12;11;10|];;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reverseInPlace", "title": "reverseInPlace", "contents": "reverseInPlace arr reverses items in arr in place", "rendered": "<code>reverseInPlace arr</code> reverses items in <code>arr</code> in place", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-reverseInPlace", "title": "reverseInPlace", "contents": "reverseInPlace array unit ", "rendered": "<h4 class='item'>let reverseInPlace: array('a) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-shuffle", "title": "shuffle", "contents": "a fresh array with items in original array randomly shuffled", "rendered": "a fresh array with items in original array randomly shuffled", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-shuffle", "title": "shuffle", "contents": "Returns: a fresh array with items in original array randomly shuffled\n\n", "rendered": "Returns: <p>a fresh array with items in original array randomly shuffled</p>\n", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-shuffle", "title": "shuffle", "contents": "shuffle xs", "rendered": "<code>shuffle xs</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-shuffle", "title": "shuffle", "contents": "shuffle array array ", "rendered": "<h4 class='item'>let shuffle: array('a) => array('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-shuffleInPlace", "title": "shuffleInPlace", "contents": "shuffleInPlace arr randomly re-orders the items in arr", "rendered": "<code>shuffleInPlace arr</code> randomly re-orders the items in <code>arr</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-shuffleInPlace", "title": "shuffleInPlace", "contents": "shuffleInPlace array unit ", "rendered": "<h4 class='item'>let shuffleInPlace: array('a) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-setUnsafe", "title": "setUnsafe", "contents": "setUnsafe array int unit   ", "rendered": "<h4 class='item'>let setUnsafe: (array('a), int, 'a) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-setExn", "title": "setExn", "contents": "setExn arr i x raise an exception if i is out of range", "rendered": "<code>setExn arr i x</code> <strong>raise</strong> an exception if <code>i</code> is out of range", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-setExn", "title": "setExn", "contents": "setExn array int unit   ", "rendered": "<h4 class='item'>let setExn: (array('a), int, 'a) => unit</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-set", "title": "set", "contents": "false means not updated due to out of range", "rendered": "false means not updated due to out of range", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-set", "title": "set", "contents": "Returns: false means not updated due to out of range\n\n", "rendered": "Returns: <p>false means not updated due to out of range</p>\n", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-set", "title": "set", "contents": "set arr n x modifies arr in place; it replaces the nth element of arr with x", "rendered": "<code>set arr n x</code> modifies <code>arr</code> in place; it replaces the nth element of <code>arr</code> with <code>x</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-set", "title": "set", "contents": "set array int bool   ", "rendered": "<h4 class='item'>let set: (array('a), int, 'a) => bool</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUndefined", "title": "getUndefined", "contents": "It does the samething in the runtime as getUnsafe; it is type safe since the return type still track whether it is in range or not", "rendered": "It does the samething in the runtime as getUnsafe; it is <em>type safe</em> since the return type still track whether it is in range or not", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined arr i", "rendered": "<code>getUndefined arr i</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined array int undefined  ", "rendered": "<h4 class='item'>let getUndefined: (array('a), int) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUnsafe", "title": "getUnsafe", "contents": "no bounds checking;this would cause type error if i does not stay within range", "rendered": "no bounds checking;this would cause type error if <code>i</code> does not stay within range", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUnsafe", "title": "getUnsafe", "contents": "Unsafe", "rendered": "<strong>Unsafe</strong>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUnsafe", "title": "getUnsafe", "contents": "getUnasfe arr i", "rendered": "<code>getUnasfe arr i</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getUnsafe", "title": "getUnsafe", "contents": "getUnsafe array int  ", "rendered": "<h4 class='item'>let getUnsafe: (array('a), int) => 'a</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getExn", "title": "getExn", "contents": "raise an exception if i is out of range;otherwise return the value at index i in arr", "rendered": "<strong>raise</strong> an exception if <code>i</code> is out of range;otherwise return the value at index <code>i</code> in <code>arr</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getExn", "title": "getExn", "contents": "getExn arr i", "rendered": "<code>getExn arr i</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-getExn", "title": "getExn", "contents": "getExn array int  ", "rendered": "<h4 class='item'>let getExn: (array('a), int) => 'a</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "code block", "contents": "Belt.Array.get [|\"a\";\"b\";\"c\"|] 0 = Some \"a\";;\nBelt.Array.get [|\"a\";\"b\";\"c\"|] 3 = None;;\nBelt.Array.get [|\"a\";\"b\";\"c\"|] (-1) = None;;\n", "rendered": "<pre><code>Belt.Array.get [|\"a\";\"b\";\"c\"|] 0 = Some \"a\";;\nBelt.Array.get [|\"a\";\"b\";\"c\"|] 3 = None;;\nBelt.Array.get [|\"a\";\"b\";\"c\"|] (-1) = None;;\n</code></pre>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-get", "title": "get", "contents": "If i &lt;= 0 &lt;= length arr;returns Some value where value is the item at index i If i is out of range;returns None", "rendered": "If <code>i &lt;= 0 &lt;= length arr</code>;returns <code>Some value</code> where <code>value</code> is the item at index <code>i</code> If <code>i</code> is out of range;returns <code>None</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-get", "title": "get", "contents": "get arr i", "rendered": "<code>get arr i</code>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-get", "title": "get", "contents": "get array int option  ", "rendered": "<h4 class='item'>let get: (array('a), int) => option('a)</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-size", "title": "size", "contents": "See length", "rendered": "<strong>See</strong> length", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-size", "title": "size", "contents": "size array int ", "rendered": "<h4 class='item'>let size: array('a) => int</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-length", "title": "length", "contents": "length xs return the size of the array", "rendered": "<code>length xs</code> return the size of the array", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html#value-length", "title": "length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "Belt_Array", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_Array"},
{"href": "./api/Belt_Array.html", "title": "Belt_Array", "contents": "Array Utililites for Array functions", "rendered": "Array Utililites for Array functions", "breadcrumb": "Belt_Array"},
{"href": "./api/Node_buffer.html#value-toString", "title": "toString", "contents": "toString t string ", "rendered": "<h4 class='item'>let toString: <a href=\"./api/Node_buffer.html#type-t\">t</a> => string</h4>", "breadcrumb": "Node_buffer"},
{"href": "./api/Node_buffer.html#value-fromStringWithEncoding", "title": "fromStringWithEncoding", "contents": "fromStringWithEncoding string t  ", "rendered": "<h4 class='item'>let fromStringWithEncoding: (\n  string,\n  [ `ascii | `base64 | `binary | `hex | `latin1 | `usc2 | `utf16le | `utf8 ]\n) => <a href=\"./api/Node_buffer.html#type-t\">t</a></h4>", "breadcrumb": "Node_buffer"},
{"href": "./api/Node_buffer.html#value-fromString", "title": "fromString", "contents": "fromString string t ", "rendered": "<h4 class='item'>let fromString: string => <a href=\"./api/Node_buffer.html#type-t\">t</a></h4>", "breadcrumb": "Node_buffer"},
{"href": "./api/Node_buffer.html#value-isBuffer", "title": "isBuffer", "contents": "isBuffer bool ", "rendered": "<h4 class='item'>let isBuffer: 'a => bool</h4>", "breadcrumb": "Node_buffer"},
{"href": "./api/Node_buffer.html#type-t", "title": "t", "contents": "t buffer", "rendered": "<h4 class='item'>type t = <a href=\"./api/Node.html#type-buffer\" title=\"Node.buffer\">buffer</a></h4>", "breadcrumb": "Node_buffer"},
{"href": "./api/Node_buffer.html", "title": "Node_buffer", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_buffer"},
{"href": "./api/Node_buffer.html", "title": "Node_buffer", "contents": "Node Buffer API", "rendered": "Node Buffer API", "breadcrumb": "Node_buffer"},
{"href": "./api/Belt_MutableMapInt.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t key   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => 'b) => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a94 ], 'b)\n) => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), 'a => 'b) => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a95 ], 'b)) => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-update", "title": "update", "contents": "update t key option option  unit   ", "rendered": "<h4 class='item'>let update: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, option('a) => option('a)) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-updateU", "title": "updateU", "contents": "updateU t key fn option unit   ", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a96 option ], option('a))\n) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-set", "title": "set", "contents": "add m x y do the in-place modification, return m for chaining. If x was already bound in m, its previous binding disappears.", "rendered": "<code>add m x y</code> do the in-place modification, return <code>m</code> for chaining. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-set", "title": "set", "contents": "set t key unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-removeMany", "title": "removeMany", "contents": "remove m x do the in-place modification", "rendered": "<code>remove m x</code> do the in-place modification", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array key unit  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), array(<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>)) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-remove", "title": "remove", "contents": "remove m x do the in-place modification", "rendered": "<code>remove m x</code> do the in-place modification", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-remove", "title": "remove", "contents": "remove t key unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-getExn", "title": "getExn", "contents": "getExn t key  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>) => 'a</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t key   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => 'a</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t key undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined key ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-maximum", "title": "maximum", "contents": "maximum t option key ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => option((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined key ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-minimum", "title": "minimum", "contents": "minimum t option key ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => option((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option key ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-minKey", "title": "minKey", "contents": "minKey t option key ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array key ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => array(<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-toArray", "title": "toArray", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => array((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-toList", "title": "toList", "contents": "toList t list key ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => list((<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p. The application order of p is unspecified.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>. The application order of <code>p</code> is unspecified.", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-some", "title": "some", "contents": "some t key bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a97 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p. The application order of p is unspecified.", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>. The application order of <code>p</code> is unspecified.", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-every", "title": "every", "contents": "every t key bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a98 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-reduce", "title": "reduce", "contents": "reduce t key      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), 'b, ('b, <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'b30 * key * 'a99 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the key as first argument, and the associated value as second argument. The application order of f is in increasing order.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. The application order of <code>f</code> is in increasing order.", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-forEach", "title": "forEach", "contents": "forEach t key unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), (<a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>, 'a) => unit) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a100 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-eq", "title": "eq", "contents": "eq m1 m2 cmp", "rendered": "<code>eq m1 m2 cmp</code>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), ('a, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a101 * 'a101 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-cmp", "title": "cmp", "contents": "cmp m1 m2 cmp First compare by size, if size is the same, compare by key, value pair", "rendered": "<code>cmp m1 m2 cmp</code> First compare by size, if size is the same, compare by key, value pair", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), ('a, 'a) => int) => int</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a102 * 'a102 ], int)\n) => int</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableMapInt.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Belt_MutableMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#type-key", "title": "key", "contents": "key int", "rendered": "<h4 class='item'>type key = int</h4>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html", "title": "Belt_MutableMapInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html", "title": "Belt_MutableMapInt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Belt_MutableMapInt.html#Belt_MutableMapInt", "title": "Belt_MutableMapInt", "contents": "", "rendered": "", "breadcrumb": "Belt_MutableMapInt"},
{"href": "./api/Js_result.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('good, 'bad) = | Ok('good) | Error('bad)\n</h4>", "breadcrumb": "Js_result"},
{"href": "./api/Js_result.html", "title": "Js_result", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_result"},
{"href": "./api/Js_result.html", "title": "Js_result", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_result"},
{"href": "./api/Js_result.html#Js_result", "title": "Js_result", "contents": "", "rendered": "", "breadcrumb": "Js_result"},
{"href": "./api/Belt_HashMapInt.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array((<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => array(int)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array key unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a), array((<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'a))) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'a)) => <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array key ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => array(<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => array((<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'a))</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-keepMapInPlace", "title": "keepMapInPlace", "contents": "keepMapInPlace t key option   unit  ", "rendered": "<h4 class='item'>let keepMapInPlace: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a), (<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'a) => option('a)) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-keepMapInPlaceU", "title": "keepMapInPlaceU", "contents": "keepMapInPlaceU t fn option unit  ", "rendered": "<h4 class='item'>let keepMapInPlaceU: (\n  <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'a73 ], option('a))\n) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-reduce", "title": "reduce", "contents": "reduce t key      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b), 'c, ('c, <a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'b) => 'c) => 'c</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c5 * key * 'b26 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-forEach", "title": "forEach", "contents": "forEach t key unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b), (<a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'b) => unit) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'b27 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-remove", "title": "remove", "contents": "remove t key unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b), <a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>) => option('a)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-set", "title": "set", "contents": "setDone tbl k v if k does not exist, add the binding k,v, otherwise, update the old value with the new v", "rendered": "<code>setDone tbl k v</code> if <code>k</code> does not exist, add the binding <code>k,v</code>, otherwise, update the old value with the new <code>v</code>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-set", "title": "set", "contents": "set t key unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a), <a href=\"./api/Belt_HashMapInt.html#type-key\">key</a>, 'a) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b) => unit</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#value-make", "title": "make", "contents": "make int t hintSize", "rendered": "<h4 class='item'>let make: (~hintSize: int) => <a href=\"./api/Belt_HashMapInt.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('b)</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#type-key", "title": "key", "contents": "key int", "rendered": "<h4 class='item'>type key = int</h4>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html", "title": "Belt_HashMapInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html", "title": "Belt_HashMapInt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Belt_HashMapInt.html#Belt_HashMapInt", "title": "Belt_HashMapInt", "contents": "", "rendered": "", "breadcrumb": "Belt_HashMapInt"},
{"href": "./api/Node_module.html#value-module_", "title": "module_", "contents": "module_ Js t", "rendered": "<h4 class='item'>let module_: <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(\n  &lt; __cache : Node.node_module Js_dict.t &gt;\n)</h4>", "breadcrumb": "Node_module"},
{"href": "./api/Node_module.html", "title": "Node_module", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_module"},
{"href": "./api/Node_module.html", "title": "Node_module", "contents": "Node Module API", "rendered": "Node Module API", "breadcrumb": "Node_module"},
{"href": "./api/Belt_internalSetInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array value N t value ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-addMutate", "title": "addMutate", "contents": "addMutate N t value value N t value  ", "rendered": "<h4 class='item'>let addMutate: (<a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>), <a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-getExn", "title": "getExn", "contents": "getExn t value value  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>) => <a href=\"./api/Belt_internalSetInt.html#type-value\">value</a></h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t value Undefined t value  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>) => <a href=\"./api/Js.html#module-Undefined\" title=\"Js.Undefined\">Undefined</a>.<a href=\"./api/Js.html#type-Undefined.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-get", "title": "get", "contents": "get t value option value  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>) => option(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-eq", "title": "eq", "contents": "eq t N t value bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)) => bool</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-cmp", "title": "cmp", "contents": "cmp N t value N t value int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>), <a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)) => int</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-compareAux", "title": "compareAux", "contents": "compareAux list node value list node value int  ", "rendered": "<h4 class='item'>let compareAux: (\n  list(<a href=\"./api/Belt_internalSetInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)),\n  list(<a href=\"./api/Belt_internalSetInt.html#type-N.node\" title=\"N.node\">node</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>))\n) => int</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#value-has", "title": "has", "contents": "has t value bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_internalSetInt.html#type-t\">t</a>, <a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#type-t", "title": "t", "contents": "t N t value", "rendered": "<h4 class='item'>type t = <a href=\"./api/Belt_internalSetInt.html#module-N\">N</a>.<a href=\"./api/Belt_internalSetInt.html#type-N.t\">t</a>(<a href=\"./api/Belt_internalSetInt.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#type-value", "title": "value", "contents": "value int", "rendered": "<h4 class='item'>type value = int</h4>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html", "title": "Belt_internalSetInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html", "title": "Belt_internalSetInt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_internalSetInt.html#Belt_internalSetInt", "title": "Belt_internalSetInt", "contents": "", "rendered": "", "breadcrumb": "Belt_internalSetInt"},
{"href": "./api/Belt_MutableSetString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-split", "title": "split", "contents": "split s key return a fresh copy of each", "rendered": "<code>split s key</code> return a fresh copy of each", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-split", "title": "split", "contents": "split t value t t bool  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => ((<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>), bool)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-getExn", "title": "getExn", "contents": "getExn t value value  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t value undefined value  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-get", "title": "get", "contents": "get t value option value  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => option(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined value ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-maximum", "title": "maximum", "contents": "maximum t option value ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => option(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined value ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-minimum", "title": "minimum", "contents": "minimum t option value ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => option(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-toArray", "title": "toArray", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-toArray", "title": "toArray", "contents": "toArray t array value ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-toList", "title": "toList", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-toList", "title": "toList", "contents": "toList t list value ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => list(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => int</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-partition", "title": "partition", "contents": "partition s p returns a fresh copy pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition s p</code> returns a fresh copy pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-partition", "title": "partition", "contents": "partition t value bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a> => bool) => (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => (\n  <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>,\n  <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>\n)</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-keep", "title": "keep", "contents": "keep s p returns a fresh copy of the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep s p</code> returns a fresh copy of the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-keep", "title": "keep", "contents": "keep t value bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a> => bool) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p. Oder unspecified.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>. Oder unspecified.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-some", "title": "some", "contents": "some t value bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-every", "title": "every", "contents": "every p s checks if all elements of the set satisfy the predicate p. Order unspecified.", "rendered": "<code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-every", "title": "every", "contents": "every t value bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-reduce", "title": "reduce", "contents": "Iterate in increasing order.", "rendered": "Iterate in increasing order.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-reduce", "title": "reduce", "contents": "reduce t value     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, 'a, ('a, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => 'a) => 'a</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>,\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a104 * value ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-forEach", "title": "forEach", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-forEach", "title": "forEach", "contents": "forEach t value unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a> => unit) => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], unit)) => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-eq", "title": "eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-cmp", "title": "cmp", "contents": "cmp t t int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-diff", "title": "diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-intersect", "title": "intersect", "contents": "intersect t t t  ", "rendered": "<h4 class='item'>let intersect: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-union", "title": "union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array value unit  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)) => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-removeCheck", "title": "removeCheck", "contents": "removeCheck t value bool  ", "rendered": "<h4 class='item'>let removeCheck: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-remove", "title": "remove", "contents": "remove t value unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array value unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>)) => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-addCheck", "title": "addCheck", "contents": "addCheck t value bool  ", "rendered": "<h4 class='item'>let addCheck: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-add", "title": "add", "contents": "add t value unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => unit</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-has", "title": "has", "contents": "has t value bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MutableSetString.html#type-t\">t</a>, <a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a> => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-ofArray", "title": "ofArray", "contents": "ofArray array value t ", "rendered": "<h4 class='item'>let ofArray: array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array value t ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_MutableSetString.html#type-value\">value</a>) => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Belt_MutableSetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#type-t", "title": "t", "contents": "The type of sets.", "rendered": "The type of sets.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#type-value", "title": "value", "contents": "The type of the set elements.", "rendered": "The type of the set elements.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html#type-value", "title": "value", "contents": "value string", "rendered": "<h4 class='item'>type value = string</h4>", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html", "title": "Belt_MutableSetString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html", "title": "Belt_MutableSetString", "contents": "See MutableSet", "rendered": "<strong>See</strong> MutableSet", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html", "title": "Belt_MutableSetString", "contents": "It is more efficient in general, the API is the same with MutableSet except its key type is fixed, and identity is not needed(using the built-in one)", "rendered": "It is more efficient in general, the API is the same with MutableSet except its key type is fixed, and identity is not needed(using the built-in one)", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_MutableSetString.html", "title": "Belt_MutableSetString", "contents": "This module is MutableSet specialized with key type to be a primitive type.", "rendered": "This module is MutableSet specialized with key type to be a primitive type.", "breadcrumb": "Belt_MutableSetString"},
{"href": "./api/Belt_internalSetBuckets.html#value-getBucketHistogram", "title": "getBucketHistogram", "contents": "getBucketHistogram t array int ", "rendered": "<h4 class='item'>let getBucketHistogram: <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('a, 'a, 'a) => array(int)</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-logStats", "title": "logStats", "contents": "logStats t unit ", "rendered": "<h4 class='item'>let logStats: <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('a, 'a, 'a), 'b, ('b, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('a, 'a, 'a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b37 * 'a143 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('a, 'a, 'a) => array('a)</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-fillArray", "title": "fillArray", "contents": "fillArray int array bucket int   ", "rendered": "<h4 class='item'>let fillArray: (int, array('a), <a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a)) => int</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('hash, 'eq, 'a), 'a => unit) => unit</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('hash, 'eq, 'a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a144 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('hash, 'eq, 'a) => <a href=\"./api/Belt_internalSetBuckets.html#type-t\">t</a>('hash, 'eq, 'a)</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-next", "title": "next", "contents": "next bucket opt bucket ", "rendered": "<h4 class='item'>let next: <a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a) => <a href=\"./api/Belt_internalSetBuckets.html#type-C.opt\" title=\"C.opt\">opt</a>(<a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a))</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-nextSet", "title": "nextSet", "contents": "nextSet bucket opt bucket unit  ", "rendered": "<h4 class='item'>let nextSet: (<a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a), <a href=\"./api/Belt_internalSetBuckets.html#type-C.opt\" title=\"C.opt\">opt</a>(<a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a))) => unit</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-key", "title": "key", "contents": "key bucket ", "rendered": "<h4 class='item'>let key: <a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a) => 'a</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-keySet", "title": "keySet", "contents": "keySet bucket unit  ", "rendered": "<h4 class='item'>let keySet: (<a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a), 'a) => unit</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#value-bucket", "title": "bucket", "contents": "bucket opt bucket bucket key next", "rendered": "<h4 class='item'>let bucket: (~key: 'a, ~next: <a href=\"./api/Belt_internalSetBuckets.html#type-C.opt\" title=\"C.opt\">opt</a>(<a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a))) => <a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a)</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#type-t", "title": "t", "contents": "t container bucket", "rendered": "<h4 class='item'>type t('hash, 'eq, 'a) = <a href=\"./api/Belt_internalSetBuckets.html#type-C.container\" title=\"C.container\">container</a>('hash, 'eq, <a href=\"./api/Belt_internalSetBuckets.html#type-bucket\">bucket</a>('a))</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#type-bucket", "title": "bucket", "contents": "bucket ", "rendered": "<h4 class='item'>type bucket('a)</h4>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html", "title": "Belt_internalSetBuckets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html", "title": "Belt_internalSetBuckets", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html", "title": "Belt_internalSetBuckets", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Belt_internalSetBuckets.html#Belt_internalSetBuckets", "title": "Belt_internalSetBuckets", "contents": "", "rendered": "", "breadcrumb": "Belt_internalSetBuckets"},
{"href": "./api/Node_process.html#value-deleteEnvVar", "title": "deleteEnvVar", "contents": "deleteEnvVar string unit ", "rendered": "<h4 class='item'>let deleteEnvVar: string => unit</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-putEnvVar", "title": "putEnvVar", "contents": "putEnvVar string string unit  ", "rendered": "<h4 class='item'>let putEnvVar: (string, string) => unit</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-uptime", "title": "uptime", "contents": "The process.uptime() method returns the number of seconds the current Node.js process has been running.)", "rendered": "The process.uptime() method returns the number of seconds the current Node.js process has been running.)", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-uptime", "title": "uptime", "contents": "uptime t unit float  ", "rendered": "<h4 class='item'>let uptime: (<a href=\"./api/Node_process.html#type-t\">t</a>, unit) => float</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-cwd", "title": "cwd", "contents": "The process.uptime() method returns the number of seconds the current Node.js process has been running.)", "rendered": "The process.uptime() method returns the number of seconds the current Node.js process has been running.)", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-cwd", "title": "cwd", "contents": "cwd unit string ", "rendered": "<h4 class='item'>let cwd: unit => string</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-exit", "title": "exit", "contents": "exit int unit ", "rendered": "<h4 class='item'>let exit: int => unit</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-argv", "title": "argv", "contents": "argv array string", "rendered": "<h4 class='item'>let argv: array(string)</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#value-process", "title": "process", "contents": "process t", "rendered": "<h4 class='item'>let process: <a href=\"./api/Node_process.html#type-t\">t</a></h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#type-t", "title": "t", "contents": "t Js t", "rendered": "<h4 class='item'>type t = <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(\n  &lt; abort : (unit -&gt; unit [@bs.meth]); arch : string; argv : string array;\n  chdir : (string -&gt; unit [@bs.meth]); cwd : (unit -&gt; string [@bs.meth]);\n  disconnect : (unit -&gt; unit [@bs.meth]); env : string Js_dict.t;\n  platform : string &gt;\n)</h4>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html", "title": "Node_process", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html", "title": "Node_process", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Node_process"},
{"href": "./api/Node_process.html#Node_process", "title": "Node_process", "contents": "", "rendered": "", "breadcrumb": "Node_process"},
{"href": "./api/Js_list.html#value-equal", "title": "equal", "contents": "equal fn bool list list bool   ", "rendered": "<h4 class='item'>let equal: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a7 * 'a7 ], bool),\n  list('a),\n  list('a)\n) => bool</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-toVector", "title": "toVector", "contents": "toVector t Js_vector t ", "rendered": "<h4 class='item'>let toVector: <a href=\"./api/Js_list.html#type-t\">t</a>('a) => <a href=\"./api/Js_vector.html\">Js_vector</a>.<a href=\"./api/Js_vector.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-init", "title": "init", "contents": "init int fn t  ", "rendered": "<h4 class='item'>let init: (int, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], 'a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-countBy", "title": "countBy", "contents": "countBy fn bool list int  ", "rendered": "<h4 class='item'>let countBy: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a8 ], bool),\n  list('a)\n) => int</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-filterMap", "title": "filterMap", "contents": "filterMap fn option t t  ", "rendered": "<h4 class='item'>let filterMap: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a9 ], option('b)),\n  <a href=\"./api/Js_list.html#type-t\">t</a>('a)\n) => <a href=\"./api/Js_list.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-filter", "title": "filter", "contents": "filter fn bool t t  ", "rendered": "<h4 class='item'>let filter: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a10 ], bool), <a href=\"./api/Js_list.html#type-t\">t</a>('a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-flatten", "title": "flatten", "contents": "flatten t t t ", "rendered": "<h4 class='item'>let flatten: <a href=\"./api/Js_list.html#type-t\">t</a>(<a href=\"./api/Js_list.html#type-t\">t</a>('a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-foldRight", "title": "foldRight", "contents": "Application order is right to left tail-recursive.", "rendered": "Application order is right to left tail-recursive.", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-foldRight", "title": "foldRight", "contents": "foldRight fn list   ", "rendered": "<h4 class='item'>let foldRight: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a11 * 'b2 ], 'b),\n  list('a),\n  'b\n) => 'b</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-foldLeft", "title": "foldLeft", "contents": "Application order is left to right, tail recurisve", "rendered": "Application order is left to right, tail recurisve", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-foldLeft", "title": "foldLeft", "contents": "foldLeft fn list   ", "rendered": "<h4 class='item'>let foldLeft: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a12 * 'b3 ], 'a),\n  'a,\n  list('b)\n) => 'a</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-iteri", "title": "iteri", "contents": "iteri fn unit t unit  ", "rendered": "<h4 class='item'>let iteri: (\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a13 ], unit),\n  <a href=\"./api/Js_list.html#type-t\">t</a>('a)\n) => unit</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-iter", "title": "iter", "contents": "iter fn unit t unit  ", "rendered": "<h4 class='item'>let iter: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a14 ], unit), <a href=\"./api/Js_list.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-map", "title": "map", "contents": "map fn t t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a15 ], 'b), <a href=\"./api/Js_list.html#type-t\">t</a>('a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-mapRev", "title": "mapRev", "contents": "mapRev fn t t  ", "rendered": "<h4 class='item'>let mapRev: (<a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a16 ], 'b), <a href=\"./api/Js_list.html#type-t\">t</a>('a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-rev", "title": "rev", "contents": "rev t t ", "rendered": "<h4 class='item'>let rev: <a href=\"./api/Js_list.html#type-t\">t</a>('a) => <a href=\"./api/Js_list.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-revAppend", "title": "revAppend", "contents": "revAppend t t t  ", "rendered": "<h4 class='item'>let revAppend: (<a href=\"./api/Js_list.html#type-t\">t</a>('a), <a href=\"./api/Js_list.html#type-t\">t</a>('a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-nth", "title": "nth", "contents": "nth t int option  ", "rendered": "<h4 class='item'>let nth: (<a href=\"./api/Js_list.html#type-t\">t</a>('a), int) => option('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-tl", "title": "tl", "contents": "tl t option t ", "rendered": "<h4 class='item'>let tl: <a href=\"./api/Js_list.html#type-t\">t</a>('a) => option(<a href=\"./api/Js_list.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-hd", "title": "hd", "contents": "hd t option ", "rendered": "<h4 class='item'>let hd: <a href=\"./api/Js_list.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Js_list.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-cons", "title": "cons", "contents": "cons t t  ", "rendered": "<h4 class='item'>let cons: ('a, <a href=\"./api/Js_list.html#type-t\">t</a>('a)) => <a href=\"./api/Js_list.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Js_list.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#type-t", "title": "t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html", "title": "Js_list", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html", "title": "Js_list", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_list"},
{"href": "./api/Js_list.html#Js_list", "title": "Js_list", "contents": "", "rendered": "", "breadcrumb": "Js_list"},
{"href": "./api/Js_mapperRt.html#value-fromIntAssert", "title": "fromIntAssert", "contents": "fromIntAssert int array int int int   ", "rendered": "<h4 class='item'>let fromIntAssert: (int, array(int), int) => int</h4>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-fromInt", "title": "fromInt", "contents": "fromInt len array int return the mapped enum", "rendered": "<code>fromInt len array int</code> return the mapped <code>enum</code>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-fromInt", "title": "fromInt", "contents": "fromInt int array int int option int   ", "rendered": "<h4 class='item'>let fromInt: (int, array(int), int) => option(int)</h4>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-toInt", "title": "toInt", "contents": "toInt enum array Based on the value of enum, return its mapped int", "rendered": "<code>toInt enum array</code> Based on the value of <code>enum</code>, return its mapped int", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-toInt", "title": "toInt", "contents": "toInt int array int int  ", "rendered": "<h4 class='item'>let toInt: (int, array(int)) => int</h4>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-revSearchAssert", "title": "revSearchAssert", "contents": "revSearchAssert int array int string string int   ", "rendered": "<h4 class='item'>let revSearchAssert: (\n  int,\n  array((int, string)),\n  string\n) => int</h4>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-revSearch", "title": "revSearch", "contents": "revSearch len assocArray value Based on the value to find the associated key, i.e, polyvar", "rendered": "<code>revSearch len assocArray value</code> Based on the value to find the associated key, i.e, polyvar", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-revSearch", "title": "revSearch", "contents": "revSearch int array int string string option int   ", "rendered": "<h4 class='item'>let revSearch: (\n  int,\n  array((int, string)),\n  string\n) => option(int)</h4>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-binarySearch", "title": "binarySearch", "contents": "serach polyvar assocArray Search hashvariant of polyvar to get the returned string, assume that polvar exists in the array", "rendered": "<code>serach polyvar assocArray</code> Search hashvariant of <code>polyvar</code> to get the returned string, assume that <code>polvar</code> exists in the array", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#value-binarySearch", "title": "binarySearch", "contents": "binarySearch int int array int   ", "rendered": "<h4 class='item'>let binarySearch: (int, int, array((int, 'a))) => 'a</h4>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html", "title": "Js_mapperRt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html", "title": "Js_mapperRt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Js_mapperRt.html#Js_mapperRt", "title": "Js_mapperRt", "contents": "", "rendered": "", "breadcrumb": "Js_mapperRt"},
{"href": "./api/Belt_Option.html#value-cmp", "title": "cmp", "contents": "cmp option option int   int   ", "rendered": "<h4 class='item'>let cmp: (option('a), option('b), ('a, 'b) => int) => int</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-cmpU", "title": "cmpU", "contents": "cmpU option option fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  option('a),\n  option('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a67 * 'b22 ], int)\n) => int</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-eq", "title": "eq", "contents": "eq option option bool   bool   ", "rendered": "<h4 class='item'>let eq: (option('a), option('b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-eqU", "title": "eqU", "contents": "eqU option option fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  option('a),\n  option('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a68 * 'b23 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-isNone", "title": "isNone", "contents": "isNone option bool ", "rendered": "<h4 class='item'>let isNone: option('a) => bool</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-isSome", "title": "isSome", "contents": "isSome option bool ", "rendered": "<h4 class='item'>let isSome: option('a) => bool</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault option  ", "rendered": "<h4 class='item'>let getWithDefault: (option('a), 'a) => 'a</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-flatMap", "title": "flatMap", "contents": "flatMap option option  option  ", "rendered": "<h4 class='item'>let flatMap: (option('a), 'a => option('b)) => option('b)</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-flatMapU", "title": "flatMapU", "contents": "flatMapU option fn option option  ", "rendered": "<h4 class='item'>let flatMapU: (\n  option('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a69 ], option('b))\n) => option('b)</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-map", "title": "map", "contents": "map option  option  ", "rendered": "<h4 class='item'>let map: (option('a), 'a => 'b) => option('b)</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-mapU", "title": "mapU", "contents": "mapU option fn option  ", "rendered": "<h4 class='item'>let mapU: (\n  option('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a70 ], 'b)\n) => option('b)</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-mapWithDefault", "title": "mapWithDefault", "contents": "mapWithDefault option    ", "rendered": "<h4 class='item'>let mapWithDefault: (option('a), 'b, 'a => 'b) => 'b</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-mapWithDefaultU", "title": "mapWithDefaultU", "contents": "mapWithDefaultU option fn   ", "rendered": "<h4 class='item'>let mapWithDefaultU: (\n  option('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a71 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html#value-getExn", "title": "getExn", "contents": "getExn option ", "rendered": "<h4 class='item'>let getExn: option('a) => 'a</h4>", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html", "title": "Belt_Option", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html", "title": "Belt_Option", "contents": "Utilities for option data type", "rendered": "Utilities for option data type", "breadcrumb": "Belt_Option"},
{"href": "./api/Belt_Option.html", "title": "Belt_Option", "contents": "Option", "rendered": "Option", "breadcrumb": "Belt_Option"},
{"href": "./api/Dom.html#type-eventPointerId", "title": "eventPointerId", "contents": "eventPointerId ", "rendered": "<h4 class='item'>type eventPointerId</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-svgPoint", "title": "svgPoint", "contents": "svgPoint ", "rendered": "<h4 class='item'>type svgPoint</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-svgRect", "title": "svgRect", "contents": "svgRect ", "rendered": "<h4 class='item'>type svgRect</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-treeWalker", "title": "treeWalker", "contents": "treeWalker ", "rendered": "<h4 class='item'>type treeWalker</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-nodeIterator", "title": "nodeIterator", "contents": "nodeIterator ", "rendered": "<h4 class='item'>type nodeIterator</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-nodeFilter", "title": "nodeFilter", "contents": "nodeFilter acceptNode element int ", "rendered": "<h4 class='item'>type nodeFilter = {acceptNode: <a href=\"./api/Dom.html#type-element\">element</a> => int}</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-domSettableTokenList", "title": "domSettableTokenList", "contents": "domSettableTokenList ", "rendered": "<h4 class='item'>type domSettableTokenList</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-domTokenList", "title": "domTokenList", "contents": "domTokenList ", "rendered": "<h4 class='item'>type domTokenList</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-selection", "title": "selection", "contents": "selection ", "rendered": "<h4 class='item'>type selection</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-range", "title": "range", "contents": "range ", "rendered": "<h4 class='item'>type range</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-wheelEvent", "title": "wheelEvent", "contents": "wheelEvent uiEvent_like _wheelEvent", "rendered": "<h4 class='item'>type wheelEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_wheelEvent\">_wheelEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_wheelEvent", "title": "_wheelEvent", "contents": "_wheelEvent ", "rendered": "<h4 class='item'>type _wheelEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-webGlContextEvent", "title": "webGlContextEvent", "contents": "webGlContextEvent event_like _webGlContextEvent", "rendered": "<h4 class='item'>type webGlContextEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_webGlContextEvent\">_webGlContextEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_webGlContextEvent", "title": "_webGlContextEvent", "contents": "_webGlContextEvent ", "rendered": "<h4 class='item'>type _webGlContextEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-transitionEvent", "title": "transitionEvent", "contents": "transitionEvent event_like _transitionEvent", "rendered": "<h4 class='item'>type transitionEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_transitionEvent\">_transitionEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_transitionEvent", "title": "_transitionEvent", "contents": "_transitionEvent ", "rendered": "<h4 class='item'>type _transitionEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-trackEvent", "title": "trackEvent", "contents": "trackEvent event_like _trackEvent", "rendered": "<h4 class='item'>type trackEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_trackEvent\">_trackEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_trackEvent", "title": "_trackEvent", "contents": "_trackEvent ", "rendered": "<h4 class='item'>type _trackEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-touchEvent", "title": "touchEvent", "contents": "touchEvent uiEvent_like _touchEvent", "rendered": "<h4 class='item'>type touchEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_touchEvent\">_touchEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_touchEvent", "title": "_touchEvent", "contents": "_touchEvent ", "rendered": "<h4 class='item'>type _touchEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-timeEvent", "title": "timeEvent", "contents": "timeEvent event_like _timeEvent", "rendered": "<h4 class='item'>type timeEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_timeEvent\">_timeEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_timeEvent", "title": "_timeEvent", "contents": "_timeEvent ", "rendered": "<h4 class='item'>type _timeEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-svgZoomEvent", "title": "svgZoomEvent", "contents": "svgZoomEvent event_like _svgZoomEvent", "rendered": "<h4 class='item'>type svgZoomEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_svgZoomEvent\">_svgZoomEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_svgZoomEvent", "title": "_svgZoomEvent", "contents": "_svgZoomEvent ", "rendered": "<h4 class='item'>type _svgZoomEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-storageEvent", "title": "storageEvent", "contents": "storageEvent event_like _storageEvent", "rendered": "<h4 class='item'>type storageEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_storageEvent\">_storageEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_storageEvent", "title": "_storageEvent", "contents": "_storageEvent ", "rendered": "<h4 class='item'>type _storageEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-relatedEvent", "title": "relatedEvent", "contents": "relatedEvent event_like _relatedEvent", "rendered": "<h4 class='item'>type relatedEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_relatedEvent\">_relatedEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_relatedEvent", "title": "_relatedEvent", "contents": "_relatedEvent ", "rendered": "<h4 class='item'>type _relatedEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-progressEvent", "title": "progressEvent", "contents": "progressEvent event_like _progressEvent", "rendered": "<h4 class='item'>type progressEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_progressEvent\">_progressEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_progressEvent", "title": "_progressEvent", "contents": "_progressEvent ", "rendered": "<h4 class='item'>type _progressEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-popStateEvent", "title": "popStateEvent", "contents": "popStateEvent event_like _popStateEvent", "rendered": "<h4 class='item'>type popStateEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_popStateEvent\">_popStateEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_popStateEvent", "title": "_popStateEvent", "contents": "_popStateEvent ", "rendered": "<h4 class='item'>type _popStateEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-pointerEvent", "title": "pointerEvent", "contents": "pointerEvent mouseEvent_like _pointerEvent", "rendered": "<h4 class='item'>type pointerEvent = <a href=\"./api/Dom.html#type-mouseEvent_like\">mouseEvent_like</a>(<a href=\"./api/Dom.html#type-_pointerEvent\">_pointerEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_pointerEvent", "title": "_pointerEvent", "contents": "_pointerEvent ", "rendered": "<h4 class='item'>type _pointerEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-pageTransitionEvent", "title": "pageTransitionEvent", "contents": "pageTransitionEvent event_like _pageTransitionEvent", "rendered": "<h4 class='item'>type pageTransitionEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_pageTransitionEvent\">_pageTransitionEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_pageTransitionEvent", "title": "_pageTransitionEvent", "contents": "_pageTransitionEvent ", "rendered": "<h4 class='item'>type _pageTransitionEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-mouseEvent", "title": "mouseEvent", "contents": "mouseEvent mouseEvent_like _baseClass", "rendered": "<h4 class='item'>type mouseEvent = <a href=\"./api/Dom.html#type-mouseEvent_like\">mouseEvent_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-mouseEvent_like", "title": "mouseEvent_like", "contents": "mouseEvent_like uiEvent_like _mouseEvent", "rendered": "<h4 class='item'>type mouseEvent_like('a) = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_mouseEvent\">_mouseEvent</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_mouseEvent", "title": "_mouseEvent", "contents": "_mouseEvent ", "rendered": "<h4 class='item'>type _mouseEvent('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-keyboardEvent", "title": "keyboardEvent", "contents": "keyboardEvent uiEvent_like _keyboardEvent", "rendered": "<h4 class='item'>type keyboardEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_keyboardEvent\">_keyboardEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_keyboardEvent", "title": "_keyboardEvent", "contents": "_keyboardEvent ", "rendered": "<h4 class='item'>type _keyboardEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-inputEvent", "title": "inputEvent", "contents": "inputEvent uiEvent_like _inputEvent", "rendered": "<h4 class='item'>type inputEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_inputEvent\">_inputEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_inputEvent", "title": "_inputEvent", "contents": "_inputEvent ", "rendered": "<h4 class='item'>type _inputEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-idbVersionChangeEvent", "title": "idbVersionChangeEvent", "contents": "idbVersionChangeEvent event_like _idbVersionChangeEvent", "rendered": "<h4 class='item'>type idbVersionChangeEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(\n  <a href=\"./api/Dom.html#type-_idbVersionChangeEvent\">_idbVersionChangeEvent</a>\n)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_idbVersionChangeEvent", "title": "_idbVersionChangeEvent", "contents": "_idbVersionChangeEvent ", "rendered": "<h4 class='item'>type _idbVersionChangeEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-focusEvent", "title": "focusEvent", "contents": "focusEvent uiEvent_like _focusEvent", "rendered": "<h4 class='item'>type focusEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_focusEvent\">_focusEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_focusEvent", "title": "_focusEvent", "contents": "_focusEvent ", "rendered": "<h4 class='item'>type _focusEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-errorEvent", "title": "errorEvent", "contents": "errorEvent event_like _errorEvent", "rendered": "<h4 class='item'>type errorEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_errorEvent\">_errorEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_errorEvent", "title": "_errorEvent", "contents": "_errorEvent ", "rendered": "<h4 class='item'>type _errorEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-dragEvent", "title": "dragEvent", "contents": "dragEvent event_like _dragEvent", "rendered": "<h4 class='item'>type dragEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_dragEvent\">_dragEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_dragEvent", "title": "_dragEvent", "contents": "_dragEvent ", "rendered": "<h4 class='item'>type _dragEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-customEvent", "title": "customEvent", "contents": "customEvent event_like _customEvent", "rendered": "<h4 class='item'>type customEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_customEvent\">_customEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_customEvent", "title": "_customEvent", "contents": "_customEvent ", "rendered": "<h4 class='item'>type _customEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-compositionEvent", "title": "compositionEvent", "contents": "compositionEvent uiEvent_like _compositionEvent", "rendered": "<h4 class='item'>type compositionEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_compositionEvent\">_compositionEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_compositionEvent", "title": "_compositionEvent", "contents": "_compositionEvent ", "rendered": "<h4 class='item'>type _compositionEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-closeEvent", "title": "closeEvent", "contents": "closeEvent event_like _closeEvent", "rendered": "<h4 class='item'>type closeEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_closeEvent\">_closeEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_closeEvent", "title": "_closeEvent", "contents": "_closeEvent ", "rendered": "<h4 class='item'>type _closeEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-clipboardEvent", "title": "clipboardEvent", "contents": "clipboardEvent event_like _clipboardEvent", "rendered": "<h4 class='item'>type clipboardEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_clipboardEvent\">_clipboardEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_clipboardEvent", "title": "_clipboardEvent", "contents": "_clipboardEvent ", "rendered": "<h4 class='item'>type _clipboardEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-beforeUnloadEvent", "title": "beforeUnloadEvent", "contents": "beforeUnloadEvent event_like _beforeUnloadEvent", "rendered": "<h4 class='item'>type beforeUnloadEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_beforeUnloadEvent\">_beforeUnloadEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_beforeUnloadEvent", "title": "_beforeUnloadEvent", "contents": "_beforeUnloadEvent ", "rendered": "<h4 class='item'>type _beforeUnloadEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-animationEvent", "title": "animationEvent", "contents": "animationEvent event_like _animationEvent", "rendered": "<h4 class='item'>type animationEvent = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_animationEvent\">_animationEvent</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_animationEvent", "title": "_animationEvent", "contents": "_animationEvent ", "rendered": "<h4 class='item'>type _animationEvent</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-uiEvent", "title": "uiEvent", "contents": "uiEvent uiEvent_like _baseClass", "rendered": "<h4 class='item'>type uiEvent = <a href=\"./api/Dom.html#type-uiEvent_like\">uiEvent_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-uiEvent_like", "title": "uiEvent_like", "contents": "uiEvent_like event_like _uiEvent", "rendered": "<h4 class='item'>type uiEvent_like('a) = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_uiEvent\">_uiEvent</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_uiEvent", "title": "_uiEvent", "contents": "_uiEvent ", "rendered": "<h4 class='item'>type _uiEvent('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-event", "title": "event", "contents": "event event_like _baseClass", "rendered": "<h4 class='item'>type event = <a href=\"./api/Dom.html#type-event_like\">event_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-event_like", "title": "event_like", "contents": "event_like ", "rendered": "<h4 class='item'>type event_like('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-xmlDocument", "title": "xmlDocument", "contents": "xmlDocument document_like _xmlDocument", "rendered": "<h4 class='item'>type xmlDocument = <a href=\"./api/Dom.html#type-document_like\">document_like</a>(<a href=\"./api/Dom.html#type-_xmlDocument\">_xmlDocument</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_xmlDocument", "title": "_xmlDocument", "contents": "_xmlDocument ", "rendered": "<h4 class='item'>type _xmlDocument</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-window", "title": "window", "contents": "window ", "rendered": "<h4 class='item'>type window</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-location", "title": "location", "contents": "location ", "rendered": "<h4 class='item'>type location</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-htmlSlotElement", "title": "htmlSlotElement", "contents": "htmlSlotElement htmlElement_like _htmlSlotElement", "rendered": "<h4 class='item'>type htmlSlotElement = <a href=\"./api/Dom.html#type-htmlElement_like\">htmlElement_like</a>(<a href=\"./api/Dom.html#type-_htmlSlotElement\">_htmlSlotElement</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_htmlSlotElement", "title": "_htmlSlotElement", "contents": "_htmlSlotElement ", "rendered": "<h4 class='item'>type _htmlSlotElement</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-htmlElement", "title": "htmlElement", "contents": "htmlElement htmlElement_like _baseClass", "rendered": "<h4 class='item'>type htmlElement = <a href=\"./api/Dom.html#type-htmlElement_like\">htmlElement_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-htmlElement_like", "title": "htmlElement_like", "contents": "htmlElement_like element_like _htmlElement", "rendered": "<h4 class='item'>type htmlElement_like('a) = <a href=\"./api/Dom.html#type-element_like\">element_like</a>(<a href=\"./api/Dom.html#type-_htmlElement\">_htmlElement</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_htmlElement", "title": "_htmlElement", "contents": "_htmlElement ", "rendered": "<h4 class='item'>type _htmlElement('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-htmlDocument", "title": "htmlDocument", "contents": "htmlDocument document_like _htmlDocument", "rendered": "<h4 class='item'>type htmlDocument = <a href=\"./api/Dom.html#type-document_like\">document_like</a>(<a href=\"./api/Dom.html#type-_htmlDocument\">_htmlDocument</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_htmlDocument", "title": "_htmlDocument", "contents": "_htmlDocument ", "rendered": "<h4 class='item'>type _htmlDocument</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-history", "title": "history", "contents": "history ", "rendered": "<h4 class='item'>type history</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-domStringMap", "title": "domStringMap", "contents": "domStringMap ", "rendered": "<h4 class='item'>type domStringMap</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-dataTransfer", "title": "dataTransfer", "contents": "dataTransfer ", "rendered": "<h4 class='item'>type dataTransfer</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-domRect", "title": "domRect", "contents": "domRect ", "rendered": "<h4 class='item'>type domRect</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-text", "title": "text", "contents": "text characterData_like _text", "rendered": "<h4 class='item'>type text = <a href=\"./api/Dom.html#type-characterData_like\">characterData_like</a>(<a href=\"./api/Dom.html#type-_text\">_text</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_text", "title": "_text", "contents": "_text ", "rendered": "<h4 class='item'>type _text</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-shadowRoot", "title": "shadowRoot", "contents": "shadowRoot node_like _shadowRoot", "rendered": "<h4 class='item'>type shadowRoot = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_shadowRoot\">_shadowRoot</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_shadowRoot", "title": "_shadowRoot", "contents": "_shadowRoot ", "rendered": "<h4 class='item'>type _shadowRoot</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-processingInstruction", "title": "processingInstruction", "contents": "processingInstruction ", "rendered": "<h4 class='item'>type processingInstruction</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-nodeList", "title": "nodeList", "contents": "nodeList ", "rendered": "<h4 class='item'>type nodeList</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-namedNodeMap", "title": "namedNodeMap", "contents": "namedNodeMap ", "rendered": "<h4 class='item'>type namedNodeMap</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-mutationRecord", "title": "mutationRecord", "contents": "mutationRecord ", "rendered": "<h4 class='item'>type mutationRecord</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-mutationObserver", "title": "mutationObserver", "contents": "mutationObserver ", "rendered": "<h4 class='item'>type mutationObserver</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-htmlCollection", "title": "htmlCollection", "contents": "htmlCollection ", "rendered": "<h4 class='item'>type htmlCollection</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-element", "title": "element", "contents": "element element_like _baseClass", "rendered": "<h4 class='item'>type element = <a href=\"./api/Dom.html#type-element_like\">element_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-element_like", "title": "element_like", "contents": "element_like node_like _element", "rendered": "<h4 class='item'>type element_like('a) = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_element\">_element</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_element", "title": "_element", "contents": "_element ", "rendered": "<h4 class='item'>type _element('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-domImplementation", "title": "domImplementation", "contents": "domImplementation ", "rendered": "<h4 class='item'>type domImplementation</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-documentType", "title": "documentType", "contents": "documentType node_like _documentType", "rendered": "<h4 class='item'>type documentType = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_documentType\">_documentType</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_documentType", "title": "_documentType", "contents": "_documentType ", "rendered": "<h4 class='item'>type _documentType</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-documentFragment", "title": "documentFragment", "contents": "documentFragment node_like _documentFragment", "rendered": "<h4 class='item'>type documentFragment = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_documentFragment\">_documentFragment</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_documentFragment", "title": "_documentFragment", "contents": "_documentFragment ", "rendered": "<h4 class='item'>type _documentFragment</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-document", "title": "document", "contents": "document document_like _baseClass", "rendered": "<h4 class='item'>type document = <a href=\"./api/Dom.html#type-document_like\">document_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-document_like", "title": "document_like", "contents": "document_like node_like _document", "rendered": "<h4 class='item'>type document_like('a) = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_document\">_document</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_document", "title": "_document", "contents": "_document ", "rendered": "<h4 class='item'>type _document('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-comment", "title": "comment", "contents": "comment characterData_like _comment", "rendered": "<h4 class='item'>type comment = <a href=\"./api/Dom.html#type-characterData_like\">characterData_like</a>(<a href=\"./api/Dom.html#type-_comment\">_comment</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_comment", "title": "_comment", "contents": "_comment ", "rendered": "<h4 class='item'>type _comment</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-cdataSection", "title": "cdataSection", "contents": "cdataSection characterData_like _cdataSection", "rendered": "<h4 class='item'>type cdataSection = <a href=\"./api/Dom.html#type-characterData_like\">characterData_like</a>(<a href=\"./api/Dom.html#type-_cdataSection\">_cdataSection</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_cdataSection", "title": "_cdataSection", "contents": "_cdataSection ", "rendered": "<h4 class='item'>type _cdataSection</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-characterData", "title": "characterData", "contents": "characterData characterData_like _baseClass", "rendered": "<h4 class='item'>type characterData = <a href=\"./api/Dom.html#type-characterData_like\">characterData_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-characterData_like", "title": "characterData_like", "contents": "characterData_like node_like _characterData", "rendered": "<h4 class='item'>type characterData_like('a) = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_characterData\">_characterData</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_characterData", "title": "_characterData", "contents": "_characterData ", "rendered": "<h4 class='item'>type _characterData('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-attr", "title": "attr", "contents": "attr node_like _attr", "rendered": "<h4 class='item'>type attr = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_attr\">_attr</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_attr", "title": "_attr", "contents": "_attr ", "rendered": "<h4 class='item'>type _attr</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-node", "title": "node", "contents": "node node_like _baseClass", "rendered": "<h4 class='item'>type node = <a href=\"./api/Dom.html#type-node_like\">node_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-node_like", "title": "node_like", "contents": "node_like eventTarget_like _node", "rendered": "<h4 class='item'>type node_like('a) = <a href=\"./api/Dom.html#type-eventTarget_like\">eventTarget_like</a>(<a href=\"./api/Dom.html#type-_node\">_node</a>('a))</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_node", "title": "_node", "contents": "_node ", "rendered": "<h4 class='item'>type _node('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-eventTarget", "title": "eventTarget", "contents": "eventTarget eventTarget_like _baseClass", "rendered": "<h4 class='item'>type eventTarget = <a href=\"./api/Dom.html#type-eventTarget_like\">eventTarget_like</a>(<a href=\"./api/Dom.html#type-_baseClass\">_baseClass</a>)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-eventTarget_like", "title": "eventTarget_like", "contents": "eventTarget_like ", "rendered": "<h4 class='item'>type eventTarget_like('a)</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-cssStyleSheet", "title": "cssStyleSheet", "contents": "cssStyleSheet ", "rendered": "<h4 class='item'>type cssStyleSheet</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-cssStyleDeclaration", "title": "cssStyleDeclaration", "contents": "cssStyleDeclaration ", "rendered": "<h4 class='item'>type cssStyleDeclaration</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-animation", "title": "animation", "contents": "animation ", "rendered": "<h4 class='item'>type animation</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#type-_baseClass", "title": "_baseClass", "contents": "_baseClass ", "rendered": "<h4 class='item'>type _baseClass</h4>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html", "title": "Dom", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Dom"},
{"href": "./api/Dom.html", "title": "Dom", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Dom"},
{"href": "./api/Dom.html#Dom", "title": "Dom", "contents": "", "rendered": "", "breadcrumb": "Dom"},
{"href": "./api/Js_json.html#value-stringifyAny", "title": "stringifyAny", "contents": "stringifyAny option string ", "rendered": "<h4 class='item'>let stringifyAny: 'a => option(string)</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-stringifyWithSpace", "title": "stringifyWithSpace", "contents": "stringifyWithSpace t int string  ", "rendered": "<h4 class='item'>let stringifyWithSpace: (<a href=\"./api/Js_json.html#type-t\">t</a>, int) => string</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-stringify", "title": "stringify", "contents": "stringify t string ", "rendered": "<h4 class='item'>let stringify: <a href=\"./api/Js_json.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "code block", "contents": "(* parse a complex JSON string *)\n\nlet getIds s =\n  let json =\n    try\n      Js.Json.parseExn s\n    with\n    | _ -> failwith \"Error parsing JSON string\"\n  in\n  match Js.Json.classify json with\n  | Js.Json.JSONObject value ->\n    (* In this branch, compiler infer value : Js.Json.t Js.Dict.t *)\n    begin match Js.Dict.get value \"ids\" with\n    | Some ids ->\n      begin match Js.Json.classify ids with\n      | Js.Json.JSONArray ids ->\n        (* In this branch compiler infer ids : Js.Json.t array *)\n        ids\n      | _ -> failwith \"Expected an array\"\n      end\n    | None -> failwith \"Expected an `ids` property\"\n    end\n  | _ -> failwith \"Expected an object\"\n\n(* prints `1, 2, 3` *)\nlet _ =\n  Js.log \\@\\@ getIds {| { \"ids\" : [1, 2, 3 ] } |}", "rendered": "<pre><code>(* parse a complex JSON string *)\n\nlet getIds s =\n  let json =\n    try\n      Js.Json.parseExn s\n    with\n    | _ -> failwith \"Error parsing JSON string\"\n  in\n  match Js.Json.classify json with\n  | Js.Json.JSONObject value ->\n    (* In this branch, compiler infer value : Js.Json.t Js.Dict.t *)\n    begin match Js.Dict.get value \"ids\" with\n    | Some ids ->\n      begin match Js.Json.classify ids with\n      | Js.Json.JSONArray ids ->\n        (* In this branch compiler infer ids : Js.Json.t array *)\n        ids\n      | _ -> failwith \"Expected an array\"\n      end\n    | None -> failwith \"Expected an `ids` property\"\n    end\n  | _ -> failwith \"Expected an object\"\n\n(* prints `1, 2, 3` *)\nlet _ =\n  Js.log \\@\\@ getIds {| { \"ids\" : [1, 2, 3 ] } |}</code></pre>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "code block", "contents": "(* parse a simple JSON string *)\n\nlet json =\n  try\n    Js.Json.parseExn {| \"foo\" |}\n  with\n  | _ -> failwith \"Error parsing JSON string\"\nin\nmatch Js.Json.classify json with\n| Js.Json.JSONString value -> Js.log value\n| _ -> failwith \"Expected a string\"", "rendered": "<pre><code>(* parse a simple JSON string *)\n\nlet json =\n  try\n    Js.Json.parseExn {| \"foo\" |}\n  with\n  | _ -> failwith \"Error parsing JSON string\"\nin\nmatch Js.Json.classify json with\n| Js.Json.JSONString value -> Js.log value\n| _ -> failwith \"Expected a string\"</code></pre>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "if given string is not a valid JSON. Note SyntaxError is a JavaScript exception.", "rendered": "if given string is not a valid JSON. Note <code>SyntaxError</code> is a JavaScript exception.", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse'><p>MDN</p>\n</a>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "Raises: SyntaxErrorif given string is not a valid JSON. Note SyntaxError is a JavaScript exception.\n\n(* parse a simple JSON string *)\n\nlet json =\n  try\n    Js.Json.parseExn {| &quot;foo&quot; |}\n  with\n  | _ -&gt; failwith &quot;Error parsing JSON string&quot;\nin\nmatch Js.Json.classify json with\n| Js.Json.JSONString value -&gt; Js.log value\n| _ -&gt; failwith &quot;Expected a string&quot;(* parse a complex JSON string *)\n\nlet getIds s =\n  let json =\n    try\n      Js.Json.parseExn s\n    with\n    | _ -&gt; failwith &quot;Error parsing JSON string&quot;\n  in\n  match Js.Json.classify json with\n  | Js.Json.JSONObject value -&gt;\n    (* In this branch, compiler infer value : Js.Json.t Js.Dict.t *)\n    begin match Js.Dict.get value &quot;ids&quot; with\n    | Some ids -&gt;\n      begin match Js.Json.classify ids with\n      | Js.Json.JSONArray ids -&gt;\n        (* In this branch compiler infer ids : Js.Json.t array *)\n        ids\n      | _ -&gt; failwith &quot;Expected an array&quot;\n      end\n    | None -&gt; failwith &quot;Expected an `ids` property&quot;\n    end\n  | _ -&gt; failwith &quot;Expected an object&quot;\n\n(* prints `1, 2, 3` *)\nlet _ =\n  Js.log \\@\\@ getIds {| { &quot;ids&quot; : [1, 2, 3 ] } |}", "rendered": "Raises: SyntaxError<p>if given string is not a valid JSON. Note <code>SyntaxError</code> is a JavaScript exception.</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='85' id='block-85'><code>(* parse a simple JSON string *)\n\nlet json =\n  try\n    Js.Json.parseExn {| &quot;foo&quot; |}\n  with\n  | _ -&gt; failwith &quot;Error parsing JSON string&quot;\nin\nmatch Js.Json.classify json with\n| Js.Json.JSONString value -&gt; Js.log value\n| _ -&gt; failwith &quot;Expected a string&quot;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"85\">#open Js_json\n(* parse a simple JSON string *)\n\nlet json =\n  try\n    Js.Json.parseExn {| \"foo\" |}\n  with\n  | _ -> failwith \"Error parsing JSON string\"\nin\nmatch Js.Json.classify json with\n| Js.Json.JSONString value -> Js.log value\n| _ -> failwith \"Expected a string\"</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 9, characters 0-2:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='85-alt' id='block-85-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div><div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='84' id='block-84'><code>(* parse a complex JSON string *)\n\nlet getIds s =\n  let json =\n    try\n      Js.Json.parseExn s\n    with\n    | _ -&gt; failwith &quot;Error parsing JSON string&quot;\n  in\n  match Js.Json.classify json with\n  | Js.Json.JSONObject value -&gt;\n    (* In this branch, compiler infer value : Js.Json.t Js.Dict.t *)\n    begin match Js.Dict.get value &quot;ids&quot; with\n    | Some ids -&gt;\n      begin match Js.Json.classify ids with\n      | Js.Json.JSONArray ids -&gt;\n        (* In this branch compiler infer ids : Js.Json.t array *)\n        ids\n      | _ -&gt; failwith &quot;Expected an array&quot;\n      end\n    | None -&gt; failwith &quot;Expected an `ids` property&quot;\n    end\n  | _ -&gt; failwith &quot;Expected an object&quot;\n\n(* prints `1, 2, 3` *)\nlet _ =\n  Js.log \\@\\@ getIds {| { &quot;ids&quot; : [1, 2, 3 ] } |}</code></pre>\n  \n  <script type='docre-source' data-block-id=\"84\">#open Js_json\n(* parse a complex JSON string *)\n\nlet getIds s =\n  let json =\n    try\n      Js.Json.parseExn s\n    with\n    | _ -> failwith \"Error parsing JSON string\"\n  in\n  match Js.Json.classify json with\n  | Js.Json.JSONObject value ->\n    (* In this branch, compiler infer value : Js.Json.t Js.Dict.t *)\n    begin match Js.Dict.get value \"ids\" with\n    | Some ids ->\n      begin match Js.Json.classify ids with\n      | Js.Json.JSONArray ids ->\n        (* In this branch compiler infer ids : Js.Json.t array *)\n        ids\n      | _ -> failwith \"Expected an array\"\n      end\n    | None -> failwith \"Expected an `ids` property\"\n    end\n  | _ -> failwith \"Expected an object\"\n\n(* prints `1, 2, 3` *)\nlet _ =\n  Js.log \\@\\@ getIds {| { \"ids\" : [1, 2, 3 ] } |}</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 28, characters 9-10:\nError: Illegal character (\\\\)</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='84-alt' id='block-84-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "Returns a JSON data structure", "rendered": "<strong>Returns</strong> a JSON data structure", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "parseExn s parses the string s into a JSON data structure", "rendered": "<code>parseExn s</code> parses the string <code>s</code> into a JSON data structure", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-parseExn", "title": "parseExn", "contents": "parseExn string t ", "rendered": "<h4 class='item'>let parseExn: string => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#String-conversion", "title": "String conversion", "contents": "", "rendered": "", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-objectArray", "title": "objectArray", "contents": "objectArray a makes a JSON array of the JsDict.t array a", "rendered": "<code>objectArray a</code> makes a JSON array of the <code>JsDict.t array</code> <code>a</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-objectArray", "title": "objectArray", "contents": "objectArray array Js_dict t t t ", "rendered": "<h4 class='item'>let objectArray: array(<a href=\"./api/Js_dict.html\">Js_dict</a>.<a href=\"./api/Js_dict.html#type-t\">t</a>(<a href=\"./api/Js_json.html#type-t\">t</a>)) => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-booleanArray", "title": "booleanArray", "contents": "booleanArray makes a JSON array of the bool array a", "rendered": "<code>booleanArray</code> makes a JSON array of the <code>bool array</code> <code>a</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-booleanArray", "title": "booleanArray", "contents": "booleanArray array bool t ", "rendered": "<h4 class='item'>let booleanArray: array(bool) => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-numberArray", "title": "numberArray", "contents": "numberArray a makes a JSON array of the float array a", "rendered": "<code>numberArray a</code> makes a JSON array of the <code>float array</code> <code>a</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-numberArray", "title": "numberArray", "contents": "numberArray array float t ", "rendered": "<h4 class='item'>let numberArray: array(float) => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-stringArray", "title": "stringArray", "contents": "stringArray a makes a JSON array of the string array a", "rendered": "<code>stringArray a</code> makes a JSON array of the <code>string array</code> <code>a</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-stringArray", "title": "stringArray", "contents": "stringArray array string t ", "rendered": "<h4 class='item'>let stringArray: array(string) => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "Js_json", "contents": "The functions below are specialized for specific array type which happened to be already JSON object in the BuckleScript runtime. Therefore they are more efficient (constant time rather than linear conversion).", "rendered": "The functions below are specialized for specific array type which happened to be already JSON object in the BuckleScript runtime. Therefore they are more efficient (constant time rather than linear conversion).", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-array", "title": "array", "contents": "array_ a makes a JSON array of the Js.Json.t array a", "rendered": "<code>array_ a</code> makes a JSON array of the <code>Js.Json.t array</code> <code>a</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-array", "title": "array", "contents": "array array t t ", "rendered": "<h4 class='item'>let array: array(<a href=\"./api/Js_json.html#type-t\">t</a>) => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-object_", "title": "object_", "contents": "object_ dict makes a JSON objet of the Js.Dict.t dict", "rendered": "<code>object_ dict</code> makes a JSON objet of the <code>Js.Dict.t</code> <code>dict</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-object_", "title": "object_", "contents": "object_ Js_dict t t t ", "rendered": "<h4 class='item'>let object_: <a href=\"./api/Js_dict.html\">Js_dict</a>.<a href=\"./api/Js_dict.html#type-t\">t</a>(<a href=\"./api/Js_json.html#type-t\">t</a>) => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-boolean", "title": "boolean", "contents": "boolean b makes a JSON boolean of the bool b", "rendered": "<code>boolean b</code> makes a JSON boolean of the <code>bool</code> <code>b</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-boolean", "title": "boolean", "contents": "boolean bool t ", "rendered": "<h4 class='item'>let boolean: bool => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-number", "title": "number", "contents": "number n makes a JSON number of the float n", "rendered": "<code>number n</code> makes a JSON number of the <code>float</code> <code>n</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-number", "title": "number", "contents": "number float t ", "rendered": "<h4 class='item'>let number: float => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-string", "title": "string", "contents": "string s makes a JSON string of the string s", "rendered": "<code>string s</code> makes a JSON string of the <code>string</code> <code>s</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-string", "title": "string", "contents": "string string t ", "rendered": "<h4 class='item'>let string: string => <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-null", "title": "null", "contents": "null is the singleton null JSON value", "rendered": "<code>null</code> is the singleton null JSON value", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-null", "title": "null", "contents": "null t", "rendered": "<h4 class='item'>let null: <a href=\"./api/Js_json.html#type-t\">t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "Js_json", "contents": "Those functions allows the construction of an arbitrary complex JSON values.", "rendered": "Those functions allows the construction of an arbitrary complex JSON values.", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#Construtors", "title": "Construtors", "contents": "", "rendered": "", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeNull", "title": "decodeNull", "contents": "decodeNull json returns Some null if json is a null, None otherwise", "rendered": "<code>decodeNull json</code> returns <code>Some null</code> if <code>json</code> is a null, <code>None</code> otherwise", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeNull", "title": "decodeNull", "contents": "decodeNull t option Js_null t ", "rendered": "<h4 class='item'>let decodeNull: <a href=\"./api/Js_json.html#type-t\">t</a> => option(Js_null.t('a))</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeBoolean", "title": "decodeBoolean", "contents": "decodeBoolean json returns Some b if json is a boolean, None otherwise", "rendered": "<code>decodeBoolean json</code> returns <code>Some b</code> if <code>json</code> is a boolean, <code>None</code> otherwise", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeBoolean", "title": "decodeBoolean", "contents": "decodeBoolean t option bool ", "rendered": "<h4 class='item'>let decodeBoolean: <a href=\"./api/Js_json.html#type-t\">t</a> => option(bool)</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeArray", "title": "decodeArray", "contents": "decodeArray json returns Some a if json is an array, None otherwise", "rendered": "<code>decodeArray json</code> returns <code>Some a</code> if <code>json</code> is an array, <code>None</code> otherwise", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeArray", "title": "decodeArray", "contents": "decodeArray t option array t ", "rendered": "<h4 class='item'>let decodeArray: <a href=\"./api/Js_json.html#type-t\">t</a> => option(array(<a href=\"./api/Js_json.html#type-t\">t</a>))</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeObject", "title": "decodeObject", "contents": "decodeObject json returns Some o if json is an object, None otherwise", "rendered": "<code>decodeObject json</code> returns <code>Some o</code> if <code>json</code> is an object, <code>None</code> otherwise", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeObject", "title": "decodeObject", "contents": "decodeObject t option Js_dict t t ", "rendered": "<h4 class='item'>let decodeObject: <a href=\"./api/Js_json.html#type-t\">t</a> => option(<a href=\"./api/Js_dict.html\">Js_dict</a>.<a href=\"./api/Js_dict.html#type-t\">t</a>(<a href=\"./api/Js_json.html#type-t\">t</a>))</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeNumber", "title": "decodeNumber", "contents": "decodeNumber json returns Some n if json is a number, None otherwise", "rendered": "<code>decodeNumber json</code> returns <code>Some n</code> if <code>json</code> is a number, <code>None</code> otherwise", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeNumber", "title": "decodeNumber", "contents": "decodeNumber t option float ", "rendered": "<h4 class='item'>let decodeNumber: <a href=\"./api/Js_json.html#type-t\">t</a> => option(float)</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeString", "title": "decodeString", "contents": "decodeString json returns Some s if json is a string, None otherwise", "rendered": "<code>decodeString json</code> returns <code>Some s</code> if <code>json</code> is a string, <code>None</code> otherwise", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-decodeString", "title": "decodeString", "contents": "decodeString t option Js_string t ", "rendered": "<h4 class='item'>let decodeString: <a href=\"./api/Js_json.html#type-t\">t</a> => option(<a href=\"./api/Js_string.html\">Js_string</a>.<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-test", "title": "test", "contents": "test v kind returns true if v is of kind", "rendered": "<code>test v kind</code> returns true if <code>v</code> is of <code>kind</code>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-test", "title": "test", "contents": "test kind bool  ", "rendered": "<h4 class='item'>let test: ('a, <a href=\"./api/Js_json.html#type-kind\">kind</a>('b)) => bool</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#value-classify", "title": "classify", "contents": "classify t tagged_t ", "rendered": "<h4 class='item'>let classify: <a href=\"./api/Js_json.html#type-t\">t</a> => <a href=\"./api/Js_json.html#type-tagged_t\">tagged_t</a></h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#Accessor", "title": "Accessor", "contents": "", "rendered": "", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#type-tagged_t", "title": "tagged_t", "contents": "tagged_t string float Js_dict t t array t", "rendered": "<h4 class='item'>type tagged_t = \n  | JSONFalse\n  | JSONTrue\n  | JSONNull\n  | JSONString(string)\n  | JSONNumber(float)\n  | JSONObject(<a href=\"./api/Js_dict.html\">Js_dict</a>.<a href=\"./api/Js_dict.html#type-t\">t</a>(<a href=\"./api/Js_json.html#type-t\">t</a>))\n  | JSONArray(array(<a href=\"./api/Js_json.html#type-t\">t</a>))\n</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#type-kind", "title": "kind", "contents": "Underlying type of a JSON value", "rendered": "Underlying type of a JSON value", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#type-kind", "title": "kind", "contents": "kind kind Js_string t kind float kind Js_dict t t kind array t kind bool kind null_val", "rendered": "<h4 class='item'>type kind('_) = \n  | String: <a href=\"./api/Js_json.html#type-kind\">kind</a>(<a href=\"./api/Js_string.html\">Js_string</a>.<a href=\"./api/Js_string.html#type-t\">t</a>)\n  | Number: <a href=\"./api/Js_json.html#type-kind\">kind</a>(float)\n  | Object: <a href=\"./api/Js_json.html#type-kind\">kind</a>(<a href=\"./api/Js_dict.html\">Js_dict</a>.<a href=\"./api/Js_dict.html#type-t\">t</a>(<a href=\"./api/Js_json.html#type-t\">t</a>))\n  | Array: <a href=\"./api/Js_json.html#type-kind\">kind</a>(array(<a href=\"./api/Js_json.html#type-t\">t</a>))\n  | Boolean: <a href=\"./api/Js_json.html#type-kind\">kind</a>(bool)\n  | Null: <a href=\"./api/Js_json.html#type-kind\">kind</a>(<a href=\"./api/Js_types.html#type-null_val\" title=\"Js_types.null_val\">null_val</a>)\n</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#type-t", "title": "t", "contents": "The JSON data structure", "rendered": "The JSON data structure", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html#Types", "title": "Types", "contents": "", "rendered": "", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "Js_json", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "Js_json", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "Js_json", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON'><p>MDN</p>\n</a>", "breadcrumb": "Js_json"},
{"href": "./api/Js_json.html", "title": "Js_json", "contents": "Efficient JSON encoding using JavaScript API", "rendered": "Efficient JSON encoding using JavaScript API", "breadcrumb": "Js_json"},
{"href": "./api/Belt_MapInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t key   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => 'v2) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v27 ], 'v2)\n) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), 'v => 'v2) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'v28 ], 'v2)) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-split", "title": "split", "contents": "split x m returns a triple (l, data, r), where l is the map with all the bindings of m whose key is strictly less than x; r is the map with all the bindings of m whose key is strictly greater than x; data is None if m contains no binding for x, or Some v if m binds v to x.", "rendered": "<code>split x m</code> returns a triple <code>(l, data, r)</code>, where <code>l</code> is the map with all the bindings of <code>m</code> whose key is strictly less than <code>x</code>; <code>r</code> is the map with all the bindings of <code>m</code> whose key is strictly greater than <code>x</code>; <code>data</code> is <code>None</code> if <code>m</code> contains no binding for <code>x</code>, or <code>Some v</code> if <code>m</code> binds <code>v</code> to <code>x</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-split", "title": "split", "contents": "split key t t option t  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)) => (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), option('v), <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-partition", "title": "partition", "contents": "partition m p returns a pair of maps (m1, m2), where m1 contains all the bindings of s that satisfy the predicate p, and m2 is the map with all the bindings of s that do not satisfy p.", "rendered": "<code>partition m p</code> returns a pair of maps <code>(m1, m2)</code>, where <code>m1</code> contains all the bindings of <code>s</code> that satisfy the predicate <code>p</code>, and <code>m2</code> is the map with all the bindings of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-partition", "title": "partition", "contents": "partition t key bool   t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => bool) => (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v29 ], bool)\n) => (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-keep", "title": "keep", "contents": "keep m p returns the map with all the bindings in m that satisfy predicate p.", "rendered": "<code>keep m p</code> returns the map with all the bindings in <code>m</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-keep", "title": "keep", "contents": "keep t key bool   t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => bool) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v30 ], bool)\n) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-merge", "title": "merge", "contents": "merge m1 m2 f computes a map whose keys is a subset of keys of m1 and of m2. The presence of each such binding, and the corresponding value, is determined with the function f.", "rendered": "<code>merge m1 m2 f</code> computes a map whose keys is a subset of keys of <code>m1</code> and of <code>m2</code>. The presence of each such binding, and the corresponding value, is determined with the function <code>f</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-merge", "title": "merge", "contents": "merge t t key option option option    t   ", "rendered": "<h4 class='item'>let merge: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v2),\n  (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, option('v), option('v2)) => option('c)\n) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-mergeU", "title": "mergeU", "contents": "mergeU t t fn option t   ", "rendered": "<h4 class='item'>let mergeU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v2),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_3 of key * 'v31 option * 'v210 option ],\n    option('c)\n  )\n) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-mergeArray", "title": "mergeArray", "contents": "mergeArray t array key t  ", "rendered": "<h4 class='item'>let mergeArray: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), array((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-update", "title": "update", "contents": "update t key option option  t   ", "rendered": "<h4 class='item'>let update: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>, option('v) => option('v)) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-updateU", "title": "updateU", "contents": "updateU t key fn option t   ", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapInt.html#type-key\">key</a>,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'v32 option ], option('v))\n) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-set", "title": "set", "contents": "add m x y returns a map containing the same bindings as m, plus a binding of x to y. If x was already bound in m, its previous binding disappears.", "rendered": "<code>add m x y</code> returns a map containing the same bindings as <code>m</code>, plus a binding of <code>x</code> to <code>y</code>. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-set", "title": "set", "contents": "set t key t   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-removeMany", "title": "removeMany", "contents": "remove m x returns a map containing the same bindings as m, except for x which is unbound in the returned map.", "rendered": "<code>remove m x</code> returns a map containing the same bindings as <code>m</code>, except for <code>x</code> which is unbound in the returned map.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array key t  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), array(<a href=\"./api/Belt_MapInt.html#type-key\">key</a>)) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-remove", "title": "remove", "contents": "remove m x returns a map containing the same bindings as m, except for x which is unbound in the returned map.", "rendered": "<code>remove m x</code> returns a map containing the same bindings as <code>m</code>, except for <code>x</code> which is unbound in the returned map.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-remove", "title": "remove", "contents": "remove t key t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-getExn", "title": "getExn", "contents": "getExn t key  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>) => 'v</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t key   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => 'v</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t key undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>) => option('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined key ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-maximum", "title": "maximum", "contents": "maximum t option key ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => option((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined key ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-minimum", "title": "minimum", "contents": "minimum t option key ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => option((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option key ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-minKey", "title": "minKey", "contents": "minKey t option key ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => array('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array key ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => array(<a href=\"./api/Belt_MapInt.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v)) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v)) => <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-toArray", "title": "toArray", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => array((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-toList", "title": "toList", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-toList", "title": "toList", "contents": "toList t list key ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => list((<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-size", "title": "size", "contents": "some m p checks if at least one binding of the map satisfy the predicate p.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => int</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-some", "title": "some", "contents": "some t key bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v33 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p.", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-every", "title": "every", "contents": "every t key bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v34 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-reduce", "title": "reduce", "contents": "reduce t key      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), 'v2, ('v2, <a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => 'v2) => 'v2</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  'v2,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'v211 * key * 'v35 ], 'v2)\n) => 'v2</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the key as first argument, and the associated value as second argument. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-forEach", "title": "forEach", "contents": "forEach t key unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapInt.html#type-key\">key</a>, 'v) => unit) => unit</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v36 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-eq", "title": "eq", "contents": "equal m1 m2 cmp tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. cmp is the equality predicate used to compare the data associated with the keys.", "rendered": "<code>equal m1 m2 cmp</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>cmp</code> is the equality predicate used to compare the data associated with the keys.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), ('v, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v37 * 'v37 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), ('v, 'v) => int) => int</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v38 * 'v38 ], int)\n) => int</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapInt.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v) => bool</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_MapInt.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#type-t", "title": "t", "contents": "The type of maps from type key to type &#39;value.", "rendered": "The type of maps from type <code>key</code> to type <code>&#39;value</code>.", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('value)</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#type-key", "title": "key", "contents": "key int", "rendered": "<h4 class='item'>type key = int</h4>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html", "title": "Belt_MapInt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html", "title": "Belt_MapInt", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Belt_MapInt.html#Belt_MapInt", "title": "Belt_MapInt", "contents": "", "rendered": "", "breadcrumb": "Belt_MapInt"},
{"href": "./api/Js_console.html#value-timeEnd", "title": "timeEnd", "contents": "timeEnd string unit ", "rendered": "<h4 class='item'>let timeEnd: string => unit</h4>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html#value-timeStart", "title": "timeStart", "contents": "timeStart string unit ", "rendered": "<h4 class='item'>let timeStart: string => unit</h4>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html#value-warn", "title": "warn", "contents": "warn unit ", "rendered": "<h4 class='item'>let warn: 'a => unit</h4>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html#value-trace", "title": "trace", "contents": "trace unit unit ", "rendered": "<h4 class='item'>let trace: unit => unit</h4>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html#value-log", "title": "log", "contents": "log unit ", "rendered": "<h4 class='item'>let log: 'a => unit</h4>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html#value-error", "title": "error", "contents": "error unit ", "rendered": "<h4 class='item'>let error: 'a => unit</h4>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html", "title": "Js_console", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html", "title": "Js_console", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Js_console"},
{"href": "./api/Js_console.html#Js_console", "title": "Js_console", "contents": "", "rendered": "", "breadcrumb": "Js_console"},
{"href": "./api/Dom_storage.html#value-sessionStorage", "title": "sessionStorage", "contents": "sessionStorage t", "rendered": "<h4 class='item'>let sessionStorage: <a href=\"./api/Dom_storage.html#type-t\">t</a></h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-localStorage", "title": "localStorage", "contents": "localStorage t", "rendered": "<h4 class='item'>let localStorage: <a href=\"./api/Dom_storage.html#type-t\">t</a></h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Dom_storage.html#type-t\">t</a> => int</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-key", "title": "key", "contents": "key int t option string  ", "rendered": "<h4 class='item'>let key: (int, <a href=\"./api/Dom_storage.html#type-t\">t</a>) => option(string)</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Dom_storage.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-removeItem", "title": "removeItem", "contents": "removeItem string t unit  ", "rendered": "<h4 class='item'>let removeItem: (string, <a href=\"./api/Dom_storage.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-setItem", "title": "setItem", "contents": "setItem string string t unit   ", "rendered": "<h4 class='item'>let setItem: (string, string, <a href=\"./api/Dom_storage.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#value-getItem", "title": "getItem", "contents": "getItem string t option string  ", "rendered": "<h4 class='item'>let getItem: (string, <a href=\"./api/Dom_storage.html#type-t\">t</a>) => option(string)</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html", "title": "Dom_storage", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html", "title": "Dom_storage", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Dom_storage"},
{"href": "./api/Dom_storage.html#Dom_storage", "title": "Dom_storage", "contents": "", "rendered": "", "breadcrumb": "Dom_storage"},
{"href": "./api/Belt_SetString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-split", "title": "split", "contents": "split x s returns a triple (l, present, r), where l is the set of elements of s that are strictly less than x; r is the set of elements of s that are strictly greater than x; present is false if s contains no element equal to x, or true if s contains an element equal to x.", "rendered": "<code>split x s</code> returns a triple <code>(l, present, r)</code>, where <code>l</code> is the set of elements of <code>s</code> that are strictly less than <code>x</code>; <code>r</code> is the set of elements of <code>s</code> that are strictly greater than <code>x</code>; <code>present</code> is <code>false</code> if <code>s</code> contains no element equal to <code>x</code>, or <code>true</code> if <code>s</code> contains an element equal to <code>x</code>.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-split", "title": "split", "contents": "split t value t t bool  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => ((<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>), bool)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-getExn", "title": "getExn", "contents": "getExn t value value  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-value\">value</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t value undefined value  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-get", "title": "get", "contents": "get t value option value  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => option(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined value ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-maximum", "title": "maximum", "contents": "maximum t option value ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => option(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined value ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-minimum", "title": "minimum", "contents": "minimum t option value ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => option(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-toArray", "title": "toArray", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-toArray", "title": "toArray", "contents": "toArray t array value ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-toList", "title": "toList", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-toList", "title": "toList", "contents": "toList t list value ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => list(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => int</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-partition", "title": "partition", "contents": "partition p s returns a pair of sets (s1, s2), where s1 is the set of all the elements of s that satisfy the predicate p, and s2 is the set of all the elements of s that do not satisfy p.", "rendered": "<code>partition p s</code> returns a pair of sets <code>(s1, s2)</code>, where <code>s1</code> is the set of all the elements of <code>s</code> that satisfy the predicate <code>p</code>, and <code>s2</code> is the set of all the elements of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-partition", "title": "partition", "contents": "partition t value bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a> => bool) => (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => (\n  <a href=\"./api/Belt_SetString.html#type-t\">t</a>,\n  <a href=\"./api/Belt_SetString.html#type-t\">t</a>\n)</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-keep", "title": "keep", "contents": "keep p s returns the set of all elements in s that satisfy predicate p.", "rendered": "<code>keep p s</code> returns the set of all elements in <code>s</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-keep", "title": "keep", "contents": "keep t value bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a> => bool) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-some", "title": "some", "contents": "some p s checks if at least one element of the set satisfies the predicate p. Oder unspecified.", "rendered": "<code>some p s</code> checks if at least one element of the set satisfies the predicate <code>p</code>. Oder unspecified.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-some", "title": "some", "contents": "some t value bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-every", "title": "every", "contents": "every p s checks if all elements of the set satisfy the predicate p. Order unspecified.", "rendered": "<code>every p s</code> checks if all elements of the set satisfy the predicate <code>p</code>. Order unspecified.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-every", "title": "every", "contents": "every t value bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a> => bool) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], bool)) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-reduce", "title": "reduce", "contents": "Iterate in increasing order.", "rendered": "Iterate in increasing order.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-reduce", "title": "reduce", "contents": "reduce t value     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, 'a, ('a, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => 'a) => 'a</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_SetString.html#type-t\">t</a>,\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a108 * value ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-forEach", "title": "forEach", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-forEach", "title": "forEach", "contents": "forEach t value unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a> => unit) => unit</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of value ], unit)) => unit</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-eq", "title": "eq", "contents": "eq s1 s2 tests whether the sets s1 and s2 are equal, that is, contain equal elements.", "rendered": "<code>eq s1 s2</code> tests whether the sets <code>s1</code> and <code>s2</code> are equal, that is, contain equal elements.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-eq", "title": "eq", "contents": "eq t t bool  ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-cmp", "title": "cmp", "contents": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "rendered": "Total ordering between sets. Can be used as the ordering function for doing sets of sets.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-cmp", "title": "cmp", "contents": "cmp t t int  ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-subset", "title": "subset", "contents": "subset s1 s2 tests whether the set s1 is a subset of the set s2.", "rendered": "<code>subset s1 s2</code> tests whether the set <code>s1</code> is a subset of the set <code>s2</code>.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-subset", "title": "subset", "contents": "subset t t bool  ", "rendered": "<h4 class='item'>let subset: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-diff", "title": "diff", "contents": "diff t t t  ", "rendered": "<h4 class='item'>let diff: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-intersect", "title": "intersect", "contents": "intersect t t t  ", "rendered": "<h4 class='item'>let intersect: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-union", "title": "union", "contents": "union t t t  ", "rendered": "<h4 class='item'>let union: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-t\">t</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-removeMany", "title": "removeMany", "contents": "If x was not in s, s is returned unchanged.", "rendered": "If <code>x</code> was not in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array value t  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-remove", "title": "remove", "contents": "If x was not in s, s is returned unchanged.", "rendered": "If <code>x</code> was not in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-remove", "title": "remove", "contents": "remove t value t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-mergeMany", "title": "mergeMany", "contents": "If x was already in s, s is returned unchanged.", "rendered": "If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array value t  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>)) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-add", "title": "add", "contents": "If x was already in s, s is returned unchanged.", "rendered": "If <code>x</code> was already in <code>s</code>, <code>s</code> is returned unchanged.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-add", "title": "add", "contents": "add t value t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-has", "title": "has", "contents": "has t value bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_SetString.html#type-t\">t</a>, <a href=\"./api/Belt_SetString.html#type-value\">value</a>) => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_SetString.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-fromSortedArrayUnsafe", "title": "fromSortedArrayUnsafe", "contents": "fromSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let fromSortedArrayUnsafe: array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array value t ", "rendered": "<h4 class='item'>let fromArray: array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-ofSortedArrayUnsafe", "title": "ofSortedArrayUnsafe", "contents": "ofSortedArrayUnsafe array value t ", "rendered": "<h4 class='item'>let ofSortedArrayUnsafe: array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-ofArray", "title": "ofArray", "contents": "ofArray array value t ", "rendered": "<h4 class='item'>let ofArray: array(<a href=\"./api/Belt_SetString.html#type-value\">value</a>) => <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_SetString.html#type-t\">t</a></h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#type-t", "title": "t", "contents": "The type of sets.", "rendered": "The type of sets.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#type-value", "title": "value", "contents": "The type of the set elements.", "rendered": "The type of the set elements.", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html#type-value", "title": "value", "contents": "value string", "rendered": "<h4 class='item'>type value = string</h4>", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html", "title": "Belt_SetString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html", "title": "Belt_SetString", "contents": "See Set", "rendered": "<strong>See</strong> Set", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_SetString.html", "title": "Belt_SetString", "contents": "This module is Set specialized with value type to be a primitive type. It is more efficient in general, the API is the same with Belt_Set except its value type is fixed, and identity is not needed(using the built-in one)", "rendered": "This module is Set specialized with value type to be a primitive type. It is more efficient in general, the API is the same with Belt_Set except its value type is fixed, and identity is not needed(using the built-in one)", "breadcrumb": "Belt_SetString"},
{"href": "./api/Belt_Map.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_Map.html#type-t\">t</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-packIdData", "title": "packIdData", "contents": "the packed collection", "rendered": "the packed collection", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-packIdData", "title": "packIdData", "contents": "Returns: the packed collection\n\n", "rendered": "Returns: <p>the packed collection</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-packIdData", "title": "packIdData", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-packIdData", "title": "packIdData", "contents": "packIdData ~id ~data", "rendered": "<code>packIdData ~id ~data</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-packIdData", "title": "packIdData", "contents": "packIdData id Belt_MapDict t t id data", "rendered": "<h4 class='item'>let packIdData: (\n  ~id: <a href=\"./api/Belt_Map.html#type-id\">id</a>('k, 'id),\n  ~data: <a href=\"./api/Belt_MapDict.html\">Belt_MapDict</a>.<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id)\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getId", "title": "getId", "contents": "the identity of s0", "rendered": "the identity of <code>s0</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getId", "title": "getId", "contents": "Returns: the identity of s0\n\n", "rendered": "Returns: <p>the identity of <code>s0</code></p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getId", "title": "getId", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getId", "title": "getId", "contents": "getId s0", "rendered": "<code>getId s0</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getId", "title": "getId", "contents": "getId t id ", "rendered": "<h4 class='item'>let getId: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => <a href=\"./api/Belt_Map.html#type-id\">id</a>('k, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getData", "title": "getData", "contents": "the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing", "rendered": "the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getData", "title": "getData", "contents": "Returns: the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing\n\n", "rendered": "Returns: <p>the raw data (detached from comparator), but its type is still manifested, so that user can pass identity directly without boxing</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getData", "title": "getData", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getData", "title": "getData", "contents": "getData s0", "rendered": "<code>getData s0</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getData", "title": "getData", "contents": "getData t Belt_MapDict t ", "rendered": "<h4 class='item'>let getData: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => <a href=\"./api/Belt_MapDict.html\">Belt_MapDict</a>.<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mapWithKey", "title": "mapWithKey", "contents": "The same as map except that f is supplied with one more argument: the key", "rendered": "The same as map except that <code>f</code> is supplied with one more argument: the key", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey m f", "rendered": "<code>mapWithKey m f</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), ('k, 'v) => 'v2) => <a href=\"./api/Belt_Map.html#type-t\">t</a>(\n  'k,\n  'v2,\n  'id\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k12 * 'v12 ], 'v2)\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v2, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'v => 'v2) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v2, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'v13 ], 'v2)\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v2, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-split", "title": "split", "contents": "split x m returns a tuple (l r), data, where l is the map with all the bindings of m whose &#39;k is strictly less than x; r is the map with all the bindings of m whose &#39;k is strictly greater than x; data is None if m contains no binding for x, or Some v if m binds v to x.", "rendered": "<code>split x m</code> returns a tuple <code>(l r), data</code>, where <code>l</code> is the map with all the bindings of <code>m</code> whose &#39;k is strictly less than <code>x</code>; <code>r</code> is the map with all the bindings of <code>m</code> whose &#39;k is strictly greater than <code>x</code>; <code>data</code> is <code>None</code> if <code>m</code> contains no binding for <code>x</code>, or <code>Some v</code> if <code>m</code> binds <code>v</code> to <code>x</code>.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-split", "title": "split", "contents": "split t t t option  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k) => (\n  (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)),\n  option('v)\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-partition", "title": "partition", "contents": "partition m p returns a pair of maps (m1, m2), where m1 contains all the bindings of s that satisfy the predicate p, and m2 is the map with all the bindings of s that do not satisfy p.", "rendered": "<code>partition m p</code> returns a pair of maps <code>(m1, m2)</code>, where <code>m1</code> contains all the bindings of <code>s</code> that satisfy the predicate <code>p</code>, and <code>m2</code> is the map with all the bindings of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-partition", "title": "partition", "contents": "partition t bool   t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), ('k, 'v) => bool) => (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k13 * 'v14 ], bool)\n) => (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-keep", "title": "keep", "contents": "keep m p returns the map with all the bindings in m that satisfy predicate p.", "rendered": "<code>keep m p</code> returns the map with all the bindings in <code>m</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-keep", "title": "keep", "contents": "keep t bool   t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), ('k, 'v) => bool) => <a href=\"./api/Belt_Map.html#type-t\">t</a>(\n  'k,\n  'v,\n  'id\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k14 * 'v15 ], bool)\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-merge", "title": "merge", "contents": "merge m1 m2 f computes a map whose keys is a subset of keys of m1 and of m2. The presence of each such binding, and the corresponding value, is determined with the function f.", "rendered": "<code>merge m1 m2 f</code> computes a map whose keys is a subset of keys of <code>m1</code> and of <code>m2</code>. The presence of each such binding, and the corresponding value, is determined with the function <code>f</code>.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-merge", "title": "merge", "contents": "merge t t option option option    t   ", "rendered": "<h4 class='item'>let merge: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v2, 'id),\n  ('k, option('v), option('v2)) => option('v3)\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v3, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mergeU", "title": "mergeU", "contents": "mergeU t t fn option t   ", "rendered": "<h4 class='item'>let mergeU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v2, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_3 of 'k15 * 'v16 option * 'v22 option ],\n    option('v3)\n  )\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v3, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mergeMany", "title": "mergeMany", "contents": "Adding each of xs to s, note unlike add, the reference of return value might be changed even if all values in xs exist s", "rendered": "Adding each of <code>xs</code> to <code>s</code>, note unlike add, the reference of return value might be changed even if all values in <code>xs</code> exist <code>s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany s xs", "rendered": "<code>mergeMany s xs</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array t  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), array(('k, 'v))) => <a href=\"./api/Belt_Map.html#type-t\">t</a>(\n  'k,\n  'v,\n  'id\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-update", "title": "update", "contents": "update m x f returns a map containing the same bindings as m, except for the binding of x. Depending on the value of y where y is f (get x m), the binding of x is added, removed or updated. If y is None, the binding is removed if it exists; otherwise, if y is Some z then x is associated to z in the resulting map.", "rendered": "<code>update m x f</code> returns a map containing the same bindings as <code>m</code>, except for the binding of <code>x</code>. Depending on the value of <code>y</code> where <code>y</code> is <code>f (get x m)</code>, the binding of <code>x</code> is added, removed or updated. If <code>y</code> is <code>None</code>, the binding is removed if it exists; otherwise, if <code>y</code> is <code>Some z</code> then <code>x</code> is associated to <code>z</code> in the resulting map.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-update", "title": "update", "contents": "update t option option  t   ", "rendered": "<h4 class='item'>let update: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  'k,\n  option('v) => option('v)\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-updateU", "title": "updateU", "contents": "updateU t fn option t   ", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  'k,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'v17 option ], option('v))\n) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "let s0 =  (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp));;\n\nlet s1 = set s0 2 \"3\";;\n\nvaluesToArray s1 =  [\"1\";\"3\";\"3\"];;\n", "rendered": "<pre><code>let s0 =  (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp));;\n\nlet s1 = set s0 2 \"3\";;\n\nvaluesToArray s1 =  [\"1\";\"3\";\"3\"];;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-set", "title": "set", "contents": "set m x y  returns a map containing the same bindings as m, with a new binding of x to y. If x was already bound in m, its previous binding disappears.", "rendered": "<code>set m x y </code> returns a map containing the same bindings as <code>m</code>, with a new binding of <code>x</code> to <code>y</code>. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-set", "title": "set", "contents": "set t t   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k, 'v) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-removeMany", "title": "removeMany", "contents": "Removing each of xs to s, note unlike remove, the reference of return value might be changed even if none in xs exists s", "rendered": "Removing each of <code>xs</code> to <code>s</code>, note unlike remove, the reference of return value might be changed even if none in <code>xs</code> exists <code>s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-removeMany", "title": "removeMany", "contents": "removeMany s xs", "rendered": "<code>removeMany s xs</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array t  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), array('k)) => <a href=\"./api/Belt_Map.html#type-t\">t</a>(\n  'k,\n  'v,\n  'id\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "let s0 =  (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp));;\n\nlet s1 = remove s0 1;;\nlet s2 = remove s1 1;;\ns1 == s2 ;;\nkeysToArray s1 = [|2;3|];;\n", "rendered": "<pre><code>let s0 =  (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp));;\n\nlet s1 = remove s0 1;;\nlet s2 = remove s1 1;;\ns1 == s2 ;;\nkeysToArray s1 = [|2;3|];;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-remove", "title": "remove", "contents": "remove m x when x is not in m, m is returned reference unchanged.", "rendered": "<code>remove m x</code> when <code>x</code> is not in <code>m</code>, <code>m</code> is returned reference unchanged.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-remove", "title": "remove", "contents": "remove t t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getExn", "title": "getExn", "contents": "default when k is not found", "rendered": "<code>default</code> when <code>k</code> is not found", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getExn", "title": "getExn", "contents": "Returns: default when k is not found\n\n", "rendered": "Returns: <p><code>default</code> when <code>k</code> is not found</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getExn", "title": "getExn", "contents": "See get", "rendered": "<strong>See</strong> get", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getExn", "title": "getExn", "contents": "getWithDefault s k default", "rendered": "<code>getWithDefault s k default</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getExn", "title": "getExn", "contents": "getExn t  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k) => 'v</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getWithDefault", "title": "getWithDefault", "contents": "undefined when not found", "rendered": "<code>undefined</code> when not found", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getWithDefault", "title": "getWithDefault", "contents": "Returns: undefined when not found\n\n", "rendered": "Returns: <p><code>undefined</code> when not found</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getWithDefault", "title": "getWithDefault", "contents": "See get", "rendered": "<strong>See</strong> get", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k, 'v) => 'v</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getUndefined", "title": "getUndefined", "contents": "undefined when not found", "rendered": "<code>undefined</code> when not found", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getUndefined", "title": "getUndefined", "contents": "Returns: undefined when not found\n\n", "rendered": "Returns: <p><code>undefined</code> when not found</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getUndefined", "title": "getUndefined", "contents": "See get", "rendered": "<strong>See</strong> get", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('v)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "get (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) 2 =\nSome \"2\";;\nget (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) 2 =\nNone;;\n", "rendered": "<pre><code>get (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) 2 =\nSome \"2\";;\nget (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) 2 =\nNone;;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-get", "title": "get", "contents": "get s k", "rendered": "<code>get s k</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-get", "title": "get", "contents": "get t option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k) => option('v)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxUndefined", "title": "maxUndefined", "contents": "See maximum", "rendered": "<strong>See</strong> maximum", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('k, 'v))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maximum", "title": "maximum", "contents": "the maximum key value pair, None if not exist", "rendered": "the maximum key value pair, None if not exist", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maximum", "title": "maximum", "contents": "Returns: the maximum key value pair, None if not exist\n\n", "rendered": "Returns: <p>the maximum key value pair, None if not exist</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maximum", "title": "maximum", "contents": "maximum s", "rendered": "<code>maximum s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'a) => option(('k, 'v))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minUndefined", "title": "minUndefined", "contents": "See minimum", "rendered": "<strong>See</strong> minimum", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('k, 'v))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minimum", "title": "minimum", "contents": "the minimum key value pair, None if not exist", "rendered": "the minimum key value pair, None if not exist", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minimum", "title": "minimum", "contents": "Returns: the minimum key value pair, None if not exist\n\n", "rendered": "Returns: <p>the minimum key value pair, None if not exist</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minimum", "title": "minimum", "contents": "minimum s", "rendered": "<code>minimum s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'a) => option(('k, 'v))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "See maxKey", "rendered": "<strong>See</strong> maxKey", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('k)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxKey", "title": "maxKey", "contents": "the maximum key, None if not exist", "rendered": "the maximum key, None if not exist", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxKey", "title": "maxKey", "contents": "Returns: the maximum key, None if not exist\n\n", "rendered": "Returns: <p>the maximum key, None if not exist</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxKey", "title": "maxKey", "contents": "maxKey s", "rendered": "<code>maxKey s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'a, 'a) => option('k)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "See minKey", "rendered": "<strong>See</strong> minKey", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('k)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minKey", "title": "minKey", "contents": "the minimum key, None if not exist", "rendered": "the minimum key, None if not exist", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minKey", "title": "minKey", "contents": "Returns: the minimum key, None if not exist\n\n", "rendered": "Returns: <p>the minimum key, None if not exist</p>\n", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minKey", "title": "minKey", "contents": "minKey s", "rendered": "<code>minKey s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-minKey", "title": "minKey", "contents": "minKey t option ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'a, 'a) => option('k)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "keysToArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) =\n[|1;2;3|];;\n", "rendered": "<pre><code>keysToArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) =\n[|1;2;3|];;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-valuesToArray", "title": "valuesToArray", "contents": "keysToArray s", "rendered": "<code>keysToArray s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => array('v)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "toArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = [1,\"1\";2,\"2\";3,\"3\"]\n", "rendered": "<pre><code>toArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = [1,\"1\";2,\"2\";3,\"3\"]\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-keysToArray", "title": "keysToArray", "contents": "fromArray kvs ~id", "rendered": "<code>fromArray kvs ~id</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => array('k)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "toArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = [1,\"1\";2,\"2\";3,\"3\"]\n", "rendered": "<pre><code>toArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = [1,\"1\";2,\"2\";3,\"3\"]\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-fromArray", "title": "fromArray", "contents": "fromArray kvs ~id", "rendered": "<code>fromArray kvs ~id</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-fromArray", "title": "fromArray", "contents": "fromArray array id t  id", "rendered": "<h4 class='item'>let fromArray: (array(('k, 'v)), ~id: <a href=\"./api/Belt_Map.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_Map.html#type-t\">t</a>(\n  'k,\n  'v,\n  'id\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-ofArray", "title": "ofArray", "contents": "ofArray array id t  id", "rendered": "<h4 class='item'>let ofArray: (array(('k, 'v)), ~id: <a href=\"./api/Belt_Map.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_Map.html#type-t\">t</a>(\n  'k,\n  'v,\n  'id\n)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "toArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = [1,\"1\";2,\"2\";3,\"3\"]\n", "rendered": "<pre><code>toArray (fromArray [2,\"2\"; 1,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = [1,\"1\";2,\"2\";3,\"3\"]\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-toList", "title": "toList", "contents": "toArray s", "rendered": "<code>toArray s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => list(('k, 'v))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "size (fromArray [2,\"2\"; 2,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = 2 ;;\n", "rendered": "<pre><code>size (fromArray [2,\"2\"; 2,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = 2 ;;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-toArray", "title": "toArray", "contents": "size s", "rendered": "<code>size s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => array(('k, 'v))</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "size (fromArray [2,\"2\"; 2,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = 2 ;;\n", "rendered": "<pre><code>size (fromArray [2,\"2\"; 2,\"1\"; 3,\"3\"] ~id:(module IntCmp)) = 2 ;;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-size", "title": "size", "contents": "size s", "rendered": "<code>size s</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id) => int</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p. Order unspecified", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>. Order unspecified", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-some", "title": "some", "contents": "some t bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), ('k, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k16 * 'v18 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p. Order unspecified", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>. Order unspecified", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-every", "title": "every", "contents": "every t bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), ('k, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k17 * 'v19 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|4,\"4\";1,\"1\";2,\"2,\"3\"\"|];;\nreduce s0 [] (fun acc k v -> (k,v) acc ) = [4,\"4\";3,\"3\";2,\"2\";1,\"1\"];;\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|4,\"4\";1,\"1\";2,\"2,\"3\"\"|];;\nreduce s0 [] (fun acc k v -> (k,v) acc ) = [4,\"4\";3,\"3\";2,\"2\";1,\"1\"];;\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-reduce", "title": "reduce", "contents": "reduce t      ", "rendered": "<h4 class='item'>let reduce: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  'acc,\n  ('acc, 'k, 'v) => 'acc\n) => 'acc</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  'acc,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'acc * 'k18 * 'v23 ], 'acc)\n) => 'acc</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "let s0 = fromArray ~id:(module IntCmp) [|4,\"4\";1,\"1\";2,\"2,\"3\"\"|];;\nlet acc = ref [] ;;\nforEach s0 (fun k v -> acc := (k,v) :: !acc);;\n\n!acc = [4,\"4\"; 3,\"3\"; 2,\"2\"; 1,\"1\"]\n", "rendered": "<pre><code>let s0 = fromArray ~id:(module IntCmp) [|4,\"4\";1,\"1\";2,\"2,\"3\"\"|];;\nlet acc = ref [] ;;\nforEach s0 (fun k v -> acc := (k,v) :: !acc);;\n\n!acc = [4,\"4\"; 3,\"3\"; 2,\"2\"; 1,\"1\"]\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-forEach", "title": "forEach", "contents": "forEach t unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), ('k, 'v) => unit) => unit</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k19 * 'v24 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-eq", "title": "eq", "contents": "eq m1 m2 veq tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. veq is the equality predicate used to compare the data associated with the keys.", "rendered": "<code>eq m1 m2 veq</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>veq</code> is the equality predicate used to compare the data associated with the keys.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  ('v, 'v) => bool\n) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v25 * 'v25 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-cmp", "title": "cmp", "contents": "It will compare size first and each element following the order one by one.", "rendered": "It will compare size first and each element following the order one by one.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-cmp", "title": "cmp", "contents": "Total ordering of map given total ordering of value function.", "rendered": "Total ordering of map given total ordering of value function.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-cmp", "title": "cmp", "contents": "cmp m0 m1 vcmp", "rendered": "<code>cmp m0 m1 vcmp</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  ('v, 'v) => int\n) => int</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v26 * 'v26 ], int)\n) => int</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "has (fromArray [|1,\"1\"|] ~id:(module IntCmp)) 1 = true\n", "rendered": "<pre><code>has (fromArray [|1,\"1\"|] ~id:(module IntCmp)) 1 = true\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-has", "title": "has", "contents": "has m k checks whether m has the key k", "rendered": "<code>has m k</code> checks whether m has the key k", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-has", "title": "has", "contents": "has t bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id), 'k) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "isEmpty (fromArray [|1,\"1\"|] ~id:(module IntCmp)) = false\n", "rendered": "<pre><code>isEmpty (fromArray [|1,\"1\"|] ~id:(module IntCmp)) = false\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty m checks whether a map m is empty", "rendered": "<code>isEmpty m</code> checks whether a map m is empty", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_Map.html#type-t\">t</a>('a, 'a, 'a) => bool</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "code block", "contents": "let m = Belt.Map.make ~id:(module IntCmp)\n", "rendered": "<pre><code>let m = Belt.Map.make ~id:(module IntCmp)\n</code></pre>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-make", "title": "make", "contents": "make ~id creates a new map by taking in the comparator", "rendered": "<code>make ~id</code> creates a new map by taking in the comparator", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#value-make", "title": "make", "contents": "make id t id", "rendered": "<h4 class='item'>let make: (~id: <a href=\"./api/Belt_Map.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_Map.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-id", "title": "id", "contents": "The identity needed for making an empty map", "rendered": "The identity needed for making an empty map", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-id", "title": "id", "contents": "id comparable", "rendered": "<h4 class='item'>type id('key, 'id) = <a href=\"./api/Belt_Id.html#type-comparable\" title=\"Belt_Id.comparable\">comparable</a>('key, 'id)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-t", "title": "t", "contents": "&#39;identity the identity of the collection", "rendered": "<code>&#39;identity</code> the identity of the collection", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-t", "title": "t", "contents": "&#39;value is the element type", "rendered": "<code>&#39;value</code> is the element type", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-t", "title": "t", "contents": "&#39;key is the field type", "rendered": "<code>&#39;key</code> is the field type", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-t", "title": "t", "contents": "(&#39;key, &#39;identity) t", "rendered": "<code>(&#39;key, &#39;identity) t</code>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('key, 'value, 'identity)</h4>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#module-Dict", "title": "Dict", "contents": "Advanced usage only", "rendered": "<strong>Advanced usage only</strong>", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#module-Dict", "title": "Dict", "contents": "This module seprate identity from data, it is a bit more verbsoe but slightly more efficient due to the fact that there is no need to pack identity and data back after each operation", "rendered": "This module seprate identity from data, it is a bit more verbsoe but slightly more efficient due to the fact that there is no need to pack identity and data back after each operation", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#module-String", "title": "String", "contents": "specalized when key type is string, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "rendered": "specalized when key type is <code>string</code>, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html#module-Int", "title": "Int", "contents": "Specalized when key type is int, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "rendered": "Specalized when key type is <code>int</code>, more efficient than the gerneic type, its compare behavior is fixed using the built-in comparison", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "on below will assume a predeclared comparator module for integers, IntCmp", "rendered": "on below will assume a predeclared comparator module for integers, IntCmp", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "Map.make ~id:(module PairComparator) .Map.set myMap (1, 2) &quot;myValue&quot;", "rendered": "Map.make ~id:(module PairComparator) .Map.set myMap (1, 2) &quot;myValue&quot;", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "ator = Belt.Id.MakeComparable(struct int ) (b0, b1) = ves.compare a0 b0 with ives.compare a1 b1", "rendered": "ator = Belt.Id.MakeComparable(struct int ) (b0, b1) = ves.compare a0 b0 with ives.compare a1 b1", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "is module&#39;s usage of identity, `make` and others, please see entation of Belt, A special encoding for collection safety.", "rendered": "is module&#39;s usage of identity, `make` and others, please see entation of Belt, <strong>A special encoding for collection safety</strong>.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "uses balanced binary trees, and therefore searching time logarithmic in the size of the map.", "rendered": "uses balanced binary trees, and therefore searching time logarithmic in the size of the map.", "breadcrumb": "Belt_Map"},
{"href": "./api/Belt_Map.html", "title": "Belt_Map", "contents": "A immutable sorted map module which allows customize compare behavior.", "rendered": "A <em>immutable</em> sorted map module which allows customize <em>compare</em> behavior.", "breadcrumb": "Belt_Map"},
{"href": "./api/Js_boolean.html#value-to_js_boolean", "title": "to_js_boolean", "contents": "to_js_boolean bool bool ", "rendered": "<h4 class='item'>let to_js_boolean: bool => bool</h4>", "breadcrumb": "Js_boolean"},
{"href": "./api/Js_boolean.html", "title": "Js_boolean", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_boolean"},
{"href": "./api/Js_boolean.html", "title": "Js_boolean", "contents": "Contains functions for dealing with JavaScript booleans", "rendered": "Contains functions for dealing with JavaScript booleans", "breadcrumb": "Js_boolean"},
{"href": "./api/Js_types.html#value-classify", "title": "classify", "contents": "classify tagged_t ", "rendered": "<h4 class='item'>let classify: 'a => <a href=\"./api/Js_types.html#type-tagged_t\">tagged_t</a></h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-tagged_t", "title": "tagged_t", "contents": "tagged_t float string function_val obj_val symbol", "rendered": "<h4 class='item'>type tagged_t = \n  | JSFalse\n  | JSTrue\n  | JSNull\n  | JSUndefined\n  | JSNumber(float)\n  | JSString(string)\n  | JSFunction(<a href=\"./api/Js_types.html#type-function_val\">function_val</a>)\n  | JSObject(<a href=\"./api/Js_types.html#type-obj_val\">obj_val</a>)\n  | JSSymbol(<a href=\"./api/Js_types.html#type-symbol\">symbol</a>)\n</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html", "title": "code block", "contents": "test \"x\" String = true\n", "rendered": "<pre><code>test \"x\" String = true\n</code></pre>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#value-test", "title": "test", "contents": "test t bool  ", "rendered": "<h4 class='item'>let test: ('a, <a href=\"./api/Js_types.html#type-t\">t</a>('b)) => bool</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html", "title": "code block", "contents": "match reify_type \"3\" with\n| String, v -> v  ^ \" this type safe control flow analysis will infer v as string\"\n| _ -> assert false\n", "rendered": "<pre><code>match reify_type \"3\" with\n| String, v -> v  ^ \" this type safe control flow analysis will infer v as string\"\n| _ -> assert false\n</code></pre>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#value-reify_type", "title": "reify_type", "contents": "Given any value it returns its type and the same value. Note that since &#39;b t is GADT, the type system will reify its type automatically,", "rendered": "Given any value it returns its type and the same value. Note that since <code>&#39;b t</code> is GADT, the type system will reify its type automatically,", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#value-reify_type", "title": "reify_type", "contents": "reify_type t ", "rendered": "<h4 class='item'>let reify_type: 'a => (<a href=\"./api/Js_types.html#type-t\">t</a>('b), 'b)</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-t", "title": "t", "contents": "t t undefined_val t null_val t bool t float t string t function_val t obj_val t symbol", "rendered": "<h4 class='item'>type t('_) = \n  | Undefined: <a href=\"./api/Js_types.html#type-t\">t</a>(<a href=\"./api/Js_types.html#type-undefined_val\">undefined_val</a>)\n  | Null: <a href=\"./api/Js_types.html#type-t\">t</a>(<a href=\"./api/Js_types.html#type-null_val\">null_val</a>)\n  | Boolean: <a href=\"./api/Js_types.html#type-t\">t</a>(bool)\n  | Number: <a href=\"./api/Js_types.html#type-t\">t</a>(float)\n  | String: <a href=\"./api/Js_types.html#type-t\">t</a>(string)\n  | Function: <a href=\"./api/Js_types.html#type-t\">t</a>(<a href=\"./api/Js_types.html#type-function_val\">function_val</a>)\n  | Object: <a href=\"./api/Js_types.html#type-t\">t</a>(<a href=\"./api/Js_types.html#type-obj_val\">obj_val</a>)\n  | Symbol: <a href=\"./api/Js_types.html#type-t\">t</a>(<a href=\"./api/Js_types.html#type-symbol\">symbol</a>)\n</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-function_val", "title": "function_val", "contents": "This type has only one value null", "rendered": "This type has only one value <code>null</code>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-function_val", "title": "function_val", "contents": "function_val ", "rendered": "<h4 class='item'>type function_val</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-null_val", "title": "null_val", "contents": "This type has only one value undefined", "rendered": "This type has only one value <code>undefined</code>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-null_val", "title": "null_val", "contents": "null_val ", "rendered": "<h4 class='item'>type null_val</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-undefined_val", "title": "undefined_val", "contents": "This type has only one value undefined", "rendered": "This type has only one value <code>undefined</code>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-undefined_val", "title": "undefined_val", "contents": "undefined_val ", "rendered": "<h4 class='item'>type undefined_val</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-obj_val", "title": "obj_val", "contents": "obj_val ", "rendered": "<h4 class='item'>type obj_val</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-symbol", "title": "symbol", "contents": "Js symbol type only available in ES6", "rendered": "Js symbol type only available in ES6", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html#type-symbol", "title": "symbol", "contents": "symbol ", "rendered": "<h4 class='item'>type symbol</h4>", "breadcrumb": "Js_types"},
{"href": "./api/Js_types.html", "title": "Js_types", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_types"},
{"href": "./api/Belt_MutableMap.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => 'b) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>(\n  'k,\n  'b,\n  'id\n)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k7 * 'a76 ], 'b)\n) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'b, 'id)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'a => 'b) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'b, 'id)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a77 ], 'b)\n) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'b, 'id)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array unit  ", "rendered": "<h4 class='item'>let mergeMany: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), array(('k, 'a))) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-update", "title": "update", "contents": "update t option option  unit   ", "rendered": "<h4 class='item'>let update: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  'k,\n  option('a) => option('a)\n) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-updateU", "title": "updateU", "contents": "updateU t fn option unit   ", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  'k,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a78 option ], option('a))\n) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-set", "title": "set", "contents": "set m x y  do the in-place modification", "rendered": "<code>set m x y </code> do the in-place modification", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-set", "title": "set", "contents": "set t unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'k, 'a) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-removeMany", "title": "removeMany", "contents": "remove m x do the in-place modification,", "rendered": "<code>remove m x</code> do the in-place modification,", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array unit  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), array('k)) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-remove", "title": "remove", "contents": "remove m x do the in-place modification,", "rendered": "<code>remove m x</code> do the in-place modification,", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-remove", "title": "remove", "contents": "remove t unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'k) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-ofArray", "title": "ofArray", "contents": "ofArray array id t  id", "rendered": "<h4 class='item'>let ofArray: (array(('k, 'a)), ~id: <a href=\"./api/Belt_MutableMap.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>(\n  'k,\n  'a,\n  'id\n)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-getExn", "title": "getExn", "contents": "getExn t  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'k) => 'a</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'k, 'a) => 'a</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'k) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-get", "title": "get", "contents": "get t option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'k) => option('a)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('k, 'a))</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => option(('k, 'a))</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('k, 'a))</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => option(('k, 'a))</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('k)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => option('k)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('k)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-minKey", "title": "minKey", "contents": "minKey t option ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => option('k)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('a, 'a, 'a) => array('a)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a) => array('k)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-fromArray", "title": "fromArray", "contents": "fromArray array id t  id", "rendered": "<h4 class='item'>let fromArray: (array(('k, 'a)), ~id: <a href=\"./api/Belt_MutableMap.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>(\n  'k,\n  'a,\n  'id\n)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-toArray", "title": "toArray", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id) => array(('k, 'a))</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id) => list(('k, 'a))</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-size", "title": "size", "contents": "some m p checks if at least one binding of the map satisfy the predicate p.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id) => int</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-some", "title": "some", "contents": "some t bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k8 * 'a79 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p.", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-every", "title": "every", "contents": "every t bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k9 * 'a80 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-reduce", "title": "reduce", "contents": "reduce t      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), 'b, ('b, 'k, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'b28 * 'k10 * 'a81 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-forEach", "title": "forEach", "contents": "forEach t unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => unit) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k11 * 'a82 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-eq", "title": "eq", "contents": "eq m1 m2 eqf tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. eqf is the equality predicate used to compare the data associated with the keys.", "rendered": "<code>eq m1 m2 eqf</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>eqf</code> is the equality predicate used to compare the data associated with the keys.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  ('a, 'a) => bool\n) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-eqU", "title": "eqU", "contents": "cmp m1 m2 cmp First compare by size, if size is the same, compare by key, value pair", "rendered": "<code>cmp m1 m2 cmp</code> First compare by size, if size is the same, compare by key, value pair", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a83 * 'a83 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-cmp", "title": "cmp", "contents": "cmp m1 m2 cmp First compare by size, if size is the same, compare by key, value pair", "rendered": "<code>cmp m1 m2 cmp</code> First compare by size, if size is the same, compare by key, value pair", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  ('a, 'a) => int\n) => int</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a84 * 'a84 ], int)\n) => int</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-has", "title": "has", "contents": "has t bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'a), 'k) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('a, 'a, 'a) => bool</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#value-make", "title": "make", "contents": "make id t id", "rendered": "<h4 class='item'>let make: (~id: <a href=\"./api/Belt_MutableMap.html#type-id\">id</a>('k, 'id)) => <a href=\"./api/Belt_MutableMap.html#type-t\">t</a>('k, 'a, 'id)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#type-id", "title": "id", "contents": "id comparable", "rendered": "<h4 class='item'>type id('key, 'id) = <a href=\"./api/Belt_Id.html#type-comparable\" title=\"Belt_Id.comparable\">comparable</a>('key, 'id)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('k, 'v, 'id)</h4>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html", "title": "Belt_MutableMap", "contents": "Same as Belt.Map, but mutable.", "rendered": "Same as Belt.Map, but mutable.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html", "title": "Belt_MutableMap", "contents": "A mutable sorted map module which allows customize compare behavior.", "rendered": "A <strong>mutable</strong> sorted map module which allows customize <em>compare</em> behavior.", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html", "title": "Belt_MutableMap", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html", "title": "Belt_MutableMap", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Belt_MutableMap.html#Belt_MutableMap", "title": "Belt_MutableMap", "contents": "", "rendered": "", "breadcrumb": "Belt_MutableMap"},
{"href": "./api/Node_path.html#value-sep", "title": "sep", "contents": "sep string", "rendered": "<h4 class='item'>let sep: string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-resolve", "title": "resolve", "contents": "resolve string string string  ", "rendered": "<h4 class='item'>let resolve: (string, string) => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-relative", "title": "relative", "contents": "relative string string unit string from to_ ", "rendered": "<h4 class='item'>let relative: (~from: string, ~to_: string, unit) => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-parse", "title": "parse", "contents": "parse string pathObject ", "rendered": "<h4 class='item'>let parse: string => <a href=\"./api/Node_path.html#type-pathObject\">pathObject</a></h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-normalize", "title": "normalize", "contents": "normalize string string ", "rendered": "<h4 class='item'>let normalize: string => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-join", "title": "join", "contents": "join array string string ", "rendered": "<h4 class='item'>let join: array(string) => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-join2", "title": "join2", "contents": "join2 string string string  ", "rendered": "<h4 class='item'>let join2: (string, string) => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-isAbsolute", "title": "isAbsolute", "contents": "isAbsolute string bool ", "rendered": "<h4 class='item'>let isAbsolute: string => bool</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-format", "title": "format", "contents": "format pathObject string ", "rendered": "<h4 class='item'>let format: <a href=\"./api/Node_path.html#type-pathObject\">pathObject</a> => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#type-pathObject", "title": "pathObject", "contents": "pathObject Js t", "rendered": "<h4 class='item'>type pathObject = <a href=\"./api/Js.html\">Js</a>.<a href=\"./api/Js.html#type-t\">t</a>(\n  &lt; base : string; dir : string; ext : string; name : string; root : string &gt;\n)</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-dirname_ext", "title": "dirname_ext", "contents": "dirname_ext string string string  ", "rendered": "<h4 class='item'>let dirname_ext: (string, string) => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-dirname", "title": "dirname", "contents": "dirname string string ", "rendered": "<h4 class='item'>let dirname: string => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-delimiter", "title": "delimiter", "contents": "delimiter string", "rendered": "<h4 class='item'>let delimiter: string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-basename_ext", "title": "basename_ext", "contents": "basename_ext string string string  ", "rendered": "<h4 class='item'>let basename_ext: (string, string) => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html#value-basename", "title": "basename", "contents": "basename string string ", "rendered": "<h4 class='item'>let basename: string => string</h4>", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html", "title": "Node_path", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Node_path"},
{"href": "./api/Node_path.html", "title": "Node_path", "contents": "Node Path API", "rendered": "Node Path API", "breadcrumb": "Node_path"},
{"href": "./api/Js_null_undefined.html#value-to_opt", "title": "to_opt", "contents": "to_opt t option ", "rendered": "<h4 class='item'>let to_opt: <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-toOption", "title": "toOption", "contents": "toOption t option ", "rendered": "<h4 class='item'>let toOption: <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-from_opt", "title": "from_opt", "contents": "from_opt option t ", "rendered": "<h4 class='item'>let from_opt: option('a) => <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-fromOption", "title": "fromOption", "contents": "fromOption option t ", "rendered": "<h4 class='item'>let fromOption: option('a) => <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html", "title": "code block", "contents": "let maybeSay (maybeMessage: string Js.null_undefined) =\n  Js.Null_undefined.iter maybeMessage (fun message -> Js.log message)", "rendered": "<pre><code>let maybeSay (maybeMessage: string Js.null_undefined) =\n  Js.Null_undefined.iter maybeMessage (fun message -> Js.log message)</code></pre>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-iter", "title": "iter", "contents": "If &#39;a Js.null_undefined contains a value, that value is unwrapped and applied to the given function.", "rendered": "If <code>&#39;a Js.null_undefined</code> contains a value, that value is unwrapped and applied to the given function.", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-iter", "title": "iter", "contents": "Iterates over the contained value with the given function", "rendered": "Iterates over the contained value with the given function", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-iter", "title": "iter", "contents": "iter t fn unit unit  ", "rendered": "<h4 class='item'>let iter: (<a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a24 ], unit)) => unit</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html", "title": "code block", "contents": "let maybeGreetWorld (maybeGreeting: string Js.null_undefined) =\n  Js.Undefined.bind maybeGreeting (fun greeting -> greeting ^ \" world!\")", "rendered": "<pre><code>let maybeGreetWorld (maybeGreeting: string Js.null_undefined) =\n  Js.Undefined.bind maybeGreeting (fun greeting -> greeting ^ \" world!\")</code></pre>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-bind", "title": "bind", "contents": "If &#39;a Js.null_undefined contains a value, that value is unwrapped, mapped to a &#39;b using the given function a&#39; -&gt; &#39;b, then wrapped back up and returned as &#39;b Js.null_undefined", "rendered": "If <code>&#39;a Js.null_undefined</code> contains a value, that value is unwrapped, mapped to a <code>&#39;b</code> using the given function <code>a&#39; -&gt; &#39;b</code>, then wrapped back up and returned as <code>&#39;b Js.null_undefined</code>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-bind", "title": "bind", "contents": "Maps the contained value using the given function", "rendered": "Maps the contained value using the given function", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-bind", "title": "bind", "contents": "bind t fn t  ", "rendered": "<h4 class='item'>let bind: (<a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a25 ], 'b)) => <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-undefined", "title": "undefined", "contents": "The undefined value of type &#39;a Js.null_undefined", "rendered": "The <code>undefined</code> value of type <code>&#39;a Js.null_undefined</code>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-undefined", "title": "undefined", "contents": "undefined t", "rendered": "<h4 class='item'>let undefined: <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-null", "title": "null", "contents": "The null value of type &#39;a Js.null_undefined", "rendered": "The <code>null</code> value of type <code>&#39;a Js.null_undefined</code>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-null", "title": "null", "contents": "null t", "rendered": "<h4 class='item'>let null: <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-test", "title": "test", "contents": "Returns true if the given value is null or undefined, false otherwise", "rendered": "Returns <code>true</code> if the given value is <code>null</code> or <code>undefined</code>, <code>false</code> otherwise", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-test", "title": "test", "contents": "test t bool ", "rendered": "<h4 class='item'>let test: <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-return", "title": "return", "contents": "Constructs a value of &#39;a Js.null_undefined containing a value of &#39;a", "rendered": "Constructs a value of <code>&#39;a Js.null_undefined</code> containing a value of <code>&#39;a</code>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#value-return", "title": "return", "contents": "return t ", "rendered": "<h4 class='item'>let return: 'a => <a href=\"./api/Js_null_undefined.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#type-t", "title": "t", "contents": "Local alias for &#39;a Js.null_undefined", "rendered": "Local alias for <code>&#39;a Js.null_undefined</code>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html#type-t", "title": "t", "contents": "t null_undefined", "rendered": "<h4 class='item'>type t('a) = <a href=\"./api/Js.html#type-null_undefined\" title=\"Js.null_undefined\">null_undefined</a>('a)</h4>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html", "title": "Js_null_undefined", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Js_null_undefined.html", "title": "Js_null_undefined", "contents": "Contains functionality for dealing with values that can be both null and undefined", "rendered": "Contains functionality for dealing with values that can be both <code>null</code> and <code>undefined</code>", "breadcrumb": "Js_null_undefined"},
{"href": "./api/Belt.html", "title": "Belt", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt"},
{"href": "./api/Js_math.html#value-trunc", "title": "trunc", "contents": "truncate, ie. remove fractional digits, returns a value not representable as int if NaN, ES2015", "rendered": "truncate, ie. remove fractional digits, returns a value not representable as <code>int</code> if NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-trunc", "title": "trunc", "contents": "trunc float float ", "rendered": "<h4 class='item'>let trunc: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_trunc", "title": "unsafe_trunc", "contents": "truncate, ie. remove fractional digits, returns a value not representable as int if NaN, ES2015", "rendered": "truncate, ie. remove fractional digits, returns a value not representable as <code>int</code> if NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_trunc", "title": "unsafe_trunc", "contents": "unsafe_trunc float int ", "rendered": "<h4 class='item'>let unsafe_trunc: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-tanh", "title": "tanh", "contents": "hyperbolic tangent in radians, ES2015", "rendered": "hyperbolic tangent in radians, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-tanh", "title": "tanh", "contents": "tanh float float ", "rendered": "<h4 class='item'>let tanh: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-tan", "title": "tan", "contents": "tangent in radians", "rendered": "tangent in radians", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-tan", "title": "tan", "contents": "tan float float ", "rendered": "<h4 class='item'>let tan: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sqrt", "title": "sqrt", "contents": "square root, can return NaN", "rendered": "square root, can return NaN", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sqrt", "title": "sqrt", "contents": "sqrt float float ", "rendered": "<h4 class='item'>let sqrt: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sinh", "title": "sinh", "contents": "hyperbolic sine in radians, ES2015", "rendered": "hyperbolic sine in radians, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sinh", "title": "sinh", "contents": "sinh float float ", "rendered": "<h4 class='item'>let sinh: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sin", "title": "sin", "contents": "sine in radians", "rendered": "sine in radians", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sin", "title": "sin", "contents": "sin float float ", "rendered": "<h4 class='item'>let sin: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sign_float", "title": "sign_float", "contents": "the sign of the argument, 1, -1, 0, -0 or NaN, ES2015", "rendered": "the sign of the argument, 1, -1, 0, -0 or NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sign_float", "title": "sign_float", "contents": "sign_float float float ", "rendered": "<h4 class='item'>let sign_float: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sign_int", "title": "sign_int", "contents": "the sign of the argument, 1, -1, 0, -0 or NaN, ES2015", "rendered": "the sign of the argument, 1, -1, 0, -0 or NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-sign_int", "title": "sign_int", "contents": "sign_int int int ", "rendered": "<h4 class='item'>let sign_int: int => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-round", "title": "round", "contents": "rounds to nearest integer", "rendered": "rounds to nearest integer", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-round", "title": "round", "contents": "round float float ", "rendered": "<h4 class='item'>let round: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_round", "title": "unsafe_round", "contents": "rounds to nearest integer", "rendered": "rounds to nearest integer", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_round", "title": "unsafe_round", "contents": "unsafe_round float int ", "rendered": "<h4 class='item'>let unsafe_round: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-random_int", "title": "random_int", "contents": "random number in [min,max)", "rendered": "random number in [min,max)", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-random_int", "title": "random_int", "contents": "random_int int int int  ", "rendered": "<h4 class='item'>let random_int: (int, int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-random", "title": "random", "contents": "random number in [min,max)", "rendered": "random number in [min,max)", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-random", "title": "random", "contents": "random unit float ", "rendered": "<h4 class='item'>let random: unit => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-pow_float", "title": "pow_float", "contents": "base to the power of the exponent", "rendered": "base to the power of the exponent", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-pow_float", "title": "pow_float", "contents": "pow_float float float float base exp", "rendered": "<h4 class='item'>let pow_float: (~base: float, ~exp: float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-pow_int", "title": "pow_int", "contents": "base to the power of the exponent", "rendered": "base to the power of the exponent", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-pow_int", "title": "pow_int", "contents": "pow_int int int int base exp", "rendered": "<h4 class='item'>let pow_int: (~base: int, ~exp: int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-minMany_float", "title": "minMany_float", "contents": "min value", "rendered": "min value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-minMany_float", "title": "minMany_float", "contents": "minMany_float array float float ", "rendered": "<h4 class='item'>let minMany_float: array(float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-min_float", "title": "min_float", "contents": "min value", "rendered": "min value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-min_float", "title": "min_float", "contents": "min_float float float float  ", "rendered": "<h4 class='item'>let min_float: (float, float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-minMany_int", "title": "minMany_int", "contents": "min value", "rendered": "min value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-minMany_int", "title": "minMany_int", "contents": "minMany_int array int int ", "rendered": "<h4 class='item'>let minMany_int: array(int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-min_int", "title": "min_int", "contents": "min value", "rendered": "min value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-min_int", "title": "min_int", "contents": "min_int int int int  ", "rendered": "<h4 class='item'>let min_int: (int, int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-maxMany_float", "title": "maxMany_float", "contents": "max value", "rendered": "max value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-maxMany_float", "title": "maxMany_float", "contents": "maxMany_float array float float ", "rendered": "<h4 class='item'>let maxMany_float: array(float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-max_float", "title": "max_float", "contents": "max value", "rendered": "max value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-max_float", "title": "max_float", "contents": "max_float float float float  ", "rendered": "<h4 class='item'>let max_float: (float, float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-maxMany_int", "title": "maxMany_int", "contents": "max value", "rendered": "max value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-maxMany_int", "title": "maxMany_int", "contents": "maxMany_int array int int ", "rendered": "<h4 class='item'>let maxMany_int: array(int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-max_int", "title": "max_int", "contents": "max value", "rendered": "max value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-max_int", "title": "max_int", "contents": "max_int int int int  ", "rendered": "<h4 class='item'>let max_int: (int, int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log2", "title": "log2", "contents": "base 2 logarithm, can return NaN, ES2015", "rendered": "base 2 logarithm, can return NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log2", "title": "log2", "contents": "log2 float float ", "rendered": "<h4 class='item'>let log2: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log10", "title": "log10", "contents": "base 10 logarithm, can return NaN, ES2015", "rendered": "base 10 logarithm, can return NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log10", "title": "log10", "contents": "log10 float float ", "rendered": "<h4 class='item'>let log10: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log1p", "title": "log1p", "contents": "natural logarithm of 1 + the argument, can return NaN, ES2015", "rendered": "natural logarithm of 1 + the argument, can return NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log1p", "title": "log1p", "contents": "log1p float float ", "rendered": "<h4 class='item'>let log1p: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log", "title": "log", "contents": "natural logarithm, can return NaN", "rendered": "natural logarithm, can return NaN", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-log", "title": "log", "contents": "log float float ", "rendered": "<h4 class='item'>let log: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-imul", "title": "imul", "contents": "32-bit integer multiplication, ES2015", "rendered": "32-bit integer multiplication, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-imul", "title": "imul", "contents": "imul int int int  ", "rendered": "<h4 class='item'>let imul: (int, int) => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-hypotMany", "title": "hypotMany", "contents": "generalized pythagorean equation, ES2015", "rendered": "generalized pythagorean equation, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-hypotMany", "title": "hypotMany", "contents": "hypotMany array float float ", "rendered": "<h4 class='item'>let hypotMany: array(float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-hypot", "title": "hypot", "contents": "pythagorean equation, ES2015", "rendered": "pythagorean equation, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-hypot", "title": "hypot", "contents": "hypot float float float  ", "rendered": "<h4 class='item'>let hypot: (float, float) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-fround", "title": "fround", "contents": "round to nearest single precision float, ES2015", "rendered": "round to nearest single precision float, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-fround", "title": "fround", "contents": "fround float float ", "rendered": "<h4 class='item'>let fround: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-floor_float", "title": "floor_float", "contents": "floor_float float float ", "rendered": "<h4 class='item'>let floor_float: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-floor", "title": "floor", "contents": "floor float int ", "rendered": "<h4 class='item'>let floor: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-floor_int", "title": "floor_int", "contents": "largest int greater than or equal to the arugment", "rendered": "largest int greater than or equal to the arugment", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-floor_int", "title": "floor_int", "contents": "floor_int float int ", "rendered": "<h4 class='item'>let floor_int: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_floor", "title": "unsafe_floor", "contents": "largest int greater than or equal to the arugment", "rendered": "largest int greater than or equal to the arugment", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_floor", "title": "unsafe_floor", "contents": "unsafe_floor float int ", "rendered": "<h4 class='item'>let unsafe_floor: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_floor_int", "title": "unsafe_floor_int", "contents": "may return values not representable by int", "rendered": "may return values not representable by <code>int</code>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_floor_int", "title": "unsafe_floor_int", "contents": "unsafe_floor_int float int ", "rendered": "<h4 class='item'>let unsafe_floor_int: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-expm1", "title": "expm1", "contents": "natural exponential minus 1, ES2015", "rendered": "natural exponential minus 1, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-expm1", "title": "expm1", "contents": "expm1 float float ", "rendered": "<h4 class='item'>let expm1: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-exp", "title": "exp", "contents": "natural exponentional", "rendered": "natural exponentional", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-exp", "title": "exp", "contents": "exp float float ", "rendered": "<h4 class='item'>let exp: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-cosh", "title": "cosh", "contents": "hyperbolic cosine in radians, ES2015", "rendered": "hyperbolic cosine in radians, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-cosh", "title": "cosh", "contents": "cosh float float ", "rendered": "<h4 class='item'>let cosh: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-cos", "title": "cos", "contents": "cosine in radians", "rendered": "cosine in radians", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-cos", "title": "cos", "contents": "cos float float ", "rendered": "<h4 class='item'>let cos: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-clz32", "title": "clz32", "contents": "number of leading zero bits of the argument&#39;s 32 bit int representation, ES2015", "rendered": "number of leading zero bits of the argument&#39;s 32 bit int representation, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-clz32", "title": "clz32", "contents": "clz32 int int ", "rendered": "<h4 class='item'>let clz32: int => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-ceil_float", "title": "ceil_float", "contents": "smallest int greater than or equal to the argument", "rendered": "smallest int greater than or equal to the argument", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-ceil_float", "title": "ceil_float", "contents": "ceil_float float float ", "rendered": "<h4 class='item'>let ceil_float: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-ceil", "title": "ceil", "contents": "smallest int greater than or equal to the argument", "rendered": "smallest int greater than or equal to the argument", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-ceil", "title": "ceil", "contents": "ceil float int ", "rendered": "<h4 class='item'>let ceil: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-ceil_int", "title": "ceil_int", "contents": "smallest int greater than or equal to the argument", "rendered": "smallest int greater than or equal to the argument", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-ceil_int", "title": "ceil_int", "contents": "ceil_int float int ", "rendered": "<h4 class='item'>let ceil_int: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_ceil", "title": "unsafe_ceil", "contents": "smallest int greater than or equal to the argument", "rendered": "smallest int greater than or equal to the argument", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_ceil", "title": "unsafe_ceil", "contents": "unsafe_ceil float int ", "rendered": "<h4 class='item'>let unsafe_ceil: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_ceil_int", "title": "unsafe_ceil_int", "contents": "may return values not representable by int", "rendered": "may return values not representable by <code>int</code>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-unsafe_ceil_int", "title": "unsafe_ceil_int", "contents": "unsafe_ceil_int float int ", "rendered": "<h4 class='item'>let unsafe_ceil_int: float => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-cbrt", "title": "cbrt", "contents": "cube root, can return NaN, ES2015", "rendered": "cube root, can return NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-cbrt", "title": "cbrt", "contents": "cbrt float float ", "rendered": "<h4 class='item'>let cbrt: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-atan2", "title": "atan2", "contents": "arctangent of the quotient of x and y, mostly... this one&#39;s a bit weird", "rendered": "arctangent of the quotient of x and y, mostly... this one&#39;s a bit weird", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-atan2", "title": "atan2", "contents": "atan2 float float unit float y x ", "rendered": "<h4 class='item'>let atan2: (~y: float, ~x: float, unit) => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-atanh", "title": "atanh", "contents": "hyperbolic arctangent in radians, can return NaN, ES2015", "rendered": "hyperbolic arctangent in radians, can return NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-atanh", "title": "atanh", "contents": "atanh float float ", "rendered": "<h4 class='item'>let atanh: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-atan", "title": "atan", "contents": "arctangent in radians", "rendered": "arctangent in radians", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-atan", "title": "atan", "contents": "atan float float ", "rendered": "<h4 class='item'>let atan: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-asinh", "title": "asinh", "contents": "hyperbolic arcsine in raidans, ES2015", "rendered": "hyperbolic arcsine in raidans, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-asinh", "title": "asinh", "contents": "asinh float float ", "rendered": "<h4 class='item'>let asinh: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-asin", "title": "asin", "contents": "arcsine in radians, can return NaN", "rendered": "arcsine in radians, can return NaN", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-asin", "title": "asin", "contents": "asin float float ", "rendered": "<h4 class='item'>let asin: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-acosh", "title": "acosh", "contents": "hyperbolic arccosine in raidans, can return NaN, ES2015", "rendered": "hyperbolic arccosine in raidans, can return NaN, ES2015", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-acosh", "title": "acosh", "contents": "acosh float float ", "rendered": "<h4 class='item'>let acosh: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-acos", "title": "acos", "contents": "arccosine in radians, can return NaN", "rendered": "arccosine in radians, can return NaN", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-acos", "title": "acos", "contents": "acos float float ", "rendered": "<h4 class='item'>let acos: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-abs_float", "title": "abs_float", "contents": "absolute value", "rendered": "absolute value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-abs_float", "title": "abs_float", "contents": "abs_float float float ", "rendered": "<h4 class='item'>let abs_float: float => float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-abs_int", "title": "abs_int", "contents": "absolute value", "rendered": "absolute value", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-abs_int", "title": "abs_int", "contents": "abs_int int int ", "rendered": "<h4 class='item'>let abs_int: int => int</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_SQRT2", "title": "_SQRT2", "contents": "square root of 2", "rendered": "square root of 2", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_SQRT2", "title": "_SQRT2", "contents": "_SQRT2 float", "rendered": "<h4 class='item'>let _SQRT2: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_SQRT1_2", "title": "_SQRT1_2", "contents": "square root of 1/2", "rendered": "square root of 1/2", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_SQRT1_2", "title": "_SQRT1_2", "contents": "_SQRT1_2 float", "rendered": "<h4 class='item'>let _SQRT1_2: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_PI", "title": "_PI", "contents": "Pi... (ratio of the circumference and diameter of a circle)", "rendered": "Pi... (ratio of the circumference and diameter of a circle)", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_PI", "title": "_PI", "contents": "_PI float", "rendered": "<h4 class='item'>let _PI: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LOG10E", "title": "_LOG10E", "contents": "base 10 logarithm of E", "rendered": "base 10 logarithm of E", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LOG10E", "title": "_LOG10E", "contents": "_LOG10E float", "rendered": "<h4 class='item'>let _LOG10E: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LOG2E", "title": "_LOG2E", "contents": "base 2 logarithm of E", "rendered": "base 2 logarithm of E", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LOG2E", "title": "_LOG2E", "contents": "_LOG2E float", "rendered": "<h4 class='item'>let _LOG2E: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LN10", "title": "_LN10", "contents": "natural logarithm of 10", "rendered": "natural logarithm of 10", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LN10", "title": "_LN10", "contents": "_LN10 float", "rendered": "<h4 class='item'>let _LN10: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LN2", "title": "_LN2", "contents": "natural logarithm of 2", "rendered": "natural logarithm of 2", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_LN2", "title": "_LN2", "contents": "_LN2 float", "rendered": "<h4 class='item'>let _LN2: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_E", "title": "_E", "contents": "Euler&#39;s number", "rendered": "Euler&#39;s number", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html#value-_E", "title": "_E", "contents": "_E float", "rendered": "<h4 class='item'>let _E: float</h4>", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html", "title": "Js_math", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_math"},
{"href": "./api/Js_math.html", "title": "Js_math", "contents": "JavaScript Math API", "rendered": "JavaScript Math API", "breadcrumb": "Js_math"},
{"href": "./api/Belt_MapString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "/*", "rendered": "/*", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t key   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => 'v2) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v0 ], 'v2)\n) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), 'v => 'v2) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'v1 ], 'v2)) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v2)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-split", "title": "split", "contents": "split x m returns a triple (l, data, r), where l is the map with all the bindings of m whose key is strictly less than x; r is the map with all the bindings of m whose key is strictly greater than x; data is None if m contains no binding for x, or Some v if m binds v to x.", "rendered": "<code>split x m</code> returns a triple <code>(l, data, r)</code>, where <code>l</code> is the map with all the bindings of <code>m</code> whose key is strictly less than <code>x</code>; <code>r</code> is the map with all the bindings of <code>m</code> whose key is strictly greater than <code>x</code>; <code>data</code> is <code>None</code> if <code>m</code> contains no binding for <code>x</code>, or <code>Some v</code> if <code>m</code> binds <code>v</code> to <code>x</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-split", "title": "split", "contents": "split key t t option t  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)) => (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), option('v), <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-partition", "title": "partition", "contents": "partition m p returns a pair of maps (m1, m2), where m1 contains all the bindings of s that satisfy the predicate p, and m2 is the map with all the bindings of s that do not satisfy p.", "rendered": "<code>partition m p</code> returns a pair of maps <code>(m1, m2)</code>, where <code>m1</code> contains all the bindings of <code>s</code> that satisfy the predicate <code>p</code>, and <code>m2</code> is the map with all the bindings of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-partition", "title": "partition", "contents": "partition t key bool   t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => bool) => (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v2 ], bool)\n) => (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-keep", "title": "keep", "contents": "keep m p returns the map with all the bindings in m that satisfy predicate p.", "rendered": "<code>keep m p</code> returns the map with all the bindings in <code>m</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-keep", "title": "keep", "contents": "keep t key bool   t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => bool) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v3 ], bool)\n) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-merge", "title": "merge", "contents": "merge m1 m2 f computes a map whose keys is a subset of keys of m1 and of m2. The presence of each such binding, and the corresponding value, is determined with the function f.", "rendered": "<code>merge m1 m2 f</code> computes a map whose keys is a subset of keys of <code>m1</code> and of <code>m2</code>. The presence of each such binding, and the corresponding value, is determined with the function <code>f</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-merge", "title": "merge", "contents": "merge t t key option option option    t   ", "rendered": "<h4 class='item'>let merge: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v2),\n  (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, option('v), option('v2)) => option('c)\n) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-mergeU", "title": "mergeU", "contents": "mergeU t t fn option t   ", "rendered": "<h4 class='item'>let mergeU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v2),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_3 of key * 'v4 option * 'v20 option ],\n    option('c)\n  )\n) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-mergeArray", "title": "mergeArray", "contents": "mergeArray t array key t  ", "rendered": "<h4 class='item'>let mergeArray: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), array((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-update", "title": "update", "contents": "update t key option option  t   ", "rendered": "<h4 class='item'>let update: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>, option('v) => option('v)) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-updateU", "title": "updateU", "contents": "updateU t key fn option t   ", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapString.html#type-key\">key</a>,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'v5 option ], option('v))\n) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-set", "title": "set", "contents": "add m x y returns a map containing the same bindings as m, plus a binding of x to y. If x was already bound in m, its previous binding disappears.", "rendered": "<code>add m x y</code> returns a map containing the same bindings as <code>m</code>, plus a binding of <code>x</code> to <code>y</code>. If <code>x</code> was already bound in <code>m</code>, its previous binding disappears.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-set", "title": "set", "contents": "set t key t   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-removeMany", "title": "removeMany", "contents": "remove m x returns a map containing the same bindings as m, except for x which is unbound in the returned map.", "rendered": "<code>remove m x</code> returns a map containing the same bindings as <code>m</code>, except for <code>x</code> which is unbound in the returned map.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array key t  ", "rendered": "<h4 class='item'>let removeMany: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), array(<a href=\"./api/Belt_MapString.html#type-key\">key</a>)) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-remove", "title": "remove", "contents": "remove m x returns a map containing the same bindings as m, except for x which is unbound in the returned map.", "rendered": "<code>remove m x</code> returns a map containing the same bindings as <code>m</code>, except for <code>x</code> which is unbound in the returned map.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-remove", "title": "remove", "contents": "remove t key t  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-getExn", "title": "getExn", "contents": "getExn t key  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>) => 'v</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t key   ", "rendered": "<h4 class='item'>let getWithDefault: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => 'v</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t key undefined  ", "rendered": "<h4 class='item'>let getUndefined: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-get", "title": "get", "contents": "get t key option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>) => option('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined key ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-maximum", "title": "maximum", "contents": "maximum t option key ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => option((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined key ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-minimum", "title": "minimum", "contents": "minimum t option key ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => option((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option key ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined key ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(<a href=\"./api/Belt_MapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-minKey", "title": "minKey", "contents": "minKey t option key ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_MapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => array('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array key ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => array(<a href=\"./api/Belt_MapString.html#type-key\">key</a>)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-fromArray", "title": "fromArray", "contents": "fromArray array key t ", "rendered": "<h4 class='item'>let fromArray: array((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v)) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-ofArray", "title": "ofArray", "contents": "ofArray array key t ", "rendered": "<h4 class='item'>let ofArray: array((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v)) => <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-toArray", "title": "toArray", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-toArray", "title": "toArray", "contents": "toArray t array key ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => array((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-toList", "title": "toList", "contents": "In increasing order with respect", "rendered": "In increasing order with respect", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-toList", "title": "toList", "contents": "toList t list key ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => list((<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v))</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-size", "title": "size", "contents": "some m p checks if at least one binding of the map satisfy the predicate p.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => int</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p.", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-some", "title": "some", "contents": "some t key bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v6 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p.", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-every", "title": "every", "contents": "every t key bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v7 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-reduce", "title": "reduce", "contents": "reduce t key      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), 'v2, ('v2, <a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => 'v2) => 'v2</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  'v2,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'v21 * key * 'v8 ], 'v2)\n) => 'v2</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the key as first argument, and the associated value as second argument. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-forEach", "title": "forEach", "contents": "forEach t key unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), (<a href=\"./api/Belt_MapString.html#type-key\">key</a>, 'v) => unit) => unit</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of key * 'v9 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-eq", "title": "eq", "contents": "equal m1 m2 cmp tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. cmp is the equality predicate used to compare the data associated with the keys.", "rendered": "<code>equal m1 m2 cmp</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>cmp</code> is the equality predicate used to compare the data associated with the keys.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), ('v, 'v) => bool) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v10 * 'v10 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), ('v, 'v) => int) => int</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v11 * 'v11 ], int)\n) => int</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-has", "title": "has", "contents": "has t key bool  ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MapString.html#type-t\">t</a>('v), <a href=\"./api/Belt_MapString.html#type-key\">key</a>) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v) => bool</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_MapString.html#type-t\">t</a>('v)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#type-t", "title": "t", "contents": "The type of maps from type key to type &#39;value.", "rendered": "The type of maps from type <code>key</code> to type <code>&#39;value</code>.", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('value)</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html", "title": "Belt_MapString", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html", "title": "Belt_MapString", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_MapString"},
{"href": "./api/Belt_MapString.html#Belt_MapString", "title": "Belt_MapString", "contents": "", "rendered": "", "breadcrumb": "Belt_MapString"},
{"href": "./api/Js_date.html#value-toUTCString", "title": "toUTCString", "contents": "toUTCString t string ", "rendered": "<h4 class='item'>let toUTCString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toTimeString", "title": "toTimeString", "contents": "toTimeString t string ", "rendered": "<h4 class='item'>let toTimeString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toString", "title": "toString", "contents": "toString t string ", "rendered": "<h4 class='item'>let toString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toLocaleTimeString", "title": "toLocaleTimeString", "contents": "toLocaleTimeString t string ", "rendered": "<h4 class='item'>let toLocaleTimeString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toLocaleString", "title": "toLocaleString", "contents": "toLocaleString t string ", "rendered": "<h4 class='item'>let toLocaleString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toLocaleDateString", "title": "toLocaleDateString", "contents": "toLocaleDateString t string ", "rendered": "<h4 class='item'>let toLocaleDateString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toJSON", "title": "toJSON", "contents": "toJSON t string ", "rendered": "<h4 class='item'>let toJSON: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toISOString", "title": "toISOString", "contents": "toISOString t string ", "rendered": "<h4 class='item'>let toISOString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toGMTString", "title": "toGMTString", "contents": "toGMTString t string ", "rendered": "<h4 class='item'>let toGMTString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-toDateString", "title": "toDateString", "contents": "toDateString t string ", "rendered": "<h4 class='item'>let toDateString: <a href=\"./api/Js_date.html#type-t\">t</a> => string</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setYear", "title": "setYear", "contents": "setYear t float float  ", "rendered": "<h4 class='item'>let setYear: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCTime", "title": "setUTCTime", "contents": "setUTCTime t float float  ", "rendered": "<h4 class='item'>let setUTCTime: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCSecondsMs", "title": "setUTCSecondsMs", "contents": "setUTCSecondsMs t float float unit float  seconds milliseconds ", "rendered": "<h4 class='item'>let setUTCSecondsMs: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCSeconds", "title": "setUTCSeconds", "contents": "setUTCSeconds t float float  ", "rendered": "<h4 class='item'>let setUTCSeconds: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCMonthD", "title": "setUTCMonthD", "contents": "setUTCMonthD t float float unit float  month date ", "rendered": "<h4 class='item'>let setUTCMonthD: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~month: float,\n  ~date: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCMonth", "title": "setUTCMonth", "contents": "setUTCMonth t float float  ", "rendered": "<h4 class='item'>let setUTCMonth: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCMinutesSMs", "title": "setUTCMinutesSMs", "contents": "setUTCMinutesSMs t float float float unit float  minutes seconds milliseconds ", "rendered": "<h4 class='item'>let setUTCMinutesSMs: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~minutes: float,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCMinutesS", "title": "setUTCMinutesS", "contents": "setUTCMinutesS t float float unit float  minutes seconds ", "rendered": "<h4 class='item'>let setUTCMinutesS: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~minutes: float,\n  ~seconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCMinutes", "title": "setUTCMinutes", "contents": "setUTCMinutes t float float  ", "rendered": "<h4 class='item'>let setUTCMinutes: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCMilliseconds", "title": "setUTCMilliseconds", "contents": "setUTCMilliseconds t float float  ", "rendered": "<h4 class='item'>let setUTCMilliseconds: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCHoursMSMs", "title": "setUTCHoursMSMs", "contents": "setUTCHoursMSMs t float float float float unit float  hours minutes seconds milliseconds ", "rendered": "<h4 class='item'>let setUTCHoursMSMs: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCHoursMS", "title": "setUTCHoursMS", "contents": "setUTCHoursMS t float float float unit float  hours minutes seconds ", "rendered": "<h4 class='item'>let setUTCHoursMS: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCHoursM", "title": "setUTCHoursM", "contents": "setUTCHoursM t float float unit float  hours minutes ", "rendered": "<h4 class='item'>let setUTCHoursM: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~hours: float,\n  ~minutes: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCHours", "title": "setUTCHours", "contents": "setUTCHours t float float  ", "rendered": "<h4 class='item'>let setUTCHours: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCFullYearMD", "title": "setUTCFullYearMD", "contents": "setUTCFullYearMD t float float float unit float  year month date ", "rendered": "<h4 class='item'>let setUTCFullYearMD: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCFullYearM", "title": "setUTCFullYearM", "contents": "setUTCFullYearM t float float unit float  year month ", "rendered": "<h4 class='item'>let setUTCFullYearM: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~year: float,\n  ~month: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCFullYear", "title": "setUTCFullYear", "contents": "setUTCFullYear t float float  ", "rendered": "<h4 class='item'>let setUTCFullYear: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setUTCDate", "title": "setUTCDate", "contents": "setUTCDate t float float  ", "rendered": "<h4 class='item'>let setUTCDate: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setTime", "title": "setTime", "contents": "setTime t float float  ", "rendered": "<h4 class='item'>let setTime: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setSecondsMs", "title": "setSecondsMs", "contents": "setSecondsMs t float float unit float  seconds milliseconds ", "rendered": "<h4 class='item'>let setSecondsMs: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setSeconds", "title": "setSeconds", "contents": "setSeconds t float float  ", "rendered": "<h4 class='item'>let setSeconds: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setMonthD", "title": "setMonthD", "contents": "setMonthD t float float unit float  month date ", "rendered": "<h4 class='item'>let setMonthD: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~month: float,\n  ~date: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setMonth", "title": "setMonth", "contents": "setMonth t float float  ", "rendered": "<h4 class='item'>let setMonth: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setMinutesSMs", "title": "setMinutesSMs", "contents": "setMinutesSMs t float float float unit float  minutes seconds milliseconds ", "rendered": "<h4 class='item'>let setMinutesSMs: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~minutes: float,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setMinutesS", "title": "setMinutesS", "contents": "setMinutesS t float float unit float  minutes seconds ", "rendered": "<h4 class='item'>let setMinutesS: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~minutes: float,\n  ~seconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setMinutes", "title": "setMinutes", "contents": "setMinutes t float float  ", "rendered": "<h4 class='item'>let setMinutes: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setMilliseconds", "title": "setMilliseconds", "contents": "setMilliseconds t float float  ", "rendered": "<h4 class='item'>let setMilliseconds: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setHoursMSMs", "title": "setHoursMSMs", "contents": "setHoursMSMs t float float float float unit float  hours minutes seconds milliseconds ", "rendered": "<h4 class='item'>let setHoursMSMs: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  ~milliseconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setHoursMS", "title": "setHoursMS", "contents": "setHoursMS t float float float unit float  hours minutes seconds ", "rendered": "<h4 class='item'>let setHoursMS: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setHoursM", "title": "setHoursM", "contents": "setHoursM t float float unit float  hours minutes ", "rendered": "<h4 class='item'>let setHoursM: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~hours: float,\n  ~minutes: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setHours", "title": "setHours", "contents": "setHours t float float  ", "rendered": "<h4 class='item'>let setHours: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setFullYearMD", "title": "setFullYearMD", "contents": "setFullYearMD t float float float unit float  year month date ", "rendered": "<h4 class='item'>let setFullYearMD: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setFullYearM", "title": "setFullYearM", "contents": "setFullYearM t float float unit float  year month ", "rendered": "<h4 class='item'>let setFullYearM: (\n  <a href=\"./api/Js_date.html#type-t\">t</a>,\n  ~year: float,\n  ~month: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setFullYear", "title": "setFullYear", "contents": "setFullYear t float float  ", "rendered": "<h4 class='item'>let setFullYear: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-setDate", "title": "setDate", "contents": "setDate t float float  ", "rendered": "<h4 class='item'>let setDate: (<a href=\"./api/Js_date.html#type-t\">t</a>, float) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getYear", "title": "getYear", "contents": "getYear t float ", "rendered": "<h4 class='item'>let getYear: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCSeconds", "title": "getUTCSeconds", "contents": "returns the month (0-11)", "rendered": "returns the month (0-11)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCSeconds", "title": "getUTCSeconds", "contents": "getUTCSeconds t float ", "rendered": "<h4 class='item'>let getUTCSeconds: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCMonth", "title": "getUTCMonth", "contents": "returns the month (0-11)", "rendered": "returns the month (0-11)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCMonth", "title": "getUTCMonth", "contents": "getUTCMonth t float ", "rendered": "<h4 class='item'>let getUTCMonth: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCMinutes", "title": "getUTCMinutes", "contents": "getUTCMinutes t float ", "rendered": "<h4 class='item'>let getUTCMinutes: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCMilliseconds", "title": "getUTCMilliseconds", "contents": "getUTCMilliseconds t float ", "rendered": "<h4 class='item'>let getUTCMilliseconds: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCHours", "title": "getUTCHours", "contents": "getUTCHours t float ", "rendered": "<h4 class='item'>let getUTCHours: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCFullYear", "title": "getUTCFullYear", "contents": "returns the day of the week (0-6)", "rendered": "returns the day of the week (0-6)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCFullYear", "title": "getUTCFullYear", "contents": "getUTCFullYear t float ", "rendered": "<h4 class='item'>let getUTCFullYear: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCDay", "title": "getUTCDay", "contents": "returns the day of the week (0-6)", "rendered": "returns the day of the week (0-6)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCDay", "title": "getUTCDay", "contents": "getUTCDay t float ", "rendered": "<h4 class='item'>let getUTCDay: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCDate", "title": "getUTCDate", "contents": "return the day of the month (1-31)", "rendered": "return the day of the month (1-31)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getUTCDate", "title": "getUTCDate", "contents": "getUTCDate t float ", "rendered": "<h4 class='item'>let getUTCDate: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getTimezoneOffset", "title": "getTimezoneOffset", "contents": "returns the number of milliseconds since Unix epoch", "rendered": "returns the number of milliseconds since Unix epoch", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getTimezoneOffset", "title": "getTimezoneOffset", "contents": "getTimezoneOffset t float ", "rendered": "<h4 class='item'>let getTimezoneOffset: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getTime", "title": "getTime", "contents": "returns the number of milliseconds since Unix epoch", "rendered": "returns the number of milliseconds since Unix epoch", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getTime", "title": "getTime", "contents": "getTime t float ", "rendered": "<h4 class='item'>let getTime: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getSeconds", "title": "getSeconds", "contents": "returns the month (0-11)", "rendered": "returns the month (0-11)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getSeconds", "title": "getSeconds", "contents": "getSeconds t float ", "rendered": "<h4 class='item'>let getSeconds: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getMonth", "title": "getMonth", "contents": "returns the month (0-11)", "rendered": "returns the month (0-11)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getMonth", "title": "getMonth", "contents": "getMonth t float ", "rendered": "<h4 class='item'>let getMonth: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getMinutes", "title": "getMinutes", "contents": "getMinutes t float ", "rendered": "<h4 class='item'>let getMinutes: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getMilliseconds", "title": "getMilliseconds", "contents": "getMilliseconds t float ", "rendered": "<h4 class='item'>let getMilliseconds: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getHours", "title": "getHours", "contents": "getHours t float ", "rendered": "<h4 class='item'>let getHours: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getFullYear", "title": "getFullYear", "contents": "returns the day of the week (0-6)", "rendered": "returns the day of the week (0-6)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getFullYear", "title": "getFullYear", "contents": "getFullYear t float ", "rendered": "<h4 class='item'>let getFullYear: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getDay", "title": "getDay", "contents": "returns the day of the week (0-6)", "rendered": "returns the day of the week (0-6)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getDay", "title": "getDay", "contents": "getDay t float ", "rendered": "<h4 class='item'>let getDay: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getDate", "title": "getDate", "contents": "return the day of the month (1-31)", "rendered": "return the day of the month (1-31)", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-getDate", "title": "getDate", "contents": "getDate t float ", "rendered": "<h4 class='item'>let getDate: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-parse", "title": "parse", "contents": "returns NaN if passed invalid date string", "rendered": "returns NaN if passed invalid date string", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-parse", "title": "parse", "contents": "parse string t ", "rendered": "<h4 class='item'>let parse: string => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-now", "title": "now", "contents": "returns the number of milliseconds since Unix epoch", "rendered": "returns the number of milliseconds since Unix epoch", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-now", "title": "now", "contents": "now unit float ", "rendered": "<h4 class='item'>let now: unit => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-utcWithYMDHMS", "title": "utcWithYMDHMS", "contents": "utcWithYMDHMS float float float float float float unit float year month date hours minutes seconds ", "rendered": "<h4 class='item'>let utcWithYMDHMS: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-utcWithYMDHM", "title": "utcWithYMDHM", "contents": "utcWithYMDHM float float float float float unit float year month date hours minutes ", "rendered": "<h4 class='item'>let utcWithYMDHM: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-utcWithYMDH", "title": "utcWithYMDH", "contents": "utcWithYMDH float float float float unit float year month date hours ", "rendered": "<h4 class='item'>let utcWithYMDH: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-utcWithYMD", "title": "utcWithYMD", "contents": "utcWithYMD float float float unit float year month date ", "rendered": "<h4 class='item'>let utcWithYMD: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  unit\n) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-utcWithYM", "title": "utcWithYM", "contents": "utcWithYM float float unit float year month ", "rendered": "<h4 class='item'>let utcWithYM: (~year: float, ~month: float, unit) => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-makeWithYMDHMS", "title": "makeWithYMDHMS", "contents": "makeWithYMDHMS float float float float float float unit t year month date hours minutes seconds ", "rendered": "<h4 class='item'>let makeWithYMDHMS: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  ~seconds: float,\n  unit\n) => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-makeWithYMDHM", "title": "makeWithYMDHM", "contents": "makeWithYMDHM float float float float float unit t year month date hours minutes ", "rendered": "<h4 class='item'>let makeWithYMDHM: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  ~minutes: float,\n  unit\n) => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-makeWithYMDH", "title": "makeWithYMDH", "contents": "makeWithYMDH float float float float unit t year month date hours ", "rendered": "<h4 class='item'>let makeWithYMDH: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  ~hours: float,\n  unit\n) => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-makeWithYMD", "title": "makeWithYMD", "contents": "makeWithYMD float float float unit t year month date ", "rendered": "<h4 class='item'>let makeWithYMD: (\n  ~year: float,\n  ~month: float,\n  ~date: float,\n  unit\n) => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-makeWithYM", "title": "makeWithYM", "contents": "makeWithYM float float unit t year month ", "rendered": "<h4 class='item'>let makeWithYM: (~year: float, ~month: float, unit) => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-fromString", "title": "fromString", "contents": "fromString string t ", "rendered": "<h4 class='item'>let fromString: string => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-fromFloat", "title": "fromFloat", "contents": "fromFloat float t ", "rendered": "<h4 class='item'>let fromFloat: float => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-make", "title": "make", "contents": "returns a date representing the current time", "rendered": "returns a date representing the current time", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Js_date.html#type-t\">t</a></h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-valueOf", "title": "valueOf", "contents": "returns the primitive value of this date, equivalent to getTime", "rendered": "returns the primitive value of this date, equivalent to getTime", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#value-valueOf", "title": "valueOf", "contents": "valueOf t float ", "rendered": "<h4 class='item'>let valueOf: <a href=\"./api/Js_date.html#type-t\">t</a> => float</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html", "title": "Js_date", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_date"},
{"href": "./api/Js_date.html", "title": "Js_date", "contents": "JavaScript Date API", "rendered": "JavaScript Date API", "breadcrumb": "Js_date"},
{"href": "./api/Js_string.html#value-castToArrayLike", "title": "castToArrayLike", "contents": "castToArrayLike t array_like t ", "rendered": "<h4 class='item'>let castToArrayLike: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_array.html#type-array_like\" title=\"Js_array.array_like\">array_like</a>(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-link", "title": "link", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-link", "title": "link", "contents": "link t t t  ", "rendered": "<h4 class='item'>let link: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-anchor", "title": "anchor", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-anchor", "title": "anchor", "contents": "anchor t t t  ", "rendered": "<h4 class='item'>let anchor: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "  trim \"   abc def   \" = \"abc def\"\n  trim \"\n	 abc def \n\n	 \" = \"abc def\"", "rendered": "<pre><code>  trim \"   abc def   \" = \"abc def\"\n  trim \"\n	 abc def \n\n	 \" = \"abc def\"</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-trim", "title": "trim", "contents": "trim str returns a string that is str with whitespace stripped from both ends. Internal whitespace is not removed.", "rendered": "<code>trim str</code> returns a string that is <code>str</code> with whitespace stripped from both ends. Internal whitespace is not removed.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-trim", "title": "trim", "contents": "trim t t ", "rendered": "<h4 class='item'>let trim: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toLocaleUpperCase", "title": "toLocaleUpperCase", "contents": "toLocaleUpperCase str converts str to upper case using the current locale", "rendered": "<code>toLocaleUpperCase str</code> converts <code>str</code> to upper case using the current locale", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toLocaleUpperCase", "title": "toLocaleUpperCase", "contents": "toLocaleUpperCase t t ", "rendered": "<h4 class='item'>let toLocaleUpperCase: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "toUpperCase \"abc\" = \"ABC\";;\ntoUpperCase {js|Straße|js} = {js|STRASSE|js};;\ntoLowerCase {js|πς|js} = {js|ΠΣ|js};;", "rendered": "<pre><code>toUpperCase \"abc\" = \"ABC\";;\ntoUpperCase {js|Straße|js} = {js|STRASSE|js};;\ntoLowerCase {js|πς|js} = {js|ΠΣ|js};;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toUpperCase", "title": "toUpperCase", "contents": "toUpperCase str converts str to upper case using the locale-insensitive case mappings in the Unicode Character Database. Notice that the conversion can expand the number of letters in the result; for example the German ß capitalizes to two Ses in a row.", "rendered": "<code>toUpperCase str</code> converts <code>str</code> to upper case using the locale-insensitive case mappings in the Unicode Character Database. Notice that the conversion can expand the number of letters in the result; for example the German <code>ß</code> capitalizes to two <code>S</code>es in a row.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toUpperCase", "title": "toUpperCase", "contents": "toUpperCase t t ", "rendered": "<h4 class='item'>let toUpperCase: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toLocaleLowerCase", "title": "toLocaleLowerCase", "contents": "toLocaleLowerCase str converts str to lower case using the current locale", "rendered": "<code>toLocaleLowerCase str</code> converts <code>str</code> to lower case using the current locale", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toLocaleLowerCase", "title": "toLocaleLowerCase", "contents": "toLocaleLowerCase t t ", "rendered": "<h4 class='item'>let toLocaleLowerCase: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "toLowerCase \"ABC\" = \"abc\";;\ntoLowerCase {js|ΣΠ|js} = {js|σπ|js};;\ntoLowerCase {js|ΠΣ|js} = {js|πς|js};;", "rendered": "<pre><code>toLowerCase \"ABC\" = \"abc\";;\ntoLowerCase {js|ΣΠ|js} = {js|σπ|js};;\ntoLowerCase {js|ΠΣ|js} = {js|πς|js};;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toLowerCase", "title": "toLowerCase", "contents": "toLowerCase str converts str to lower case using the locale-insensitive case mappings in the Unicode Character Database. Notice that the conversion can give different results depending upon context, for example with the Greek letter sigma, which has two different lower case forms when it is the last character in a string or not.", "rendered": "<code>toLowerCase str</code> converts <code>str</code> to lower case using the locale-insensitive case mappings in the Unicode Character Database. Notice that the conversion can give different results depending upon context, for example with the Greek letter sigma, which has two different lower case forms when it is the last character in a string or not.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-toLowerCase", "title": "toLowerCase", "contents": "toLowerCase t t ", "rendered": "<h4 class='item'>let toLowerCase: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "substringToEnd ~from: 4 \"playground\" = \"ground\";;\nsubstringToEnd ~from: (-3) \"playground\" = \"playground\";;\nsubstringToEnd ~from: 12 \"playground\" = \"\";", "rendered": "<pre><code>substringToEnd ~from: 4 \"playground\" = \"ground\";;\nsubstringToEnd ~from: (-3) \"playground\" = \"playground\";;\nsubstringToEnd ~from: 12 \"playground\" = \"\";</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substringToEnd", "title": "substringToEnd", "contents": "If start is greater than or equal to the length of str, the empty string is returned.", "rendered": "If <code>start</code> is greater than or equal to the length of <code>str</code>, the empty string is returned.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substringToEnd", "title": "substringToEnd", "contents": "If start is less than or equal to zero, the entire string is returned.", "rendered": "If <code>start</code> is less than or equal to zero, the entire string is returned.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substringToEnd", "title": "substringToEnd", "contents": "substringToEnd ~from: start str returns the substring of str from position start to the end.", "rendered": "<code>substringToEnd ~from: start str</code> returns the substring of <code>str</code> from position <code>start</code> to the end.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substringToEnd", "title": "substringToEnd", "contents": "substringToEnd int t t from ", "rendered": "<h4 class='item'>let substringToEnd: (~from: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "substring ~from: 3 ~to_: 6 \"playground\" = \"ygr\";;\nsubstring ~from: 6 ~to_: 3 \"playground\" = \"ygr\";;\nsubstring ~from: 4 ~to_: 12 \"playground\" = \"ground\";;", "rendered": "<pre><code>substring ~from: 3 ~to_: 6 \"playground\" = \"ygr\";;\nsubstring ~from: 6 ~to_: 3 \"playground\" = \"ygr\";;\nsubstring ~from: 4 ~to_: 12 \"playground\" = \"ground\";;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substring", "title": "substring", "contents": "If start is greater than finish, the start and finish points are swapped.", "rendered": "If <code>start</code> is greater than <code>finish</code>, the start and finish points are swapped.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substring", "title": "substring", "contents": "If finish is zero or negative, the empty string is returned.", "rendered": "If <code>finish</code> is zero or negative, the empty string is returned.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substring", "title": "substring", "contents": "If start is less than zero, it is treated as zero.", "rendered": "If <code>start</code> is less than zero, it is treated as zero.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substring", "title": "substring", "contents": "substring ~from: start ~to_: finish str returns characters start up to but not including finish from str.", "rendered": "<code>substring ~from: start ~to_: finish str</code> returns characters <code>start</code> up to but not including <code>finish</code> from <code>str</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substring", "title": "substring", "contents": "substring int int t t from to_ ", "rendered": "<h4 class='item'>let substring: (~from: int, ~to_: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "substrAtMost ~from: 3 ~length: 4 \"abcdefghij\" = \"defghij\"\nsubstrAtMost ~from: (-3) ~length: 4 \"abcdefghij\" = \"hij\"\nsubstrAtMost ~from: 12 ~ length: 2 \"abcdefghij\" = \"\"", "rendered": "<pre><code>substrAtMost ~from: 3 ~length: 4 \"abcdefghij\" = \"defghij\"\nsubstrAtMost ~from: (-3) ~length: 4 \"abcdefghij\" = \"hij\"\nsubstrAtMost ~from: 12 ~ length: 2 \"abcdefghij\" = \"\"</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substrAtMost", "title": "substrAtMost", "contents": "If n is less than or equal to zero, returns the empty string.", "rendered": "If <code>n</code> is less than or equal to zero, returns the empty string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substrAtMost", "title": "substrAtMost", "contents": "If pos is greater than or equal to the length of str, returns the empty string.", "rendered": "If <code>pos</code> is greater than or equal to the length of <code>str</code>, returns the empty string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substrAtMost", "title": "substrAtMost", "contents": "If pos is less than zero, the starting position is the length of str - pos.", "rendered": "If <code>pos</code> is less than zero, the starting position is the length of <code>str</code> - <code>pos</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substrAtMost", "title": "substrAtMost", "contents": "substrAtMost ~from: pos ~length: n str returns the substring of str of length n starting at position pos.", "rendered": "<code>substrAtMost ~from: pos ~length: n str</code> returns the substring of <code>str</code> of length <code>n</code> starting at position <code>pos</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substrAtMost", "title": "substrAtMost", "contents": "substrAtMost int int t t from length ", "rendered": "<h4 class='item'>let substrAtMost: (~from: int, ~length: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "substr ~from: 3 \"abcdefghij\" = \"defghij\"\nsubstr ~from: (-3) \"abcdefghij\" = \"hij\"\nsubstr ~from: 12 \"abcdefghij\" = \"\"", "rendered": "<pre><code>substr ~from: 3 \"abcdefghij\" = \"defghij\"\nsubstr ~from: (-3) \"abcdefghij\" = \"hij\"\nsubstr ~from: 12 \"abcdefghij\" = \"\"</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substr", "title": "substr", "contents": "If n is greater than or equal to the length of str, returns the empty string.", "rendered": "If <code>n</code> is greater than or equal to the length of <code>str</code>, returns the empty string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substr", "title": "substr", "contents": "If n is less than zero, the starting position is the length of str - n.", "rendered": "If <code>n</code> is less than zero, the starting position is the length of <code>str</code> - <code>n</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substr", "title": "substr", "contents": "substr ~from: n str returns the substring of str from position n to the end of the string.", "rendered": "<code>substr ~from: n str</code> returns the substring of <code>str</code> from position <code>n</code> to the end of the string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-substr", "title": "substr", "contents": "substr int t t from ", "rendered": "<h4 class='item'>let substr: (~from: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "startsWithFrom \"kle\" 3 \"BuckleScript\" = true;;\nstartsWithFrom \"\" 3 \"BuckleScript\" = true;;\nstartsWithFrom \"Buckle\" 2 \"JavaScript\" = false;;", "rendered": "<pre><code>startsWithFrom \"kle\" 3 \"BuckleScript\" = true;;\nstartsWithFrom \"\" 3 \"BuckleScript\" = true;;\nstartsWithFrom \"Buckle\" 2 \"JavaScript\" = false;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-startsWithFrom", "title": "startsWithFrom", "contents": "ES2015: startsWithFrom substr n str returns true if the str starts with substr starting at position n, false otherwise. If n is negative, the search starts at the beginning of str.", "rendered": "ES2015: <code>startsWithFrom substr n str</code> returns <code>true</code> if the <code>str</code> starts with <code>substr</code> starting at position <code>n</code>, <code>false</code> otherwise. If <code>n</code> is negative, the search starts at the beginning of <code>str</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-startsWithFrom", "title": "startsWithFrom", "contents": "startsWithFrom t int t bool   ", "rendered": "<h4 class='item'>let startsWithFrom: (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "startsWith \"Buckle\" \"BuckleScript\" = true;;\nstartsWith \"\" \"BuckleScript\" = true;;\nstartsWith \"Buckle\" \"JavaScript\" = false;;", "rendered": "<pre><code>startsWith \"Buckle\" \"BuckleScript\" = true;;\nstartsWith \"\" \"BuckleScript\" = true;;\nstartsWith \"Buckle\" \"JavaScript\" = false;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-startsWith", "title": "startsWith", "contents": "ES2015: startsWith substr str returns true if the str starts with substr, false otherwise.", "rendered": "ES2015: <code>startsWith substr str</code> returns <code>true</code> if the <code>str</code> starts with <code>substr</code>, <code>false</code> otherwise.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-startsWith", "title": "startsWith", "contents": "startsWith t t bool  ", "rendered": "<h4 class='item'>let startsWith: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitRegexpLimited", "title": "splitRegexpLimited", "contents": "Deprecated - Please use splitByReAtMost", "rendered": "Deprecated - Please use <code>splitByReAtMost</code>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitRegexpLimited", "title": "splitRegexpLimited", "contents": "splitRegexpLimited Js_re t int t array t   ", "rendered": "<h4 class='item'>let splitRegexpLimited: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => array(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitByReAtMost", "title": "splitByReAtMost", "contents": "splitByReAtMost Js_re t int t array t  limit ", "rendered": "<h4 class='item'>let splitByReAtMost: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, ~limit: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => array(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitByRe", "title": "splitByRe", "contents": "splitByRe Js_re t t array t  ", "rendered": "<h4 class='item'>let splitByRe: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => array(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitLimited", "title": "splitLimited", "contents": "Deprecated - Please use splitAtMost", "rendered": "Deprecated - Please use <code>splitAtMost</code>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitLimited", "title": "splitLimited", "contents": "splitLimited t int t array t   ", "rendered": "<h4 class='item'>let splitLimited: (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => array(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "splitAtMost \"/\" ~limit: 3 \"ant/bee/cat/dog/elk\" = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"/\" ~limit: 0 \"ant/bee/cat/dog/elk\" = [| |];;\nsplitAtMost \"/\" ~limit: 9 \"ant/bee/cat/dog/elk\" = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;", "rendered": "<pre><code>splitAtMost \"/\" ~limit: 3 \"ant/bee/cat/dog/elk\" = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"/\" ~limit: 0 \"ant/bee/cat/dog/elk\" = [| |];;\nsplitAtMost \"/\" ~limit: 9 \"ant/bee/cat/dog/elk\" = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitAtMost", "title": "splitAtMost", "contents": "splitAtMost delimiter ~limit: n str splits the given str at every occurrence of delimiter and returns an array of the first n resulting substrings. If n is negative or greater than the number of substrings, the array will contain all the substrings.", "rendered": "<code>splitAtMost delimiter ~limit: n str</code> splits the given <code>str</code> at every occurrence of <code>delimiter</code> and returns an array of the first <code>n</code> resulting substrings. If <code>n</code> is negative or greater than the number of substrings, the array will contain all the substrings.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-splitAtMost", "title": "splitAtMost", "contents": "splitAtMost t int t array t  limit ", "rendered": "<h4 class='item'>let splitAtMost: (<a href=\"./api/Js_string.html#type-t\">t</a>, ~limit: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => array(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-split", "title": "split", "contents": "split t t array t  ", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => array(<a href=\"./api/Js_string.html#type-t\">t</a>)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "sliceToEnd ~from: 4 \"abcdefg\" == \"efg\";;\nsliceToEnd ~from: (-2) \"abcdefg\" == \"fg\";; \nsliceToEnd ~from: 7 \"abcdefg\" == \"\";;", "rendered": "<pre><code>sliceToEnd ~from: 4 \"abcdefg\" == \"efg\";;\nsliceToEnd ~from: (-2) \"abcdefg\" == \"fg\";; \nsliceToEnd ~from: 7 \"abcdefg\" == \"\";;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "If n is greater than the length of str, then sliceToEnd returns the empty string.", "rendered": "If <code>n</code> is greater than the length of <code>str</code>, then <code>sliceToEnd</code> returns the empty string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "If n is negative, then it is evaluated as length str - n.", "rendered": "If <code>n</code> is negative, then it is evaluated as <code>length str - n</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd from: n str returns the substring of str starting at character n to the end of the string", "rendered": "<code>sliceToEnd from: n str</code> returns the substring of <code>str</code> starting at character <code>n</code> to the end of the string", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-sliceToEnd", "title": "sliceToEnd", "contents": "sliceToEnd int t t from ", "rendered": "<h4 class='item'>let sliceToEnd: (~from: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "slice ~from:2 ~to_:5 \"abcdefg\" == \"cde\";;\nslice ~from:2 ~to_:9 \"abcdefg\" == \"cdefg\";;\nslice ~from:(-4) ~to_:(-2) \"abcdefg\" == \"de\";; \nslice ~from:5 ~to_:1 \"abcdefg\" == \"\";;", "rendered": "<pre><code>slice ~from:2 ~to_:5 \"abcdefg\" == \"cde\";;\nslice ~from:2 ~to_:9 \"abcdefg\" == \"cdefg\";;\nslice ~from:(-4) ~to_:(-2) \"abcdefg\" == \"de\";; \nslice ~from:5 ~to_:1 \"abcdefg\" == \"\";;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-slice", "title": "slice", "contents": "If n1 is greater than n2, slice returns the empty string.", "rendered": "If <code>n1</code> is greater than <code>n2</code>, <code>slice</code> returns the empty string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-slice", "title": "slice", "contents": "If n2 is greater than the length of str, then it is treated as length str.", "rendered": "If <code>n2</code> is greater than the length of <code>str</code>, then it is treated as <code>length str</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-slice", "title": "slice", "contents": "If either n1 or n2 is negative, then it is evaluated as length str - n1 (or length str - n2.", "rendered": "If either <code>n1</code> or <code>n2</code> is negative, then it is evaluated as <code>length str - n1</code> (or <code>length str - n2</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-slice", "title": "slice", "contents": "slice from:n1 to_:n2 str returns the substring of str starting at character n1 up to but not including n2", "rendered": "<code>slice from:n1 to_:n2 str</code> returns the substring of <code>str</code> starting at character <code>n1</code> up to but not including <code>n2</code>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-slice", "title": "slice", "contents": "slice int int t t from to_ ", "rendered": "<h4 class='item'>let slice: (~from: int, ~to_: int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "search [%re \"/\\d+/\"] \"testing 1 2 3\" = 8;;\nsearch [%re \"/\\d+/\"] \"no numbers\" = -1;;", "rendered": "<pre><code>search [%re \"/\\d+/\"] \"testing 1 2 3\" = 8;;\nsearch [%re \"/\\d+/\"] \"no numbers\" = -1;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-search", "title": "search", "contents": "search regexp str returns the starting position of the first match of regexp in the given str, or -1 if there is no match.", "rendered": "<code>search regexp str</code> returns the starting position of the first match of <code>regexp</code> in the given <code>str</code>, or -1 if there is no match.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-search", "title": "search", "contents": "search Js_re t t int  ", "rendered": "<h4 class='item'>let search: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy3", "title": "unsafeReplaceBy3", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy3", "title": "unsafeReplaceBy3", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter'><p>MDN</p>\n</a>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy3", "title": "unsafeReplaceBy3", "contents": "returns a new string with some or all matches of a pattern with three sets of capturing parentheses replaced by the value returned from the given function. The function receives as its parameters the matched string, the captured strings, the offset at which the match begins, and the whole string being matched.", "rendered": "returns a new string with some or all matches of a pattern with three sets of capturing parentheses replaced by the value returned from the given function. The function receives as its parameters the matched string, the captured strings, the offset at which the match begins, and the whole string being matched.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy3", "title": "unsafeReplaceBy3", "contents": "unsafeReplaceBy3 Js_re t t t t t int t t       t t   ", "rendered": "<h4 class='item'>let unsafeReplaceBy3: (\n  <a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>,\n  (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a>,\n  <a href=\"./api/Js_string.html#type-t\">t</a>\n) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy2", "title": "unsafeReplaceBy2", "contents": "MDN", "rendered": "MDN", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy2", "title": "unsafeReplaceBy2", "contents": "See: MDN\n\n", "rendered": "See: <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter'><p>MDN</p>\n</a>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "let str = \"7 times 6\"\nlet re = [%re \"/(\\d+) times (\\d+)/\"]\nlet matchFn matchPart p1 p2 offset wholeString =\n  string_of_int ((int_of_string p1) * (int_of_string p2))\n  \nlet replaced = Js.String.unsafeReplaceBy2 re matchFn str\n\nlet () = Js.log replaced (* prints \"42\" *)", "rendered": "<pre><code>let str = \"7 times 6\"\nlet re = [%re \"/(\\d+) times (\\d+)/\"]\nlet matchFn matchPart p1 p2 offset wholeString =\n  string_of_int ((int_of_string p1) * (int_of_string p2))\n  \nlet replaced = Js.String.unsafeReplaceBy2 re matchFn str\n\nlet () = Js.log replaced (* prints \"42\" *)</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy2", "title": "unsafeReplaceBy2", "contents": "returns a new string with some or all matches of a pattern with two sets of capturing parentheses replaced by the value returned from the given function. The function receives as its parameters the matched string, the captured strings, the offset at which the match begins, and the whole string being matched.", "rendered": "returns a new string with some or all matches of a pattern with two sets of capturing parentheses replaced by the value returned from the given function. The function receives as its parameters the matched string, the captured strings, the offset at which the match begins, and the whole string being matched.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy2", "title": "unsafeReplaceBy2", "contents": "unsafeReplaceBy2 Js_re t t t t int t t      t t   ", "rendered": "<h4 class='item'>let unsafeReplaceBy2: (\n  <a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>,\n  (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a>,\n  <a href=\"./api/Js_string.html#type-t\">t</a>\n) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy1", "title": "unsafeReplaceBy1", "contents": "unsafeReplaceBy1 Js_re t t t int t t     t t   ", "rendered": "<h4 class='item'>let unsafeReplaceBy1: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy0", "title": "unsafeReplaceBy0", "contents": "lla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter&gt; MDN", "rendered": "lla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_function_as_a_parameter&gt; MDN", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy0", "title": "unsafeReplaceBy0", "contents": "prints &quot;bEAUtifUl vOwEls&quot; *)", "rendered": "prints &quot;bEAUtifUl vOwEls&quot; *)", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy0", "title": "unsafeReplaceBy0", "contents": "afeReplaceBy0 re matchFn str", "rendered": "afeReplaceBy0 re matchFn str", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy0", "title": "unsafeReplaceBy0", "contents": "wholeString = hPart", "rendered": "wholeString = hPart", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy0", "title": "unsafeReplaceBy0", "contents": "returns a new string with some or all matches of a pattern with no capturing value returned from the given function. parameters the matched string, the offset at which the string being matched", "rendered": "returns a new string with some or all matches of a pattern with no capturing value returned from the given function. parameters the matched string, the offset at which the string being matched", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-unsafeReplaceBy0", "title": "unsafeReplaceBy0", "contents": "unsafeReplaceBy0 Js_re t t int t t    t t   ", "rendered": "<h4 class='item'>let unsafeReplaceBy0: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "replaceByRe [%re \"/[aeiou]/g\"] \"x\" \"vowels be gone\" = \"vxwxls bx gxnx\"\nreplaceByRe [%re \"/(\\w+) (\\w+)/\"] \"$2, $1\" \"Juan Fulano\" = \"Fulano, Juan\"", "rendered": "<pre><code>replaceByRe [%re \"/[aeiou]/g\"] \"x\" \"vowels be gone\" = \"vxwxls bx gxnx\"\nreplaceByRe [%re \"/(\\w+) (\\w+)/\"] \"$2, $1\" \"Juan Fulano\" = \"Fulano, Juan\"</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-replaceByRe", "title": "replaceByRe", "contents": "replaceByRe regex replacement string returns a new string where occurrences matching regex have been replaced by replacement.", "rendered": "<code>replaceByRe regex replacement string</code> returns a new string where occurrences matching <code>regex</code> have been replaced by <code>replacement</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-replaceByRe", "title": "replaceByRe", "contents": "replaceByRe Js_re t t t t   ", "rendered": "<h4 class='item'>let replaceByRe: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "replace \"old\" \"new\" \"old string\" = \"new string\"\nreplace \"the\" \"this\" \"the cat and the dog\" = \"this cat and the dog\"", "rendered": "<pre><code>replace \"old\" \"new\" \"old string\" = \"new string\"\nreplace \"the\" \"this\" \"the cat and the dog\" = \"this cat and the dog\"</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-replace", "title": "replace", "contents": "substr is treated as a verbatim string to match, not a regular expression.", "rendered": "<code>substr</code> is treated as a verbatim string to match, not a regular expression.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-replace", "title": "replace", "contents": "replace substr newSubstr string returns a new string which is identical to string except with the first matching instance of substr replaced by newSubstr.", "rendered": "<code>replace substr newSubstr string</code> returns a new string which is identical to <code>string</code> except with the first matching instance of <code>substr</code> replaced by <code>newSubstr</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-replace", "title": "replace", "contents": "replace t t t t   ", "rendered": "<h4 class='item'>let replace: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-repeat", "title": "repeat", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-repeat", "title": "repeat", "contents": "repeat int t t  ", "rendered": "<h4 class='item'>let repeat: (int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "&quot;NFKD&quot; — Normalization Form Compatibility Decomposition.", "rendered": "&quot;NFKD&quot; — Normalization Form Compatibility Decomposition.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "&quot;NFKC&quot; — Normalization Form Compatibility Composition.", "rendered": "&quot;NFKC&quot; — Normalization Form Compatibility Composition.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "&quot;NFD&quot; — Normalization Form Canonical Decomposition.", "rendered": "&quot;NFD&quot; — Normalization Form Canonical Decomposition.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "&quot;NFC&quot; — Normalization Form Canonical Composition.", "rendered": "&quot;NFC&quot; — Normalization Form Canonical Composition.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "Unicode technical report for details", "rendered": "Unicode technical report for details", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "See: Unicode technical report for details\n\n", "rendered": "See: <a href='https://www.unicode.org/reports/tr15/tr15-45.html'><p>Unicode technical report for details</p>\n</a>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "normalize str form (ES2015) returns the normalized Unicode string using the specified form of normalization, which may be one of:", "rendered": "<code>normalize str form</code> (ES2015) returns the normalized Unicode string using the specified form of normalization, which may be one of:", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalizeByForm", "title": "normalizeByForm", "contents": "normalizeByForm t t t  ", "rendered": "<h4 class='item'>let normalizeByForm: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalize", "title": "normalize", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-normalize", "title": "normalize", "contents": "normalize t t ", "rendered": "<h4 class='item'>let normalize: <a href=\"./api/Js_string.html#type-t\">t</a> => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-match_", "title": "match_", "contents": "Any capture groups if the regexp had parentheses", "rendered": "Any capture groups if the <code>regexp</code> had parentheses", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-match_", "title": "match_", "contents": "The entire matched string", "rendered": "The entire matched string", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "match [%re \"/b[aeiou]t/\"] \"The better bats\" = Some [|\"bet\"|]\nmatch [%re \"/b[aeiou]t/g\"] \"The better bats\" = Some [|\"bet\";\"bat\"|]\nmatch [%re \"/(\\d+)-(\\d+)-(\\d+)/\"] \"Today is 2018-04-05.\" =\n  Some [|\"2018-04-05\"; \"2018\"; \"04\"; \"05\"|]\nmatch [%re \"/b[aeiou]g/\"] \"The large container.\" = None", "rendered": "<pre><code>match [%re \"/b[aeiou]t/\"] \"The better bats\" = Some [|\"bet\"|]\nmatch [%re \"/b[aeiou]t/g\"] \"The better bats\" = Some [|\"bet\";\"bat\"|]\nmatch [%re \"/(\\d+)-(\\d+)-(\\d+)/\"] \"Today is 2018-04-05.\" =\n  Some [|\"2018-04-05\"; \"2018\"; \"04\"; \"05\"|]\nmatch [%re \"/b[aeiou]g/\"] \"The large container.\" = None</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-match_", "title": "match_", "contents": "For regular expressions with the g modifier, a matched expression returns Some array with all the matched substrings and no capture groups.", "rendered": "For regular expressions with the <code>g</code> modifier, a matched expression returns <code>Some array</code> with all the matched substrings and no capture groups.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-match_", "title": "match_", "contents": "match regexp str matches a string against the given regexp. If there is no match, it returns None. For regular expressions without the g modifier, if there is a match, the return value is Some array where the array contains:", "rendered": "<code>match regexp str</code> matches a string against the given <code>regexp</code>. If there is no match, it returns <code>None</code>. For regular expressions without the <code>g</code> modifier, if there is a match, the return value is <code>Some array</code> where the array contains:", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-match_", "title": "match_", "contents": "match_ Js_re t t option array t  ", "rendered": "<h4 class='item'>let match_: (<a href=\"./api/Js_re.html\">Js_re</a>.<a href=\"./api/Js_re.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => option(array(<a href=\"./api/Js_string.html#type-t\">t</a>))</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-localeCompare", "title": "localeCompare", "contents": "a positive value if reference comes after comparison in sort order", "rendered": "a positive value if <code>reference</code> comes after <code>comparison</code> in sort order", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-localeCompare", "title": "localeCompare", "contents": "zero if reference and comparison have the same sort order", "rendered": "zero if <code>reference</code> and <code>comparison</code> have the same sort order", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-localeCompare", "title": "localeCompare", "contents": "a negative value if reference comes before comparison in sort order", "rendered": "a negative value if <code>reference</code> comes before <code>comparison</code> in sort order", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "(localeCompare \"ant\" \"zebra\") > 0.0;;\n(localeCompare \"zebra\" \"ant\") < 0.0;;\n(localeCompare \"cat\" \"cat\") = 0.0;;\n(localeCompare \"cat\" \"CAT\") > 0.0;; ", "rendered": "<pre><code>(localeCompare \"ant\" \"zebra\") > 0.0;;\n(localeCompare \"zebra\" \"ant\") < 0.0;;\n(localeCompare \"cat\" \"cat\") = 0.0;;\n(localeCompare \"cat\" \"CAT\") > 0.0;; </code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-localeCompare", "title": "localeCompare", "contents": "localeCompare comparison reference returns", "rendered": "<code>localeCompare comparison reference</code> returns", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-localeCompare", "title": "localeCompare", "contents": "localeCompare t t float  ", "rendered": "<h4 class='item'>let localeCompare: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => float</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "lastIndexOfFrom \"ok\" 6 \"bookseller\" = 2;;\nlastIndexOfFrom \"ee\" 8 \"beekeeper\" = 4;;\nlastIndexOfFrom \"ee\" 3 \"beekeeper\" = 1;;\nlastIndexOfFrom \"xyz\" 4 \"abcdefg\" = -1;;", "rendered": "<pre><code>lastIndexOfFrom \"ok\" 6 \"bookseller\" = 2;;\nlastIndexOfFrom \"ee\" 8 \"beekeeper\" = 4;;\nlastIndexOfFrom \"ee\" 3 \"beekeeper\" = 1;;\nlastIndexOfFrom \"xyz\" 4 \"abcdefg\" = -1;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-lastIndexOfFrom", "title": "lastIndexOfFrom", "contents": "lastIndexOfFrom searchValue start s returns the position of the last occurrence of searchValue within s, searching backwards from the given start position. Returns -1 if searchValue is not in s. The return value is always relative to the beginning of the string.", "rendered": "<code>lastIndexOfFrom searchValue start s</code> returns the position of the <em>last</em> occurrence of <code>searchValue</code> within <code>s</code>, searching backwards from the given <code>start</code> position. Returns <code>-1</code> if <code>searchValue</code> is not in <code>s</code>. The return value is always relative to the beginning of the string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-lastIndexOfFrom", "title": "lastIndexOfFrom", "contents": "lastIndexOfFrom t int t int   ", "rendered": "<h4 class='item'>let lastIndexOfFrom: (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "lastIndexOf \"ok\" \"bookseller\" = 2;;\nlastIndexOf \"ee\" \"beekeeper\" = 4;;\nlastIndexOf \"xyz\" \"abcdefg\" = -1;;", "rendered": "<pre><code>lastIndexOf \"ok\" \"bookseller\" = 2;;\nlastIndexOf \"ee\" \"beekeeper\" = 4;;\nlastIndexOf \"xyz\" \"abcdefg\" = -1;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-lastIndexOf", "title": "lastIndexOf", "contents": "lastIndexOf searchValue s returns the position of the last occurrence of searchValue within s, searching backwards from the end of the string. Returns -1 if searchValue is not in s. The return value is always relative to the beginning of the string.", "rendered": "<code>lastIndexOf searchValue s</code> returns the position of the <em>last</em> occurrence of <code>searchValue</code> within <code>s</code>, searching backwards from the end of the string. Returns <code>-1</code> if <code>searchValue</code> is not in <code>s</code>. The return value is always relative to the beginning of the string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-lastIndexOf", "title": "lastIndexOf", "contents": "lastIndexOf t t int  ", "rendered": "<h4 class='item'>let lastIndexOf: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "indexOfFrom \"ok\" 1 \"bookseller\" = 2;;\nindexOfFrom \"sell\" 2 \"bookseller\" = 4;;\nindexOfFrom \"sell\" 5 \"bookseller\" = -1;;\nindexOf \"xyz\" \"bookseller\" = -1;;", "rendered": "<pre><code>indexOfFrom \"ok\" 1 \"bookseller\" = 2;;\nindexOfFrom \"sell\" 2 \"bookseller\" = 4;;\nindexOfFrom \"sell\" 5 \"bookseller\" = -1;;\nindexOf \"xyz\" \"bookseller\" = -1;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-indexOfFrom", "title": "indexOfFrom", "contents": "indexOfFrom searchValue start s returns the position at which searchValue was found within s starting at character position start, or -1 if searchValue is not found in that portion of s. The return value is relative to the beginning of the string, no matter where the search started from.", "rendered": "<code>indexOfFrom searchValue start s</code> returns the position at which <code>searchValue</code> was found within <code>s</code> starting at character position <code>start</code>, or <code>-1</code> if <code>searchValue</code> is not found in that portion of <code>s</code>. The return value is relative to the beginning of the string, no matter where the search started from.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-indexOfFrom", "title": "indexOfFrom", "contents": "indexOfFrom t int t int   ", "rendered": "<h4 class='item'>let indexOfFrom: (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "indexOf \"ok\" \"bookseller\" = 2;;\nindexOf \"sell\" \"bookseller\" = 4;;\nindexOf \"ee\" \"beekeeper\" = 1;;\nindexOf \"xyz\" \"bookseller\" = -1;;", "rendered": "<pre><code>indexOf \"ok\" \"bookseller\" = 2;;\nindexOf \"sell\" \"bookseller\" = 4;;\nindexOf \"ee\" \"beekeeper\" = 1;;\nindexOf \"xyz\" \"bookseller\" = -1;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-indexOf", "title": "indexOf", "contents": "indexOf searchValue s returns the position at which searchValue was first found within s, or -1 if searchValue is not in s.", "rendered": "<code>indexOf searchValue s</code> returns the position at which <code>searchValue</code> was first found within <code>s</code>, or <code>-1</code> if <code>searchValue</code> is not in <code>s</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-indexOf", "title": "indexOf", "contents": "indexOf t t int  ", "rendered": "<h4 class='item'>let indexOf: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-includesFrom", "title": "includesFrom", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-includesFrom", "title": "includesFrom", "contents": "includesFrom t int t bool   ", "rendered": "<h4 class='item'>let includesFrom: (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-includes", "title": "includes", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-includes", "title": "includes", "contents": "includes t t bool  ", "rendered": "<h4 class='item'>let includes: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-endsWithFrom", "title": "endsWithFrom", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-endsWithFrom", "title": "endsWithFrom", "contents": "endsWithFrom t int t bool   ", "rendered": "<h4 class='item'>let endsWithFrom: (<a href=\"./api/Js_string.html#type-t\">t</a>, int, <a href=\"./api/Js_string.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "endsWith \"Script\" \"BuckleScript\" = true;;\nendsWith \"Script\" \"BuckleShoes\" = false;;", "rendered": "<pre><code>endsWith \"Script\" \"BuckleScript\" = true;;\nendsWith \"Script\" \"BuckleShoes\" = false;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-endsWith", "title": "endsWith", "contents": "ES2015: endsWith substr str returns true if the str ends with substr, false otherwise.", "rendered": "ES2015: <code>endsWith substr str</code> returns <code>true</code> if the <code>str</code> ends with <code>substr</code>, <code>false</code> otherwise.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-endsWith", "title": "endsWith", "contents": "endsWith t t bool  ", "rendered": "<h4 class='item'>let endsWith: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => bool</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "concatMany [|\"2nd\"; \"3rd\"; \"4th\"|] \"1st\" = \"1st2nd3rd4th\";;", "rendered": "<pre><code>concatMany [|\"2nd\"; \"3rd\"; \"4th\"|] \"1st\" = \"1st2nd3rd4th\";;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-concatMany", "title": "concatMany", "contents": "concat arr original returns a new string consisting of each item of an array of strings added to the original string.", "rendered": "<code>concat arr original</code> returns a new string consisting of each item of an array of strings added to the <code>original</code> string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-concatMany", "title": "concatMany", "contents": "concatMany array t t t  ", "rendered": "<h4 class='item'>let concatMany: (array(<a href=\"./api/Js_string.html#type-t\">t</a>), <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "concat \"bell\" \"cow\" = \"cowbell\";;", "rendered": "<pre><code>concat \"bell\" \"cow\" = \"cowbell\";;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-concat", "title": "concat", "contents": "concat append original returns a new string with append added after original.", "rendered": "<code>concat append original</code> returns a new string with <code>append</code> added after <code>original</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-concat", "title": "concat", "contents": "concat t t t  ", "rendered": "<h4 class='item'>let concat: (<a href=\"./api/Js_string.html#type-t\">t</a>, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-codePointAt", "title": "codePointAt", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-codePointAt", "title": "codePointAt", "contents": "codePointAt int t option int  ", "rendered": "<h4 class='item'>let codePointAt: (int, <a href=\"./api/Js_string.html#type-t\">t</a>) => option(int)</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "charCodeAt 0 {js|😺|js} returns 0xd83d\ncodePointAt 0 {js|😺|js} returns Some 0x1f63a", "rendered": "<pre><code>charCodeAt 0 {js|😺|js} returns 0xd83d\ncodePointAt 0 {js|😺|js} returns Some 0x1f63a</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-charCodeAt", "title": "charCodeAt", "contents": "charCodeAt n s returns the character code at position n in string s; the result is in the range 0-65535, unlke codePointAt, so it will not work correctly for characters with code points greater than or equal to 0x10000. The return type is float because this function returns NaN if n is less than zero or greater than the length of the string.", "rendered": "<code>charCodeAt n s</code> returns the character code at position <code>n</code> in string <code>s</code>; the result is in the range 0-65535, unlke <code>codePointAt</code>, so it will not work correctly for characters with code points greater than or equal to <code>0x10000</code>. The return type is <code>float</code> because this function returns <code>NaN</code> if <code>n</code> is less than zero or greater than the length of the string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-charCodeAt", "title": "charCodeAt", "contents": "charCodeAt int t float  ", "rendered": "<h4 class='item'>let charCodeAt: (int, <a href=\"./api/Js_string.html#type-t\">t</a>) => float</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "charAt 0, \"Reason\" = \"R\"\ncharAt( 12, \"Reason\") = \"\";\ncharAt( 5, {js|Rẽasöń|js} = {js|ń|js}", "rendered": "<pre><code>charAt 0, \"Reason\" = \"R\"\ncharAt( 12, \"Reason\") = \"\";\ncharAt( 5, {js|Rẽasöń|js} = {js|ń|js}</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-charAt", "title": "charAt", "contents": "charAt n s gets the character at index n within string s. If n is negative or greater than the length of s, returns the empty string. If the string contains characters outside the range \\u0000-\\uffff, it will return the first 16-bit value at that position in the string.", "rendered": "<code>charAt n s</code> gets the character at index <code>n</code> within string <code>s</code>. If <code>n</code> is negative or greater than the length of <code>s</code>, returns the empty string. If the string contains characters outside the range <code>\\u0000-\\uffff</code>, it will return the first 16-bit value at that position in the string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-charAt", "title": "charAt", "contents": "charAt int t t  ", "rendered": "<h4 class='item'>let charAt: (int, <a href=\"./api/Js_string.html#type-t\">t</a>) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "get \"Reason\" 0 = \"R\";;\nget \"Reason\" 4 = \"o\";;\nget {js|Rẽasöń|js} 5 = {js|ń|js};;", "rendered": "<pre><code>get \"Reason\" 0 = \"R\";;\nget \"Reason\" 4 = \"o\";;\nget {js|Rẽasöń|js} 5 = {js|ń|js};;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-get", "title": "get", "contents": "get s n returns as a string the character at the given index number. If n is out of range, this function returns undefined, so at some point this function may be modified to return t option.", "rendered": "<code>get s n</code> returns as a string the character at the given index number. If <code>n</code> is out of range, this function returns <code>undefined</code>, so at some point this function may be modified to return <code>t option</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-get", "title": "get", "contents": "get t int t  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Js_string.html#type-t\">t</a>, int) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "length \"abcd\" = 4;;", "rendered": "<pre><code>length \"abcd\" = 4;;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-length", "title": "length", "contents": "length s returns the length of the given string.", "rendered": "<code>length s</code> returns the length of the given string.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Js_string.html#type-t\">t</a> => int</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCodePointMany", "title": "fromCodePointMany", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCodePointMany", "title": "fromCodePointMany", "contents": "fromCodePointMany array int t ", "rendered": "<h4 class='item'>let fromCodePointMany: array(int) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCodePoint", "title": "fromCodePoint", "contents": "ES2015", "rendered": "ES2015", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCodePoint", "title": "fromCodePoint", "contents": "fromCodePoint int t ", "rendered": "<h4 class='item'>let fromCodePoint: int => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "fromCharCodeMany([|0xd55c, 0xae00, 33|]) = {js|한글!|js};;", "rendered": "<pre><code>fromCharCodeMany([|0xd55c, 0xae00, 33|]) = {js|한글!|js};;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCharCodeMany", "title": "fromCharCodeMany", "contents": "fromCharCodeMany [|n1;n2;n3|] creates a string from the characters corresponding to the given numbers, using the same rules as fromCharCode.", "rendered": "<code>fromCharCodeMany [|n1;n2;n3|]</code> creates a string from the characters corresponding to the given numbers, using the same rules as <code>fromCharCode</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCharCodeMany", "title": "fromCharCodeMany", "contents": "fromCharCodeMany array int t ", "rendered": "<h4 class='item'>let fromCharCodeMany: array(int) => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "fromCharCode 65 = \"A\";;\nfromCharCode 0x3c8 = {js|ψ|js};;\nfromCharCode 0xd55c = {js|한|js};;\nfromCharCode -64568 = {js|ψ|js};;", "rendered": "<pre><code>fromCharCode 65 = \"A\";;\nfromCharCode 0x3c8 = {js|ψ|js};;\nfromCharCode 0xd55c = {js|한|js};;\nfromCharCode -64568 = {js|ψ|js};;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCharCode", "title": "fromCharCode", "contents": "fromCharCode n creates a string containing the character corresponding to that number; n ranges from 0 to 65535. If out of range, the lower 16 bits of the value are used. Thus, fromCharCode 0x1F63A gives the same result as fromCharCode 0xF63A.", "rendered": "<code>fromCharCode n</code> creates a string containing the character corresponding to that number; <em>n</em> ranges from 0 to 65535. If out of range, the lower 16 bits of the value are used. Thus, <code>fromCharCode 0x1F63A</code> gives the same result as <code>fromCharCode 0xF63A</code>.", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-fromCharCode", "title": "fromCharCode", "contents": "fromCharCode int t ", "rendered": "<h4 class='item'>let fromCharCode: int => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "code block", "contents": "make 3.5 = \"3.5\";;\nmake [|1;2;3|]) = \"1,2,3\";;", "rendered": "<pre><code>make 3.5 = \"3.5\";;\nmake [|1;2;3|]) = \"1,2,3\";;</code></pre>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-make", "title": "make", "contents": "make value converts the given value to a string", "rendered": "<code>make value</code> converts the given value to a string", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#value-make", "title": "make", "contents": "make t ", "rendered": "<h4 class='item'>let make: 'a => <a href=\"./api/Js_string.html#type-t\">t</a></h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html#type-t", "title": "t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "Js_string", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js_string"},
{"href": "./api/Js_string.html", "title": "Js_string", "contents": "JavaScript String API", "rendered": "JavaScript String API", "breadcrumb": "Js_string"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "sort [5; 4; 9; 3; 7] (fun a b -> a - b) = [3; 4; 5; 7; 9]\n", "rendered": "<pre><code>sort [5; 4; 9; 3; 7] (fun a b -> a - b) = [3; 4; 5; 7; 9]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-sort", "title": "sort", "contents": "sort xs Returns a sorted list.", "rendered": "<code>sort xs</code> Returns a sorted list.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-sort", "title": "sort", "contents": "sort t int   t  ", "rendered": "<h4 class='item'>let sort: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), ('a, 'a) => int) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-sortU", "title": "sortU", "contents": "sortU t fn int t  ", "rendered": "<h4 class='item'>let sortU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a39 * 'a39 ], int)\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-setAssoc", "title": "setAssoc", "contents": "Note carefully the last example! Since 15 mod 12 equals 3 mod 12, both the key and value are replaced in the list.", "rendered": "Note carefully the last example! Since <code>15 mod 12</code> equals <code>3 mod 12</code>, <em>both</em> the key and value are replaced in the list.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "setAssoc [1,\"a\"; 2, \"b\"; 3, \"c\"] 2 \"x\" (=) =\n[1,\"a\"; 2, \"x\"; 3,\"c\"] ;; \n\nsetAssoc [1,\"a\"; 3, \"c\"] 2 \"b\" (=) = \n[2,\"b\"; 1,\"a\"; 3, \"c\"]\n\nsetAssoc [9, \"morning\"; 3, \"morning?!\"; 22, \"night\"] 15 \"afternoon\"\n  (fun a b -> a mod 12 = b mod 12) = [9, \"morning\"; 15, \"afternoon\"; 22, \"night\"]\n", "rendered": "<pre><code>setAssoc [1,\"a\"; 2, \"b\"; 3, \"c\"] 2 \"x\" (=) =\n[1,\"a\"; 2, \"x\"; 3,\"c\"] ;; \n\nsetAssoc [1,\"a\"; 3, \"c\"] 2 \"b\" (=) = \n[2,\"b\"; 1,\"a\"; 3, \"c\"]\n\nsetAssoc [9, \"morning\"; 3, \"morning?!\"; 22, \"night\"] 15 \"afternoon\"\n  (fun a b -> a mod 12 = b mod 12) = [9, \"morning\"; 15, \"afternoon\"; 22, \"night\"]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-setAssoc", "title": "setAssoc", "contents": "setAssoc xs k v eq if k exists in xs by satisfying the eq predicate, return a new list with the key and value replaced by the new k and v; otherwise, return a new list with the pair k, v added to the head of xs.", "rendered": "<code>setAssoc xs k v eq</code> if <code>k</code> exists in <code>xs</code> by satisfying the <code>eq</code> predicate, return a new list with the key and value replaced by the new <code>k</code> and <code>v</code>; otherwise, return a new list with the pair <code>k, v</code> added to the head of <code>xs</code>.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-setAssoc", "title": "setAssoc", "contents": "setAssoc t bool   t    ", "rendered": "<h4 class='item'>let setAssoc: (<a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)), 'a, 'c, ('a, 'a) => bool) => <a href=\"./api/Belt_List.html#type-t\">t</a>(\n  ('a, 'c)\n)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-setAssocU", "title": "setAssocU", "contents": "setAssocU t fn bool t    ", "rendered": "<h4 class='item'>let setAssocU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)),\n  'a,\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a40 * 'a40 ], bool)\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "removeAssoc [1,\"a\"; 2, \"b\"; 3, \"c\" ] 1 (=) =\n  [2, \"b\"; 3, \"c\"]\nremoveAssoc [1,\"a\"; 2, \"b\"; 3, \"c\" ] 99 (=) =\n  [1, \"a\"; 2, \"b\"; 3, \"c\"]\n", "rendered": "<pre><code>removeAssoc [1,\"a\"; 2, \"b\"; 3, \"c\" ] 1 (=) =\n  [2, \"b\"; 3, \"c\"]\nremoveAssoc [1,\"a\"; 2, \"b\"; 3, \"c\" ] 99 (=) =\n  [1, \"a\"; 2, \"b\"; 3, \"c\"]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-removeAssoc", "title": "removeAssoc", "contents": "removeAssoc xs k eq Return a list after removing the first pair whose first value is k per the equality predicate eq; if not found, return a new list identical to xs.", "rendered": "<code>removeAssoc xs k eq</code> Return a list after removing the first pair whose first value is <code>k</code> per the equality predicate <code>eq</code>; if not found, return a new list identical to <code>xs</code>.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-removeAssoc", "title": "removeAssoc", "contents": "removeAssoc t bool   t   ", "rendered": "<h4 class='item'>let removeAssoc: (<a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)), 'b, ('a, 'b) => bool) => <a href=\"./api/Belt_List.html#type-t\">t</a>(\n  ('a, 'c)\n)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-removeAssocU", "title": "removeAssocU", "contents": "removeAssocU t fn bool t   ", "rendered": "<h4 class='item'>let removeAssocU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a41 * 'b9 ], bool)\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "hasAssoc [1, \"a\"; 2, \"b\"; 3,\"c\"] 1 (=) = true;;\nhasAssoc [9, \"morning\"; 15, \"afternoon\"; 22, \"night\"] 3 (fun a b -> a mod 12 = b mod 12) = true;;\n", "rendered": "<pre><code>hasAssoc [1, \"a\"; 2, \"b\"; 3,\"c\"] 1 (=) = true;;\nhasAssoc [9, \"morning\"; 15, \"afternoon\"; 22, \"night\"] 3 (fun a b -> a mod 12 = b mod 12) = true;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-hasAssoc", "title": "hasAssoc", "contents": "hasAssoc xs k eq return true if there is a pair in xs where the first element equals k as per the predicate funtion eq", "rendered": "<code>hasAssoc xs k eq</code> return true if there is a pair in <code>xs</code> where the first element equals <code>k</code> as per the predicate funtion <code>eq</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-hasAssoc", "title": "hasAssoc", "contents": "hasAssoc t bool   bool   ", "rendered": "<h4 class='item'>let hasAssoc: (<a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)), 'b, ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-hasAssocU", "title": "hasAssocU", "contents": "hasAssocU t fn bool bool   ", "rendered": "<h4 class='item'>let hasAssocU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a42 * 'b10 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "getAssoc [ 1, \"a\"; 2, \"b\"; 3, \"c\"] 2 (=) = Some \"b\"\ngetAssoc [9, \"morning\"; 15, \"afternoon\"; 22, \"night\"] 3 (fun a b -> a mod 12 = b mod 12) = Some \"afternoon\"\n", "rendered": "<pre><code>getAssoc [ 1, \"a\"; 2, \"b\"; 3, \"c\"] 2 (=) = Some \"b\"\ngetAssoc [9, \"morning\"; 15, \"afternoon\"; 22, \"night\"] 3 (fun a b -> a mod 12 = b mod 12) = Some \"afternoon\"\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getAssoc", "title": "getAssoc", "contents": "return the second element of a pair in xs where the first element equals x as per the predicate function eq, or None if not found", "rendered": "return the second element of a pair in <code>xs</code> where the first element equals <code>x</code> as per the predicate function <code>eq</code>, or <code>None</code> if not found", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getAssoc", "title": "getAssoc", "contents": "getAssoc xs k eq", "rendered": "<code>getAssoc xs k eq</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getAssoc", "title": "getAssoc", "contents": "getAssoc t bool   option   ", "rendered": "<h4 class='item'>let getAssoc: (<a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)), 'b, ('a, 'b) => bool) => option(\n  'c\n)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "unzip [(1,2) ; (3,4)] = ([1;3], [2;4]);;\nunzip [(1,2) ; (3,4) ; (5,6) ; (7,8)] = ([1;3;5;7], [2;4;6;8]);;\n", "rendered": "<pre><code>unzip [(1,2) ; (3,4)] = ([1;3], [2;4]);;\nunzip [(1,2) ; (3,4) ; (5,6) ; (7,8)] = ([1;3;5;7], [2;4;6;8]);;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getAssocU", "title": "getAssocU", "contents": "unzip xs takes a list of pairs and creates a pair of lists. The first list contains all the first items of the pairs; the second list contains all the second items.", "rendered": "<code>unzip xs</code> takes a list of pairs and creates a pair of lists. The first list contains all the first items of the pairs; the second list contains all the second items.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getAssocU", "title": "getAssocU", "contents": "getAssocU t fn bool option   ", "rendered": "<h4 class='item'>let getAssocU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'c)),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a43 * 'b11 ], bool)\n) => option('c)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "partition [1;2;3;4] (fun x -> x mod 2 = 0) =\n([2;4], [1;3])\n", "rendered": "<pre><code>partition [1;2;3;4] (fun x -> x mod 2 = 0) =\n([2;4], [1;3])\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-unzip", "title": "unzip", "contents": "partition xs p creates a pair of lists; the first list consists of all elements of xs that satisfy the predicate function p; the second list consists of all elements of xs that do not satisfy p", "rendered": "<code>partition xs p</code> creates a pair of lists; the first list consists of all elements of <code>xs</code> that satisfy the predicate function <code>p</code>; the second list consists of all elements of <code>xs</code> that do not satisfy <code>p</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-unzip", "title": "unzip", "contents": "unzip t t t ", "rendered": "<h4 class='item'>let unzip: <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'b)) => (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "partition [1;2;3;4] (fun x -> x mod 2 = 0) =\n([2;4], [1;3])\n", "rendered": "<pre><code>partition [1;2;3;4] (fun x -> x mod 2 = 0) =\n([2;4], [1;3])\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-partition", "title": "partition", "contents": "partition xs p creates a pair of lists; the first list consists of all elements of xs that satisfy the predicate function p; the second list consists of all elements of xs that do not satisfy p", "rendered": "<code>partition xs p</code> creates a pair of lists; the first list consists of all elements of <code>xs</code> that satisfy the predicate function <code>p</code>; the second list consists of all elements of <code>xs</code> that do not satisfy <code>p</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-partition", "title": "partition", "contents": "partition t bool  t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => bool) => (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "keepMap [1;2;3;4] (fun x -> if x mod 2 = 0 then Some (-x ) else None)\n=\n[-2;-4]\n", "rendered": "<pre><code>keepMap [1;2;3;4] (fun x -> if x mod 2 = 0 then Some (-x ) else None)\n=\n[-2;-4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-partitionU", "title": "partitionU", "contents": "keepMap xs f applies f to each element of xs. If f xi returns Some value, then value is kept in the resulting list; if f xi returns None, the element is not retained in the result.", "rendered": "<code>keepMap xs f</code> applies <code>f</code> to each element of <code>xs</code>. If <code>f xi</code> returns <code>Some value</code>, then <code>value</code> is kept in the resulting list; if <code>f xi</code> returns <code>None</code>, the element is not retained in the result.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a44 ], bool)) => (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a)\n)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "keepMap [1;2;3;4] (fun x -> if x mod 2 = 0 then Some (-x ) else None)\n=\n[-2;-4]\n", "rendered": "<pre><code>keepMap [1;2;3;4] (fun x -> if x mod 2 = 0 then Some (-x ) else None)\n=\n[-2;-4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keepMap", "title": "keepMap", "contents": "keepMap xs f applies f to each element of xs. If f xi returns Some value, then value is kept in the resulting list; if f xi returns None, the element is not retained in the result.", "rendered": "<code>keepMap xs f</code> applies <code>f</code> to each element of <code>xs</code>. If <code>f xi</code> returns <code>Some value</code>, then <code>value</code> is kept in the resulting list; if <code>f xi</code> returns <code>None</code>, the element is not retained in the result.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keepMap", "title": "keepMap", "contents": "keepMap t option  t  ", "rendered": "<h4 class='item'>let keepMap: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => option('b)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "keep [1;2;3;4] (fun x -> x mod 2 = 0) =\n[2;4]\n", "rendered": "<pre><code>keep [1;2;3;4] (fun x -> x mod 2 = 0) =\n[2;4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keepMapU", "title": "keepMapU", "contents": "keep  xs p returns a list of all elements in xs which satisfy the predicate function p", "rendered": "<code>keep  xs p</code> returns a list of all elements in <code>xs</code> which satisfy the predicate function <code>p</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keepMapU", "title": "keepMapU", "contents": "keepMapU t fn option t  ", "rendered": "<h4 class='item'>let keepMapU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a45 ], option('b))\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "keep [1;2;3;4] (fun x -> x mod 2 = 0) =\n[2;4]\n", "rendered": "<pre><code>keep [1;2;3;4] (fun x -> x mod 2 = 0) =\n[2;4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keep", "title": "keep", "contents": "keep  xs p returns a list of all elements in xs which satisfy the predicate function p", "rendered": "<code>keep  xs p</code> returns a list of all elements in <code>xs</code> which satisfy the predicate function <code>p</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keep", "title": "keep", "contents": "keep t bool  t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => bool) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a46 ], bool)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "getBy [1;4;3;2] (fun x -> x mod 2 = 0) = Some 4\ngetBy [15;13;11] (fun x -> x mod 2 = 0) = None\n", "rendered": "<pre><code>getBy [1;4;3;2] (fun x -> x mod 2 = 0) = Some 4\ngetBy [15;13;11] (fun x -> x mod 2 = 0) = None\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getBy", "title": "getBy", "contents": "getBy xs p returns Some value for the first value in xs that satisifies the predicate function p; returns None if no element satisifies the function.", "rendered": "<code>getBy xs p</code> returns <code>Some value</code> for the first value in <code>xs</code> that satisifies the predicate function <code>p</code>; returns <code>None</code> if no element satisifies the function.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getBy", "title": "getBy", "contents": "getBy t bool  option  ", "rendered": "<h4 class='item'>let getBy: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => bool) => option('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getByU", "title": "getByU", "contents": "getByU t fn bool option  ", "rendered": "<h4 class='item'>let getByU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a47 ], bool)\n) => option('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "has [1;2;3] 2 (=) = true;;\nhas [1;2;3] 4 (=) = false;;\nhas [-1;-2;-3] 2 (fun a b -> abs a = abs b) = true;;\n", "rendered": "<pre><code>has [1;2;3] 2 (=) = true;;\nhas [1;2;3] 4 (=) = false;;\nhas [-1;-2;-3] 2 (fun a b -> abs a = abs b) = true;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-has", "title": "has", "contents": "has xs eqFcn returns true if the list contains at least one element for which eqFcn x returns true", "rendered": "<code>has xs eqFcn</code> returns true if the list contains at least one element for which <code>eqFcn x</code> returns true", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-has", "title": "has", "contents": "has t bool   bool   ", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'b, ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-hasU", "title": "hasU", "contents": "hasU t fn bool bool   ", "rendered": "<h4 class='item'>let hasU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a48 * 'b12 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "eq [1;2;3] [1;2] (=) = false ;;\neq [1;2] [1;2] (=) = true;;\neq [1; 2; 3] [-1; -2; -3] (fun a b -> abs a = abs b) = true;;\n", "rendered": "<pre><code>eq [1;2;3] [1;2] (=) = false ;;\neq [1;2] [1;2] (=) = true;;\neq [1; 2; 3] [-1; -2; -3] (fun a b -> abs a = abs b) = true;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-eq", "title": "eq", "contents": "eq xs ys eqElem check equality of xs and ys using eqElem for equality on elements, where eqElem is a function that returns true if items x and y meet some criterion for equality, false otherwise. eq false if length of xs and ys are not the same.", "rendered": "<code>eq xs ys eqElem</code> check equality of <code>xs</code> and <code>ys</code> using <code>eqElem</code> for equality on elements, where <code>eqElem</code> is a function that returns true if items <code>x</code> and <code>y</code> meet some criterion for equality, false otherwise. <code>eq</code> false if length of <code>xs</code> and <code>ys</code> are not the same.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-eq", "title": "eq", "contents": "eq t t bool   bool   ", "rendered": "<h4 class='item'>let eq: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('a), ('a, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-eqU", "title": "eqU", "contents": "eqU t t fn bool bool   ", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a49 * 'a49 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmp", "title": "cmp", "contents": "a positive number if x is “greater than” y The comparison returns the first non-zero result of f, or zero if f returns zero for all x and y. If all items have compared equal, but xs is exhausted first, return -1. (xs is shorter) If all items have compared equal, but ys is exhausted first, return 1 (xs is longer)", "rendered": "a positive number if <code>x</code> is “greater than” <code>y</code> The comparison returns the first non-zero result of <code>f</code>, or zero if <code>f</code> returns zero for all <code>x</code> and <code>y</code>. If all items have compared equal, but <code>xs</code> is exhausted first, return -1. (<code>xs</code> is shorter) If all items have compared equal, but <code>ys</code> is exhausted first, return 1 (<code>xs</code> is longer)", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmp", "title": "cmp", "contents": "zero if x is “equal to” y", "rendered": "zero if <code>x</code> is “equal to” <code>y</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmp", "title": "cmp", "contents": "a negative number if x is “less than” y", "rendered": "a negative number if <code>x</code> is “less than” <code>y</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmp", "title": "cmp", "contents": "Attention: The total ordering of List is different from Array, for Array, we compare the length first and, only if the lengths are equal, elements one by one. For lists, we just compare elements one by one", "rendered": "<strong>Attention</strong>: The total ordering of List is different from Array, for Array, we compare the length first and, only if the lengths are equal, elements one by one. For lists, we just compare elements one by one", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "cmp [3] [3;7] (fun a b -> compare a b) = -1\ncmp [5;3] [5] (fun a b -> compare a b)  = 1\ncmp [|1; 3; 5|] [|1; 4; 2|] (fun a b -> compare a b) = -1;;\ncmp [|1; 3; 5|] [|1; 2; 3|] (fun a b -> compare a b) = 1;;\ncmp [|1; 3; 5|] [|1; 3; 5|] (fun a b -> compare a b) = 0;;\n", "rendered": "<pre><code>cmp [3] [3;7] (fun a b -> compare a b) = -1\ncmp [5;3] [5] (fun a b -> compare a b)  = 1\ncmp [|1; 3; 5|] [|1; 4; 2|] (fun a b -> compare a b) = -1;;\ncmp [|1; 3; 5|] [|1; 2; 3|] (fun a b -> compare a b) = 1;;\ncmp [|1; 3; 5|] [|1; 3; 5|] (fun a b -> compare a b) = 0;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmp", "title": "cmp", "contents": "Compare elements one by one f x y. f returns", "rendered": "Compare elements one by one <code>f x y</code>. <code>f</code> returns", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmp", "title": "cmp", "contents": "cmp t t int   int   ", "rendered": "<h4 class='item'>let cmp: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('a), ('a, 'a) => int) => int</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t fn int int   ", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a50 * 'a50 ], int)\n) => int</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "cmpByLength [1;2] [3;4;5;6] = -1;;\ncmpByLength [1;2;3] [4;5;6] = 0;;\ncmpByLength [1;2;3;4] [5;6] = 1;;\n", "rendered": "<pre><code>cmpByLength [1;2] [3;4;5;6] = -1;;\ncmpByLength [1;2;3] [4;5;6] = 0;;\ncmpByLength [1;2;3;4] [5;6] = 1;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmpByLength", "title": "cmpByLength", "contents": "Compare two lists solely by length. Returns -1 if length l1 is less than length l2, 0 if length l1 equals length l2, and 1 if length l1 is greater than length l2.", "rendered": "Compare two lists solely by length. Returns -1 if <code>length l1</code> is less than <code>length l2</code>, 0 if <code>length l1</code> equals <code>length l2</code>, and 1 if <code>length l1</code> is greater than <code>length l2</code>.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmpByLength", "title": "cmpByLength", "contents": "cmpByLength l1 l2", "rendered": "<code>cmpByLength l1 l2</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-cmpByLength", "title": "cmpByLength", "contents": "cmpByLength t t int  ", "rendered": "<h4 class='item'>let cmpByLength: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('a)) => int</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "some2 [0;2] [1;0;3] (>) = true ;;\nsome2 [] [1] (fun  x y -> x > y) =  false;;\nsome2 [2;3] [1;4] (fun  x y -> x > y) = true;;\n", "rendered": "<pre><code>some2 [0;2] [1;0;3] (>) = true ;;\nsome2 [] [1] (fun  x y -> x > y) =  false;;\nsome2 [2;3] [1;4] (fun  x y -> x > y) = true;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some2", "title": "some2", "contents": "some2 xs ys p returns true if p xi yi is true for any pair of elements up to the shorter length (i.e. min (length xs) (length ys))", "rendered": "<code>some2 xs ys p</code> returns true if <code>p xi yi</code> is true for any pair of elements up to the shorter length (i.e. <code>min (length xs) (length ys)</code>)", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some2", "title": "some2", "contents": "some2 t t bool   bool   ", "rendered": "<h4 class='item'>let some2: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some2U", "title": "some2U", "contents": "some2U t t fn bool bool   ", "rendered": "<h4 class='item'>let some2U: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a51 * 'b13 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "every2 [1;2;3] [0;1] (>) = true;;\nevery2 [] [1] (fun  x y -> x > y) = true;;\nevery2 [2;3] [1] (fun  x y -> x > y) = true;;\nevery2 [0;1] [5;0] (fun x y -> x > y) = false;\n", "rendered": "<pre><code>every2 [1;2;3] [0;1] (>) = true;;\nevery2 [] [1] (fun  x y -> x > y) = true;;\nevery2 [2;3] [1] (fun  x y -> x > y) = true;;\nevery2 [0;1] [5;0] (fun x y -> x > y) = false;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every2", "title": "every2", "contents": "every2 xs ys p returns true if predicate p xi yi is true for all pairs of elements up to the shorter length (i.e. min (length xs) (length ys))", "rendered": "<code>every2 xs ys p</code> returns true if predicate <code>p xi yi</code> is true for all pairs of elements up to the shorter length (i.e. <code>min (length xs) (length ys)</code>)", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every2", "title": "every2", "contents": "every2 t t bool   bool   ", "rendered": "<h4 class='item'>let every2: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b), ('a, 'b) => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every2U", "title": "every2U", "contents": "every2U t t fn bool bool   ", "rendered": "<h4 class='item'>let every2U: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a52 * 'b14 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "some [] (fun x -> x mod 2 = 0) = false ;;\nsome [1;2;4] (fun x -> x mod 2 = 0) = true;;\nsome [-1;-3;-5] (fun x -> x > 0) = false;;\n", "rendered": "<pre><code>some [] (fun x -> x mod 2 = 0) = false ;;\nsome [1;2;4] (fun x -> x mod 2 = 0) = true;;\nsome [-1;-3;-5] (fun x -> x > 0) = false;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some", "title": "some", "contents": "true if at least one of the elements in xs satifies p, where p is a predicate: a function taking an element and returning a bool.", "rendered": "true if at least one of the elements in <code>xs</code> satifies <code>p</code>, where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some", "title": "some", "contents": "Returns: true if at least one of the elements in xs satifies p, where p is a predicate: a function taking an element and returning a bool.\n\nsome [] (fun x -&gt; x mod 2 = 0) = false ;;\nsome [1;2;4] (fun x -&gt; x mod 2 = 0) = true;;\nsome [-1;-3;-5] (fun x -&gt; x &gt; 0) = false;;\n", "rendered": "Returns: <p>true if at least one of the elements in <code>xs</code> satifies <code>p</code>, where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='159' id='block-159'><code>some [] (fun x -&gt; x mod 2 = 0) = false ;;\nsome [1;2;4] (fun x -&gt; x mod 2 = 0) = true;;\nsome [-1;-3;-5] (fun x -&gt; x &gt; 0) = false;;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"159\">#open Belt_List\nsome [] (fun x -> x mod 2 = 0) = false ;;\nsome [1;2;4] (fun x -> x mod 2 = 0) = true;;\nsome [-1;-3;-5] (fun x -> x > 0) = false;;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-4:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='159-alt' id='block-159-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some", "title": "some", "contents": "some xs p", "rendered": "<code>some xs p</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-some", "title": "some", "contents": "some t bool  bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a53 ], bool)) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "every [] (fun x -> x mod 2 = 0) = true;;\nevery [2;4;6] (fun x -> x mod 2 = 0 ) = true;;\nevery [1;-3;5] (fun x -> x > 0) = false;;\n", "rendered": "<pre><code>every [] (fun x -> x mod 2 = 0) = true;;\nevery [2;4;6] (fun x -> x mod 2 = 0 ) = true;;\nevery [1;-3;5] (fun x -> x > 0) = false;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every", "title": "every", "contents": "true if all elements satisfy p, where p is a predicate: a function taking an element and returning a bool.", "rendered": "true if all elements satisfy <code>p</code>, where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every", "title": "every", "contents": "Returns: true if all elements satisfy p, where p is a predicate: a function taking an element and returning a bool.\n\nevery [] (fun x -&gt; x mod 2 = 0) = true;;\nevery [2;4;6] (fun x -&gt; x mod 2 = 0 ) = true;;\nevery [1;-3;5] (fun x -&gt; x &gt; 0) = false;;\n", "rendered": "Returns: <p>true if all elements satisfy <code>p</code>, where <code>p</code> is a <em>predicate</em>: a function taking an element and returning a <code>bool</code>.</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='158' id='block-158'><code>every [] (fun x -&gt; x mod 2 = 0) = true;;\nevery [2;4;6] (fun x -&gt; x mod 2 = 0 ) = true;;\nevery [1;-3;5] (fun x -&gt; x &gt; 0) = false;;</code></pre>\n  \n  <script type='docre-source' data-block-id=\"158\">#open Belt_List\nevery [] (fun x -> x mod 2 = 0) = true;;\nevery [2;4;6] (fun x -> x mod 2 = 0 ) = true;;\nevery [1;-3;5] (fun x -> x > 0) = false;;\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-5:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='158-alt' id='block-158-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every", "title": "every", "contents": "every xs p", "rendered": "<code>every xs p</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-every", "title": "every", "contents": "every t bool  bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => bool) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a54 ], bool)) => bool</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse2", "title": "reduceReverse2", "contents": "x + y) = 0 + (1 * 1 + 4) + (2 * 2 + 5);; x + y) = 1 + 4;2 + 5;; (*add appends at end *)", "rendered": "x + y) = 0 + (1 * 1 + 4) + (2 * 2 + 5);; x + y) = <code>1 + 4;2 + 5</code>;; (*add appends at end *)", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse2", "title": "reduceReverse2", "contents": "ginning. Stops with the shorter list. ch starts with a value of init, the final value of the accumulator.", "rendered": "ginning. Stops with the shorter list. ch starts with a value of <code>init</code>, the final value of the accumulator.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse2", "title": "reduceReverse2", "contents": "reduceReverse2 xs ys init f ", "rendered": "<code>reduceReverse2 xs ys init f </code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse2", "title": "reduceReverse2", "contents": "reduceReverse2 t t       ", "rendered": "<h4 class='item'>let reduceReverse2: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  'c,\n  ('c, 'a, 'b) => 'c\n) => 'c</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse2U", "title": "reduceReverse2U", "contents": "reduceReverse2U t t fn    ", "rendered": "<h4 class='item'>let reduceReverse2U: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  'c,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'c1 * 'a55 * 'b15 ], 'c)\n) => 'c</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce2", "title": "reduce2", "contents": "x + y) = 0 + (1 * 1 + 4) + (2 * 2 + 5);; x + y) = 2 +5;1 + 4 ;; (*add appends at end *)", "rendered": "x + y) = 0 + (1 * 1 + 4) + (2 * 2 + 5);; x + y) = <code>2 +5;1 + 4 </code>;; (*add appends at end *)", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce2", "title": "reduce2", "contents": "ginning to end. Stops with the shorter list. ” which starts with a value of init, returns the final value of the accumulator.", "rendered": "ginning to end. Stops with the shorter list. ” which starts with a value of <code>init</code>, returns the final value of the accumulator.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce2", "title": "reduce2", "contents": "reduce2 xs ys init f ", "rendered": "<code>reduce2 xs ys init f </code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce2", "title": "reduce2", "contents": "reduce2 t t       ", "rendered": "<h4 class='item'>let reduce2: (<a href=\"./api/Belt_List.html#type-t\">t</a>('b), <a href=\"./api/Belt_List.html#type-t\">t</a>('c), 'a, ('a, 'b, 'c) => 'a) => 'a</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce2U", "title": "reduce2U", "contents": "reduce2U t t fn    ", "rendered": "<h4 class='item'>let reduce2U: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('c),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'a56 * 'b16 * 'c2 ], 'a)\n) => 'a</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEach2", "title": "forEach2", "contents": "forEach2 xs ys f stop with the shorter list", "rendered": "<code>forEach2 xs ys f</code> stop with the shorter list", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEach2", "title": "forEach2", "contents": "forEach2 t t   unit   ", "rendered": "<h4 class='item'>let forEach2: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b), ('a, 'b) => 'c) => unit</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEach2U", "title": "forEach2U", "contents": "forEach2U t t fn unit   ", "rendered": "<h4 class='item'>let forEach2U: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a57 * 'b17 ], 'c)\n) => unit</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "mapReverse2 [1;2;3] [1;2] (+) = [4;2]\n", "rendered": "<pre><code>mapReverse2 [1;2;3] [1;2] (+) = [4;2]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse2", "title": "mapReverse2", "contents": "equivalent to reverse (zipBy xs ys f)", "rendered": "equivalent to <code>reverse (zipBy xs ys f)</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse2", "title": "mapReverse2", "contents": "mapReverse2 xs ys f", "rendered": "<code>mapReverse2 xs ys f</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse2", "title": "mapReverse2", "contents": "mapReverse2 t t   t   ", "rendered": "<h4 class='item'>let mapReverse2: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b), ('a, 'b) => 'c) => <a href=\"./api/Belt_List.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse2U", "title": "mapReverse2U", "contents": "mapReverse2U t t fn t   ", "rendered": "<h4 class='item'>let mapReverse2U: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a58 * 'b18 ], 'c)\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "reduceReverse [1;2;3;4] 0 (+) = 10;;\nreduceReverse [1;2;3;4] 10 (-) = 0;;\nreduceReverse [1;2;3;4] [] add = [1;2;3;4];;\n", "rendered": "<pre><code>reduceReverse [1;2;3;4] 0 (+) = 10;;\nreduceReverse [1;2;3;4] 10 (-) = 0;;\nreduceReverse [1;2;3;4] [] add = [1;2;3;4];;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse", "title": "reduceReverse", "contents": "Works like reduce, except that function f is applied to each item of xs from the last back to the first.", "rendered": "Works like reduce, except that function <code>f</code> is applied to each item of <code>xs</code> from the last back to the first.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse", "title": "reduceReverse", "contents": "reduceReverse xs f", "rendered": "<code>reduceReverse xs f</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverse", "title": "reduceReverse", "contents": "reduceReverse t     ", "rendered": "<h4 class='item'>let reduceReverse: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'b, ('b, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceReverseU", "title": "reduceReverseU", "contents": "reduceReverseU t fn   ", "rendered": "<h4 class='item'>let reduceReverseU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b19 * 'a59 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "reduce [1;2;3;4] 0 (+) = 10;;\nreduce [1;2;3;4] 10 (-) = 0;;\nreduce [1;2;3;4] [] add = [4;3;2;1];\n", "rendered": "<pre><code>reduce [1;2;3;4] 0 (+) = 10;;\nreduce [1;2;3;4] 10 (-) = 0;;\nreduce [1;2;3;4] [] add = [4;3;2;1];\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce", "title": "reduce", "contents": "Applies f to each element of xs from beginning to end. Function f has two parameters: the item from the list and an “accumulator”, which starts with a value of init. reduce returns the final value of the accumulator.", "rendered": "Applies <code>f</code> to each element of <code>xs</code> from beginning to end. Function <code>f</code> has two parameters: the item from the list and an “accumulator”, which starts with a value of <code>init</code>. <code>reduce</code> returns the final value of the accumulator.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce", "title": "reduce", "contents": "reduce xs f", "rendered": "<code>reduce xs f</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'b, ('b, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b20 * 'a60 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEachWithIndex", "title": "forEachWithIndex", "contents": "forEachWithIndex t int   unit  ", "rendered": "<h4 class='item'>let forEachWithIndex: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), (int, 'a) => 'b) => unit</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEachWithIndexU", "title": "forEachWithIndexU", "contents": "forEachWithIndexU t fn unit  ", "rendered": "<h4 class='item'>let forEachWithIndexU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a61 ], 'b)\n) => unit</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEach", "title": "forEach", "contents": "forEach t  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => 'b) => unit</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit  ", "rendered": "<h4 class='item'>let forEachU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a62 ], 'b)) => unit</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse", "title": "mapReverse", "contents": "x) = 25;16;9;;", "rendered": "x) = <code>25;16;9</code>;;", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse", "title": "mapReverse", "contents": "mapReverse xs f", "rendered": "<code>mapReverse xs f</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverse", "title": "mapReverse", "contents": "mapReverse t  t  ", "rendered": "<h4 class='item'>let mapReverse: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => 'b) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapReverseU", "title": "mapReverseU", "contents": "mapReverseU t fn t  ", "rendered": "<h4 class='item'>let mapReverseU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a63 ], 'b)) => <a href=\"./api/Belt_List.html#type-t\">t</a>(\n  'b\n)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "reverse [1;2;3] = [3;2;1]\n", "rendered": "<pre><code>reverse [1;2;3] = [3;2;1]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reverse", "title": "reverse", "contents": "reverse xs returns a new list whose elements are those of xs in reverse order.", "rendered": "<code>reverse xs</code> returns a new list whose elements are those of <code>xs</code> in reverse order.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reverse", "title": "reverse", "contents": "reverse t t ", "rendered": "<h4 class='item'>let reverse: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "toArray [1;2;3] = [|1;2;3|]\n", "rendered": "<pre><code>toArray [1;2;3] = [|1;2;3|]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-toArray", "title": "toArray", "contents": "toArray xs converts the given list to an array", "rendered": "<code>toArray xs</code> converts the given list to an array", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "fromArray [|1;2;3|]  = [1;2;3]\n", "rendered": "<pre><code>fromArray [|1;2;3|]  = [1;2;3]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-fromArray", "title": "fromArray", "contents": "fromArray arr converts the given array to a list", "rendered": "<code>fromArray arr</code> converts the given array to a list", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-fromArray", "title": "fromArray", "contents": "fromArray array t ", "rendered": "<h4 class='item'>let fromArray: array('a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-ofArray", "title": "ofArray", "contents": "ofArray array t ", "rendered": "<h4 class='item'>let ofArray: array('a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "mapWithIndex [1;2;3] (fun i x -> i + x) =\n[0 + 1; 1 + 2; 2 + 3 ]\n", "rendered": "<pre><code>mapWithIndex [1;2;3] (fun i x -> i + x) =\n[0 + 1; 1 + 2; 2 + 3 ]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex xs f applies f to each element of xs. Function f takes two arguments: the index starting from 0 and the element from xs.", "rendered": "<code>mapWithIndex xs f</code> applies <code>f</code> to each element of <code>xs</code>. Function <code>f</code> takes two arguments: the index starting from 0 and the element from <code>xs</code>.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapWithIndex", "title": "mapWithIndex", "contents": "mapWithIndex t int   t  ", "rendered": "<h4 class='item'>let mapWithIndex: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), (int, 'a) => 'b) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapWithIndexU", "title": "mapWithIndexU", "contents": "mapWithIndexU t fn t  ", "rendered": "<h4 class='item'>let mapWithIndexU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of int * 'a64 ], 'b)\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-zipBy", "title": "zipBy", "contents": "zipBy t t   t   ", "rendered": "<h4 class='item'>let zipBy: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b), ('a, 'b) => 'c) => <a href=\"./api/Belt_List.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-zipByU", "title": "zipByU", "contents": "zipByU t t fn t   ", "rendered": "<h4 class='item'>let zipByU: (\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('a),\n  <a href=\"./api/Belt_List.html#type-t\">t</a>('b),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a65 * 'b21 ], 'c)\n) => <a href=\"./api/Belt_List.html#type-t\">t</a>('c)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "zip [1;2] [3;4;5] = [(1,3); (2,4)]\n", "rendered": "<pre><code>zip [1;2] [3;4;5] = [(1,3); (2,4)]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-zip", "title": "zip", "contents": "a list of pairs from the two lists with the length of the shorter list", "rendered": "a list of pairs from the two lists with the length of the shorter list", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-zip", "title": "zip", "contents": "Returns: a list of pairs from the two lists with the length of the shorter list\n\nzip [1;2] [3;4;5] = [(1,3); (2,4)]\n", "rendered": "Returns: <p>a list of pairs from the two lists with the length of the shorter list</p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='150' id='block-150'><code>zip [1;2] [3;4;5] = [(1,3); (2,4)]</code></pre>\n  \n  <script type='docre-source' data-block-id=\"150\">#open Belt_List\nzip [1;2] [3;4;5] = [(1,3); (2,4)]\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-3:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='150-alt' id='block-150-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-zip", "title": "zip", "contents": "zip xs ys", "rendered": "<code>zip xs ys</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-zip", "title": "zip", "contents": "zip t t t  ", "rendered": "<h4 class='item'>let zip: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('b)) => <a href=\"./api/Belt_List.html#type-t\">t</a>(('a, 'b))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "map [1;2] (fun x-> x + 1) = [3;4]\n", "rendered": "<pre><code>map [1;2] (fun x-> x + 1) = [3;4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-map", "title": "map", "contents": "return the list obtained by applying f to each element of xs", "rendered": "return the list obtained by applying <code>f</code> to each element of <code>xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-map", "title": "map", "contents": "map xs f", "rendered": "<code>map xs f</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a => 'b) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a66 ], 'b)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "flatten [ [1;2;3] ; []; [3]; [4] ] = [1;2;3;3;4]\n", "rendered": "<pre><code>flatten [ [1;2;3] ; []; [3]; [4] ] = [1;2;3;3;4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-flatten", "title": "flatten", "contents": "flatten ls return the list obtained by concatenating in order all the lists in list ls", "rendered": "<code>flatten ls</code> return the list obtained by concatenating in order all the lists in list <code>ls</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-flatten", "title": "flatten", "contents": "flatten t t t ", "rendered": "<h4 class='item'>let flatten: <a href=\"./api/Belt_List.html#type-t\">t</a>(<a href=\"./api/Belt_List.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "reverseConcat [1;2] [3;4] = [2;1;3;4]\n", "rendered": "<pre><code>reverseConcat [1;2] [3;4] = [2;1;3;4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reverseConcat", "title": "reverseConcat", "contents": "reverseConcat xs ys is equivalent to concat (reverse xs) ys", "rendered": "<code>reverseConcat xs ys</code> is equivalent to <code>concat (reverse xs) ys</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-reverseConcat", "title": "reverseConcat", "contents": "reverseConcat t t t  ", "rendered": "<h4 class='item'>let reverseConcat: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "concatMany [| [1;2;3] ; []; [3]; [4] |] = [1;2;3;3;4]\n", "rendered": "<pre><code>concatMany [| [1;2;3] ; []; [3]; [4] |] = [1;2;3;3;4]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-concatMany", "title": "concatMany", "contents": "concatMany a return the list obtained by concatenating in order all the lists in array a", "rendered": "<code>concatMany a</code> return the list obtained by concatenating in order all the lists in array <code>a</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-concatMany", "title": "concatMany", "contents": "concatMany array t t ", "rendered": "<h4 class='item'>let concatMany: array(<a href=\"./api/Belt_List.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "concat [1;2;3] [4;5] = [1;2;3;4;5]\n", "rendered": "<pre><code>concat [1;2;3] [4;5] = [1;2;3;4;5]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-concat", "title": "concat", "contents": "the list obtained by adding ys after xs", "rendered": "the list obtained by adding <code>ys</code> after <code>xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-concat", "title": "concat", "contents": "Returns: the list obtained by adding ys after xs\n\nconcat [1;2;3] [4;5] = [1;2;3;4;5]\n", "rendered": "Returns: <p>the list obtained by adding <code>ys</code> after <code>xs</code></p>\n<div class='code-block' data-block-syntax=\"ml\">\n  \n  <pre class='code' data-block-id='145' id='block-145'><code>concat [1;2;3] [4;5] = [1;2;3;4;5]</code></pre>\n  \n  <script type='docre-source' data-block-id=\"145\">#open Belt_List\nconcat [1;2;3] [4;5] = [1;2;3;4;5]\n</script>\n  <div class='parse-error'>Parse Error:\nFile &quot;&quot;, line 2, characters 0-6:\nError: Syntax error</div>\n</div><div class='code-block' data-block-syntax=\"re\">\n  \n  <pre class='code' data-block-id='145-alt' id='block-145-alt'><code>Unable to refmt code with a syntax error</code></pre>\n  \n  \n  \n</div>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-concat", "title": "concat", "contents": "concat xs ys", "rendered": "<code>concat xs ys</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-concat", "title": "concat", "contents": "concat t t t  ", "rendered": "<h4 class='item'>let concat: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), <a href=\"./api/Belt_List.html#type-t\">t</a>('a)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "splitAt [0;1;2;3;4] 2 = Some ([0;1], [2;3;4])\n", "rendered": "<pre><code>splitAt [0;1;2;3;4] 2 = Some ([0;1], [2;3;4])\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-splitAt", "title": "splitAt", "contents": "splitAt xs n split the list xs at position n return None when the length of xs is less than n", "rendered": "<code>splitAt xs n</code> split the list <code>xs</code> at position <code>n</code> return None when the length of <code>xs</code> is less than <code>n</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-splitAt", "title": "splitAt", "contents": "splitAt t int option list list  ", "rendered": "<h4 class='item'>let splitAt: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), int) => option((list('a), list('a)))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "take [1;2;3] 1 = Some [1];;\ntake [1;2;3] 2 = Some [1;2];;\ntake [1;2;3] 4 = None;;\n", "rendered": "<pre><code>take [1;2;3] 1 = Some [1];;\ntake [1;2;3] 2 = Some [1;2];;\ntake [1;2;3] 4 = None;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-take", "title": "take", "contents": "return a list with the first n elements from xs, or None if xs has fewer than n elements", "rendered": "return a list with the first <code>n</code> elements from <code>xs</code>, or <code>None</code> if <code>xs</code> has fewer than <code>n</code> elements", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-take", "title": "take", "contents": "take xs n", "rendered": "<code>take xs n</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-take", "title": "take", "contents": "take t int option t  ", "rendered": "<h4 class='item'>let take: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), int) => option(<a href=\"./api/Belt_List.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "drop [1;2;3] 2 = Some [3];;\ndrop [1;2;3] 3 = Some [];;\ndrop [1;2;3] 4 = None;;\n", "rendered": "<pre><code>drop [1;2;3] 2 = Some [3];;\ndrop [1;2;3] 3 = Some [];;\ndrop [1;2;3] 4 = None;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-drop", "title": "drop", "contents": "return the list obtained by dropping the first n elements, or None if xs has fewer than n elements", "rendered": "return the list obtained by dropping the first <code>n</code> elements, or <code>None</code> if <code>xs</code> has fewer than <code>n</code> elements", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-drop", "title": "drop", "contents": "drop xs n", "rendered": "<code>drop xs n</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-drop", "title": "drop", "contents": "drop t int option t  ", "rendered": "<h4 class='item'>let drop: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), int) => option(<a href=\"./api/Belt_List.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-shuffle", "title": "shuffle", "contents": "a new list in random order", "rendered": "a new list in random order", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-shuffle", "title": "shuffle", "contents": "Returns: a new list in random order\n\n", "rendered": "Returns: <p>a new list in random order</p>\n", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-shuffle", "title": "shuffle", "contents": "shuffle xs", "rendered": "<code>shuffle xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-shuffle", "title": "shuffle", "contents": "shuffle t t ", "rendered": "<h4 class='item'>let shuffle: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-makeBy", "title": "makeBy", "contents": "0;1;2;3;4;; i) = 0;1;4;9;16;;", "rendered": "<code>0;1;2;3;4</code>;; i) = <code>0;1;4;9;16</code>;;", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-makeBy", "title": "makeBy", "contents": "n with element i initialized with f i f n is negative", "rendered": "<code>n</code> with element <code>i</code> initialized with <code>f i</code> f <code>n</code> is negative", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-makeBy", "title": "makeBy", "contents": "makeBy n f", "rendered": "<code>makeBy n f</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-makeBy", "title": "makeBy", "contents": "makeBy int int  t  ", "rendered": "<h4 class='item'>let makeBy: (int, int => 'a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-makeByU", "title": "makeByU", "contents": "makeByU int fn t  ", "rendered": "<h4 class='item'>let makeByU: (int, <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of int ], 'a)) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-make", "title": "make", "contents": "return the empty list if n is negative", "rendered": "return the empty list if <code>n</code> is negative", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-make", "title": "make", "contents": "return a list of length n with each element filled with value v", "rendered": "return a list of length <code>n</code> with each element filled with value <code>v</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "make 3 1 =  [1;1;1]\n", "rendered": "<pre><code>make 3 1 =  [1;1;1]\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-make", "title": "make", "contents": "make n v", "rendered": "<code>make n v</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-make", "title": "make", "contents": "make int t  ", "rendered": "<h4 class='item'>let make: (int, 'a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getExn", "title": "getExn", "contents": "raise an exception if n is larger than the length", "rendered": "<strong>raise</strong> an exception if <code>n</code> is larger than the length", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getExn", "title": "getExn", "contents": "See get", "rendered": "<strong>See</strong> get", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getExn", "title": "getExn", "contents": "getExn xs n", "rendered": "<code>getExn xs n</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-getExn", "title": "getExn", "contents": "getExn t int  ", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), int) => 'a</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "add [1] 3 = [3;1];;\n", "rendered": "<pre><code>add [1] 3 = [3;1];;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-get", "title": "get", "contents": "add xs y adds y to the end of list xs", "rendered": "<code>add xs y</code> adds <code>y</code> to the end of list <code>xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-get", "title": "get", "contents": "get t int option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), int) => option('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "add [1] 3 = [3;1];;\n", "rendered": "<pre><code>add [1] 3 = [3;1];;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-add", "title": "add", "contents": "add xs y adds y to the end of list xs", "rendered": "<code>add xs y</code> adds <code>y</code> to the end of list <code>xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-add", "title": "add", "contents": "add t t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_List.html#type-t\">t</a>('a), 'a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-tailExn", "title": "tailExn", "contents": "raise an exception if xs is empty", "rendered": "<strong>raise</strong> an exception if <code>xs</code> is empty", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-tailExn", "title": "tailExn", "contents": "See tail", "rendered": "<strong>See</strong> tail", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-tailExn", "title": "tailExn", "contents": "tailExn xs", "rendered": "<code>tailExn xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-tailExn", "title": "tailExn", "contents": "tailExn t t ", "rendered": "<h4 class='item'>let tailExn: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => <a href=\"./api/Belt_List.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "\ntail [] = None;;\ntail [1;2;3;4] = Some [2;3;4];;\n", "rendered": "<pre><code>\ntail [] = None;;\ntail [1;2;3;4] = Some [2;3;4];;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-tail", "title": "tail", "contents": "tail xs returns None if xs is empty; otherwise it returns Some xs2 where xs2 is everything except the first element of xs;", "rendered": "<code>tail xs</code> returns <code>None</code> if <code>xs</code> is empty; otherwise it returns <code>Some xs2</code> where <code>xs2</code> is everything except the first element of <code>xs</code>;", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-tail", "title": "tail", "contents": "tail t option t ", "rendered": "<h4 class='item'>let tail: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => option(<a href=\"./api/Belt_List.html#type-t\">t</a>('a))</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "head [] = None ;;\nhead [1;2;3] = Some 1 ;;\n", "rendered": "<pre><code>head [] = None ;;\nhead [1;2;3] = Some 1 ;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-headExn", "title": "headExn", "contents": "head xs returns None if xs is the empty list, otherwise it returns Some value where value is the first element in the list.", "rendered": "<code>head xs</code> returns <code>None</code> if <code>xs</code> is the empty list, otherwise it returns <code>Some value</code> where <code>value</code> is the first element in the list.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-headExn", "title": "headExn", "contents": "headExn t ", "rendered": "<h4 class='item'>let headExn: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "code block", "contents": "head [] = None ;;\nhead [1;2;3] = Some 1 ;;\n", "rendered": "<pre><code>head [] = None ;;\nhead [1;2;3] = Some 1 ;;\n</code></pre>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-head", "title": "head", "contents": "head xs returns None if xs is the empty list, otherwise it returns Some value where value is the first element in the list.", "rendered": "<code>head xs</code> returns <code>None</code> if <code>xs</code> is the empty list, otherwise it returns <code>Some value</code> where <code>value</code> is the first element in the list.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-head", "title": "head", "contents": "head t option ", "rendered": "<h4 class='item'>let head: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-size", "title": "size", "contents": "See length", "rendered": "<strong>See</strong> length", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-length", "title": "length", "contents": "the length of the list xs", "rendered": "the length of the list <code>xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-length", "title": "length", "contents": "Returns: the length of the list xs\n\n", "rendered": "Returns: <p>the length of the list <code>xs</code></p>\n", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-length", "title": "length", "contents": "length xs", "rendered": "<code>length xs</code>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Belt_List.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#type-t", "title": "t", "contents": "&#39;a t is compatible with built-in list type", "rendered": "<code>&#39;a t</code> is compatible with built-in <code>list</code> type", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html#type-t", "title": "t", "contents": "t list", "rendered": "<h4 class='item'>type t('a) = list('a)</h4>", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "Belt_List", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "Belt_List", "contents": "This module is compatible with original ocaml stdlib. In general, all functions comes with the original stdlib also applies to this collection, however, this module provides faster and stack safer utilities", "rendered": "This module is compatible with original ocaml stdlib. In general, all functions comes with the original stdlib also applies to this collection, however, this module provides faster and stack safer utilities", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "Belt_List", "contents": "Utilities for List data type.", "rendered": "Utilities for List data type.", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_List.html", "title": "Belt_List", "contents": "List", "rendered": "List", "breadcrumb": "Belt_List"},
{"href": "./api/Belt_MapDict.html#value-mapWithKey", "title": "mapWithKey", "contents": "mapWithKey t   t  ", "rendered": "<h4 class='item'>let mapWithKey: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => 'b) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>(\n  'k,\n  'b,\n  'id\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-mapWithKeyU", "title": "mapWithKeyU", "contents": "mapWithKeyU t fn t  ", "rendered": "<h4 class='item'>let mapWithKeyU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k0 * 'a29 ], 'b)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-map", "title": "map", "contents": "map m f returns a map with same domain as m, where the associated value a of all bindings of m has been replaced by the result of the application of f to a. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>map m f</code> returns a map with same domain as <code>m</code>, where the associated value <code>a</code> of all bindings of <code>m</code> has been replaced by the result of the application of <code>f</code> to <code>a</code>. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), 'a => 'b) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a30 ], 'b)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-split", "title": "split", "contents": "split t cmp t t option   cmp", "rendered": "<h4 class='item'>let split: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id), 'a, ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)) => (\n  (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id), <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id)),\n  option('b)\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-partition", "title": "partition", "contents": "partition m p returns a pair of maps (m1, m2), where m1 contains all the bindings of s that satisfy the predicate p, and m2 is the map with all the bindings of s that do not satisfy p.", "rendered": "<code>partition m p</code> returns a pair of maps <code>(m1, m2)</code>, where <code>m1</code> contains all the bindings of <code>s</code> that satisfy the predicate <code>p</code>, and <code>m2</code> is the map with all the bindings of <code>s</code> that do not satisfy <code>p</code>.", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-partition", "title": "partition", "contents": "partition t bool   t t  ", "rendered": "<h4 class='item'>let partition: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => bool) => (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id)\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-partitionU", "title": "partitionU", "contents": "partitionU t fn bool t t  ", "rendered": "<h4 class='item'>let partitionU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k1 * 'a31 ], bool)\n) => (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-keep", "title": "keep", "contents": "keep m p returns the map with all the bindings in m that satisfy predicate p.", "rendered": "<code>keep m p</code> returns the map with all the bindings in <code>m</code> that satisfy predicate <code>p</code>.", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-keep", "title": "keep", "contents": "keep t bool   t  ", "rendered": "<h4 class='item'>let keep: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => bool) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>(\n  'k,\n  'a,\n  'id\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-keepU", "title": "keepU", "contents": "keepU t fn bool t  ", "rendered": "<h4 class='item'>let keepU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k2 * 'a32 ], bool)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-mergeMany", "title": "mergeMany", "contents": "mergeMany t array cmp t   cmp", "rendered": "<h4 class='item'>let mergeMany: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id),\n  array(('a, 'b)),\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-merge", "title": "merge", "contents": "merge t t option option option    cmp t    cmp", "rendered": "<h4 class='item'>let merge: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'c, 'id),\n  ('a, option('b), option('c)) => option('d),\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'd, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-mergeU", "title": "mergeU", "contents": "mergeU t t fn option cmp t    cmp", "rendered": "<h4 class='item'>let mergeU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'c, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>(\n    [ `Arity_3 of 'a33 * 'b6 option * 'c0 option ],\n    option('d)\n  ),\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'd, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-update", "title": "update", "contents": "update t option option  cmp t    cmp", "rendered": "<h4 class='item'>let update: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id),\n  'a,\n  option('b) => option('b),\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-updateU", "title": "updateU", "contents": "updateU t fn option cmp t    cmp", "rendered": "<h4 class='item'>let updateU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id),\n  'a,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'b7 option ], option('b)),\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-set", "title": "set", "contents": "set t cmp t    cmp", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id), 'a, 'b, ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>(\n  'a,\n  'b,\n  'id\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-removeMany", "title": "removeMany", "contents": "removeMany t array cmp t   cmp", "rendered": "<h4 class='item'>let removeMany: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id),\n  array('a),\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)\n) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-remove", "title": "remove", "contents": "remove t cmp t   cmp", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'b, 'id), 'a, ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('a, 'id)) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>(\n  'a,\n  'b,\n  'id\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "raise when invariant is not held", "rendered": "<strong>raise</strong> when invariant is not held", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-checkInvariantInternal", "title": "checkInvariantInternal", "contents": "checkInvariantInternal t unit ", "rendered": "<h4 class='item'>let checkInvariantInternal: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('a, 'a, 'a) => unit</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-getExn", "title": "getExn", "contents": "getExn t cmp   cmp", "rendered": "<h4 class='item'>let getExn: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), 'k, ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)) => 'a</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-getWithDefault", "title": "getWithDefault", "contents": "getWithDefault t cmp    cmp", "rendered": "<h4 class='item'>let getWithDefault: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  'k,\n  'a,\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)\n) => 'a</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-getUndefined", "title": "getUndefined", "contents": "getUndefined t cmp undefined   cmp", "rendered": "<h4 class='item'>let getUndefined: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  'k,\n  ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)\n) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-get", "title": "get", "contents": "get t cmp option   cmp", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), 'k, ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)) => option(\n  'a\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-maxUndefined", "title": "maxUndefined", "contents": "maxUndefined t undefined ", "rendered": "<h4 class='item'>let maxUndefined: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('k, 'a))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-maximum", "title": "maximum", "contents": "maximum t option ", "rendered": "<h4 class='item'>let maximum: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => option(('k, 'a))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-minUndefined", "title": "minUndefined", "contents": "minUndefined t undefined ", "rendered": "<h4 class='item'>let minUndefined: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>(('k, 'a))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-minimum", "title": "minimum", "contents": "minimum t option ", "rendered": "<h4 class='item'>let minimum: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => option(('k, 'a))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-maxKeyUndefined", "title": "maxKeyUndefined", "contents": "maxKeyUndefined t undefined ", "rendered": "<h4 class='item'>let maxKeyUndefined: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('k)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-maxKey", "title": "maxKey", "contents": "maxKey t option ", "rendered": "<h4 class='item'>let maxKey: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => option('k)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-minKeyUndefined", "title": "minKeyUndefined", "contents": "minKeyUndefined t undefined ", "rendered": "<h4 class='item'>let minKeyUndefined: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('k)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-minKey", "title": "minKey", "contents": "minKey t option ", "rendered": "<h4 class='item'>let minKey: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'a) => option('k)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-valuesToArray", "title": "valuesToArray", "contents": "valuesToArray t array ", "rendered": "<h4 class='item'>let valuesToArray: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id) => array('a)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-keysToArray", "title": "keysToArray", "contents": "keysToArray t array ", "rendered": "<h4 class='item'>let keysToArray: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id) => array('k)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-fromArray", "title": "fromArray", "contents": "fromArray array cmp t  cmp", "rendered": "<h4 class='item'>let fromArray: (array(('k, 'a)), ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>(\n  'k,\n  'a,\n  'id\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-ofArray", "title": "ofArray", "contents": "ofArray array cmp t  cmp", "rendered": "<h4 class='item'>let ofArray: (array(('k, 'a)), ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)) => <a href=\"./api/Belt_MapDict.html#type-t\">t</a>(\n  'k,\n  'a,\n  'id\n)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-toArray", "title": "toArray", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id) => array(('k, 'a))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-toList", "title": "toList", "contents": "In increasing order", "rendered": "In increasing order", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-toList", "title": "toList", "contents": "toList t list ", "rendered": "<h4 class='item'>let toList: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id) => list(('k, 'a))</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id) => int</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-some", "title": "some", "contents": "some m p checks if at least one binding of the map satisfy the predicate p. Order unspecified", "rendered": "<code>some m p</code> checks if at least one binding of the map satisfy the predicate <code>p</code>. Order unspecified", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-some", "title": "some", "contents": "some t bool   bool  ", "rendered": "<h4 class='item'>let some: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-someU", "title": "someU", "contents": "someU t fn bool bool  ", "rendered": "<h4 class='item'>let someU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k3 * 'a34 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-every", "title": "every", "contents": "every m p checks if all the bindings of the map satisfy the predicate p. Order unspecified", "rendered": "<code>every m p</code> checks if all the bindings of the map satisfy the predicate <code>p</code>. Order unspecified", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-every", "title": "every", "contents": "every t bool   bool  ", "rendered": "<h4 class='item'>let every: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => bool) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-everyU", "title": "everyU", "contents": "everyU t fn bool bool  ", "rendered": "<h4 class='item'>let everyU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k4 * 'a35 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-reduce", "title": "reduce", "contents": "reduce m a f computes (f kN dN ... (f k1 d1 a)...), where k1 ... kN are the keys of all bindings in m (in increasing order), and d1 ... dN are the associated data.", "rendered": "<code>reduce m a f</code> computes <code>(f kN dN ... (f k1 d1 a)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>m</code> (in increasing order), and <code>d1 ... dN</code> are the associated data.", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-reduce", "title": "reduce", "contents": "reduce t      ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), 'b, ('b, 'k, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_3 of 'b8 * 'k5 * 'a36 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-forEach", "title": "forEach", "contents": "forEach m f applies f to all bindings in map m. f receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to f in increasing order with respect to the ordering over the type of the keys.", "rendered": "<code>forEach m f</code> applies <code>f</code> to all bindings in map <code>m</code>. <code>f</code> receives the &#39;k as first argument, and the associated value as second argument. The bindings are passed to <code>f</code> in increasing order with respect to the ordering over the type of the keys.", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-forEach", "title": "forEach", "contents": "forEach t unit   unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), ('k, 'a) => unit) => unit</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'k6 * 'a37 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-eq", "title": "eq", "contents": "eq m1 m2 cmp tests whether the maps m1 and m2 are equal, that is, contain equal keys and associate them with equal data. cmp is the equality predicate used to compare the data associated with the keys.", "rendered": "<code>eq m1 m2 cmp</code> tests whether the maps <code>m1</code> and <code>m2</code> are equal, that is, contain equal keys and associate them with equal data. <code>cmp</code> is the equality predicate used to compare the data associated with the keys.", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-eq", "title": "eq", "contents": "eq t t cmp bool   bool   kcmp veq", "rendered": "<h4 class='item'>let eq: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  ~kcmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id),\n  ~veq: ('a, 'a) => bool\n) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-eqU", "title": "eqU", "contents": "eqU t t cmp fn bool bool   kcmp veq", "rendered": "<h4 class='item'>let eqU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id),\n  ~kcmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id),\n  ~veq: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'a38 * 'a38 ], bool)\n) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-cmp", "title": "cmp", "contents": "cmp t t cmp int   int   kcmp vcmp", "rendered": "<h4 class='item'>let cmp: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id),\n  ~kcmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id),\n  ~vcmp: ('v, 'v) => int\n) => int</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-cmpU", "title": "cmpU", "contents": "cmpU t t cmp fn int int   kcmp vcmp", "rendered": "<h4 class='item'>let cmpU: (\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id),\n  <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id),\n  ~kcmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id),\n  ~vcmp: <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'v * 'v ], int)\n) => int</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-has", "title": "has", "contents": "has t cmp bool   cmp", "rendered": "<h4 class='item'>let has: (<a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'a, 'id), 'k, ~cmp: <a href=\"./api/Belt_MapDict.html#type-cmp\">cmp</a>('k, 'id)) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id) => bool</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#value-empty", "title": "empty", "contents": "empty t", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Belt_MapDict.html#type-t\">t</a>('k, 'v, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#type-cmp", "title": "cmp", "contents": "cmp cmp", "rendered": "<h4 class='item'>type cmp('key, 'id) = <a href=\"./api/Belt_Id.html#type-cmp\" title=\"Belt_Id.cmp\">cmp</a>('key, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('key, 'value, 'id)</h4>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html", "title": "Belt_MapDict", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html", "title": "Belt_MapDict", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MapDict.html#Belt_MapDict", "title": "Belt_MapDict", "contents": "", "rendered": "", "breadcrumb": "Belt_MapDict"},
{"href": "./api/Belt_MutableQueue.html#value-toArray", "title": "toArray", "contents": "First added will be in the beginning of the array", "rendered": "First added will be in the beginning of the array", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-toArray", "title": "toArray", "contents": "toArray t array ", "rendered": "<h4 class='item'>let toArray: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => array('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-transfer", "title": "transfer", "contents": "transfer q1 q2 adds all of q1&#39;s elements at the end of the queue q2, then clears q1. It is equivalent to the sequence forEach (fun x -&gt; add x q2) q1; clear q1, but runs in constant time.", "rendered": "<code>transfer q1 q2</code> adds all of <code>q1</code>&#39;s elements at the end of the queue <code>q2</code>, then clears <code>q1</code>. It is equivalent to the sequence <code>forEach (fun x -&gt; add x q2) q1; clear q1</code>, but runs in constant time.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-transfer", "title": "transfer", "contents": "transfer t t unit  ", "rendered": "<h4 class='item'>let transfer: (<a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a), <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-reduce", "title": "reduce", "contents": "reduce q accu f is equivalent to List.reduce l accu f, where l is the list of q&#39;s elements. The queue remains unchanged.", "rendered": "<code>reduce q accu f</code> is equivalent to <code>List.reduce l accu f</code>, where <code>l</code> is the list of <code>q</code>&#39;s elements. The queue remains unchanged.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-reduce", "title": "reduce", "contents": "reduce t     ", "rendered": "<h4 class='item'>let reduce: (<a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a), 'b, ('b, 'a) => 'b) => 'b</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-reduceU", "title": "reduceU", "contents": "reduceU t fn   ", "rendered": "<h4 class='item'>let reduceU: (\n  <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a),\n  'b,\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_2 of 'b5 * 'a26 ], 'b)\n) => 'b</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-forEach", "title": "forEach", "contents": "forEach q f applies f in turn to all elements of q, from the least recently entered to the most recently entered. The queue itself is unchanged.", "rendered": "<code>forEach q f</code> applies <code>f</code> in turn to all elements of <code>q</code>, from the least recently entered to the most recently entered. The queue itself is unchanged.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-forEach", "title": "forEach", "contents": "forEach t unit  unit  ", "rendered": "<h4 class='item'>let forEach: (<a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a), 'a => unit) => unit</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-forEachU", "title": "forEachU", "contents": "forEachU t fn unit unit  ", "rendered": "<h4 class='item'>let forEachU: (\n  <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a),\n  <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a27 ], unit)\n) => unit</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-map", "title": "map", "contents": "map t  t  ", "rendered": "<h4 class='item'>let map: (<a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a), 'a => 'b) => <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-mapU", "title": "mapU", "contents": "mapU t fn t  ", "rendered": "<h4 class='item'>let mapU: (<a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a), <a href=\"./api/Js.html#type-Internal.fn\" title=\"Js.Internal.fn\">fn</a>([ `Arity_1 of 'a28 ], 'b)) => <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('b)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-size", "title": "size", "contents": "the number of elements in a queue.", "rendered": "the number of elements in a queue.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-size", "title": "size", "contents": "Returns: the number of elements in a queue.\n\n", "rendered": "Returns: <p>the number of elements in a queue.</p>\n", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-copy", "title": "copy", "contents": "a fresh queue", "rendered": "a fresh queue", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-copy", "title": "copy", "contents": "Returns: a fresh queue\n\n", "rendered": "Returns: <p>a fresh queue</p>\n", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-copy", "title": "copy", "contents": "copy q", "rendered": "<code>copy q</code>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-popExn", "title": "popExn", "contents": "raise an exception if q is empty", "rendered": "<strong>raise</strong> an exception if <code>q</code> is empty", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-popExn", "title": "popExn", "contents": "popExn q", "rendered": "<code>popExn q</code>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-popExn", "title": "popExn", "contents": "popExn t ", "rendered": "<h4 class='item'>let popExn: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-popUndefined", "title": "popUndefined", "contents": "popUndefined q removes and returns the first element in queue q. it will return undefined if it is already empty", "rendered": "<code>popUndefined q</code> removes and returns the first element in queue <code>q</code>. it will return undefined if it is already empty", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-popUndefined", "title": "popUndefined", "contents": "popUndefined t undefined ", "rendered": "<h4 class='item'>let popUndefined: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-pop", "title": "pop", "contents": "pop q removes and returns the first element in queue q.", "rendered": "<code>pop q</code> removes and returns the first element in queue <code>q</code>.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-pop", "title": "pop", "contents": "pop t option ", "rendered": "<h4 class='item'>let pop: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-peekExn", "title": "peekExn", "contents": "peekUndefined q returns undefined if not found", "rendered": "<code>peekUndefined q</code> returns <code>undefined</code> if not found", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-peekExn", "title": "peekExn", "contents": "peekExn t ", "rendered": "<h4 class='item'>let peekExn: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-peekUndefined", "title": "peekUndefined", "contents": "peekUndefined q returns undefined if not found", "rendered": "<code>peekUndefined q</code> returns <code>undefined</code> if not found", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-peekUndefined", "title": "peekUndefined", "contents": "peekUndefined t undefined ", "rendered": "<h4 class='item'>let peekUndefined: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => <a href=\"./api/Js.html#type-undefined\" title=\"Js.undefined\">undefined</a>('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-peek", "title": "peek", "contents": "peekOpt q returns the first element in queue q, without removing it from the queue.", "rendered": "<code>peekOpt q</code> returns the first element in queue <code>q</code>, without removing it from the queue.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-peek", "title": "peek", "contents": "peek t option ", "rendered": "<h4 class='item'>let peek: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-add", "title": "add", "contents": "add q x adds the element x at the end of the queue q.", "rendered": "<code>add q x</code> adds the element <code>x</code> at the end of the queue <code>q</code>.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-add", "title": "add", "contents": "add t unit  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a), 'a) => unit</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-fromArray", "title": "fromArray", "contents": "fromArray a is equivalent to Array.forEach a (add q a)", "rendered": "<code>fromArray a</code> is equivalent to <code>Array.forEach a (add q a)</code>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-fromArray", "title": "fromArray", "contents": "fromArray array t ", "rendered": "<h4 class='item'>let fromArray: array('a) => <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-ofArray", "title": "ofArray", "contents": "ofArray array t ", "rendered": "<h4 class='item'>let ofArray: array('a) => <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-isEmpty", "title": "isEmpty", "contents": "true if the given queue is empty, false otherwise.", "rendered": "<code>true</code> if the given queue is empty, <code>false</code> otherwise.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-isEmpty", "title": "isEmpty", "contents": "Returns: true if the given queue is empty, false otherwise.\n\n", "rendered": "Returns: <p><code>true</code> if the given queue is empty, <code>false</code> otherwise.</p>\n", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-isEmpty", "title": "isEmpty", "contents": "isEmpty t bool ", "rendered": "<h4 class='item'>let isEmpty: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-clear", "title": "clear", "contents": "Discard all elements from the queue.", "rendered": "Discard all elements from the queue.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-make", "title": "make", "contents": "a new queue, initially empty.", "rendered": "a new queue, initially empty.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-make", "title": "make", "contents": "Returns: a new queue, initially empty.\n\n", "rendered": "Returns: <p>a new queue, initially empty.</p>\n", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#value-make", "title": "make", "contents": "make unit t ", "rendered": "<h4 class='item'>let make: unit => <a href=\"./api/Belt_MutableQueue.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#type-t", "title": "t", "contents": "The type of queues containing elements of type &#39;a.", "rendered": "The type of queues containing elements of type <code>&#39;a</code>.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html", "title": "Belt_MutableQueue", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html", "title": "Belt_MutableQueue", "contents": "This module implements queues (FIFOs), with in-place modification.", "rendered": "This module implements queues (FIFOs), with in-place modification.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Belt_MutableQueue.html", "title": "Belt_MutableQueue", "contents": "First-in first-out queues.", "rendered": "First-in first-out queues.", "breadcrumb": "Belt_MutableQueue"},
{"href": "./api/Unix.html#value-setsid", "title": "setsid", "contents": "Put the calling process in a new session and detach it from its controlling terminal.", "rendered": "Put the calling process in a new session and detach it from its controlling terminal.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsid", "title": "setsid", "contents": "setsid unit int ", "rendered": "<h4 class='item'>let setsid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcflow", "title": "tcflow", "contents": "Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: TCOOFF suspends output, TCOON restarts output, TCIOFF transmits a STOP character to suspend input, and TCION transmits a START character to restart input.", "rendered": "Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: <code>TCOOFF</code> suspends output, <code>TCOON</code> restarts output, <code>TCIOFF</code> transmits a STOP character to suspend input, and <code>TCION</code> transmits a START character to restart input.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcflow", "title": "tcflow", "contents": "tcflow file_descr flow_action unit  ", "rendered": "<h4 class='item'>let tcflow: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-flow_action\">flow_action</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-flow_action", "title": "flow_action", "contents": "flow_action ", "rendered": "<h4 class='item'>type flow_action = | TCOOFF | TCOON | TCIOFF | TCION\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcflush", "title": "tcflush", "contents": "Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: TCIFLUSH flushes data received but not read, TCOFLUSH flushes data written but not transmitted, and TCIOFLUSH flushes both.", "rendered": "Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: <code>TCIFLUSH</code> flushes data received but not read, <code>TCOFLUSH</code> flushes data written but not transmitted, and <code>TCIOFLUSH</code> flushes both.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcflush", "title": "tcflush", "contents": "tcflush file_descr flush_queue unit  ", "rendered": "<h4 class='item'>let tcflush: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-flush_queue\">flush_queue</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-flush_queue", "title": "flush_queue", "contents": "flush_queue ", "rendered": "<h4 class='item'>type flush_queue = | TCIFLUSH | TCOFLUSH | TCIOFLUSH\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcdrain", "title": "tcdrain", "contents": "Waits until all output written on the given file descriptor has been transmitted.", "rendered": "Waits until all output written on the given file descriptor has been transmitted.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcdrain", "title": "tcdrain", "contents": "tcdrain file_descr unit ", "rendered": "<h4 class='item'>let tcdrain: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcsendbreak", "title": "tcsendbreak", "contents": "Send a break condition on the given file descriptor. The second argument is the duration of the break, in 0.1s units; 0 means standard duration (0.25s).", "rendered": "Send a break condition on the given file descriptor. The second argument is the duration of the break, in 0.1s units; 0 means standard duration (0.25s).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcsendbreak", "title": "tcsendbreak", "contents": "tcsendbreak file_descr int unit  ", "rendered": "<h4 class='item'>let tcsendbreak: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcsetattr", "title": "tcsetattr", "contents": "Set the status of the terminal referred to by the given file descriptor. The second argument indicates when the status change takes place: immediately (TCSANOW), when all pending output has been transmitted (TCSADRAIN), or after flushing all input that has been received but not read (TCSAFLUSH). TCSADRAIN is recommended when changing the output parameters; TCSAFLUSH, when changing the input parameters.", "rendered": "Set the status of the terminal referred to by the given file descriptor. The second argument indicates when the status change takes place: immediately (<code>TCSANOW</code>), when all pending output has been transmitted (<code>TCSADRAIN</code>), or after flushing all input that has been received but not read (<code>TCSAFLUSH</code>). <code>TCSADRAIN</code> is recommended when changing the output parameters; <code>TCSAFLUSH</code>, when changing the input parameters.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcsetattr", "title": "tcsetattr", "contents": "tcsetattr file_descr setattr_when terminal_io unit   ", "rendered": "<h4 class='item'>let tcsetattr: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-setattr_when\">setattr_when</a>,\n  <a href=\"./api/Unix.html#type-terminal_io\">terminal_io</a>\n) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-setattr_when", "title": "setattr_when", "contents": "setattr_when ", "rendered": "<h4 class='item'>type setattr_when = | TCSANOW | TCSADRAIN | TCSAFLUSH\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcgetattr", "title": "tcgetattr", "contents": "Return the status of the terminal referred to by the given file descriptor.", "rendered": "Return the status of the terminal referred to by the given file descriptor.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-tcgetattr", "title": "tcgetattr", "contents": "tcgetattr file_descr terminal_io ", "rendered": "<h4 class='item'>let tcgetattr: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Unix.html#type-terminal_io\">terminal_io</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-terminal_io", "title": "terminal_io", "contents": "terminal_io c_ignbrk bool c_brkint bool c_ignpar bool c_parmrk bool c_inpck bool c_istrip bool c_inlcr bool c_igncr bool c_icrnl bool c_ixon bool c_ixoff bool c_opost bool c_obaud int c_ibaud int c_csize int c_cstopb int c_cread bool c_parenb bool c_parodd bool c_hupcl bool c_clocal bool c_isig bool c_icanon bool c_noflsh bool c_echo bool c_echoe bool c_echok bool c_echonl bool c_vintr char c_vquit char c_verase char c_vkill char c_veof char c_veol char c_vmin int c_vtime int c_vstart char c_vstop char", "rendered": "<h4 class='item'>type terminal_io = {\n  mut c_ignbrk: bool,\n  mut c_brkint: bool,\n  mut c_ignpar: bool,\n  mut c_parmrk: bool,\n  mut c_inpck: bool,\n  mut c_istrip: bool,\n  mut c_inlcr: bool,\n  mut c_igncr: bool,\n  mut c_icrnl: bool,\n  mut c_ixon: bool,\n  mut c_ixoff: bool,\n  mut c_opost: bool,\n  mut c_obaud: int,\n  mut c_ibaud: int,\n  mut c_csize: int,\n  mut c_cstopb: int,\n  mut c_cread: bool,\n  mut c_parenb: bool,\n  mut c_parodd: bool,\n  mut c_hupcl: bool,\n  mut c_clocal: bool,\n  mut c_isig: bool,\n  mut c_icanon: bool,\n  mut c_noflsh: bool,\n  mut c_echo: bool,\n  mut c_echoe: bool,\n  mut c_echok: bool,\n  mut c_echonl: bool,\n  mut c_vintr: char,\n  mut c_vquit: char,\n  mut c_verase: char,\n  mut c_vkill: char,\n  mut c_veof: char,\n  mut c_veol: char,\n  mut c_vmin: int,\n  mut c_vtime: int,\n  mut c_vstart: char,\n  mut c_vstop: char\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html", "title": "Unix", "contents": "The following functions implement the POSIX standard terminal interface. They provide control over asynchronous communication ports and pseudo-terminals. Refer to the termios man page for a complete description.", "rendered": "The following functions implement the POSIX standard terminal interface. They provide control over asynchronous communication ports and pseudo-terminals. Refer to the <code>termios</code> man page for a complete description.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Terminal-interface", "title": "Terminal interface", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getnameinfo", "title": "getnameinfo", "contents": "getnameinfo addr opts returns the host name and service name corresponding to the socket address addr. opts is a possibly empty list of options that governs how these names are obtained. Raise Not_found if an error occurs.", "rendered": "<code>getnameinfo addr opts</code> returns the host name and service name corresponding to the socket address <code>addr</code>. <code>opts</code> is a possibly empty list of options that governs how these names are obtained. Raise <code>Not_found</code> if an error occurs.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getnameinfo", "title": "getnameinfo", "contents": "getnameinfo sockaddr list getnameinfo_option name_info  ", "rendered": "<h4 class='item'>let getnameinfo: (\n  <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>,\n  list(<a href=\"./api/Unix.html#type-getnameinfo_option\">getnameinfo_option</a>)\n) => <a href=\"./api/Unix.html#type-name_info\">name_info</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-getnameinfo_option", "title": "getnameinfo_option", "contents": "Options to getnameinfo.", "rendered": "Options to getnameinfo.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-getnameinfo_option", "title": "getnameinfo_option", "contents": "getnameinfo_option ", "rendered": "<h4 class='item'>type getnameinfo_option = \n  | NI_NOFQDN\n  | NI_NUMERICHOST\n  | NI_NAMEREQD\n  | NI_NUMERICSERV\n  | NI_DGRAM\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-name_info", "title": "name_info", "contents": "Name of service or port number", "rendered": "Name of service or port number", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-name_info", "title": "name_info", "contents": "name_info ni_hostname string ni_service string", "rendered": "<h4 class='item'>type name_info = {ni_hostname: string, ni_service: string}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getaddrinfo", "title": "getaddrinfo", "contents": "host is either a host name or the string representation of an IP address. host can be given as the empty string; in this case, the ``any&#39;&#39; address or the ``loopback&#39;&#39; address are used, depending whether opts contains AI_PASSIVE. service is either a service name or the string representation of a port number. service can be given as the empty string; in this case, the port field of the returned addresses is set to 0. opts is a possibly empty list of options that allows the caller to force a particular socket domain (e.g. IPv6 only or IPv4 only) or a particular socket type (e.g. TCP only or UDP only).", "rendered": "<code>host</code> is either a host name or the string representation of an IP address. <code>host</code> can be given as the empty string; in this case, the ``any&#39;&#39; address or the ``loopback&#39;&#39; address are used, depending whether <code>opts</code> contains <code>AI_PASSIVE</code>. <code>service</code> is either a service name or the string representation of a port number. <code>service</code> can be given as the empty string; in this case, the port field of the returned addresses is set to 0. <code>opts</code> is a possibly empty list of options that allows the caller to force a particular socket domain (e.g. IPv6 only or IPv4 only) or a particular socket type (e.g. TCP only or UDP only).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getaddrinfo", "title": "getaddrinfo", "contents": "getaddrinfo host service opts returns a list of addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. The empty list is returned if the host or service names are unknown, or the constraints expressed in opts cannot be satisfied.", "rendered": "<code>getaddrinfo host service opts</code> returns a list of addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. The empty list is returned if the host or service names are unknown, or the constraints expressed in <code>opts</code> cannot be satisfied.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getaddrinfo", "title": "getaddrinfo", "contents": "getaddrinfo string string list getaddrinfo_option list addr_info   ", "rendered": "<h4 class='item'>let getaddrinfo: (\n  string,\n  string,\n  list(<a href=\"./api/Unix.html#type-getaddrinfo_option\">getaddrinfo_option</a>)\n) => list(<a href=\"./api/Unix.html#type-addr_info\">addr_info</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-getaddrinfo_option", "title": "getaddrinfo_option", "contents": "Options to getaddrinfo.", "rendered": "Options to getaddrinfo.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-getaddrinfo_option", "title": "getaddrinfo_option", "contents": "getaddrinfo_option socket_domain socket_type int", "rendered": "<h4 class='item'>type getaddrinfo_option = \n  | AI_FAMILY(<a href=\"./api/Unix.html#type-socket_domain\">socket_domain</a>)\n  | AI_SOCKTYPE(<a href=\"./api/Unix.html#type-socket_type\">socket_type</a>)\n  | AI_PROTOCOL(int)\n  | AI_NUMERICHOST\n  | AI_CANONNAME\n  | AI_PASSIVE\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-addr_info", "title": "addr_info", "contents": "Address information returned by getaddrinfo.", "rendered": "Address information returned by getaddrinfo.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-addr_info", "title": "addr_info", "contents": "addr_info ai_family socket_domain ai_socktype socket_type ai_protocol int ai_addr sockaddr ai_canonname string", "rendered": "<h4 class='item'>type addr_info = {\n  ai_family: <a href=\"./api/Unix.html#type-socket_domain\">socket_domain</a>,\n  ai_socktype: <a href=\"./api/Unix.html#type-socket_type\">socket_type</a>,\n  ai_protocol: int,\n  ai_addr: <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>,\n  ai_canonname: string\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getservbyport", "title": "getservbyport", "contents": "Find an entry in services with the given service number, or raise Not_found.", "rendered": "Find an entry in <code>services</code> with the given service number, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getservbyport", "title": "getservbyport", "contents": "getservbyport int string service_entry  ", "rendered": "<h4 class='item'>let getservbyport: (int, string) => <a href=\"./api/Unix.html#type-service_entry\">service_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getservbyname", "title": "getservbyname", "contents": "Find an entry in services with the given name, or raise Not_found.", "rendered": "Find an entry in <code>services</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getservbyname", "title": "getservbyname", "contents": "getservbyname string string service_entry  ", "rendered": "<h4 class='item'>let getservbyname: (string, string) => <a href=\"./api/Unix.html#type-service_entry\">service_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getprotobynumber", "title": "getprotobynumber", "contents": "Find an entry in protocols with the given protocol number, or raise Not_found.", "rendered": "Find an entry in <code>protocols</code> with the given protocol number, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getprotobynumber", "title": "getprotobynumber", "contents": "getprotobynumber int protocol_entry ", "rendered": "<h4 class='item'>let getprotobynumber: int => <a href=\"./api/Unix.html#type-protocol_entry\">protocol_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getprotobyname", "title": "getprotobyname", "contents": "Find an entry in protocols with the given name, or raise Not_found.", "rendered": "Find an entry in <code>protocols</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getprotobyname", "title": "getprotobyname", "contents": "getprotobyname string protocol_entry ", "rendered": "<h4 class='item'>let getprotobyname: string => <a href=\"./api/Unix.html#type-protocol_entry\">protocol_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gethostbyaddr", "title": "gethostbyaddr", "contents": "Find an entry in hosts with the given address, or raise Not_found.", "rendered": "Find an entry in <code>hosts</code> with the given address, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gethostbyaddr", "title": "gethostbyaddr", "contents": "gethostbyaddr inet_addr host_entry ", "rendered": "<h4 class='item'>let gethostbyaddr: <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a> => <a href=\"./api/Unix.html#type-host_entry\">host_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gethostbyname", "title": "gethostbyname", "contents": "Find an entry in hosts with the given name, or raise Not_found.", "rendered": "Find an entry in <code>hosts</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gethostbyname", "title": "gethostbyname", "contents": "gethostbyname string host_entry ", "rendered": "<h4 class='item'>let gethostbyname: string => <a href=\"./api/Unix.html#type-host_entry\">host_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gethostname", "title": "gethostname", "contents": "Return the name of the local host.", "rendered": "Return the name of the local host.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gethostname", "title": "gethostname", "contents": "gethostname unit string ", "rendered": "<h4 class='item'>let gethostname: unit => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-service_entry", "title": "service_entry", "contents": "Structure of entries in the services database.", "rendered": "Structure of entries in the <code>services</code> database.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-service_entry", "title": "service_entry", "contents": "service_entry s_name string s_aliases array string s_port int s_proto string", "rendered": "<h4 class='item'>type service_entry = {\n  s_name: string,\n  s_aliases: array(string),\n  s_port: int,\n  s_proto: string\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-protocol_entry", "title": "protocol_entry", "contents": "Structure of entries in the protocols database.", "rendered": "Structure of entries in the <code>protocols</code> database.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-protocol_entry", "title": "protocol_entry", "contents": "protocol_entry p_name string p_aliases array string p_proto int", "rendered": "<h4 class='item'>type protocol_entry = {\n  p_name: string,\n  p_aliases: array(string),\n  p_proto: int\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-host_entry", "title": "host_entry", "contents": "Structure of entries in the hosts database.", "rendered": "Structure of entries in the <code>hosts</code> database.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-host_entry", "title": "host_entry", "contents": "host_entry h_name string h_aliases array string h_addrtype socket_domain h_addr_list array inet_addr", "rendered": "<h4 class='item'>type host_entry = {\n  h_name: string,\n  h_aliases: array(string),\n  h_addrtype: <a href=\"./api/Unix.html#type-socket_domain\">socket_domain</a>,\n  h_addr_list: array(<a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a>)\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Host-and-protocol-databases", "title": "Host and protocol databases", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-establish_server", "title": "establish_server", "contents": "Establish a server on the given address. The function given as first argument is called for each connection with two buffered channels connected to the client. A new process is created for each connection. The function establish_server never returns normally.", "rendered": "Establish a server on the given address. The function given as first argument is called for each connection with two buffered channels connected to the client. A new process is created for each connection. The function establish_server never returns normally.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-establish_server", "title": "establish_server", "contents": "establish_server in_channel out_channel unit   sockaddr unit  ", "rendered": "<h4 class='item'>let establish_server: (\n  (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>) => unit,\n  <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>\n) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-shutdown_connection", "title": "shutdown_connection", "contents": "``Shut down&#39;&#39; a connection established with open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection. This does not fully close the file descriptor associated with the channel, which you must remember to free via close_in.", "rendered": "``Shut down&#39;&#39; a connection established with open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection. This does not fully close the file descriptor associated with the channel, which you must remember to free via close_in.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-shutdown_connection", "title": "shutdown_connection", "contents": "shutdown_connection in_channel unit ", "rendered": "<h4 class='item'>let shutdown_connection: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_connection", "title": "open_connection", "contents": "Connect to a server at the given address. Return a pair of buffered channels connected to the server. Remember to call flush on the output channel at the right times to ensure correct synchronization.", "rendered": "Connect to a server at the given address. Return a pair of buffered channels connected to the server. Remember to call flush on the output channel at the right times to ensure correct synchronization.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_connection", "title": "open_connection", "contents": "open_connection sockaddr in_channel out_channel ", "rendered": "<h4 class='item'>let open_connection: <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a> => (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#High-level-network-connection-functions", "title": "High-level network connection functions", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_error", "title": "getsockopt_error", "contents": "Return the error condition associated with the given socket, and clear it.", "rendered": "Return the error condition associated with the given socket, and clear it.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_error", "title": "getsockopt_error", "contents": "getsockopt_error file_descr option error ", "rendered": "<h4 class='item'>let getsockopt_error: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => option(<a href=\"./api/Unix.html#type-error\">error</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt_float", "title": "setsockopt_float", "contents": "Same as setsockopt for a socket option whose value is a floating-point number.", "rendered": "Same as setsockopt for a socket option whose value is a floating-point number.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt_float", "title": "setsockopt_float", "contents": "setsockopt_float file_descr socket_float_option float unit   ", "rendered": "<h4 class='item'>let setsockopt_float: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-socket_float_option\">socket_float_option</a>,\n  float\n) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_float", "title": "getsockopt_float", "contents": "Same as getsockopt for a socket option whose value is a floating-point number.", "rendered": "Same as getsockopt for a socket option whose value is a floating-point number.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_float", "title": "getsockopt_float", "contents": "getsockopt_float file_descr socket_float_option float  ", "rendered": "<h4 class='item'>let getsockopt_float: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-socket_float_option\">socket_float_option</a>\n) => float</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt_optint", "title": "setsockopt_optint", "contents": "Same as setsockopt for a socket option whose value is an int option.", "rendered": "Same as setsockopt for a socket option whose value is an <code>int option</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt_optint", "title": "setsockopt_optint", "contents": "setsockopt_optint file_descr socket_optint_option option int unit   ", "rendered": "<h4 class='item'>let setsockopt_optint: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-socket_optint_option\">socket_optint_option</a>,\n  option(int)\n) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_optint", "title": "getsockopt_optint", "contents": "Same as getsockopt for a socket option whose value is an int option.", "rendered": "Same as getsockopt for a socket option whose value is an <code>int option</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_optint", "title": "getsockopt_optint", "contents": "getsockopt_optint file_descr socket_optint_option option int  ", "rendered": "<h4 class='item'>let getsockopt_optint: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-socket_optint_option\">socket_optint_option</a>\n) => option(int)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt_int", "title": "setsockopt_int", "contents": "Same as setsockopt for an integer-valued socket option.", "rendered": "Same as setsockopt for an integer-valued socket option.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt_int", "title": "setsockopt_int", "contents": "setsockopt_int file_descr socket_int_option int unit   ", "rendered": "<h4 class='item'>let setsockopt_int: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-socket_int_option\">socket_int_option</a>,\n  int\n) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_int", "title": "getsockopt_int", "contents": "Same as getsockopt for an integer-valued socket option.", "rendered": "Same as getsockopt for an integer-valued socket option.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt_int", "title": "getsockopt_int", "contents": "getsockopt_int file_descr socket_int_option int  ", "rendered": "<h4 class='item'>let getsockopt_int: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-socket_int_option\">socket_int_option</a>) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt", "title": "setsockopt", "contents": "Set or clear a boolean-valued option in the given socket.", "rendered": "Set or clear a boolean-valued option in the given socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setsockopt", "title": "setsockopt", "contents": "setsockopt file_descr socket_bool_option bool unit   ", "rendered": "<h4 class='item'>let setsockopt: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-socket_bool_option\">socket_bool_option</a>,\n  bool\n) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt", "title": "getsockopt", "contents": "Return the current status of a boolean-valued option in the given socket.", "rendered": "Return the current status of a boolean-valued option in the given socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockopt", "title": "getsockopt", "contents": "getsockopt file_descr socket_bool_option bool  ", "rendered": "<h4 class='item'>let getsockopt: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-socket_bool_option\">socket_bool_option</a>) => bool</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_float_option", "title": "socket_float_option", "contents": "The socket options that can be consulted with getsockopt_float and modified with setsockopt_float. These options have a floating-point value representing a time in seconds. The value 0 means infinite timeout.", "rendered": "The socket options that can be consulted with getsockopt_float and modified with setsockopt_float. These options have a floating-point value representing a time in seconds. The value 0 means infinite timeout.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_float_option", "title": "socket_float_option", "contents": "socket_float_option ", "rendered": "<h4 class='item'>type socket_float_option = | SO_RCVTIMEO | SO_SNDTIMEO\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_optint_option", "title": "socket_optint_option", "contents": "The socket options that can be consulted with getsockopt_optint and modified with setsockopt_optint. These options have a value of type int option, with None meaning ``disabled&#39;&#39;.", "rendered": "The socket options that can be consulted with getsockopt_optint and modified with setsockopt_optint. These options have a value of type <code>int option</code>, with <code>None</code> meaning ``disabled&#39;&#39;.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_optint_option", "title": "socket_optint_option", "contents": "socket_optint_option ", "rendered": "<h4 class='item'>type socket_optint_option = | SO_LINGER\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_int_option", "title": "socket_int_option", "contents": "The socket options that can be consulted with getsockopt_int and modified with setsockopt_int. These options have an integer value.", "rendered": "The socket options that can be consulted with getsockopt_int and modified with setsockopt_int. These options have an integer value.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_int_option", "title": "socket_int_option", "contents": "socket_int_option ", "rendered": "<h4 class='item'>type socket_int_option = \n  | SO_SNDBUF\n  | SO_RCVBUF\n  | SO_ERROR\n  | SO_TYPE\n  | SO_RCVLOWAT\n  | SO_SNDLOWAT\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_bool_option", "title": "socket_bool_option", "contents": "The socket options that can be consulted with getsockopt and modified with setsockopt. These options have a boolean (true/false) value.", "rendered": "The socket options that can be consulted with getsockopt and modified with setsockopt. These options have a boolean (<code>true</code>/<code>false</code>) value.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_bool_option", "title": "socket_bool_option", "contents": "socket_bool_option ", "rendered": "<h4 class='item'>type socket_bool_option = \n  | SO_DEBUG\n  | SO_BROADCAST\n  | SO_REUSEADDR\n  | SO_KEEPALIVE\n  | SO_DONTROUTE\n  | SO_OOBINLINE\n  | SO_ACCEPTCONN\n  | TCP_NODELAY\n  | IPV6_ONLY\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Socket-options", "title": "Socket options", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sendto_substring", "title": "sendto_substring", "contents": "Same as sendto, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>sendto</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sendto_substring", "title": "sendto_substring", "contents": "sendto_substring file_descr string int int list msg_flag sockaddr int      ", "rendered": "<h4 class='item'>let sendto_substring: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  string,\n  int,\n  int,\n  list(<a href=\"./api/Unix.html#type-msg_flag\">msg_flag</a>),\n  <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sendto", "title": "sendto", "contents": "Send data over an unconnected socket.", "rendered": "Send data over an unconnected socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sendto", "title": "sendto", "contents": "sendto file_descr bytes int int list msg_flag sockaddr int      ", "rendered": "<h4 class='item'>let sendto: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  bytes,\n  int,\n  int,\n  list(<a href=\"./api/Unix.html#type-msg_flag\">msg_flag</a>),\n  <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-send_substring", "title": "send_substring", "contents": "Same as send, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>send</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-send_substring", "title": "send_substring", "contents": "send_substring file_descr string int int list msg_flag int     ", "rendered": "<h4 class='item'>let send_substring: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  string,\n  int,\n  int,\n  list(<a href=\"./api/Unix.html#type-msg_flag\">msg_flag</a>)\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-send", "title": "send", "contents": "Send data over a connected socket.", "rendered": "Send data over a connected socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-send", "title": "send", "contents": "send file_descr bytes int int list msg_flag int     ", "rendered": "<h4 class='item'>let send: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  bytes,\n  int,\n  int,\n  list(<a href=\"./api/Unix.html#type-msg_flag\">msg_flag</a>)\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-recvfrom", "title": "recvfrom", "contents": "Receive data from an unconnected socket.", "rendered": "Receive data from an unconnected socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-recvfrom", "title": "recvfrom", "contents": "recvfrom file_descr bytes int int list msg_flag int sockaddr     ", "rendered": "<h4 class='item'>let recvfrom: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  bytes,\n  int,\n  int,\n  list(<a href=\"./api/Unix.html#type-msg_flag\">msg_flag</a>)\n) => (int, <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-recv", "title": "recv", "contents": "Receive data from a connected socket.", "rendered": "Receive data from a connected socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-recv", "title": "recv", "contents": "recv file_descr bytes int int list msg_flag int     ", "rendered": "<h4 class='item'>let recv: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  bytes,\n  int,\n  int,\n  list(<a href=\"./api/Unix.html#type-msg_flag\">msg_flag</a>)\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-msg_flag", "title": "msg_flag", "contents": "msg_flag ", "rendered": "<h4 class='item'>type msg_flag = | MSG_OOB | MSG_DONTROUTE | MSG_PEEK\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpeername", "title": "getpeername", "contents": "Return the address of the host connected to the given socket.", "rendered": "Return the address of the host connected to the given socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpeername", "title": "getpeername", "contents": "getpeername file_descr sockaddr ", "rendered": "<h4 class='item'>let getpeername: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockname", "title": "getsockname", "contents": "Return the address of the given socket.", "rendered": "Return the address of the given socket.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getsockname", "title": "getsockname", "contents": "getsockname file_descr sockaddr ", "rendered": "<h4 class='item'>let getsockname: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-shutdown", "title": "shutdown", "contents": "Shutdown a socket connection. SHUTDOWN_SEND as second argument causes reads on the other end of the connection to return an end-of-file condition. SHUTDOWN_RECEIVE causes writes on the other end of the connection to return a closed pipe condition (SIGPIPE signal).", "rendered": "Shutdown a socket connection. <code>SHUTDOWN_SEND</code> as second argument causes reads on the other end of the connection to return an end-of-file condition. <code>SHUTDOWN_RECEIVE</code> causes writes on the other end of the connection to return a closed pipe condition (<code>SIGPIPE</code> signal).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-shutdown", "title": "shutdown", "contents": "shutdown file_descr shutdown_command unit  ", "rendered": "<h4 class='item'>let shutdown: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-shutdown_command\">shutdown_command</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-shutdown_command", "title": "shutdown_command", "contents": "The type of commands for shutdown.", "rendered": "The type of commands for <code>shutdown</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-shutdown_command", "title": "shutdown_command", "contents": "shutdown_command ", "rendered": "<h4 class='item'>type shutdown_command = \n  | SHUTDOWN_RECEIVE\n  | SHUTDOWN_SEND\n  | SHUTDOWN_ALL\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-listen", "title": "listen", "contents": "Set up a socket for receiving connection requests. The integer argument is the maximal number of pending requests.", "rendered": "Set up a socket for receiving connection requests. The integer argument is the maximal number of pending requests.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-listen", "title": "listen", "contents": "listen file_descr int unit  ", "rendered": "<h4 class='item'>let listen: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-connect", "title": "connect", "contents": "Connect a socket to an address.", "rendered": "Connect a socket to an address.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-connect", "title": "connect", "contents": "connect file_descr sockaddr unit  ", "rendered": "<h4 class='item'>let connect: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-bind", "title": "bind", "contents": "Bind a socket to an address.", "rendered": "Bind a socket to an address.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-bind", "title": "bind", "contents": "bind file_descr sockaddr unit  ", "rendered": "<h4 class='item'>let bind: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-accept", "title": "accept", "contents": "Accept connections on the given socket. The returned descriptor is a socket connected to the client; the returned address is the address of the connecting client.", "rendered": "Accept connections on the given socket. The returned descriptor is a socket connected to the client; the returned address is the address of the connecting client.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-accept", "title": "accept", "contents": "accept file_descr file_descr sockaddr ", "rendered": "<h4 class='item'>let accept: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-socketpair", "title": "socketpair", "contents": "Create a pair of unnamed sockets, connected together.", "rendered": "Create a pair of unnamed sockets, connected together.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-socketpair", "title": "socketpair", "contents": "socketpair socket_domain socket_type int file_descr file_descr   ", "rendered": "<h4 class='item'>let socketpair: (<a href=\"./api/Unix.html#type-socket_domain\">socket_domain</a>, <a href=\"./api/Unix.html#type-socket_type\">socket_type</a>, int) => (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>\n)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-domain_of_sockaddr", "title": "domain_of_sockaddr", "contents": "Return the socket domain adequate for the given socket address.", "rendered": "Return the socket domain adequate for the given socket address.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-domain_of_sockaddr", "title": "domain_of_sockaddr", "contents": "domain_of_sockaddr sockaddr socket_domain ", "rendered": "<h4 class='item'>let domain_of_sockaddr: <a href=\"./api/Unix.html#type-sockaddr\">sockaddr</a> => <a href=\"./api/Unix.html#type-socket_domain\">socket_domain</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-socket", "title": "socket", "contents": "Create a new socket in the given domain, and with the given kind. The third argument is the protocol type; 0 selects the default protocol for that kind of sockets.", "rendered": "Create a new socket in the given domain, and with the given kind. The third argument is the protocol type; 0 selects the default protocol for that kind of sockets.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-socket", "title": "socket", "contents": "socket socket_domain socket_type int file_descr   ", "rendered": "<h4 class='item'>let socket: (<a href=\"./api/Unix.html#type-socket_domain\">socket_domain</a>, <a href=\"./api/Unix.html#type-socket_type\">socket_type</a>, int) => <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-sockaddr", "title": "sockaddr", "contents": "sockaddr string inet_addr int", "rendered": "<h4 class='item'>type sockaddr = \n  | ADDR_UNIX(string)\n  | ADDR_INET(<a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a>, int)\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_type", "title": "socket_type", "contents": "The type of socket kinds, specifying the semantics of communications.", "rendered": "The type of socket kinds, specifying the semantics of communications.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_type", "title": "socket_type", "contents": "socket_type ", "rendered": "<h4 class='item'>type socket_type = \n  | SOCK_STREAM\n  | SOCK_DGRAM\n  | SOCK_RAW\n  | SOCK_SEQPACKET\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_domain", "title": "socket_domain", "contents": "The type of socket domains. Not all platforms support IPv6 sockets (type PF_INET6).", "rendered": "The type of socket domains. Not all platforms support IPv6 sockets (type <code>PF_INET6</code>).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-socket_domain", "title": "socket_domain", "contents": "socket_domain ", "rendered": "<h4 class='item'>type socket_domain = | PF_UNIX | PF_INET | PF_INET6\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Sockets", "title": "Sockets", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet6_addr_loopback", "title": "inet6_addr_loopback", "contents": "A special IPv6 address representing the host machine (::1).", "rendered": "A special IPv6 address representing the host machine (<code>::1</code>).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet6_addr_loopback", "title": "inet6_addr_loopback", "contents": "inet6_addr_loopback inet_addr", "rendered": "<h4 class='item'>let inet6_addr_loopback: <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet6_addr_any", "title": "inet6_addr_any", "contents": "A special IPv6 address, for use only with bind, representing all the Internet addresses that the host machine possesses.", "rendered": "A special IPv6 address, for use only with <code>bind</code>, representing all the Internet addresses that the host machine possesses.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet6_addr_any", "title": "inet6_addr_any", "contents": "inet6_addr_any inet_addr", "rendered": "<h4 class='item'>let inet6_addr_any: <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet_addr_loopback", "title": "inet_addr_loopback", "contents": "A special IPv4 address representing the host machine (127.0.0.1).", "rendered": "A special IPv4 address representing the host machine (<code>127.0.0.1</code>).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet_addr_loopback", "title": "inet_addr_loopback", "contents": "inet_addr_loopback inet_addr", "rendered": "<h4 class='item'>let inet_addr_loopback: <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet_addr_any", "title": "inet_addr_any", "contents": "A special IPv4 address, for use only with bind, representing all the Internet addresses that the host machine possesses.", "rendered": "A special IPv4 address, for use only with <code>bind</code>, representing all the Internet addresses that the host machine possesses.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet_addr_any", "title": "inet_addr_any", "contents": "inet_addr_any inet_addr", "rendered": "<h4 class='item'>let inet_addr_any: <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-string_of_inet_addr", "title": "string_of_inet_addr", "contents": "Return the printable representation of the given Internet address. See inet_addr_of_string for a description of the printable representation.", "rendered": "Return the printable representation of the given Internet address. See inet_addr_of_string for a description of the printable representation.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-string_of_inet_addr", "title": "string_of_inet_addr", "contents": "string_of_inet_addr inet_addr string ", "rendered": "<h4 class='item'>let string_of_inet_addr: <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a> => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet_addr_of_string", "title": "inet_addr_of_string", "contents": "Conversion from the printable representation of an Internet address to its internal representation. The argument string consists of 4 numbers separated by periods (XXX.YYY.ZZZ.TTT) for IPv4 addresses, and up to 8 numbers separated by colons for IPv6 addresses. Raise Failure when given a string that does not match these formats.", "rendered": "Conversion from the printable representation of an Internet address to its internal representation. The argument string consists of 4 numbers separated by periods (<code>XXX.YYY.ZZZ.TTT</code>) for IPv4 addresses, and up to 8 numbers separated by colons for IPv6 addresses. Raise <code>Failure</code> when given a string that does not match these formats.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-inet_addr_of_string", "title": "inet_addr_of_string", "contents": "inet_addr_of_string string inet_addr ", "rendered": "<h4 class='item'>let inet_addr_of_string: string => <a href=\"./api/Unix.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-inet_addr", "title": "inet_addr", "contents": "The abstract type of Internet addresses.", "rendered": "The abstract type of Internet addresses.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-inet_addr", "title": "inet_addr", "contents": "inet_addr ", "rendered": "<h4 class='item'>type inet_addr</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Internet-addresses", "title": "Internet addresses", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgrgid", "title": "getgrgid", "contents": "Find an entry in group with the given group id, or raise Not_found.", "rendered": "Find an entry in <code>group</code> with the given group id, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgrgid", "title": "getgrgid", "contents": "getgrgid int group_entry ", "rendered": "<h4 class='item'>let getgrgid: int => <a href=\"./api/Unix.html#type-group_entry\">group_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpwuid", "title": "getpwuid", "contents": "Find an entry in passwd with the given user id, or raise Not_found.", "rendered": "Find an entry in <code>passwd</code> with the given user id, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpwuid", "title": "getpwuid", "contents": "getpwuid int passwd_entry ", "rendered": "<h4 class='item'>let getpwuid: int => <a href=\"./api/Unix.html#type-passwd_entry\">passwd_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgrnam", "title": "getgrnam", "contents": "Find an entry in group with the given name, or raise Not_found.", "rendered": "Find an entry in <code>group</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgrnam", "title": "getgrnam", "contents": "getgrnam string group_entry ", "rendered": "<h4 class='item'>let getgrnam: string => <a href=\"./api/Unix.html#type-group_entry\">group_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpwnam", "title": "getpwnam", "contents": "Find an entry in passwd with the given name, or raise Not_found.", "rendered": "Find an entry in <code>passwd</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpwnam", "title": "getpwnam", "contents": "getpwnam string passwd_entry ", "rendered": "<h4 class='item'>let getpwnam: string => <a href=\"./api/Unix.html#type-passwd_entry\">passwd_entry</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getlogin", "title": "getlogin", "contents": "Return the login name of the user executing the process.", "rendered": "Return the login name of the user executing the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getlogin", "title": "getlogin", "contents": "getlogin unit string ", "rendered": "<h4 class='item'>let getlogin: unit => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-group_entry", "title": "group_entry", "contents": "Structure of entries in the groups database.", "rendered": "Structure of entries in the <code>groups</code> database.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-group_entry", "title": "group_entry", "contents": "group_entry gr_name string gr_passwd string gr_gid int gr_mem array string", "rendered": "<h4 class='item'>type group_entry = {\n  gr_name: string,\n  gr_passwd: string,\n  gr_gid: int,\n  gr_mem: array(string)\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-passwd_entry", "title": "passwd_entry", "contents": "Structure of entries in the passwd database.", "rendered": "Structure of entries in the <code>passwd</code> database.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-passwd_entry", "title": "passwd_entry", "contents": "passwd_entry pw_name string pw_passwd string pw_uid int pw_gid int pw_gecos string pw_dir string pw_shell string", "rendered": "<h4 class='item'>type passwd_entry = {\n  pw_name: string,\n  pw_passwd: string,\n  pw_uid: int,\n  pw_gid: int,\n  pw_gecos: string,\n  pw_dir: string,\n  pw_shell: string\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-initgroups", "title": "initgroups", "contents": "initgroups user group initializes the group access list by reading the group database /etc/group and using all groups of which user is a member. The additional group group is also added to the list.", "rendered": "<code>initgroups user group</code> initializes the group access list by reading the group database /etc/group and using all groups of which <code>user</code> is a member. The additional group <code>group</code> is also added to the list.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-initgroups", "title": "initgroups", "contents": "initgroups string int unit  ", "rendered": "<h4 class='item'>let initgroups: (string, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setgroups", "title": "setgroups", "contents": "setgroups groups sets the supplementary group IDs for the calling process. Appropriate privileges are required.", "rendered": "<code>setgroups groups</code> sets the supplementary group IDs for the calling process. Appropriate privileges are required.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setgroups", "title": "setgroups", "contents": "setgroups array int unit ", "rendered": "<h4 class='item'>let setgroups: array(int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgroups", "title": "getgroups", "contents": "Return the list of groups to which the user executing the process belongs.", "rendered": "Return the list of groups to which the user executing the process belongs.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgroups", "title": "getgroups", "contents": "getgroups unit array int ", "rendered": "<h4 class='item'>let getgroups: unit => array(int)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setgid", "title": "setgid", "contents": "Set the real group id and effective group id for the process.", "rendered": "Set the real group id and effective group id for the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setgid", "title": "setgid", "contents": "setgid int unit ", "rendered": "<h4 class='item'>let setgid: int => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getegid", "title": "getegid", "contents": "Return the effective group id under which the process runs.", "rendered": "Return the effective group id under which the process runs.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getegid", "title": "getegid", "contents": "getegid unit int ", "rendered": "<h4 class='item'>let getegid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgid", "title": "getgid", "contents": "Return the group id of the user executing the process.", "rendered": "Return the group id of the user executing the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getgid", "title": "getgid", "contents": "getgid unit int ", "rendered": "<h4 class='item'>let getgid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setuid", "title": "setuid", "contents": "Set the real user id and effective user id for the process.", "rendered": "Set the real user id and effective user id for the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setuid", "title": "setuid", "contents": "setuid int unit ", "rendered": "<h4 class='item'>let setuid: int => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-geteuid", "title": "geteuid", "contents": "Return the effective user id under which the process runs.", "rendered": "Return the effective user id under which the process runs.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-geteuid", "title": "geteuid", "contents": "geteuid unit int ", "rendered": "<h4 class='item'>let geteuid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getuid", "title": "getuid", "contents": "Return the user id of the user executing the process.", "rendered": "Return the user id of the user executing the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getuid", "title": "getuid", "contents": "getuid unit int ", "rendered": "<h4 class='item'>let getuid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#User-id--group-id", "title": "User id, group id", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setitimer", "title": "setitimer", "contents": "setitimer t s sets the interval timer t and returns its previous status. The s argument is interpreted as follows: s.it_value, if nonzero, is the time to the next timer expiration; s.it_interval, if nonzero, specifies a value to be used in reloading it_value when the timer expires. Setting s.it_value to zero disables the timer. Setting s.it_interval to zero causes the timer to be disabled after its next expiration.", "rendered": "<code>setitimer t s</code> sets the interval timer <code>t</code> and returns its previous status. The <code>s</code> argument is interpreted as follows: <code>s.it_value</code>, if nonzero, is the time to the next timer expiration; <code>s.it_interval</code>, if nonzero, specifies a value to be used in reloading <code>it_value</code> when the timer expires. Setting <code>s.it_value</code> to zero disables the timer. Setting <code>s.it_interval</code> to zero causes the timer to be disabled after its next expiration.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-setitimer", "title": "setitimer", "contents": "setitimer interval_timer interval_timer_status interval_timer_status  ", "rendered": "<h4 class='item'>let setitimer: (\n  <a href=\"./api/Unix.html#type-interval_timer\">interval_timer</a>,\n  <a href=\"./api/Unix.html#type-interval_timer_status\">interval_timer_status</a>\n) => <a href=\"./api/Unix.html#type-interval_timer_status\">interval_timer_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getitimer", "title": "getitimer", "contents": "Return the current status of the given interval timer.", "rendered": "Return the current status of the given interval timer.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getitimer", "title": "getitimer", "contents": "getitimer interval_timer interval_timer_status ", "rendered": "<h4 class='item'>let getitimer: <a href=\"./api/Unix.html#type-interval_timer\">interval_timer</a> => <a href=\"./api/Unix.html#type-interval_timer_status\">interval_timer_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-interval_timer_status", "title": "interval_timer_status", "contents": "The type describing the status of an interval timer", "rendered": "The type describing the status of an interval timer", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-interval_timer_status", "title": "interval_timer_status", "contents": "interval_timer_status it_interval float it_value float", "rendered": "<h4 class='item'>type interval_timer_status = {\n  it_interval: float,\n  it_value: float\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-interval_timer", "title": "interval_timer", "contents": "The three kinds of interval timers.", "rendered": "The three kinds of interval timers.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-interval_timer", "title": "interval_timer", "contents": "interval_timer ", "rendered": "<h4 class='item'>type interval_timer = \n  | ITIMER_REAL\n  | ITIMER_VIRTUAL\n  | ITIMER_PROF\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-utimes", "title": "utimes", "contents": "Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. A time of 0.0 is interpreted as the current time.", "rendered": "Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. A time of <code>0.0</code> is interpreted as the current time.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-utimes", "title": "utimes", "contents": "utimes string float float unit   ", "rendered": "<h4 class='item'>let utimes: (string, float, float) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-times", "title": "times", "contents": "Return the execution times of the process.", "rendered": "Return the execution times of the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-times", "title": "times", "contents": "times unit process_times ", "rendered": "<h4 class='item'>let times: unit => <a href=\"./api/Unix.html#type-process_times\">process_times</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sleep", "title": "sleep", "contents": "Stop execution for the given number of seconds.", "rendered": "Stop execution for the given number of seconds.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sleep", "title": "sleep", "contents": "sleep int unit ", "rendered": "<h4 class='item'>let sleep: int => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-alarm", "title": "alarm", "contents": "Schedule a SIGALRM signal after the given number of seconds.", "rendered": "Schedule a <code>SIGALRM</code> signal after the given number of seconds.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-alarm", "title": "alarm", "contents": "alarm int int ", "rendered": "<h4 class='item'>let alarm: int => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-mktime", "title": "mktime", "contents": "Convert a date and time, specified by the tm argument, into a time in seconds, as returned by time. The tm_isdst, tm_wday and tm_yday fields of tm are ignored. Also return a normalized copy of the given tm record, with the tm_wday, tm_yday, and tm_isdst fields recomputed from the other fields, and the other fields normalized (so that, e.g., 40 October is changed into 9 November). The tm argument is interpreted in the local time zone.", "rendered": "Convert a date and time, specified by the <code>tm</code> argument, into a time in seconds, as returned by time. The <code>tm_isdst</code>, <code>tm_wday</code> and <code>tm_yday</code> fields of <code>tm</code> are ignored. Also return a normalized copy of the given <code>tm</code> record, with the <code>tm_wday</code>, <code>tm_yday</code>, and <code>tm_isdst</code> fields recomputed from the other fields, and the other fields normalized (so that, e.g., 40 October is changed into 9 November). The <code>tm</code> argument is interpreted in the local time zone.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-mktime", "title": "mktime", "contents": "mktime tm float tm ", "rendered": "<h4 class='item'>let mktime: <a href=\"./api/Unix.html#type-tm\">tm</a> => (float, <a href=\"./api/Unix.html#type-tm\">tm</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-localtime", "title": "localtime", "contents": "Convert a time in seconds, as returned by time, into a date and a time. Assumes the local time zone.", "rendered": "Convert a time in seconds, as returned by time, into a date and a time. Assumes the local time zone.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-localtime", "title": "localtime", "contents": "localtime float tm ", "rendered": "<h4 class='item'>let localtime: float => <a href=\"./api/Unix.html#type-tm\">tm</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gmtime", "title": "gmtime", "contents": "Convert a time in seconds, as returned by time, into a date and a time. Assumes UTC (Coordinated Universal Time), also known as GMT.", "rendered": "Convert a time in seconds, as returned by time, into a date and a time. Assumes UTC (Coordinated Universal Time), also known as GMT.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gmtime", "title": "gmtime", "contents": "gmtime float tm ", "rendered": "<h4 class='item'>let gmtime: float => <a href=\"./api/Unix.html#type-tm\">tm</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gettimeofday", "title": "gettimeofday", "contents": "Same as time, but with resolution better than 1 second.", "rendered": "Same as time, but with resolution better than 1 second.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-gettimeofday", "title": "gettimeofday", "contents": "gettimeofday unit float ", "rendered": "<h4 class='item'>let gettimeofday: unit => float</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-time", "title": "time", "contents": "Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.", "rendered": "Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-time", "title": "time", "contents": "time unit float ", "rendered": "<h4 class='item'>let time: unit => float</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-tm", "title": "tm", "contents": "The type representing wallclock time and calendar date.", "rendered": "The type representing wallclock time and calendar date.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-tm", "title": "tm", "contents": "tm tm_sec int tm_min int tm_hour int tm_mday int tm_mon int tm_year int tm_wday int tm_yday int tm_isdst bool", "rendered": "<h4 class='item'>type tm = {\n  tm_sec: int,\n  tm_min: int,\n  tm_hour: int,\n  tm_mday: int,\n  tm_mon: int,\n  tm_year: int,\n  tm_wday: int,\n  tm_yday: int,\n  tm_isdst: bool\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-process_times", "title": "process_times", "contents": "The execution times (CPU times) of a process.", "rendered": "The execution times (CPU times) of a process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-process_times", "title": "process_times", "contents": "process_times tms_utime float tms_stime float tms_cutime float tms_cstime float", "rendered": "<h4 class='item'>type process_times = {\n  tms_utime: float,\n  tms_stime: float,\n  tms_cutime: float,\n  tms_cstime: float\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Time-functions", "title": "Time functions", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-pause", "title": "pause", "contents": "Wait until a non-ignored, non-blocked signal is delivered.", "rendered": "Wait until a non-ignored, non-blocked signal is delivered.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-pause", "title": "pause", "contents": "pause unit unit ", "rendered": "<h4 class='item'>let pause: unit => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sigsuspend", "title": "sigsuspend", "contents": "sigsuspend sigs atomically sets the blocked signals to sigs and waits for a non-ignored, non-blocked signal to be delivered. On return, the blocked signals are reset to their initial value.", "rendered": "<code>sigsuspend sigs</code> atomically sets the blocked signals to <code>sigs</code> and waits for a non-ignored, non-blocked signal to be delivered. On return, the blocked signals are reset to their initial value.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sigsuspend", "title": "sigsuspend", "contents": "sigsuspend list int unit ", "rendered": "<h4 class='item'>let sigsuspend: list(int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sigpending", "title": "sigpending", "contents": "Return the set of blocked signals that are currently pending.", "rendered": "Return the set of blocked signals that are currently pending.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sigpending", "title": "sigpending", "contents": "sigpending unit list int ", "rendered": "<h4 class='item'>let sigpending: unit => list(int)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sigprocmask", "title": "sigprocmask", "contents": "sigprocmask cmd sigs changes the set of blocked signals. If cmd is SIG_SETMASK, blocked signals are set to those in the list sigs. If cmd is SIG_BLOCK, the signals in sigs are added to the set of blocked signals. If cmd is SIG_UNBLOCK, the signals in sigs are removed from the set of blocked signals. sigprocmask returns the set of previously blocked signals.", "rendered": "<code>sigprocmask cmd sigs</code> changes the set of blocked signals. If <code>cmd</code> is <code>SIG_SETMASK</code>, blocked signals are set to those in the list <code>sigs</code>. If <code>cmd</code> is <code>SIG_BLOCK</code>, the signals in <code>sigs</code> are added to the set of blocked signals. If <code>cmd</code> is <code>SIG_UNBLOCK</code>, the signals in <code>sigs</code> are removed from the set of blocked signals. <code>sigprocmask</code> returns the set of previously blocked signals.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-sigprocmask", "title": "sigprocmask", "contents": "sigprocmask sigprocmask_command list int list int  ", "rendered": "<h4 class='item'>let sigprocmask: (<a href=\"./api/Unix.html#type-sigprocmask_command\">sigprocmask_command</a>, list(int)) => list(\n  int\n)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-sigprocmask_command", "title": "sigprocmask_command", "contents": "sigprocmask_command ", "rendered": "<h4 class='item'>type sigprocmask_command = \n  | SIG_SETMASK\n  | SIG_BLOCK\n  | SIG_UNBLOCK\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-kill", "title": "kill", "contents": "kill pid sig sends signal number sig to the process with id pid. Under Windows, only the Sys.sigkill signal is emulated.", "rendered": "<code>kill pid sig</code> sends signal number <code>sig</code> to the process with id <code>pid</code>. Under Windows, only the <code>Sys.sigkill</code> signal is emulated.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-kill", "title": "kill", "contents": "kill int int unit  ", "rendered": "<h4 class='item'>let kill: (int, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html", "title": "Unix", "contents": "Note: installation of signal handlers is performed via the functions signal and set_signal.", "rendered": "Note: installation of signal handlers is performed via the functions signal and set_signal.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Signals", "title": "Signals", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lockf", "title": "lockf", "contents": "The F_LOCK and F_TLOCK commands attempts to put a write lock on the specified region. The F_RLOCK and F_TRLOCK commands attempts to put a read lock on the specified region. If one or several locks put by another process prevent the current process from acquiring the lock, F_LOCK and F_RLOCK block until these locks are removed, while F_TLOCK and F_TRLOCK fail immediately with an exception. The F_ULOCK removes whatever locks the current process has on the specified region. Finally, the F_TEST command tests whether a write lock can be acquired on the specified region, without actually putting a lock. It returns immediately if successful, or fails otherwise.", "rendered": "The <code>F_LOCK</code> and <code>F_TLOCK</code> commands attempts to put a write lock on the specified region. The <code>F_RLOCK</code> and <code>F_TRLOCK</code> commands attempts to put a read lock on the specified region. If one or several locks put by another process prevent the current process from acquiring the lock, <code>F_LOCK</code> and <code>F_RLOCK</code> block until these locks are removed, while <code>F_TLOCK</code> and <code>F_TRLOCK</code> fail immediately with an exception. The <code>F_ULOCK</code> removes whatever locks the current process has on the specified region. Finally, the <code>F_TEST</code> command tests whether a write lock can be acquired on the specified region, without actually putting a lock. It returns immediately if successful, or fails otherwise.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lockf", "title": "lockf", "contents": "lockf fd cmd size puts a lock on a region of the file opened as fd. The region starts at the current read/write position for fd (as set by lseek), and extends size bytes forward if size is positive, size bytes backwards if size is negative, or to the end of the file if size is zero. A write lock prevents any other process from acquiring a read or write lock on the region. A read lock prevents any other process from acquiring a write lock on the region, but lets other processes acquire read locks on it.", "rendered": "<code>lockf fd cmd size</code> puts a lock on a region of the file opened as <code>fd</code>. The region starts at the current read/write position for <code>fd</code> (as set by lseek), and extends <code>size</code> bytes forward if <code>size</code> is positive, <code>size</code> bytes backwards if <code>size</code> is negative, or to the end of the file if <code>size</code> is zero. A write lock prevents any other process from acquiring a read or write lock on the region. A read lock prevents any other process from acquiring a write lock on the region, but lets other processes acquire read locks on it.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lockf", "title": "lockf", "contents": "lockf file_descr lock_command int unit   ", "rendered": "<h4 class='item'>let lockf: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-lock_command\">lock_command</a>, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-lock_command", "title": "lock_command", "contents": "Commands for lockf.", "rendered": "Commands for lockf.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-lock_command", "title": "lock_command", "contents": "lock_command ", "rendered": "<h4 class='item'>type lock_command = \n  | F_ULOCK\n  | F_LOCK\n  | F_TLOCK\n  | F_TEST\n  | F_RLOCK\n  | F_TRLOCK\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Locking", "title": "Locking", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-select", "title": "select", "contents": "Wait until some input/output operations become possible on some channels. The three list arguments are, respectively, a set of descriptors to check for reading (first argument), for writing (second argument), or for exceptional conditions (third argument). The fourth argument is the maximal timeout, in seconds; a negative fourth argument means no timeout (unbounded wait). The result is composed of three sets of descriptors: those ready for reading (first component), ready for writing (second component), and over which an exceptional condition is pending (third component).", "rendered": "Wait until some input/output operations become possible on some channels. The three list arguments are, respectively, a set of descriptors to check for reading (first argument), for writing (second argument), or for exceptional conditions (third argument). The fourth argument is the maximal timeout, in seconds; a negative fourth argument means no timeout (unbounded wait). The result is composed of three sets of descriptors: those ready for reading (first component), ready for writing (second component), and over which an exceptional condition is pending (third component).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-select", "title": "select", "contents": "select list file_descr list file_descr list file_descr float list file_descr list file_descr list file_descr    ", "rendered": "<h4 class='item'>let select: (\n  list(<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>),\n  list(<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>),\n  list(<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>),\n  float\n) => (list(<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>), list(<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>), list(<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>))</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Polling", "title": "Polling", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-readlink", "title": "readlink", "contents": "Read the contents of a link.", "rendered": "Read the contents of a link.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-readlink", "title": "readlink", "contents": "readlink string string ", "rendered": "<h4 class='item'>let readlink: string => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-symlink", "title": "symlink", "contents": "symlink source dest creates the file dest as a symbolic link to the file source.", "rendered": "<code>symlink source dest</code> creates the file <code>dest</code> as a symbolic link to the file <code>source</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-symlink", "title": "symlink", "contents": "symlink string string unit  ", "rendered": "<h4 class='item'>let symlink: (string, string) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Symbolic-links", "title": "Symbolic links", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process_full", "title": "close_process_full", "contents": "Close channels opened by open_process_full, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process_full, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process_full", "title": "close_process_full", "contents": "close_process_full in_channel out_channel in_channel process_status ", "rendered": "<h4 class='item'>let close_process_full: (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>\n) => <a href=\"./api/Unix.html#type-process_status\">process_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process", "title": "close_process", "contents": "Close channels opened by open_process, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process", "title": "close_process", "contents": "close_process in_channel out_channel process_status ", "rendered": "<h4 class='item'>let close_process: (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>\n) => <a href=\"./api/Unix.html#type-process_status\">process_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process_out", "title": "close_process_out", "contents": "Close channels opened by open_process_out, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process_out, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process_out", "title": "close_process_out", "contents": "close_process_out out_channel process_status ", "rendered": "<h4 class='item'>let close_process_out: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => <a href=\"./api/Unix.html#type-process_status\">process_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process_in", "title": "close_process_in", "contents": "Close channels opened by open_process_in, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process_in, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close_process_in", "title": "close_process_in", "contents": "close_process_in in_channel process_status ", "rendered": "<h4 class='item'>let close_process_in: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Unix.html#type-process_status\">process_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process_full", "title": "open_process_full", "contents": "Similar to open_process, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.", "rendered": "Similar to open_process, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process_full", "title": "open_process_full", "contents": "open_process_full string array string in_channel out_channel in_channel  ", "rendered": "<h4 class='item'>let open_process_full: (string, array(string)) => (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>\n)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process", "title": "open_process", "contents": "Same as open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.", "rendered": "Same as open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process", "title": "open_process", "contents": "open_process string in_channel out_channel ", "rendered": "<h4 class='item'>let open_process: string => (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process_out", "title": "open_process_out", "contents": "Same as open_process_in, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call flush at the right times to ensure correct synchronization.", "rendered": "Same as open_process_in, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call flush at the right times to ensure correct synchronization.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process_out", "title": "open_process_out", "contents": "open_process_out string out_channel ", "rendered": "<h4 class='item'>let open_process_out: string => <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process_in", "title": "open_process_in", "contents": "High-level pipe and process management. This function runs the given command in parallel with the program. The standard output of the command is redirected to a pipe, which can be read via the returned input channel. The command is interpreted by the shell /bin/sh (cf. system).", "rendered": "High-level pipe and process management. This function runs the given command in parallel with the program. The standard output of the command is redirected to a pipe, which can be read via the returned input channel. The command is interpreted by the shell <code>/bin/sh</code> (cf. <code>system</code>).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-open_process_in", "title": "open_process_in", "contents": "open_process_in string in_channel ", "rendered": "<h4 class='item'>let open_process_in: string => <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-create_process_env", "title": "create_process_env", "contents": "create_process_env prog args env new_stdin new_stdout new_stderr works as create_process, except that the extra argument env specifies the environment passed to the program.", "rendered": "<code>create_process_env prog args env new_stdin new_stdout new_stderr</code> works as create_process, except that the extra argument <code>env</code> specifies the environment passed to the program.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-create_process_env", "title": "create_process_env", "contents": "create_process_env string array string array string file_descr file_descr file_descr int      ", "rendered": "<h4 class='item'>let create_process_env: (\n  string,\n  array(string),\n  array(string),\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-create_process", "title": "create_process", "contents": "create_process prog args new_stdin new_stdout new_stderr forks a new process that executes the program in file prog, with arguments args. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors new_stdin, new_stdout and new_stderr. Passing e.g. stdout for new_stdout prevents the redirection and causes the new process to have the same standard output as the current process. The executable file prog is searched in the path. The new process has the same environment as the current process.", "rendered": "<code>create_process prog args new_stdin new_stdout new_stderr</code> forks a new process that executes the program in file <code>prog</code>, with arguments <code>args</code>. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors <code>new_stdin</code>, <code>new_stdout</code> and <code>new_stderr</code>. Passing e.g. <code>stdout</code> for <code>new_stdout</code> prevents the redirection and causes the new process to have the same standard output as the current process. The executable file <code>prog</code> is searched in the path. The new process has the same environment as the current process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-create_process", "title": "create_process", "contents": "create_process string array string file_descr file_descr file_descr int     ", "rendered": "<h4 class='item'>let create_process: (\n  string,\n  array(string),\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#High-level-process-and-redirection-management", "title": "High-level process and redirection management", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-mkfifo", "title": "mkfifo", "contents": "Create a named pipe with the given permissions (see umask).", "rendered": "Create a named pipe with the given permissions (see umask).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-mkfifo", "title": "mkfifo", "contents": "mkfifo string file_perm unit  ", "rendered": "<h4 class='item'>let mkfifo: (string, <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-pipe", "title": "pipe", "contents": "Create a pipe. The first component of the result is opened for reading, that&#39;s the exit to the pipe. The second component is opened for writing, that&#39;s the entrance to the pipe.", "rendered": "Create a pipe. The first component of the result is opened for reading, that&#39;s the exit to the pipe. The second component is opened for writing, that&#39;s the entrance to the pipe.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-pipe", "title": "pipe", "contents": "pipe unit file_descr file_descr ", "rendered": "<h4 class='item'>let pipe: unit => (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Pipes-and-redirections", "title": "Pipes and redirections", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-closedir", "title": "closedir", "contents": "Close a directory descriptor.", "rendered": "Close a directory descriptor.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-closedir", "title": "closedir", "contents": "closedir dir_handle unit ", "rendered": "<h4 class='item'>let closedir: <a href=\"./api/Unix.html#type-dir_handle\">dir_handle</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-rewinddir", "title": "rewinddir", "contents": "Reposition the descriptor to the beginning of the directory", "rendered": "Reposition the descriptor to the beginning of the directory", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-rewinddir", "title": "rewinddir", "contents": "rewinddir dir_handle unit ", "rendered": "<h4 class='item'>let rewinddir: <a href=\"./api/Unix.html#type-dir_handle\">dir_handle</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-readdir", "title": "readdir", "contents": "when the end of the directory has been reached.", "rendered": "when the end of the directory has been reached.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-readdir", "title": "readdir", "contents": "Raises: End_of_filewhen the end of the directory has been reached.\n\n", "rendered": "Raises: End_of_file<p>when the end of the directory has been reached.</p>\n", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-readdir", "title": "readdir", "contents": "Return the next entry in a directory.", "rendered": "Return the next entry in a directory.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-readdir", "title": "readdir", "contents": "readdir dir_handle string ", "rendered": "<h4 class='item'>let readdir: <a href=\"./api/Unix.html#type-dir_handle\">dir_handle</a> => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-opendir", "title": "opendir", "contents": "Open a descriptor on a directory", "rendered": "Open a descriptor on a directory", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-opendir", "title": "opendir", "contents": "opendir string dir_handle ", "rendered": "<h4 class='item'>let opendir: string => <a href=\"./api/Unix.html#type-dir_handle\">dir_handle</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-dir_handle", "title": "dir_handle", "contents": "The type of descriptors over opened directories.", "rendered": "The type of descriptors over opened directories.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-dir_handle", "title": "dir_handle", "contents": "dir_handle ", "rendered": "<h4 class='item'>type dir_handle</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chroot", "title": "chroot", "contents": "Change the process root directory.", "rendered": "Change the process root directory.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chroot", "title": "chroot", "contents": "chroot string unit ", "rendered": "<h4 class='item'>let chroot: string => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getcwd", "title": "getcwd", "contents": "Return the name of the current working directory.", "rendered": "Return the name of the current working directory.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getcwd", "title": "getcwd", "contents": "getcwd unit string ", "rendered": "<h4 class='item'>let getcwd: unit => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chdir", "title": "chdir", "contents": "Change the process working directory.", "rendered": "Change the process working directory.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chdir", "title": "chdir", "contents": "chdir string unit ", "rendered": "<h4 class='item'>let chdir: string => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-rmdir", "title": "rmdir", "contents": "Remove an empty directory.", "rendered": "Remove an empty directory.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-rmdir", "title": "rmdir", "contents": "rmdir string unit ", "rendered": "<h4 class='item'>let rmdir: string => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-mkdir", "title": "mkdir", "contents": "Create a directory with the given permissions (see umask).", "rendered": "Create a directory with the given permissions (see umask).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-mkdir", "title": "mkdir", "contents": "mkdir string file_perm unit  ", "rendered": "<h4 class='item'>let mkdir: (string, <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Directories", "title": "Directories", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-clear_close_on_exec", "title": "clear_close_on_exec", "contents": "Clear the ``close-on-exec&#39;&#39; flag on the given descriptor. See set_close_on_exec.", "rendered": "Clear the ``close-on-exec&#39;&#39; flag on the given descriptor. See set_close_on_exec.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-clear_close_on_exec", "title": "clear_close_on_exec", "contents": "clear_close_on_exec file_descr unit ", "rendered": "<h4 class='item'>let clear_close_on_exec: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-set_close_on_exec", "title": "set_close_on_exec", "contents": "Set the ``close-on-exec&#39;&#39; flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the exec functions.", "rendered": "Set the ``close-on-exec&#39;&#39; flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the <code>exec</code> functions.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-set_close_on_exec", "title": "set_close_on_exec", "contents": "set_close_on_exec file_descr unit ", "rendered": "<h4 class='item'>let set_close_on_exec: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-clear_nonblock", "title": "clear_nonblock", "contents": "Clear the ``non-blocking&#39;&#39; flag on the given descriptor. See set_nonblock.", "rendered": "Clear the ``non-blocking&#39;&#39; flag on the given descriptor. See set_nonblock.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-clear_nonblock", "title": "clear_nonblock", "contents": "clear_nonblock file_descr unit ", "rendered": "<h4 class='item'>let clear_nonblock: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-set_nonblock", "title": "set_nonblock", "contents": "Set the ``non-blocking&#39;&#39; flag on the given descriptor. When the non-blocking flag is set, reading on a descriptor on which there is temporarily no data available raises the EAGAIN or EWOULDBLOCK error instead of blocking; writing on a descriptor on which there is temporarily no room for writing also raises EAGAIN or EWOULDBLOCK.", "rendered": "Set the ``non-blocking&#39;&#39; flag on the given descriptor. When the non-blocking flag is set, reading on a descriptor on which there is temporarily no data available raises the <code>EAGAIN</code> or <code>EWOULDBLOCK</code> error instead of blocking; writing on a descriptor on which there is temporarily no room for writing also raises <code>EAGAIN</code> or <code>EWOULDBLOCK</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-set_nonblock", "title": "set_nonblock", "contents": "set_nonblock file_descr unit ", "rendered": "<h4 class='item'>let set_nonblock: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-dup2", "title": "dup2", "contents": "dup2 fd1 fd2 duplicates fd1 to fd2, closing fd2 if already opened.", "rendered": "<code>dup2 fd1 fd2</code> duplicates <code>fd1</code> to <code>fd2</code>, closing <code>fd2</code> if already opened.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-dup2", "title": "dup2", "contents": "dup2 file_descr file_descr unit  ", "rendered": "<h4 class='item'>let dup2: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-dup", "title": "dup", "contents": "Return a new file descriptor referencing the same file as the given descriptor.", "rendered": "Return a new file descriptor referencing the same file as the given descriptor.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-dup", "title": "dup", "contents": "dup file_descr file_descr ", "rendered": "<h4 class='item'>let dup: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Operations-on-file-descriptors", "title": "Operations on file descriptors", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-access", "title": "access", "contents": "Check that the process has the given permissions over the named file. Raise Unix_error otherwise.", "rendered": "Check that the process has the given permissions over the named file. Raise <code>Unix_error</code> otherwise.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-access", "title": "access", "contents": "access string list access_permission unit  ", "rendered": "<h4 class='item'>let access: (string, list(<a href=\"./api/Unix.html#type-access_permission\">access_permission</a>)) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-umask", "title": "umask", "contents": "Set the process&#39;s file mode creation mask, and return the previous mask.", "rendered": "Set the process&#39;s file mode creation mask, and return the previous mask.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-umask", "title": "umask", "contents": "umask int int ", "rendered": "<h4 class='item'>let umask: int => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fchown", "title": "fchown", "contents": "Change the owner uid and owner gid of an opened file.", "rendered": "Change the owner uid and owner gid of an opened file.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fchown", "title": "fchown", "contents": "fchown file_descr int int unit   ", "rendered": "<h4 class='item'>let fchown: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chown", "title": "chown", "contents": "Change the owner uid and owner gid of the named file.", "rendered": "Change the owner uid and owner gid of the named file.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chown", "title": "chown", "contents": "chown string int int unit   ", "rendered": "<h4 class='item'>let chown: (string, int, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fchmod", "title": "fchmod", "contents": "Change the permissions of an opened file.", "rendered": "Change the permissions of an opened file.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fchmod", "title": "fchmod", "contents": "fchmod file_descr file_perm unit  ", "rendered": "<h4 class='item'>let fchmod: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chmod", "title": "chmod", "contents": "Change the permissions of the named file.", "rendered": "Change the permissions of the named file.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-chmod", "title": "chmod", "contents": "chmod string file_perm unit  ", "rendered": "<h4 class='item'>let chmod: (string, <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-access_permission", "title": "access_permission", "contents": "Flags for the access call.", "rendered": "Flags for the access call.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-access_permission", "title": "access_permission", "contents": "access_permission ", "rendered": "<h4 class='item'>type access_permission = | R_OK | W_OK | X_OK | F_OK\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#File-permissions-and-ownership", "title": "File permissions and ownership", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-link", "title": "link", "contents": "link source dest creates a hard link named dest to the file named source.", "rendered": "<code>link source dest</code> creates a hard link named <code>dest</code> to the file named <code>source</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-link", "title": "link", "contents": "link string string unit  ", "rendered": "<h4 class='item'>let link: (string, string) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-rename", "title": "rename", "contents": "rename old new changes the name of a file from old to new.", "rendered": "<code>rename old new</code> changes the name of a file from <code>old</code> to <code>new</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-rename", "title": "rename", "contents": "rename string string unit  ", "rendered": "<h4 class='item'>let rename: (string, string) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-unlink", "title": "unlink", "contents": "Removes the named file", "rendered": "Removes the named file", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-unlink", "title": "unlink", "contents": "unlink string unit ", "rendered": "<h4 class='item'>let unlink: string => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Operations-on-file-names", "title": "Operations on file names", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-LargeFile.fstat", "title": "LargeFile.fstat", "contents": "fstat file_descr stats ", "rendered": "<h4 class='item'>let fstat: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Unix.html#type-LargeFile.stats\">stats</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-LargeFile.lstat", "title": "LargeFile.lstat", "contents": "lstat string stats ", "rendered": "<h4 class='item'>let lstat: string => <a href=\"./api/Unix.html#type-LargeFile.stats\">stats</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-LargeFile.stat", "title": "LargeFile.stat", "contents": "stat string stats ", "rendered": "<h4 class='item'>let stat: string => <a href=\"./api/Unix.html#type-LargeFile.stats\">stats</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-LargeFile.stats", "title": "LargeFile.stats", "contents": "stats st_dev int st_ino int st_kind file_kind st_perm file_perm st_nlink int st_uid int st_gid int st_rdev int st_size int64 st_atime float st_mtime float st_ctime float", "rendered": "<h4 class='item'>type stats = {\n  st_dev: int,\n  st_ino: int,\n  st_kind: <a href=\"./api/Unix.html#type-file_kind\">file_kind</a>,\n  st_perm: <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>,\n  st_nlink: int,\n  st_uid: int,\n  st_gid: int,\n  st_rdev: int,\n  st_size: int64,\n  st_atime: float,\n  st_mtime: float,\n  st_ctime: float\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-LargeFile.ftruncate", "title": "LargeFile.ftruncate", "contents": "ftruncate file_descr int64 unit  ", "rendered": "<h4 class='item'>let ftruncate: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int64) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-LargeFile.truncate", "title": "LargeFile.truncate", "contents": "truncate string int64 unit  ", "rendered": "<h4 class='item'>let truncate: (string, int64) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-LargeFile.lseek", "title": "LargeFile.lseek", "contents": "lseek file_descr int64 seek_command int64   ", "rendered": "<h4 class='item'>let lseek: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int64, <a href=\"./api/Unix.html#type-seek_command\">seek_command</a>) => int64</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#module-LargeFile", "title": "LargeFile", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#module-LargeFile", "title": "LargeFile", "contents": "File operations on large files. This sub-module provides 64-bit variants of the functions lseek (for positioning a file descriptor), truncate and ftruncate (for changing the size of a file), and stat, lstat and fstat (for obtaining information on files). These alternate functions represent positions and sizes by 64-bit integers (type int64) instead of regular integers (type int), thus allowing operating on files whose sizes are greater than max_int.", "rendered": "File operations on large files. This sub-module provides 64-bit variants of the functions lseek (for positioning a file descriptor), truncate and ftruncate (for changing the size of a file), and stat, lstat and fstat (for obtaining information on files). These alternate functions represent positions and sizes by 64-bit integers (type <code>int64</code>) instead of regular integers (type <code>int</code>), thus allowing operating on files whose sizes are greater than <code>max_int</code>.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#File-operations-on-large-files", "title": "File operations on large files", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-isatty", "title": "isatty", "contents": "Return true if the given file descriptor refers to a terminal or console window, false otherwise.", "rendered": "Return <code>true</code> if the given file descriptor refers to a terminal or console window, <code>false</code> otherwise.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-isatty", "title": "isatty", "contents": "isatty file_descr bool ", "rendered": "<h4 class='item'>let isatty: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => bool</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fstat", "title": "fstat", "contents": "Return the information for the file associated with the given descriptor.", "rendered": "Return the information for the file associated with the given descriptor.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fstat", "title": "fstat", "contents": "fstat file_descr stats ", "rendered": "<h4 class='item'>let fstat: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Unix.html#type-stats\">stats</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lstat", "title": "lstat", "contents": "Same as stat, but in case the file is a symbolic link, return the information for the link itself.", "rendered": "Same as stat, but in case the file is a symbolic link, return the information for the link itself.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lstat", "title": "lstat", "contents": "lstat string stats ", "rendered": "<h4 class='item'>let lstat: string => <a href=\"./api/Unix.html#type-stats\">stats</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stat", "title": "stat", "contents": "Return the information for the named file.", "rendered": "Return the information for the named file.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stat", "title": "stat", "contents": "stat string stats ", "rendered": "<h4 class='item'>let stat: string => <a href=\"./api/Unix.html#type-stats\">stats</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-stats", "title": "stats", "contents": "The information returned by the stat calls.", "rendered": "The information returned by the stat calls.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-stats", "title": "stats", "contents": "stats st_dev int st_ino int st_kind file_kind st_perm file_perm st_nlink int st_uid int st_gid int st_rdev int st_size int st_atime float st_mtime float st_ctime float", "rendered": "<h4 class='item'>type stats = {\n  st_dev: int,\n  st_ino: int,\n  st_kind: <a href=\"./api/Unix.html#type-file_kind\">file_kind</a>,\n  st_perm: <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>,\n  st_nlink: int,\n  st_uid: int,\n  st_gid: int,\n  st_rdev: int,\n  st_size: int,\n  st_atime: float,\n  st_mtime: float,\n  st_ctime: float\n}</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-file_kind", "title": "file_kind", "contents": "file_kind ", "rendered": "<h4 class='item'>type file_kind = \n  | S_REG\n  | S_DIR\n  | S_CHR\n  | S_BLK\n  | S_LNK\n  | S_FIFO\n  | S_SOCK\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#File-status", "title": "File status", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-ftruncate", "title": "ftruncate", "contents": "Truncates the file corresponding to the given descriptor to the given size.", "rendered": "Truncates the file corresponding to the given descriptor to the given size.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-ftruncate", "title": "ftruncate", "contents": "ftruncate file_descr int unit  ", "rendered": "<h4 class='item'>let ftruncate: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-truncate", "title": "truncate", "contents": "Truncates the named file to the given size.", "rendered": "Truncates the named file to the given size.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-truncate", "title": "truncate", "contents": "truncate string int unit  ", "rendered": "<h4 class='item'>let truncate: (string, int) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lseek", "title": "lseek", "contents": "Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).", "rendered": "Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-lseek", "title": "lseek", "contents": "lseek file_descr int seek_command int   ", "rendered": "<h4 class='item'>let lseek: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, int, <a href=\"./api/Unix.html#type-seek_command\">seek_command</a>) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-seek_command", "title": "seek_command", "contents": "Positioning modes for lseek.", "rendered": "Positioning modes for lseek.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-seek_command", "title": "seek_command", "contents": "seek_command ", "rendered": "<h4 class='item'>type seek_command = | SEEK_SET | SEEK_CUR | SEEK_END\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Seeking-and-truncating", "title": "Seeking and truncating", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-descr_of_out_channel", "title": "descr_of_out_channel", "contents": "Return the descriptor corresponding to an output channel.", "rendered": "Return the descriptor corresponding to an output channel.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-descr_of_out_channel", "title": "descr_of_out_channel", "contents": "descr_of_out_channel out_channel file_descr ", "rendered": "<h4 class='item'>let descr_of_out_channel: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-descr_of_in_channel", "title": "descr_of_in_channel", "contents": "Return the descriptor corresponding to an input channel.", "rendered": "Return the descriptor corresponding to an input channel.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-descr_of_in_channel", "title": "descr_of_in_channel", "contents": "descr_of_in_channel in_channel file_descr ", "rendered": "<h4 class='item'>let descr_of_in_channel: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-out_channel_of_descr", "title": "out_channel_of_descr", "contents": "Create an output channel writing on the given descriptor. The channel is initially in binary mode; use set_binary_mode_out oc false if text mode is desired.", "rendered": "Create an output channel writing on the given descriptor. The channel is initially in binary mode; use <code>set_binary_mode_out oc false</code> if text mode is desired.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-out_channel_of_descr", "title": "out_channel_of_descr", "contents": "out_channel_of_descr file_descr out_channel ", "rendered": "<h4 class='item'>let out_channel_of_descr: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-in_channel_of_descr", "title": "in_channel_of_descr", "contents": "Create an input channel reading from the given descriptor. The channel is initially in binary mode; use set_binary_mode_in ic false if text mode is desired.", "rendered": "Create an input channel reading from the given descriptor. The channel is initially in binary mode; use <code>set_binary_mode_in ic false</code> if text mode is desired.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-in_channel_of_descr", "title": "in_channel_of_descr", "contents": "in_channel_of_descr file_descr in_channel ", "rendered": "<h4 class='item'>let in_channel_of_descr: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Interfacing-with-the-standard-input-output-library", "title": "Interfacing with the standard input/output library", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-single_write_substring", "title": "single_write_substring", "contents": "Same as single_write, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>single_write</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-single_write_substring", "title": "single_write_substring", "contents": "single_write_substring file_descr string int int int    ", "rendered": "<h4 class='item'>let single_write_substring: (\n  <a href=\"./api/Unix.html#type-file_descr\">file_descr</a>,\n  string,\n  int,\n  int\n) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-write_substring", "title": "write_substring", "contents": "Same as write, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>write</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-write_substring", "title": "write_substring", "contents": "write_substring file_descr string int int int    ", "rendered": "<h4 class='item'>let write_substring: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, string, int, int) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-single_write", "title": "single_write", "contents": "Same as write, but attempts to write only once. Thus, if an error occurs, single_write guarantees that no data has been written.", "rendered": "Same as <code>write</code>, but attempts to write only once. Thus, if an error occurs, <code>single_write</code> guarantees that no data has been written.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-single_write", "title": "single_write", "contents": "single_write file_descr bytes int int int    ", "rendered": "<h4 class='item'>let single_write: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, bytes, int, int) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-write", "title": "write", "contents": "write fd buff ofs len writes len bytes to descriptor fd, taking them from byte sequence buff, starting at position ofs in buff. Return the number of bytes actually written. write repeats the writing operation until all bytes have been written or an error occurs.", "rendered": "<code>write fd buff ofs len</code> writes <code>len</code> bytes to descriptor <code>fd</code>, taking them from byte sequence <code>buff</code>, starting at position <code>ofs</code> in <code>buff</code>. Return the number of bytes actually written. <code>write</code> repeats the writing operation until all bytes have been written or an error occurs.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-write", "title": "write", "contents": "write file_descr bytes int int int    ", "rendered": "<h4 class='item'>let write: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, bytes, int, int) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-read", "title": "read", "contents": "read fd buff ofs len reads len bytes from descriptor fd, storing them in byte sequence buff, starting at position ofs in buff. Return the number of bytes actually read.", "rendered": "<code>read fd buff ofs len</code> reads <code>len</code> bytes from descriptor <code>fd</code>, storing them in byte sequence <code>buff</code>, starting at position <code>ofs</code> in <code>buff</code>. Return the number of bytes actually read.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-read", "title": "read", "contents": "read file_descr bytes int int int    ", "rendered": "<h4 class='item'>let read: (<a href=\"./api/Unix.html#type-file_descr\">file_descr</a>, bytes, int, int) => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close", "title": "close", "contents": "Close a file descriptor.", "rendered": "Close a file descriptor.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-close", "title": "close", "contents": "close file_descr unit ", "rendered": "<h4 class='item'>let close: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-openfile", "title": "openfile", "contents": "Open the named file with the given flags. Third argument is the permissions to give to the file if it is created (see umask). Return a file descriptor on the named file.", "rendered": "Open the named file with the given flags. Third argument is the permissions to give to the file if it is created (see umask). Return a file descriptor on the named file.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-openfile", "title": "openfile", "contents": "openfile string list open_flag file_perm file_descr   ", "rendered": "<h4 class='item'>let openfile: (\n  string,\n  list(<a href=\"./api/Unix.html#type-open_flag\">open_flag</a>),\n  <a href=\"./api/Unix.html#type-file_perm\">file_perm</a>\n) => <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-file_perm", "title": "file_perm", "contents": "The type of file access rights, e.g. 0o640 is read and write for user, read for group, none for others", "rendered": "The type of file access rights, e.g. <code>0o640</code> is read and write for user, read for group, none for others", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-file_perm", "title": "file_perm", "contents": "file_perm int", "rendered": "<h4 class='item'>type file_perm = int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-open_flag", "title": "open_flag", "contents": "The flags to openfile.", "rendered": "The flags to openfile.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-open_flag", "title": "open_flag", "contents": "open_flag ", "rendered": "<h4 class='item'>type open_flag = \n  | O_RDONLY\n  | O_WRONLY\n  | O_RDWR\n  | O_NONBLOCK\n  | O_APPEND\n  | O_CREAT\n  | O_TRUNC\n  | O_EXCL\n  | O_NOCTTY\n  | O_DSYNC\n  | O_SYNC\n  | O_RSYNC\n  | O_SHARE_DELETE\n  | O_CLOEXEC\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stderr", "title": "stderr", "contents": "File descriptor for standard error.", "rendered": "File descriptor for standard error.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stderr", "title": "stderr", "contents": "stderr file_descr", "rendered": "<h4 class='item'>let stderr: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stdout", "title": "stdout", "contents": "File descriptor for standard output.", "rendered": "File descriptor for standard output.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stdout", "title": "stdout", "contents": "stdout file_descr", "rendered": "<h4 class='item'>let stdout: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stdin", "title": "stdin", "contents": "File descriptor for standard input.", "rendered": "File descriptor for standard input.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-stdin", "title": "stdin", "contents": "stdin file_descr", "rendered": "<h4 class='item'>let stdin: <a href=\"./api/Unix.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-file_descr", "title": "file_descr", "contents": "The abstract type of file descriptors.", "rendered": "The abstract type of file descriptors.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-file_descr", "title": "file_descr", "contents": "file_descr ", "rendered": "<h4 class='item'>type file_descr</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Basic-file-input-output", "title": "Basic file input/output", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-nice", "title": "nice", "contents": "Change the process priority. The integer argument is added to the ``nice&#39;&#39; value. (Higher values of the ``nice&#39;&#39; value mean lower priorities.) Return the new nice value.", "rendered": "Change the process priority. The integer argument is added to the ``nice&#39;&#39; value. (Higher values of the ``nice&#39;&#39; value mean lower priorities.) Return the new nice value.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-nice", "title": "nice", "contents": "nice int int ", "rendered": "<h4 class='item'>let nice: int => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getppid", "title": "getppid", "contents": "Return the pid of the parent process.", "rendered": "Return the pid of the parent process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getppid", "title": "getppid", "contents": "getppid unit int ", "rendered": "<h4 class='item'>let getppid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpid", "title": "getpid", "contents": "Return the pid of the process.", "rendered": "Return the pid of the process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getpid", "title": "getpid", "contents": "getpid unit int ", "rendered": "<h4 class='item'>let getpid: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-system", "title": "system", "contents": "Execute the given command, wait until it terminates, and return its termination status. The string is interpreted by the shell /bin/sh and therefore can contain redirections, quotes, variables, etc. The result WEXITED 127 indicates that the shell couldn&#39;t be executed.", "rendered": "Execute the given command, wait until it terminates, and return its termination status. The string is interpreted by the shell <code>/bin/sh</code> and therefore can contain redirections, quotes, variables, etc. The result <code>WEXITED 127</code> indicates that the shell couldn&#39;t be executed.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-system", "title": "system", "contents": "system string process_status ", "rendered": "<h4 class='item'>let system: string => <a href=\"./api/Unix.html#type-process_status\">process_status</a></h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-waitpid", "title": "waitpid", "contents": "Same as wait, but waits for the child process whose pid is given. A pid of -1 means wait for any child. A pid of 0 means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether waitpid should return immediately without waiting, and whether it should report stopped children.", "rendered": "Same as wait, but waits for the child process whose pid is given. A pid of <code>-1</code> means wait for any child. A pid of <code>0</code> means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether <code>waitpid</code> should return immediately without waiting, and whether it should report stopped children.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-waitpid", "title": "waitpid", "contents": "waitpid list wait_flag int int process_status  ", "rendered": "<h4 class='item'>let waitpid: (list(<a href=\"./api/Unix.html#type-wait_flag\">wait_flag</a>), int) => (int, <a href=\"./api/Unix.html#type-process_status\">process_status</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-wait", "title": "wait", "contents": "Wait until one of the children processes die, and return its pid and termination status.", "rendered": "Wait until one of the children processes die, and return its pid and termination status.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-wait", "title": "wait", "contents": "wait unit int process_status ", "rendered": "<h4 class='item'>let wait: unit => (int, <a href=\"./api/Unix.html#type-process_status\">process_status</a>)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fork", "title": "fork", "contents": "Fork a new process. The returned integer is 0 for the child process, the pid of the child process for the parent process.", "rendered": "Fork a new process. The returned integer is 0 for the child process, the pid of the child process for the parent process.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-fork", "title": "fork", "contents": "fork unit int ", "rendered": "<h4 class='item'>let fork: unit => int</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execvpe", "title": "execvpe", "contents": "Same as execve, except that the program is searched in the path.", "rendered": "Same as execve, except that the program is searched in the path.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execvpe", "title": "execvpe", "contents": "execvpe string array string array string   ", "rendered": "<h4 class='item'>let execvpe: (string, array(string), array(string)) => 'a</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execvp", "title": "execvp", "contents": "Same as execv, except that the program is searched in the path.", "rendered": "Same as execv, except that the program is searched in the path.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execvp", "title": "execvp", "contents": "execvp string array string  ", "rendered": "<h4 class='item'>let execvp: (string, array(string)) => 'a</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execve", "title": "execve", "contents": "Same as execv, except that the third argument provides the environment to the program executed.", "rendered": "Same as execv, except that the third argument provides the environment to the program executed.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execve", "title": "execve", "contents": "execve string array string array string   ", "rendered": "<h4 class='item'>let execve: (string, array(string), array(string)) => 'a</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execv", "title": "execv", "contents": "execv prog args execute the program in file prog, with the arguments args, and the current process environment. These execv* functions never return: on success, the current program is replaced by the new one; on failure, a Unix_error exception is raised.", "rendered": "<code>execv prog args</code> execute the program in file <code>prog</code>, with the arguments <code>args</code>, and the current process environment. These <code>execv*</code> functions never return: on success, the current program is replaced by the new one; on failure, a Unix_error exception is raised.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-execv", "title": "execv", "contents": "execv string array string  ", "rendered": "<h4 class='item'>let execv: (string, array(string)) => 'a</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-wait_flag", "title": "wait_flag", "contents": "Flags for waitpid.", "rendered": "Flags for waitpid.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-wait_flag", "title": "wait_flag", "contents": "wait_flag ", "rendered": "<h4 class='item'>type wait_flag = | WNOHANG | WUNTRACED\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-process_status", "title": "process_status", "contents": "The termination status of a process. See module Sys for the definitions of the standard signal numbers. Note that they are not the numbers used by the OS.", "rendered": "The termination status of a process. See module Sys for the definitions of the standard signal numbers. Note that they are not the numbers used by the OS.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-process_status", "title": "process_status", "contents": "process_status int int int", "rendered": "<h4 class='item'>type process_status = \n  | WEXITED(int)\n  | WSIGNALED(int)\n  | WSTOPPED(int)\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Process-handling", "title": "Process handling", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-putenv", "title": "putenv", "contents": "Unix.putenv name value sets the value associated to a variable in the process environment. name is the name of the environment variable, and value its new associated value.", "rendered": "<code>Unix.putenv name value</code> sets the value associated to a variable in the process environment. <code>name</code> is the name of the environment variable, and <code>value</code> its new associated value.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-putenv", "title": "putenv", "contents": "putenv string string unit  ", "rendered": "<h4 class='item'>let putenv: (string, string) => unit</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getenv", "title": "getenv", "contents": "Return the value associated to a variable in the process environment. Raise Not_found if the variable is unbound. (This function is identical to getenv.)", "rendered": "Return the value associated to a variable in the process environment. Raise <code>Not_found</code> if the variable is unbound. (This function is identical to getenv.)", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-getenv", "title": "getenv", "contents": "getenv string string ", "rendered": "<h4 class='item'>let getenv: string => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-environment", "title": "environment", "contents": "Return the process environment, as an array of strings with the format ``variable=value&#39;&#39;.", "rendered": "Return the process environment, as an array of strings with the format ``variable=value&#39;&#39;.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-environment", "title": "environment", "contents": "environment unit array string ", "rendered": "<h4 class='item'>let environment: unit => array(string)</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Access-to-the-process-environment", "title": "Access to the process environment", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-handle_unix_error", "title": "handle_unix_error", "contents": "handle_unix_error f x applies f to x and returns the result. If the exception Unix_error is raised, it prints a message describing the error and exits with code 2.", "rendered": "<code>handle_unix_error f x</code> applies <code>f</code> to <code>x</code> and returns the result. If the exception <code>Unix_error</code> is raised, it prints a message describing the error and exits with code 2.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-handle_unix_error", "title": "handle_unix_error", "contents": "handle_unix_error   ", "rendered": "<h4 class='item'>let handle_unix_error: ('a => 'b, 'a) => 'b</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-error_message", "title": "error_message", "contents": "Return a string describing the given error code.", "rendered": "Return a string describing the given error code.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#value-error_message", "title": "error_message", "contents": "error_message error string ", "rendered": "<h4 class='item'>let error_message: <a href=\"./api/Unix.html#type-error\">error</a> => string</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-error", "title": "error", "contents": "The type of error codes. Errors defined in the POSIX standard and additional errors from UNIX98 and BSD. All other errors are mapped to EUNKNOWNERR.", "rendered": "The type of error codes. Errors defined in the POSIX standard and additional errors from UNIX98 and BSD. All other errors are mapped to EUNKNOWNERR.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#type-error", "title": "error", "contents": "error int", "rendered": "<h4 class='item'>type error = \n  | E2BIG\n  | EACCES\n  | EAGAIN\n  | EBADF\n  | EBUSY\n  | ECHILD\n  | EDEADLK\n  | EDOM\n  | EEXIST\n  | EFAULT\n  | EFBIG\n  | EINTR\n  | EINVAL\n  | EIO\n  | EISDIR\n  | EMFILE\n  | EMLINK\n  | ENAMETOOLONG\n  | ENFILE\n  | ENODEV\n  | ENOENT\n  | ENOEXEC\n  | ENOLCK\n  | ENOMEM\n  | ENOSPC\n  | ENOSYS\n  | ENOTDIR\n  | ENOTEMPTY\n  | ENOTTY\n  | ENXIO\n  | EPERM\n  | EPIPE\n  | ERANGE\n  | EROFS\n  | ESPIPE\n  | ESRCH\n  | EXDEV\n  | EWOULDBLOCK\n  | EINPROGRESS\n  | EALREADY\n  | ENOTSOCK\n  | EDESTADDRREQ\n  | EMSGSIZE\n  | EPROTOTYPE\n  | ENOPROTOOPT\n  | EPROTONOSUPPORT\n  | ESOCKTNOSUPPORT\n  | EOPNOTSUPP\n  | EPFNOSUPPORT\n  | EAFNOSUPPORT\n  | EADDRINUSE\n  | EADDRNOTAVAIL\n  | ENETDOWN\n  | ENETUNREACH\n  | ENETRESET\n  | ECONNABORTED\n  | ECONNRESET\n  | ENOBUFS\n  | EISCONN\n  | ENOTCONN\n  | ESHUTDOWN\n  | ETOOMANYREFS\n  | ETIMEDOUT\n  | ECONNREFUSED\n  | EHOSTDOWN\n  | EHOSTUNREACH\n  | ELOOP\n  | EOVERFLOW\n  | EUNKNOWNERR(int)\n</h4>", "breadcrumb": "Unix"},
{"href": "./api/Unix.html#Error-report", "title": "Error report", "contents": "", "rendered": "", "breadcrumb": "Unix"},
{"href": "./api/Unix.html", "title": "Unix", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Unix"},
{"href": "./api/Unix.html", "title": "Unix", "contents": "Note: all the functions of this module (except error_message and handle_unix_error) are liable to raise the Unix_error exception whenever the underlying system call signals an error.", "rendered": "Note: all the functions of this module (except <code>error_message</code> and <code>handle_unix_error</code>) are liable to raise the <code>Unix_error</code> exception whenever the underlying system call signals an error.", "breadcrumb": "Unix"},
{"href": "./api/Unix.html", "title": "Unix", "contents": "Interface to the Unix system.", "rendered": "Interface to the Unix system.", "breadcrumb": "Unix"},
{"href": "./api/Scanf.html#value-unescaped", "title": "unescaped", "contents": "Return a copy of the argument with escape sequences, following the lexical conventions of OCaml, replaced by their corresponding special characters. If there is no escape sequence in the argument, still return a copy, contrary to String.escaped.", "rendered": "Return a copy of the argument with escape sequences, following the lexical conventions of OCaml, replaced by their corresponding special characters. If there is no escape sequence in the argument, still return a copy, contrary to String.escaped.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-unescaped", "title": "unescaped", "contents": "unescaped string string ", "rendered": "<h4 class='item'>let unescaped: string => string</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-format_from_string", "title": "format_from_string", "contents": "format_from_string s fmt converts a string argument to a format string, according to the given format string fmt. Raise Scan_failure if s, considered as a format string, does not have the same type as fmt.", "rendered": "<code>format_from_string s fmt</code> converts a string argument to a format string, according to the given format string <code>fmt</code>. Raise <code>Scan_failure</code> if <code>s</code>, considered as a format string, does not have the same type as <code>fmt</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-format_from_string", "title": "format_from_string", "contents": "format_from_string string format6 format6  ", "rendered": "<h4 class='item'>let format_from_string: (\n  string,\n  <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)\n) => <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-sscanf_format", "title": "sscanf_format", "contents": "Same as bscanf_format, but reads from the given string.", "rendered": "Same as bscanf_format, but reads from the given string.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-sscanf_format", "title": "sscanf_format", "contents": "sscanf_format string format6 format6    ", "rendered": "<h4 class='item'>let sscanf_format: (\n  string,\n  <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f),\n  <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f) => 'g\n) => 'g</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-bscanf_format", "title": "bscanf_format", "contents": "bscanf_format ic fmt f reads a format string token from the formatted input channel ic, according to the given format string fmt, and applies f to the resulting format string value. Raise Scan_failure if the format string value read does not have the same type as fmt.", "rendered": "<code>bscanf_format ic fmt f</code> reads a format string token from the formatted input channel <code>ic</code>, according to the given format string <code>fmt</code>, and applies <code>f</code> to the resulting format string value. Raise <code>Scan_failure</code> if the format string value read does not have the same type as <code>fmt</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-bscanf_format", "title": "bscanf_format", "contents": "bscanf_format in_channel format6 format6    ", "rendered": "<h4 class='item'>let bscanf_format: (\n  <a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f),\n  <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f) => 'g\n) => 'g</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Reading-format-strings-from-input", "title": "Reading format strings from input", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-kfscanf", "title": "kfscanf", "contents": "Same as kscanf, but reads from the given regular input channel.", "rendered": "Same as kscanf, but reads from the given regular input channel.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-kfscanf", "title": "kfscanf", "contents": "kfscanf in_channel in_channel exn   scanner  ", "rendered": "<h4 class='item'>let kfscanf: (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  (<a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a>, exn) => 'd\n) => <a href=\"./api/Scanf.html#type-scanner\">scanner</a>('a, 'b, 'c, 'd)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-ksscanf", "title": "ksscanf", "contents": "Same as kscanf but reads from the given string.", "rendered": "Same as kscanf but reads from the given string.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-ksscanf", "title": "ksscanf", "contents": "ksscanf string in_channel exn   scanner  ", "rendered": "<h4 class='item'>let ksscanf: (string, (<a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a>, exn) => 'd) => <a href=\"./api/Scanf.html#type-scanner\">scanner</a>(\n  'a,\n  'b,\n  'c,\n  'd\n)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-kscanf", "title": "kscanf", "contents": "Same as bscanf, but takes an additional function argument ef that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function ef with the formatted input channel and the exception that aborted the scanning process as arguments.", "rendered": "Same as bscanf, but takes an additional function argument <code>ef</code> that is called in case of error: if the scanning process or some conversion fails, the scanning function aborts and calls the error handling function <code>ef</code> with the formatted input channel and the exception that aborted the scanning process as arguments.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-kscanf", "title": "kscanf", "contents": "kscanf in_channel in_channel exn   scanner  ", "rendered": "<h4 class='item'>let kscanf: (\n  <a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a>,\n  (<a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a>, exn) => 'd\n) => <a href=\"./api/Scanf.html#type-scanner\">scanner</a>('a, 'b, 'c, 'd)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-scanf", "title": "scanf", "contents": "Same as bscanf, but reads from the predefined formatted input channel stdin that is connected to Pervasives.stdin.", "rendered": "Same as bscanf, but reads from the predefined formatted input channel stdin that is connected to <code>Pervasives.stdin</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-scanf", "title": "scanf", "contents": "scanf scanner", "rendered": "<h4 class='item'>let scanf: <a href=\"./api/Scanf.html#type-scanner\">scanner</a>('a, 'b, 'c, 'd)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-sscanf", "title": "sscanf", "contents": "Same as bscanf, but reads from the given string.", "rendered": "Same as bscanf, but reads from the given string.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-sscanf", "title": "sscanf", "contents": "sscanf string scanner ", "rendered": "<h4 class='item'>let sscanf: string => <a href=\"./api/Scanf.html#type-scanner\">scanner</a>('a, 'b, 'c, 'd)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-fscanf", "title": "fscanf", "contents": "As a consequence, never mix direct low level reading and high level scanning from the same regular input channel.", "rendered": "As a consequence, never mix direct low level reading and high level scanning from the same regular input channel.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-fscanf", "title": "fscanf", "contents": "Warning: since all formatted input functions operate from a formatted input channel, be aware that each fscanf invocation will operate with a formatted input channel reading from the given channel. This extra level of bufferization can lead to a strange scanning behaviour if you use low level primitives on the channel (reading characters, seeking the reading position, and so on).", "rendered": "Warning: since all formatted input functions operate from a <em>formatted input channel</em>, be aware that each <code>fscanf</code> invocation will operate with a formatted input channel reading from the given channel. This extra level of bufferization can lead to a strange scanning behaviour if you use low level primitives on the channel (reading characters, seeking the reading position, and so on).", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-fscanf", "title": "fscanf", "contents": "Same as bscanf, but reads from the given regular input channel.", "rendered": "Same as bscanf, but reads from the given regular input channel.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-fscanf", "title": "fscanf", "contents": "fscanf in_channel scanner ", "rendered": "<h4 class='item'>let fscanf: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Scanf.html#type-scanner\">scanner</a>('a, 'b, 'c, 'd)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Specialised-formatted-input-functions", "title": "Specialised formatted input functions", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Raise Scanf.Scan_failure if the input does not match the format.", "rendered": "Raise <code>Scanf.Scan_failure</code> if the input does not match the format.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Raise Failure if a conversion to a number is not possible.", "rendered": "Raise <code>Failure</code> if a conversion to a number is not possible.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Raise End_of_file if the end of input is encountered while some more characters are needed to read the current conversion specification.", "rendered": "Raise <code>End_of_file</code> if the end of input is encountered while some more characters are needed to read the current conversion specification.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Raise Invalid_argument if the format string is invalid.", "rendered": "Raise <code>Invalid_argument</code> if the format string is invalid.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "as a consequence, scanning a %s conversion never raises exception End_of_file: if the end of input is reached the conversion succeeds and simply returns the characters read so far, or &quot;&quot; if none were ever read.", "rendered": "as a consequence, scanning a <code>%s</code> conversion never raises exception <code>End_of_file</code>: if the end of input is reached the conversion succeeds and simply returns the characters read so far, or <code>&quot;&quot;</code> if none were ever read.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Note:", "rendered": "Note:", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Scanners may raise the following exceptions when the input cannot be read according to the format string:", "rendered": "Scanners may raise the following exceptions when the input cannot be read according to the format string:", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Exceptions-during-scanning", "title": "Exceptions during scanning", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "The scanning indications introduce slight differences in the syntax of Scanf format strings, compared to those used for the Printf module. However, the scanning indications are similar to those used in the Format module; hence, when producing formatted text to be scanned by !Scanf.bscanf, it is wise to use printing functions from the Format module (or, if you need to use functions from Printf, banish or carefully double check the format strings that contain &#39;@&#39; characters).", "rendered": "The scanning indications introduce slight differences in the syntax of <code>Scanf</code> format strings, compared to those used for the <code>Printf</code> module. However, the scanning indications are similar to those used in the <code>Format</code> module; hence, when producing formatted text to be scanned by <code>!Scanf.bscanf</code>, it is wise to use printing functions from the <code>Format</code> module (or, if you need to use functions from <code>Printf</code>, banish or carefully double check the format strings that contain <code>&#39;@&#39;</code> characters).", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "As usual in format strings, % and @ characters must be escaped using %% and %@; this rule still holds within range specifications and scanning indications. For instance, &quot;%s@%%&quot; reads a string up to the next % character.", "rendered": "As usual in format strings, <code>%</code> and <code>@</code> characters must be escaped using <code>%%</code> and <code>%@</code>; this rule still holds within range specifications and scanning indications. For instance, <code>&quot;%s@%%&quot;</code> reads a string up to the next <code>%</code> character.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Note:", "rendered": "Note:", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Scanning indications appear just after the string conversions %s and %[ range ] to delimit the end of the token. A scanning indication is introduced by a @ character, followed by some plain character c. It means that the string token should end just before the next matching c (which is skipped). If no c character is encountered, the string token spreads as much as possible. For instance, &quot;%s@	&quot; reads a string up to the next tab character or to the end of input. If a @ character appears anywhere else in the format string, it is treated as a plain character.", "rendered": "Scanning indications appear just after the string conversions <code>%s</code> and <code>%[ range ]</code> to delimit the end of the token. A scanning indication is introduced by a <code>@</code> character, followed by some plain character <code>c</code>. It means that the string token should end just before the next matching <code>c</code> (which is skipped). If no <code>c</code> character is encountered, the string token spreads as much as possible. For instance, <code>&quot;%s@	&quot;</code> reads a string up to the next tab character or to the end of input. If a <code>@</code> character appears anywhere else in the format string, it is treated as a plain character.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Scanning-indications-in-format-strings", "title": "Scanning indications in format strings", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Conversion-specifications-in-format-strings", "title": "Conversion specifications in format strings", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Matching any amount of whitespace, a space in the format string also matches no amount of whitespace at all; hence, the call bscanf ib\n    &quot;Price = %d $&quot; (fun p -&gt; p) succeeds and returns 1 when reading an input with various whitespace in it, such as Price = 1 $, Price  =  1    $, or even Price=1$.", "rendered": "Matching <em>any</em> amount of whitespace, a space in the format string also matches no amount of whitespace at all; hence, the call <code>bscanf ib\n    &quot;Price = %d $&quot; (fun p -&gt; p)</code> succeeds and returns <code>1</code> when reading an input with various whitespace in it, such as <code>Price = 1 $</code>, <code>Price  =  1    $</code>, or even <code>Price=1$</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "As mentioned above, a plain character in the format string is just matched with the next character of the input; however, two characters are special exceptions to this rule: the space character (&#39; &#39; or ASCII code 32) and the line feed character (&#39;\\n&#39; or ASCII code 10). A space does not match a single space character, but any amount of &#39;whitespace&#39; in the input. More precisely, a space inside the format string matches any number of tab, space, line feed and carriage return characters. Similarly, a line feed character in the format string matches either a single line feed or a carriage return followed by a line feed.", "rendered": "As mentioned above, a plain character in the format string is just matched with the next character of the input; however, two characters are special exceptions to this rule: the space character (<code>&#39; &#39;</code> or ASCII code 32) and the line feed character (<code>&#39;\\n&#39;</code> or ASCII code 10). A space does not match a single space character, but any amount of &#39;whitespace&#39; in the input. More precisely, a space inside the format string matches <em>any number</em> of tab, space, line feed and carriage return characters. Similarly, a line feed character in the format string matches either a single line feed or a carriage return followed by a line feed.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#The-space-character-in-format-strings", "title": "The space character in format strings", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "scanning indications to specify boundaries of tokens (see scanning indication).", "rendered": "scanning indications to specify boundaries of tokens (see scanning indication).", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "conversion specifications, each of which causes reading and conversion of one argument for the function f (see conversion),", "rendered": "conversion specifications, each of which causes reading and conversion of one argument for the function <code>f</code> (see conversion),", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "plain characters, which are simply matched with the characters of the input (with a special case for space and line feed, see space),", "rendered": "plain characters, which are simply matched with the characters of the input (with a special case for space and line feed, see space),", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "The format string is a character string which contains three types of objects:", "rendered": "The format string is a character string which contains three types of objects:", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Format-string-description", "title": "Format string description", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-bscanf", "title": "bscanf", "contents": "Arguments r1 to rN are user-defined input functions that read the argument corresponding to the %r conversions specified in the format string.", "rendered": "Arguments <code>r1</code> to <code>rN</code> are user-defined input functions that read the argument corresponding to the <code>%r</code> conversions specified in the format string.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-bscanf", "title": "bscanf", "contents": "bscanf ic fmt r1 ... rN f reads arguments for the function f, from the formatted input channel ic, according to the format string fmt, and applies f to these values. The result of this call to f is returned as the result of the entire bscanf call. For instance, if f is the function fun s i -&gt; i + 1, then Scanf.sscanf &quot;x=  1&quot; &quot;%s = %i&quot; f returns 2.", "rendered": "<code>bscanf ic fmt r1 ... rN f</code> reads arguments for the function <code>f</code>, from the formatted input channel <code>ic</code>, according to the format string <code>fmt</code>, and applies <code>f</code> to these values. The result of this call to <code>f</code> is returned as the result of the entire <code>bscanf</code> call. For instance, if <code>f</code> is the function <code>fun s i -&gt; i + 1</code>, then <code>Scanf.sscanf &quot;x=  1&quot; &quot;%s = %i&quot; f</code> returns <code>2</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-bscanf", "title": "bscanf", "contents": "bscanf in_channel scanner ", "rendered": "<h4 class='item'>let bscanf: <a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a> => <a href=\"./api/Scanf.html#type-scanner\">scanner</a>('a, 'b, 'c, 'd)</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#The-general-formatted-input-function", "title": "The general formatted input function", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-scanner", "title": "scanner", "contents": "If the format fmt has some %r indications, the corresponding input functions must be provided before the receiver f argument. For instance, if read_elem is an input function for values of type t, then bscanf ic &quot;%r;&quot; read_elem f reads a value v of type t followed by a &#39;;&#39; character, and returns f v.", "rendered": "If the format <code>fmt</code> has some <code>%r</code> indications, the corresponding input functions must be provided before the receiver <code>f</code> argument. For instance, if <code>read_elem</code> is an input function for values of type <code>t</code>, then <code>bscanf ic &quot;%r;&quot; read_elem f</code> reads a value <code>v</code> of type <code>t</code> followed by a <code>&#39;;&#39;</code> character, and returns <code>f v</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-scanner", "title": "scanner", "contents": "For instance, the scanf function below has type (&#39;a, &#39;b, &#39;c, &#39;d)\n    scanner, since it is a formatted input function that reads from Scanning.stdin: scanf fmt f applies f to the arguments specified by fmt, reading those arguments from Pervasives.stdin as expected.", "rendered": "For instance, the <code>scanf</code> function below has type <code>(&#39;a, &#39;b, &#39;c, &#39;d)\n    scanner</code>, since it is a formatted input function that reads from <code>Scanning.stdin</code>: <code>scanf fmt f</code> applies <code>f</code> to the arguments specified by <code>fmt</code>, reading those arguments from <code>Pervasives.stdin</code> as expected.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-scanner", "title": "scanner", "contents": "The type of formatted input scanners: (&#39;a, &#39;b, &#39;c, &#39;d) scanner is the type of a formatted input function that reads from some formatted input channel according to some format string; more precisely, if scan is some formatted input function, then scan\n    ic fmt f applies f to the arguments specified by the format string fmt, when scan has read those arguments from the formatted input channel ic.", "rendered": "The type of formatted input scanners: <code>(&#39;a, &#39;b, &#39;c, &#39;d) scanner</code> is the type of a formatted input function that reads from some formatted input channel according to some format string; more precisely, if <code>scan</code> is some formatted input function, then <code>scan\n    ic fmt f</code> applies <code>f</code> to the arguments specified by the format string <code>fmt</code>, when <code>scan</code> has read those arguments from the formatted input channel <code>ic</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-scanner", "title": "scanner", "contents": "scanner format6 in_channel  ", "rendered": "<h4 class='item'>type scanner('a, 'b, 'c, 'd) = <a href=\"./api/Pervasives.html#type-format6\" title=\"Pervasives.format6\">format6</a>(\n  'a,\n  <a href=\"./api/Scanf.html#type-Scanning.in_channel\" title=\"Scanning.in_channel\">in_channel</a>,\n  'b,\n  'c,\n  'a => 'd,\n  'd\n) => 'c</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Type-of-formatted-input-functions", "title": "Type of formatted input functions", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.stdib", "title": "Scanning.stdib", "contents": "A deprecated alias for Scanning.stdin, the scanning buffer reading from Pervasives.stdin.", "rendered": "A deprecated alias for <code>Scanning.stdin</code>, the scanning buffer reading from <code>Pervasives.stdin</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.stdib", "title": "Scanning.stdib", "contents": "stdib in_channel", "rendered": "<h4 class='item'>let stdib: <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.name_of_input", "title": "Scanning.name_of_input", "contents": "Scanning.name_of_input ic returns the name of the character source for the formatted input channel ic.", "rendered": "<code>Scanning.name_of_input ic</code> returns the name of the character source for the formatted input channel <code>ic</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.name_of_input", "title": "Scanning.name_of_input", "contents": "name_of_input in_channel string ", "rendered": "<h4 class='item'>let name_of_input: <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a> => string</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.beginning_of_input", "title": "Scanning.beginning_of_input", "contents": "Scanning.beginning_of_input ic tests the beginning of input condition of the given formatted input channel.", "rendered": "<code>Scanning.beginning_of_input ic</code> tests the beginning of input condition of the given formatted input channel.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.beginning_of_input", "title": "Scanning.beginning_of_input", "contents": "beginning_of_input in_channel bool ", "rendered": "<h4 class='item'>let beginning_of_input: <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a> => bool</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.end_of_input", "title": "Scanning.end_of_input", "contents": "Scanning.end_of_input ic tests the end-of-input condition of the given formatted input channel.", "rendered": "<code>Scanning.end_of_input ic</code> tests the end-of-input condition of the given formatted input channel.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.end_of_input", "title": "Scanning.end_of_input", "contents": "end_of_input in_channel bool ", "rendered": "<h4 class='item'>let end_of_input: <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a> => bool</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_channel", "title": "Scanning.from_channel", "contents": "Scanning.from_channel ic returns a formatted input channel which reads from the regular input channel ic argument, starting at the current reading position.", "rendered": "<code>Scanning.from_channel ic</code> returns a formatted input channel which reads from the regular input channel <code>ic</code> argument, starting at the current reading position.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_channel", "title": "Scanning.from_channel", "contents": "from_channel in_channel in_channel ", "rendered": "<h4 class='item'>let from_channel: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_function", "title": "Scanning.from_function", "contents": "When the function has no more character to provide, it must signal an end-of-input condition by raising the exception End_of_file.", "rendered": "When the function has no more character to provide, it <em>must</em> signal an end-of-input condition by raising the exception <code>End_of_file</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_function", "title": "Scanning.from_function", "contents": "When scanning needs one more character, the given function is called.", "rendered": "When scanning needs one more character, the given function is called.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_function", "title": "Scanning.from_function", "contents": "Scanning.from_function f returns a formatted input channel with the given function as its reading method.", "rendered": "<code>Scanning.from_function f</code> returns a formatted input channel with the given function as its reading method.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_function", "title": "Scanning.from_function", "contents": "from_function unit char  in_channel ", "rendered": "<h4 class='item'>let from_function: unit => char => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_string", "title": "Scanning.from_string", "contents": "Scanning.from_string s returns a formatted input channel which reads from the given string. Reading starts from the first character in the string. The end-of-input condition is set when the end of the string is reached.", "rendered": "<code>Scanning.from_string s</code> returns a formatted input channel which reads from the given string. Reading starts from the first character in the string. The end-of-input condition is set when the end of the string is reached.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_string", "title": "Scanning.from_string", "contents": "from_string string in_channel ", "rendered": "<h4 class='item'>let from_string: string => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_file_bin", "title": "Scanning.from_file_bin", "contents": "An alias for open_in_bin above.", "rendered": "An alias for <code>open_in_bin</code> above.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_file_bin", "title": "Scanning.from_file_bin", "contents": "from_file_bin string in_channel ", "rendered": "<h4 class='item'>let from_file_bin: string => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_file", "title": "Scanning.from_file", "contents": "An alias for open_in above.", "rendered": "An alias for <code>open_in</code> above.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.from_file", "title": "Scanning.from_file", "contents": "from_file file_name in_channel ", "rendered": "<h4 class='item'>let from_file: <a href=\"./api/Scanf.html#type-Scanning.file_name\">file_name</a> => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.close_in", "title": "Scanning.close_in", "contents": "Closes the Pervasives.in_channel associated with the given Scanning.in_channel formatted input channel.", "rendered": "Closes the <code>Pervasives.in_channel</code> associated with the given <code>Scanning.in_channel</code> formatted input channel.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.close_in", "title": "Scanning.close_in", "contents": "close_in in_channel unit ", "rendered": "<h4 class='item'>let close_in: <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a> => unit</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.open_in_bin", "title": "Scanning.open_in_bin", "contents": "Scanning.open_in_bin fname returns a formatted input channel for bufferized reading in binary mode from file fname.", "rendered": "<code>Scanning.open_in_bin fname</code> returns a formatted input channel for bufferized reading in binary mode from file <code>fname</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.open_in_bin", "title": "Scanning.open_in_bin", "contents": "open_in_bin file_name in_channel ", "rendered": "<h4 class='item'>let open_in_bin: <a href=\"./api/Scanf.html#type-Scanning.file_name\">file_name</a> => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.open_in", "title": "Scanning.open_in", "contents": "Note: open_in returns a formatted input channel that efficiently reads characters in large chunks; in contrast, from_channel below returns formatted input channels that must read one character at a time, leading to a much slower scanning rate.", "rendered": "Note: <code>open_in</code> returns a formatted input channel that efficiently reads characters in large chunks; in contrast, <code>from_channel</code> below returns formatted input channels that must read one character at a time, leading to a much slower scanning rate.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.open_in", "title": "Scanning.open_in", "contents": "Scanning.open_in fname returns a formatted input channel for bufferized reading in text mode from file fname.", "rendered": "<code>Scanning.open_in fname</code> returns a formatted input channel for bufferized reading in text mode from file <code>fname</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.open_in", "title": "Scanning.open_in", "contents": "open_in file_name in_channel ", "rendered": "<h4 class='item'>let open_in: <a href=\"./api/Scanf.html#type-Scanning.file_name\">file_name</a> => <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.file_name", "title": "Scanning.file_name", "contents": "A convenient alias to designate a file name.", "rendered": "A convenient alias to designate a file name.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.file_name", "title": "Scanning.file_name", "contents": "file_name string", "rendered": "<h4 class='item'>type file_name = string</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.stdin", "title": "Scanning.stdin", "contents": "Note: in the interactive system, when input is read from stdin, the newline character that triggers the evaluation is incorporated in the input; thus, the scanning specifications must properly skip this additional newline character (for instance, simply add a &#39;\\n&#39; as the last character of the format string).", "rendered": "Note: in the interactive system, when input is read from <code>stdin</code>, the newline character that triggers the evaluation is incorporated in the input; thus, the scanning specifications must properly skip this additional newline character (for instance, simply add a <code>&#39;\\n&#39;</code> as the last character of the format string).", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.stdin", "title": "Scanning.stdin", "contents": "The standard input notion for the Scanf module. Scanning.stdin is the formatted input channel attached to Pervasives.stdin.", "rendered": "The standard input notion for the <code>Scanf</code> module. <code>Scanning.stdin</code> is the formatted input channel attached to <code>Pervasives.stdin</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#value-Scanning.stdin", "title": "Scanning.stdin", "contents": "stdin in_channel", "rendered": "<h4 class='item'>let stdin: <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.scanbuf", "title": "Scanning.scanbuf", "contents": "Note: a scanning action may often require to examine one character in advance; when this &#39;lookahead&#39; character does not belong to the token read, it is stored back in the scanning buffer and becomes the next character yet to be read.", "rendered": "Note: a scanning action may often require to examine one character in advance; when this &#39;lookahead&#39; character does not belong to the token read, it is stored back in the scanning buffer and becomes the next character yet to be read.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.scanbuf", "title": "Scanning.scanbuf", "contents": "The type of scanning buffers. A scanning buffer is the source from which a formatted input function gets characters. The scanning buffer holds the current state of the scan, plus a function to get the next char from the input, and a token buffer to store the string matched so far.", "rendered": "The type of scanning buffers. A scanning buffer is the source from which a formatted input function gets characters. The scanning buffer holds the current state of the scan, plus a function to get the next char from the input, and a token buffer to store the string matched so far.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.scanbuf", "title": "Scanning.scanbuf", "contents": "scanbuf in_channel", "rendered": "<h4 class='item'>type scanbuf = <a href=\"./api/Scanf.html#type-Scanning.in_channel\">in_channel</a></h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.in_channel", "title": "Scanning.in_channel", "contents": "The notion of input channel for the Scanf module: those channels provide all the machinery necessary to read from a given Pervasives.in_channel value. A Scanf.Scanning.in_channel value is also called a formatted input channel or equivalently a scanning buffer. The type scanbuf below is an alias for in_channel.", "rendered": "The notion of input channel for the <code>Scanf</code> module: those channels provide all the machinery necessary to read from a given <code>Pervasives.in_channel</code> value. A <code>Scanf.Scanning.in_channel</code> value is also called a <em>formatted input channel</em> or equivalently a <em>scanning buffer</em>. The type <code>scanbuf</code> below is an alias for <code>in_channel</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#type-Scanning.in_channel", "title": "Scanning.in_channel", "contents": "in_channel ", "rendered": "<h4 class='item'>type in_channel</h4>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#module-Scanning", "title": "Scanning", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#module-Scanning", "title": "Scanning", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Formatted-input-channel", "title": "Formatted input channel", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "The OCaml scanning facility is reminiscent of the corresponding C feature. However, it is also largely different, simpler, and yet more powerful: the formatted input functions are higher-order functionals and the parameter passing mechanism is just the regular function application not the variable assignment based mechanism which is typical for formatted input in imperative languages; the OCaml format strings also feature useful additions to easily define complex tokens; as expected within a functional programming language, the formatted input functions also support polymorphism, in particular arbitrary interaction with polymorphic user-defined scanners. Furthermore, the OCaml formatted input facility is fully type-checked at compile time.", "rendered": "The OCaml scanning facility is reminiscent of the corresponding C feature. However, it is also largely different, simpler, and yet more powerful: the formatted input functions are higher-order functionals and the parameter passing mechanism is just the regular function application not the variable assignment based mechanism which is typical for formatted input in imperative languages; the OCaml format strings also feature useful additions to easily define complex tokens; as expected within a functional programming language, the formatted input functions also support polymorphism, in particular arbitrary interaction with polymorphic user-defined scanners. Furthermore, the OCaml formatted input facility is fully type-checked at compile time.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Formatted-input-as-a-functional-feature", "title": "Formatted input as a functional feature", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "if we use stdin as the source of characters (stdin is the predefined formatted input channel that reads from standard input),", "rendered": "if we use <code>stdin</code> as the source of characters (stdin is the predefined formatted input channel that reads from standard input),", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "if we define the receiver f as let f x = x + 1,", "rendered": "if we define the receiver <code>f</code> as <code>let f x = x + 1</code>,", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "then bscanf Scanning.stdin &quot;%d&quot; f reads an integer n from the standard input and returns f n (that is n + 1). Thus, if we evaluate bscanf stdin &quot;%d&quot; f, and then enter 41 at the keyboard, we get 42 as the final result.", "rendered": "then <code>bscanf Scanning.stdin &quot;%d&quot; f</code> reads an integer <code>n</code> from the standard input and returns <code>f n</code> (that is <code>n + 1</code>). Thus, if we evaluate <code>bscanf stdin &quot;%d&quot; f</code>, and then enter <code>41</code> at the keyboard, we get <code>42</code> as the final result.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "For instance,", "rendered": "For instance,", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "As suggested above, the expression bscanf ic &quot;%d&quot; f reads a decimal integer n from the source of characters ic and returns f n.", "rendered": "As suggested above, the expression <code>bscanf ic &quot;%d&quot; f</code> reads a decimal integer <code>n</code> from the source of characters <code>ic</code> and returns <code>f n</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#A-simple-example", "title": "A simple example", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "the third argument is a receiver function that is applied to the values read.", "rendered": "the third argument is a <em>receiver function</em> that is applied to the values read.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "the second argument is a format string that specifies the values to read,", "rendered": "the second argument is a format string that specifies the values to read,", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "the first argument is a source of characters for the input,", "rendered": "the first argument is a source of characters for the input,", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "ic is a source of characters (typically a formatted input channel with type in_channel),", "rendered": "<code>ic</code> is a source of characters (typically a <em>formatted input channel</em> with type in_channel),", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "fmt is a format string (the same format strings as those used to print material with module Printf or Format),", "rendered": "<code>fmt</code> is a format string (the same format strings as those used to print material with module Printf or Format),", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "f is a function that has as many arguments as the number of values to read in the input.", "rendered": "<code>f</code> is a function that has as many arguments as the number of values to read in the input.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Hence, a typical call to the formatted input function bscanf is bscanf ic fmt f, where:", "rendered": "Hence, a typical call to the formatted input function bscanf is <code>bscanf ic fmt f</code>, where:", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Generally speaking, the formatted input functions have 3 arguments:", "rendered": "Generally speaking, the formatted input functions have 3 arguments:", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "The formatted input functions can read from any kind of input, including strings, files, or anything that can return characters. The more general source of characters is named a formatted input channel (or scanning buffer) and has type in_channel. The more general formatted input function reads from any scanning buffer and is named bscanf.", "rendered": "The formatted input functions can read from any kind of input, including strings, files, or anything that can return characters. The more general source of characters is named a <em>formatted input channel</em> (or <em>scanning buffer</em>) and has type in_channel. The more general formatted input function reads from any scanning buffer and is named <code>bscanf</code>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "The module Scanf provides formatted input functions or scanners.", "rendered": "The module <code>Scanf</code> provides formatted input functions or <em>scanners</em>.", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Functional-input-with-format-strings", "title": "Functional input with format strings", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html#Introduction", "title": "Introduction", "contents": "", "rendered": "", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Scanf"},
{"href": "./api/Scanf.html", "title": "Scanf", "contents": "Formatted input functions.", "rendered": "Formatted input functions.", "breadcrumb": "Scanf"},
{"href": "./api/Format.html#value-pp_get_all_formatter_output_functions", "title": "pp_get_all_formatter_output_functions", "contents": "Subsumed by pp_get_formatter_out_functions.", "rendered": "Subsumed by <code>pp_get_formatter_out_functions</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_all_formatter_output_functions", "title": "pp_get_all_formatter_output_functions", "contents": "Deprecated: Subsumed by pp_get_formatter_out_functions.\n\n", "rendered": "Deprecated: <p>Subsumed by <code>pp_get_formatter_out_functions</code>.</p>\n", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_all_formatter_output_functions", "title": "pp_get_all_formatter_output_functions", "contents": "pp_get_all_formatter_output_functions formatter unit string int int unit    unit unit  unit unit  int unit   ", "rendered": "<h4 class='item'>let pp_get_all_formatter_output_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  unit\n) => (\n  (string, int, int) => unit,\n  unit => unit,\n  unit => unit,\n  int => unit\n)</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_all_formatter_output_functions", "title": "pp_set_all_formatter_output_functions", "contents": "Subsumed by pp_set_formatter_out_functions.", "rendered": "Subsumed by <code>pp_set_formatter_out_functions</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_all_formatter_output_functions", "title": "pp_set_all_formatter_output_functions", "contents": "Deprecated: Subsumed by pp_set_formatter_out_functions.\n\n", "rendered": "Deprecated: <p>Subsumed by <code>pp_set_formatter_out_functions</code>.</p>\n", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_all_formatter_output_functions", "title": "pp_set_all_formatter_output_functions", "contents": "pp_set_all_formatter_output_functions formatter string int int unit    unit unit  unit unit  int unit  unit  out flush newline spaces", "rendered": "<h4 class='item'>let pp_set_all_formatter_output_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  ~out: (string, int, int) => unit,\n  ~flush: unit => unit,\n  ~newline: unit => unit,\n  ~spaces: int => unit\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_all_formatter_output_functions", "title": "get_all_formatter_output_functions", "contents": "Subsumed by get_formatter_out_functions.", "rendered": "Subsumed by <code>get_formatter_out_functions</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_all_formatter_output_functions", "title": "get_all_formatter_output_functions", "contents": "Deprecated: Subsumed by get_formatter_out_functions.\n\n", "rendered": "Deprecated: <p>Subsumed by <code>get_formatter_out_functions</code>.</p>\n", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_all_formatter_output_functions", "title": "get_all_formatter_output_functions", "contents": "get_all_formatter_output_functions unit string int int unit    unit unit  unit unit  int unit  ", "rendered": "<h4 class='item'>let get_all_formatter_output_functions: unit => (\n  (string, int, int) => unit,\n  unit => unit,\n  unit => unit,\n  int => unit\n)</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_all_formatter_output_functions", "title": "set_all_formatter_output_functions", "contents": "Subsumed by set_formatter_out_functions.", "rendered": "Subsumed by <code>set_formatter_out_functions</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_all_formatter_output_functions", "title": "set_all_formatter_output_functions", "contents": "Deprecated: Subsumed by set_formatter_out_functions.\n\n", "rendered": "Deprecated: <p>Subsumed by <code>set_formatter_out_functions</code>.</p>\n", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_all_formatter_output_functions", "title": "set_all_formatter_output_functions", "contents": "set_all_formatter_output_functions string int int unit    unit unit  unit unit  int unit  unit out flush newline spaces", "rendered": "<h4 class='item'>let set_all_formatter_output_functions: (\n  ~out: (string, int, int) => unit,\n  ~flush: unit => unit,\n  ~newline: unit => unit,\n  ~spaces: int => unit\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-kprintf", "title": "kprintf", "contents": "An alias for ksprintf.", "rendered": "An alias for <code>ksprintf</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-kprintf", "title": "kprintf", "contents": "Deprecated: An alias for ksprintf.\n\n", "rendered": "Deprecated: <p>An alias for <code>ksprintf</code>.</p>\n", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-kprintf", "title": "kprintf", "contents": "kprintf string  format4 unit string  ", "rendered": "<h4 class='item'>let kprintf: (\n  string => 'a,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, unit, string, 'a)\n) => 'b</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-bprintf", "title": "bprintf", "contents": "If you need to print to some buffer b, you must first define a formatter writing to b, using let to_b = formatter_of_buffer b; then use regular calls to Format.fprintf on formatter to_b.", "rendered": "If you need to print to some buffer <code>b</code>, you must first define a formatter writing to <code>b</code>, using <code>let to_b = formatter_of_buffer b</code>; then use regular calls to <code>Format.fprintf</code> on formatter <code>to_b</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-bprintf", "title": "bprintf", "contents": "This function is error prone. Do not use it.", "rendered": "This function is error prone. Do not use it.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-bprintf", "title": "bprintf", "contents": "Deprecated: This function is error prone. Do not use it.\n\nIf you need to print to some buffer b, you must first define a formatter writing to b, using let to_b = formatter_of_buffer b; then use regular calls to Format.fprintf on formatter to_b.\n\n", "rendered": "Deprecated: <p>This function is error prone. Do not use it.</p>\n<p>If you need to print to some buffer <code>b</code>, you must first define a formatter writing to <code>b</code>, using <code>let to_b = formatter_of_buffer b</code>; then use regular calls to <code>Format.fprintf</code> on formatter <code>to_b</code>.</p>\n", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-bprintf", "title": "bprintf", "contents": "bprintf Buffer t format formatter unit  ", "rendered": "<h4 class='item'>let bprintf: (<a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit)) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Deprecated", "title": "Deprecated", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-ksprintf", "title": "ksprintf", "contents": "Same as sprintf above, but instead of returning the string, passes it to the first argument.", "rendered": "Same as <code>sprintf</code> above, but instead of returning the string, passes it to the first argument.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-ksprintf", "title": "ksprintf", "contents": "ksprintf string  format4 unit string  ", "rendered": "<h4 class='item'>let ksprintf: (\n  string => 'a,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, unit, string, 'a)\n) => 'b</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-ikfprintf", "title": "ikfprintf", "contents": "Same as kfprintf above, but does not print anything. Useful to ignore some material when conditionally printing.", "rendered": "Same as <code>kfprintf</code> above, but does not print anything. Useful to ignore some material when conditionally printing.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-ikfprintf", "title": "ikfprintf", "contents": "ikfprintf formatter  formatter format4 formatter unit   ", "rendered": "<h4 class='item'>let ikfprintf: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a> => 'a,\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit, 'a)\n) => 'b</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-kfprintf", "title": "kfprintf", "contents": "Same as fprintf above, but instead of returning immediately, passes the formatter to its first argument at the end of printing.", "rendered": "Same as <code>fprintf</code> above, but instead of returning immediately, passes the formatter to its first argument at the end of printing.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-kfprintf", "title": "kfprintf", "contents": "kfprintf formatter  formatter format4 formatter unit   ", "rendered": "<h4 class='item'>let kfprintf: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a> => 'a,\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit, 'a)\n) => 'b</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Formatted output functions with continuations.", "rendered": "Formatted output functions with continuations.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-ifprintf", "title": "ifprintf", "contents": "Same as fprintf above, but does not print anything. Useful to ignore some material when conditionally printing.", "rendered": "Same as <code>fprintf</code> above, but does not print anything. Useful to ignore some material when conditionally printing.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-ifprintf", "title": "ifprintf", "contents": "ifprintf formatter format formatter unit  ", "rendered": "<h4 class='item'>let ifprintf: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit)) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-asprintf", "title": "asprintf", "contents": "Same as printf above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. The type of asprintf is general enough to interact nicely with %a conversions.", "rendered": "Same as <code>printf</code> above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. The type of <code>asprintf</code> is general enough to interact nicely with <code>%a</code> conversions.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-asprintf", "title": "asprintf", "contents": "asprintf format4 formatter unit string ", "rendered": "<h4 class='item'>let asprintf: <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('a, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit, string) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-sprintf", "title": "sprintf", "contents": "Alternatively, you can use Format.fprintf with a formatter writing to a buffer of your own: flushing the formatter and the buffer at the end of pretty-printing returns the desired string.", "rendered": "Alternatively, you can use <code>Format.fprintf</code> with a formatter writing to a buffer of your own: flushing the formatter and the buffer at the end of pretty-printing returns the desired string.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-sprintf", "title": "sprintf", "contents": "In case of multiple and related calls to sprintf to output material on a single string, you should consider using fprintf with the predefined formatter str_formatter and call flush_str_formatter () to get the final result.", "rendered": "In case of multiple and related calls to <code>sprintf</code> to output material on a single string, you should consider using <code>fprintf</code> with the predefined formatter <code>str_formatter</code> and call <code>flush_str_formatter ()</code> to get the final result.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-sprintf", "title": "sprintf", "contents": "Same as printf above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. Note that the pretty-printer queue is flushed at the end of each call to sprintf.", "rendered": "Same as <code>printf</code> above, but instead of printing on a formatter, returns a string containing the result of formatting the arguments. Note that the pretty-printer queue is flushed at the end of <em>each call</em> to <code>sprintf</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-sprintf", "title": "sprintf", "contents": "sprintf format unit string ", "rendered": "<h4 class='item'>let sprintf: <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, unit, string) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-eprintf", "title": "eprintf", "contents": "Same as fprintf above, but output on err_formatter.", "rendered": "Same as <code>fprintf</code> above, but output on <code>err_formatter</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-eprintf", "title": "eprintf", "contents": "eprintf format formatter unit ", "rendered": "<h4 class='item'>let eprintf: <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-printf", "title": "printf", "contents": "Same as fprintf above, but output on std_formatter.", "rendered": "Same as <code>fprintf</code> above, but output on <code>std_formatter</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-printf", "title": "printf", "contents": "printf format formatter unit ", "rendered": "<h4 class='item'>let printf: <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@@: print a single @ character.", "rendered": "<code>@@</code>: print a single <code>@</code> character.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@\\n: force a newline, as with force_newline ().", "rendered": "<code>@\\n</code>: force a newline, as with <code>force_newline ()</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@?: flush the pretty printer as with print_flush (). This is equivalent to the conversion %!.", "rendered": "<code>@?</code>: flush the pretty printer as with <code>print_flush ()</code>. This is equivalent to the conversion <code>%!</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@\\}: close the most recently opened tag.", "rendered": "<code>@\\}</code>: close the most recently opened tag.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@\\{: open a tag. The name of the tag may be optionally specified with the following syntax: the &lt; character, followed by an optional string specification, and the closing &gt; character. The string specification is any character string that does not contain the closing character &#39;&gt;&#39;. If omitted, the tag name defaults to the empty string. For more details about tags, see the functions open_tag and close_tag.", "rendered": "<code>@\\{</code>: open a tag. The name of the tag may be optionally specified with the following syntax: the <code>&lt;</code> character, followed by an optional string specification, and the closing <code>&gt;</code> character. The string specification is any character string that does not contain the closing character <code>&#39;&gt;&#39;</code>. If omitted, the tag name defaults to the empty string. For more details about tags, see the functions <code>open_tag</code> and <code>close_tag</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@&lt;n&gt;: print the following item as if it were of length n. Hence, printf &quot;@&lt;0&gt;%s&quot; arg prints arg as a zero length string. If @&lt;n&gt; is not followed by a conversion specification, then the following character of the format is printed as if it were of length n.", "rendered": "<code>@&lt;n&gt;</code>: print the following item as if it were of length <code>n</code>. Hence, <code>printf &quot;@&lt;0&gt;%s&quot; arg</code> prints <code>arg</code> as a zero length string. If <code>@&lt;n&gt;</code> is not followed by a conversion specification, then the following character of the format is printed as if it were of length <code>n</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@.: flush the pretty printer and output a new line, as with print_newline ().", "rendered": "<code>@.</code>: flush the pretty printer and output a new line, as with <code>print_newline ()</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@;: output a fully specified good break as with print_break. The nspaces and offset parameters of the break may be optionally specified with the following syntax: the &lt; character, followed by an integer nspaces value, then an integer offset, and a closing &gt; character. If no parameters are provided, the good break defaults to a good break space.", "rendered": "<code>@;</code>: output a fully specified good break as with <code>print_break</code>. The <code>nspaces</code> and <code>offset</code> parameters of the break may be optionally specified with the following syntax: the <code>&lt;</code> character, followed by an integer <code>nspaces</code> value, then an integer <code>offset</code>, and a closing <code>&gt;</code> character. If no parameters are provided, the good break defaults to a good break space.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@ : output a good break space, as with print_space ().", "rendered": "<code>@ </code>: output a good break space, as with <code>print_space ()</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@,: output a good break hint, as with print_cut ().", "rendered": "<code>@,</code>: output a good break hint, as with <code>print_cut ()</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@]: close the most recently opened pretty-printing box.", "rendered": "<code>@]</code>: close the most recently opened pretty-printing box.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@[: open a pretty-printing box. The type and offset of the box may be optionally specified with the following syntax: the &lt; character, followed by an optional box type indication, then an optional integer offset, and the closing &gt; character. Box type is one of h, v, hv, b, or hov, which stand respectively for an horizontal box, a vertical box, an &#39;horizontal-vertical&#39; box, or an &#39;horizontal or vertical&#39; box (b standing for an &#39;horizontal or vertical&#39; box demonstrating indentation and hov standing for a regular&#39;horizontal or vertical&#39; box). For instance, @[&lt;hov 2&gt; opens an &#39;horizontal or vertical&#39; box with indentation 2 as obtained with open_hovbox 2. For more details about boxes, see the various box opening functions open_*box.", "rendered": "<code>@[</code>: open a pretty-printing box. The type and offset of the box may be optionally specified with the following syntax: the <code>&lt;</code> character, followed by an optional box type indication, then an optional integer offset, and the closing <code>&gt;</code> character. Box type is one of <code>h</code>, <code>v</code>, <code>hv</code>, <code>b</code>, or <code>hov</code>, which stand respectively for an horizontal box, a vertical box, an &#39;horizontal-vertical&#39; box, or an &#39;horizontal or vertical&#39; box (<code>b</code> standing for an &#39;horizontal or vertical&#39; box demonstrating indentation and <code>hov</code> standing for a regular&#39;horizontal or vertical&#39; box). For instance, <code>@[&lt;hov 2&gt;</code> opens an &#39;horizontal or vertical&#39; box with indentation 2 as obtained with <code>open_hovbox 2</code>. For more details about boxes, see the various box opening functions <code>open_*box</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Note: If you need to prevent the interpretation of a @ character as a pretty-printing indication, you can also escape it with a % character.", "rendered": "Note: If you need to prevent the interpretation of a <code>@</code> character as a pretty-printing indication, you can also escape it with a <code>%</code> character.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Example: printf &quot;@[%s@ %d@]@.&quot; &quot;x =&quot; 1 is equivalent to open_box (); print_string &quot;x =&quot;; print_space ();\n    print_int 1; close_box (); print_newline (). It prints x = 1 within a pretty-printing box.", "rendered": "Example: <code>printf &quot;@[%s@ %d@]@.&quot; &quot;x =&quot; 1</code> is equivalent to <code>open_box (); print_string &quot;x =&quot;; print_space ();\n    print_int 1; close_box (); print_newline ()</code>. It prints <code>x = 1</code> within a pretty-printing box.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "The pretty-printing indication characters are introduced by a @ character, and their meanings are:", "rendered": "The pretty-printing indication characters are introduced by a <code>@</code> character, and their meanings are:", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "The format fmt is a character string which contains three types of objects: plain characters and conversion specifications as specified in the Printf module, and pretty-printing indications specific to the Format module.", "rendered": "The format <code>fmt</code> is a character string which contains three types of objects: plain characters and conversion specifications as specified in the <code>Printf</code> module, and pretty-printing indications specific to the <code>Format</code> module.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "fprintf ff fmt arg1 ... argN formats the arguments arg1 to argN according to the format string fmt, and outputs the resulting string on the formatter ff.", "rendered": "<code>fprintf ff fmt arg1 ... argN</code> formats the arguments <code>arg1</code> to <code>argN</code> according to the format string <code>fmt</code>, and outputs the resulting string on the formatter <code>ff</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-fprintf", "title": "fprintf", "contents": "fprintf formatter format formatter unit  ", "rendered": "<h4 class='item'>let fprintf: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Format.html#type-formatter\">formatter</a>, unit)) => 'a</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#printf-like-functions-for-pretty-printing.", "title": "printf like functions for pretty-printing.", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_text", "title": "pp_print_text", "contents": "pp_print_text ppf s prints s with spaces and newlines respectively printed with pp_print_space and pp_force_newline.", "rendered": "<code>pp_print_text ppf s</code> prints <code>s</code> with spaces and newlines respectively printed with pp_print_space and pp_force_newline.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_text", "title": "pp_print_text", "contents": "pp_print_text formatter string unit  ", "rendered": "<h4 class='item'>let pp_print_text: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, string) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_list", "title": "pp_print_list", "contents": "pp_print_list ?pp_sep pp_v ppf l prints the list l. pp_v is used on the elements of l and each element is separated by a call to pp_sep (defaults to pp_print_cut). Does nothing on empty lists.", "rendered": "<code>pp_print_list ?pp_sep pp_v ppf l</code> prints the list <code>l</code>. <code>pp_v</code> is used on the elements of <code>l</code> and each element is separated by a call to <code>pp_sep</code> (defaults to pp_print_cut). Does nothing on empty lists.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_list", "title": "pp_print_list", "contents": "pp_print_list option formatter unit unit   formatter unit   formatter list unit pp_sep   ", "rendered": "<h4 class='item'>let pp_print_list: (\n  ~?pp_sep: option((<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit),\n  (<a href=\"./api/Format.html#type-formatter\">formatter</a>, 'a) => unit,\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  list('a)\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Convenience-formatting-functions.", "title": "Convenience formatting functions.", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_formatter_out_functions", "title": "pp_get_formatter_out_functions", "contents": "These functions are the basic ones: usual functions operating on the standard formatter are defined via partial evaluation of these primitives. For instance, print_string is equal to pp_print_string std_formatter.", "rendered": "These functions are the basic ones: usual functions operating on the standard formatter are defined via partial evaluation of these primitives. For instance, <code>print_string</code> is equal to <code>pp_print_string std_formatter</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_formatter_out_functions", "title": "pp_get_formatter_out_functions", "contents": "pp_get_formatter_out_functions formatter unit formatter_out_functions  ", "rendered": "<h4 class='item'>let pp_get_formatter_out_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  unit\n) => <a href=\"./api/Format.html#type-formatter_out_functions\">formatter_out_functions</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_formatter_out_functions", "title": "pp_set_formatter_out_functions", "contents": "pp_set_formatter_out_functions formatter formatter_out_functions unit  ", "rendered": "<h4 class='item'>let pp_set_formatter_out_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  <a href=\"./api/Format.html#type-formatter_out_functions\">formatter_out_functions</a>\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_formatter_tag_functions", "title": "pp_get_formatter_tag_functions", "contents": "pp_get_formatter_tag_functions formatter unit formatter_tag_functions  ", "rendered": "<h4 class='item'>let pp_get_formatter_tag_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  unit\n) => <a href=\"./api/Format.html#type-formatter_tag_functions\">formatter_tag_functions</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_formatter_tag_functions", "title": "pp_set_formatter_tag_functions", "contents": "pp_set_formatter_tag_functions formatter formatter_tag_functions unit  ", "rendered": "<h4 class='item'>let pp_set_formatter_tag_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  <a href=\"./api/Format.html#type-formatter_tag_functions\">formatter_tag_functions</a>\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_formatter_output_functions", "title": "pp_get_formatter_output_functions", "contents": "pp_get_formatter_output_functions formatter unit string int int unit    unit unit   ", "rendered": "<h4 class='item'>let pp_get_formatter_output_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  unit\n) => ((string, int, int) => unit, unit => unit)</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_formatter_output_functions", "title": "pp_set_formatter_output_functions", "contents": "pp_set_formatter_output_functions formatter string int int unit    unit unit  unit   ", "rendered": "<h4 class='item'>let pp_set_formatter_output_functions: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  (string, int, int) => unit,\n  unit => unit\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_formatter_out_channel", "title": "pp_set_formatter_out_channel", "contents": "pp_set_formatter_out_channel formatter out_channel unit  ", "rendered": "<h4 class='item'>let pp_set_formatter_out_channel: (\n  <a href=\"./api/Format.html#type-formatter\">formatter</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_ellipsis_text", "title": "pp_get_ellipsis_text", "contents": "pp_get_ellipsis_text formatter unit string  ", "rendered": "<h4 class='item'>let pp_get_ellipsis_text: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => string</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_ellipsis_text", "title": "pp_set_ellipsis_text", "contents": "pp_set_ellipsis_text formatter string unit  ", "rendered": "<h4 class='item'>let pp_set_ellipsis_text: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, string) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_over_max_boxes", "title": "pp_over_max_boxes", "contents": "pp_over_max_boxes formatter unit bool  ", "rendered": "<h4 class='item'>let pp_over_max_boxes: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => bool</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_max_boxes", "title": "pp_get_max_boxes", "contents": "pp_get_max_boxes formatter unit int  ", "rendered": "<h4 class='item'>let pp_get_max_boxes: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => int</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_max_boxes", "title": "pp_set_max_boxes", "contents": "pp_set_max_boxes formatter int unit  ", "rendered": "<h4 class='item'>let pp_set_max_boxes: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_max_indent", "title": "pp_get_max_indent", "contents": "pp_get_max_indent formatter unit int  ", "rendered": "<h4 class='item'>let pp_get_max_indent: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => int</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_max_indent", "title": "pp_set_max_indent", "contents": "pp_set_max_indent formatter int unit  ", "rendered": "<h4 class='item'>let pp_set_max_indent: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_margin", "title": "pp_get_margin", "contents": "pp_get_margin formatter unit int  ", "rendered": "<h4 class='item'>let pp_get_margin: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => int</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_margin", "title": "pp_set_margin", "contents": "pp_set_margin formatter int unit  ", "rendered": "<h4 class='item'>let pp_set_margin: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_mark_tags", "title": "pp_get_mark_tags", "contents": "pp_get_mark_tags formatter unit bool  ", "rendered": "<h4 class='item'>let pp_get_mark_tags: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => bool</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_get_print_tags", "title": "pp_get_print_tags", "contents": "pp_get_print_tags formatter unit bool  ", "rendered": "<h4 class='item'>let pp_get_print_tags: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => bool</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_mark_tags", "title": "pp_set_mark_tags", "contents": "pp_set_mark_tags formatter bool unit  ", "rendered": "<h4 class='item'>let pp_set_mark_tags: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, bool) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_print_tags", "title": "pp_set_print_tags", "contents": "pp_set_print_tags formatter bool unit  ", "rendered": "<h4 class='item'>let pp_set_print_tags: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, bool) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_tags", "title": "pp_set_tags", "contents": "pp_set_tags formatter bool unit  ", "rendered": "<h4 class='item'>let pp_set_tags: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, bool) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_tab", "title": "pp_print_tab", "contents": "pp_print_tab formatter unit unit  ", "rendered": "<h4 class='item'>let pp_print_tab: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_set_tab", "title": "pp_set_tab", "contents": "pp_set_tab formatter unit unit  ", "rendered": "<h4 class='item'>let pp_set_tab: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_tbreak", "title": "pp_print_tbreak", "contents": "pp_print_tbreak formatter int int unit   ", "rendered": "<h4 class='item'>let pp_print_tbreak: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_close_tbox", "title": "pp_close_tbox", "contents": "pp_close_tbox formatter unit unit  ", "rendered": "<h4 class='item'>let pp_close_tbox: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_tbox", "title": "pp_open_tbox", "contents": "pp_open_tbox formatter unit unit  ", "rendered": "<h4 class='item'>let pp_open_tbox: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_if_newline", "title": "pp_print_if_newline", "contents": "pp_print_if_newline formatter unit unit  ", "rendered": "<h4 class='item'>let pp_print_if_newline: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_newline", "title": "pp_print_newline", "contents": "pp_print_newline formatter unit unit  ", "rendered": "<h4 class='item'>let pp_print_newline: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_flush", "title": "pp_print_flush", "contents": "pp_print_flush formatter unit unit  ", "rendered": "<h4 class='item'>let pp_print_flush: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_force_newline", "title": "pp_force_newline", "contents": "pp_force_newline formatter unit unit  ", "rendered": "<h4 class='item'>let pp_force_newline: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_space", "title": "pp_print_space", "contents": "pp_print_space formatter unit unit  ", "rendered": "<h4 class='item'>let pp_print_space: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_cut", "title": "pp_print_cut", "contents": "pp_print_cut formatter unit unit  ", "rendered": "<h4 class='item'>let pp_print_cut: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_break", "title": "pp_print_break", "contents": "pp_print_break formatter int int unit   ", "rendered": "<h4 class='item'>let pp_print_break: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_bool", "title": "pp_print_bool", "contents": "pp_print_bool formatter bool unit  ", "rendered": "<h4 class='item'>let pp_print_bool: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, bool) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_char", "title": "pp_print_char", "contents": "pp_print_char formatter char unit  ", "rendered": "<h4 class='item'>let pp_print_char: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, char) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_float", "title": "pp_print_float", "contents": "pp_print_float formatter float unit  ", "rendered": "<h4 class='item'>let pp_print_float: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, float) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_int", "title": "pp_print_int", "contents": "pp_print_int formatter int unit  ", "rendered": "<h4 class='item'>let pp_print_int: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_as", "title": "pp_print_as", "contents": "pp_print_as formatter int string unit   ", "rendered": "<h4 class='item'>let pp_print_as: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int, string) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_print_string", "title": "pp_print_string", "contents": "pp_print_string formatter string unit  ", "rendered": "<h4 class='item'>let pp_print_string: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, string) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_close_tag", "title": "pp_close_tag", "contents": "pp_close_tag formatter unit unit  ", "rendered": "<h4 class='item'>let pp_close_tag: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_tag", "title": "pp_open_tag", "contents": "pp_open_tag formatter string unit  ", "rendered": "<h4 class='item'>let pp_open_tag: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, string) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_close_box", "title": "pp_close_box", "contents": "pp_close_box formatter unit unit  ", "rendered": "<h4 class='item'>let pp_close_box: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_box", "title": "pp_open_box", "contents": "pp_open_box formatter int unit  ", "rendered": "<h4 class='item'>let pp_open_box: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_hovbox", "title": "pp_open_hovbox", "contents": "pp_open_hovbox formatter int unit  ", "rendered": "<h4 class='item'>let pp_open_hovbox: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_hvbox", "title": "pp_open_hvbox", "contents": "pp_open_hvbox formatter int unit  ", "rendered": "<h4 class='item'>let pp_open_hvbox: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_vbox", "title": "pp_open_vbox", "contents": "pp_open_vbox formatter int unit  ", "rendered": "<h4 class='item'>let pp_open_vbox: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-pp_open_hbox", "title": "pp_open_hbox", "contents": "pp_open_hbox formatter unit unit  ", "rendered": "<h4 class='item'>let pp_open_hbox: (<a href=\"./api/Format.html#type-formatter\">formatter</a>, unit) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Basic-functions-to-use-with-formatters", "title": "Basic functions to use with formatters", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-make_formatter", "title": "make_formatter", "contents": "make_formatter out flush returns a new formatter that writes according to the output function out, and the flushing function flush. For instance, a formatter to the Pervasives.out_channel oc is returned by make_formatter (Pervasives.output oc) (fun () -&gt; Pervasives.flush oc).", "rendered": "<code>make_formatter out flush</code> returns a new formatter that writes according to the output function <code>out</code>, and the flushing function <code>flush</code>. For instance, a formatter to the <code>Pervasives.out_channel</code> <code>oc</code> is returned by <code>make_formatter (Pervasives.output oc) (fun () -&gt; Pervasives.flush oc)</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-make_formatter", "title": "make_formatter", "contents": "make_formatter string int int unit    unit unit  formatter  ", "rendered": "<h4 class='item'>let make_formatter: (\n  (string, int, int) => unit,\n  unit => unit\n) => <a href=\"./api/Format.html#type-formatter\">formatter</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-flush_str_formatter", "title": "flush_str_formatter", "contents": "Returns the material printed with str_formatter, flushes the formatter and resets the corresponding buffer.", "rendered": "Returns the material printed with <code>str_formatter</code>, flushes the formatter and resets the corresponding buffer.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-flush_str_formatter", "title": "flush_str_formatter", "contents": "flush_str_formatter unit string ", "rendered": "<h4 class='item'>let flush_str_formatter: unit => string</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-str_formatter", "title": "str_formatter", "contents": "A formatter to use with formatting functions below for output to the stdbuf string buffer. str_formatter is defined as formatter_of_buffer stdbuf.", "rendered": "A formatter to use with formatting functions below for output to the <code>stdbuf</code> string buffer. <code>str_formatter</code> is defined as <code>formatter_of_buffer stdbuf</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-str_formatter", "title": "str_formatter", "contents": "str_formatter formatter", "rendered": "<h4 class='item'>let str_formatter: <a href=\"./api/Format.html#type-formatter\">formatter</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-stdbuf", "title": "stdbuf", "contents": "The string buffer in which str_formatter writes.", "rendered": "The string buffer in which <code>str_formatter</code> writes.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-stdbuf", "title": "stdbuf", "contents": "stdbuf Buffer t", "rendered": "<h4 class='item'>let stdbuf: <a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-formatter_of_buffer", "title": "formatter_of_buffer", "contents": "formatter_of_buffer b returns a new formatter writing to buffer b. As usual, the formatter has to be flushed at the end of pretty printing, using pp_print_flush or pp_print_newline, to display all the pending material.", "rendered": "<code>formatter_of_buffer b</code> returns a new formatter writing to buffer <code>b</code>. As usual, the formatter has to be flushed at the end of pretty printing, using <code>pp_print_flush</code> or <code>pp_print_newline</code>, to display all the pending material.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-formatter_of_buffer", "title": "formatter_of_buffer", "contents": "formatter_of_buffer Buffer t formatter ", "rendered": "<h4 class='item'>let formatter_of_buffer: <a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a> => <a href=\"./api/Format.html#type-formatter\">formatter</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-err_formatter", "title": "err_formatter", "contents": "A formatter to use with formatting functions below for output to standard error. It is defined as formatter_of_out_channel stderr.", "rendered": "A formatter to use with formatting functions below for output to standard error. It is defined as <code>formatter_of_out_channel stderr</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-err_formatter", "title": "err_formatter", "contents": "err_formatter formatter", "rendered": "<h4 class='item'>let err_formatter: <a href=\"./api/Format.html#type-formatter\">formatter</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-std_formatter", "title": "std_formatter", "contents": "The standard formatter used by the formatting functions above. It is defined as formatter_of_out_channel stdout.", "rendered": "The standard formatter used by the formatting functions above. It is defined as <code>formatter_of_out_channel stdout</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-std_formatter", "title": "std_formatter", "contents": "std_formatter formatter", "rendered": "<h4 class='item'>let std_formatter: <a href=\"./api/Format.html#type-formatter\">formatter</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-formatter_of_out_channel", "title": "formatter_of_out_channel", "contents": "formatter_of_out_channel oc returns a new formatter that writes to the corresponding channel oc.", "rendered": "<code>formatter_of_out_channel oc</code> returns a new formatter that writes to the corresponding channel <code>oc</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-formatter_of_out_channel", "title": "formatter_of_out_channel", "contents": "formatter_of_out_channel out_channel formatter ", "rendered": "<h4 class='item'>let formatter_of_out_channel: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => <a href=\"./api/Format.html#type-formatter\">formatter</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-formatter", "title": "formatter", "contents": "Defining new pretty-printers permits unrelated output of material in parallel on several output channels. All the parameters of a pretty-printer are local to this pretty-printer: margin, maximum indentation limit, maximum number of boxes simultaneously opened, ellipsis, and so on, are specific to each pretty-printer and may be fixed independently. Given a Pervasives.out_channel output channel oc, a new formatter writing to that channel is simply obtained by calling formatter_of_out_channel oc. Alternatively, the make_formatter function allocates a new formatter with explicit output and flushing functions (convenient to output material to strings for instance).", "rendered": "Defining new pretty-printers permits unrelated output of material in parallel on several output channels. All the parameters of a pretty-printer are local to this pretty-printer: margin, maximum indentation limit, maximum number of boxes simultaneously opened, ellipsis, and so on, are specific to each pretty-printer and may be fixed independently. Given a <code>Pervasives.out_channel</code> output channel <code>oc</code>, a new formatter writing to that channel is simply obtained by calling <code>formatter_of_out_channel oc</code>. Alternatively, the <code>make_formatter</code> function allocates a new formatter with explicit output and flushing functions (convenient to output material to strings for instance).", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-formatter", "title": "formatter", "contents": "Abstract data corresponding to a pretty-printer (also called a formatter) and all its machinery.", "rendered": "Abstract data corresponding to a pretty-printer (also called a formatter) and all its machinery.", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-formatter", "title": "formatter", "contents": "formatter ", "rendered": "<h4 class='item'>type formatter</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Multiple-formatted-output", "title": "Multiple formatted output", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_formatter_tag_functions", "title": "get_formatter_tag_functions", "contents": "Return the current tag functions of the pretty-printer.", "rendered": "Return the current tag functions of the pretty-printer.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_formatter_tag_functions", "title": "get_formatter_tag_functions", "contents": "get_formatter_tag_functions unit formatter_tag_functions ", "rendered": "<h4 class='item'>let get_formatter_tag_functions: unit => <a href=\"./api/Format.html#type-formatter_tag_functions\">formatter_tag_functions</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_tag_functions", "title": "set_formatter_tag_functions", "contents": "The print_ field of the record contains the functions that are called at tag opening and tag closing time, to output regular material in the pretty-printer queue.", "rendered": "The <code>print_</code> field of the record contains the functions that are called at tag opening and tag closing time, to output regular material in the pretty-printer queue.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_tag_functions", "title": "set_formatter_tag_functions", "contents": "When opening a tag name t, the string t is passed to the opening tag marking function (the mark_open_tag field of the record tag_funs), that must return the opening tag marker for that name. When the next call to close_tag () happens, the tag name t is sent back to the closing tag marking function (the mark_close_tag field of record tag_funs), that must return a closing tag marker for that name.", "rendered": "When opening a tag name <code>t</code>, the string <code>t</code> is passed to the opening tag marking function (the <code>mark_open_tag</code> field of the record <code>tag_funs</code>), that must return the opening tag marker for that name. When the next call to <code>close_tag ()</code> happens, the tag name <code>t</code> is sent back to the closing tag marking function (the <code>mark_close_tag</code> field of record <code>tag_funs</code>), that must return a closing tag marker for that name.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_tag_functions", "title": "set_formatter_tag_functions", "contents": "set_formatter_tag_functions tag_funs changes the meaning of opening and closing tags to use the functions in tag_funs.", "rendered": "<code>set_formatter_tag_functions tag_funs</code> changes the meaning of opening and closing tags to use the functions in <code>tag_funs</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_tag_functions", "title": "set_formatter_tag_functions", "contents": "set_formatter_tag_functions formatter_tag_functions unit ", "rendered": "<h4 class='item'>let set_formatter_tag_functions: <a href=\"./api/Format.html#type-formatter_tag_functions\">formatter_tag_functions</a> => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-formatter_tag_functions", "title": "formatter_tag_functions", "contents": "The tag handling functions specific to a formatter: mark versions are the &#39;tag marking&#39; functions that associate a string marker to a tag in order for the pretty-printing engine to flush those markers as 0 length tokens in the output device of the formatter. print versions are the &#39;tag printing&#39; functions that can perform regular printing when a tag is closed or opened.", "rendered": "The tag handling functions specific to a formatter: <code>mark</code> versions are the &#39;tag marking&#39; functions that associate a string marker to a tag in order for the pretty-printing engine to flush those markers as 0 length tokens in the output device of the formatter. <code>print</code> versions are the &#39;tag printing&#39; functions that can perform regular printing when a tag is closed or opened.", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-formatter_tag_functions", "title": "formatter_tag_functions", "contents": "formatter_tag_functions mark_open_tag tag string  mark_close_tag tag string  print_open_tag tag unit  print_close_tag tag unit ", "rendered": "<h4 class='item'>type formatter_tag_functions = {\n  mark_open_tag: <a href=\"./api/Format.html#type-tag\">tag</a> => string,\n  mark_close_tag: <a href=\"./api/Format.html#type-tag\">tag</a> => string,\n  print_open_tag: <a href=\"./api/Format.html#type-tag\">tag</a> => unit,\n  print_close_tag: <a href=\"./api/Format.html#type-tag\">tag</a> => unit\n}</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Changing-the-meaning-of-printing-semantics-tags", "title": "Changing the meaning of printing semantics tags", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_formatter_out_functions", "title": "get_formatter_out_functions", "contents": "Return the current output functions of the pretty-printer, including line breaking and indentation functions. Useful to record the current setting and restore it afterwards.", "rendered": "Return the current output functions of the pretty-printer, including line breaking and indentation functions. Useful to record the current setting and restore it afterwards.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_formatter_out_functions", "title": "get_formatter_out_functions", "contents": "get_formatter_out_functions unit formatter_out_functions ", "rendered": "<h4 class='item'>let get_formatter_out_functions: unit => <a href=\"./api/Format.html#type-formatter_out_functions\">formatter_out_functions</a></h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_out_functions", "title": "set_formatter_out_functions", "contents": "This way, you can change the meaning of indentation (which can be something else than just printing space characters) and the meaning of new lines opening (which can be connected to any other action needed by the application at hand). The two functions f.out_spaces and f.out_newline are normally connected to f.out_string and f.out_flush: respective default values for f.out_space and f.out_newline are f.out_string (String.make n &#39; &#39;) 0 n and f.out_string &quot;\n&quot; 0 1.", "rendered": "This way, you can change the meaning of indentation (which can be something else than just printing space characters) and the meaning of new lines opening (which can be connected to any other action needed by the application at hand). The two functions <code>f.out_spaces</code> and <code>f.out_newline</code> are normally connected to <code>f.out_string</code> and <code>f.out_flush</code>: respective default values for <code>f.out_space</code> and <code>f.out_newline</code> are <code>f.out_string (String.make n &#39; &#39;) 0 n</code> and <code>f.out_string &quot;\n&quot; 0 1</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_out_functions", "title": "set_formatter_out_functions", "contents": "set_formatter_out_functions f Redirect the pretty-printer output to the functions f.out_string and f.out_flush as described in set_formatter_output_functions. In addition, the pretty-printer function that outputs a newline is set to the function f.out_newline and the function that outputs indentation spaces is set to the function f.out_spaces.", "rendered": "<code>set_formatter_out_functions f</code> Redirect the pretty-printer output to the functions <code>f.out_string</code> and <code>f.out_flush</code> as described in <code>set_formatter_output_functions</code>. In addition, the pretty-printer function that outputs a newline is set to the function <code>f.out_newline</code> and the function that outputs indentation spaces is set to the function <code>f.out_spaces</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_out_functions", "title": "set_formatter_out_functions", "contents": "set_formatter_out_functions formatter_out_functions unit ", "rendered": "<h4 class='item'>let set_formatter_out_functions: <a href=\"./api/Format.html#type-formatter_out_functions\">formatter_out_functions</a> => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-formatter_out_functions", "title": "formatter_out_functions", "contents": "formatter_out_functions out_string string int int unit    out_flush unit unit  out_newline unit unit  out_spaces int unit ", "rendered": "<h4 class='item'>type formatter_out_functions = {\n  out_string: (string, int, int) => unit,\n  out_flush: unit => unit,\n  out_newline: unit => unit,\n  out_spaces: int => unit\n}</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "The Format module is versatile enough to let you completely redefine the meaning of pretty printing: you may provide your own functions to define how to handle indentation, line breaking, and even printing of all the characters that have to be printed!", "rendered": "The <code>Format</code> module is versatile enough to let you completely redefine the meaning of pretty printing: you may provide your own functions to define how to handle indentation, line breaking, and even printing of all the characters that have to be printed!", "breadcrumb": "Format"},
{"href": "./api/Format.html#Changing-the-meaning-of-standard-formatter-pretty-printing", "title": "Changing the meaning of standard formatter pretty printing", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_formatter_output_functions", "title": "get_formatter_output_functions", "contents": "Return the current output functions of the pretty-printer.", "rendered": "Return the current output functions of the pretty-printer.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_formatter_output_functions", "title": "get_formatter_output_functions", "contents": "get_formatter_output_functions unit string int int unit    unit unit  ", "rendered": "<h4 class='item'>let get_formatter_output_functions: unit => (\n  (string, int, int) => unit,\n  unit => unit\n)</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_output_functions", "title": "set_formatter_output_functions", "contents": "The flush function is called whenever the pretty-printer is flushed (via conversion %!, or pretty-printing indications @? or @., or using low level functions print_flush or print_newline).", "rendered": "The <code>flush</code> function is called whenever the pretty-printer is flushed (via conversion <code>%!</code>, or pretty-printing indications <code>@?</code> or <code>@.</code>, or using low level functions <code>print_flush</code> or <code>print_newline</code>).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_output_functions", "title": "set_formatter_output_functions", "contents": "The out function performs all the pretty-printer string output. It is called with a string s, a start position p, and a number of characters n; it is supposed to output characters p to p + n - 1 of s.", "rendered": "The <code>out</code> function performs all the pretty-printer string output. It is called with a string <code>s</code>, a start position <code>p</code>, and a number of characters <code>n</code>; it is supposed to output characters <code>p</code> to <code>p + n - 1</code> of <code>s</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_output_functions", "title": "set_formatter_output_functions", "contents": "set_formatter_output_functions out flush redirects the pretty-printer output functions to the functions out and flush.", "rendered": "<code>set_formatter_output_functions out flush</code> redirects the pretty-printer output functions to the functions <code>out</code> and <code>flush</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_output_functions", "title": "set_formatter_output_functions", "contents": "set_formatter_output_functions string int int unit    unit unit  unit  ", "rendered": "<h4 class='item'>let set_formatter_output_functions: (\n  (string, int, int) => unit,\n  unit => unit\n) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_out_channel", "title": "set_formatter_out_channel", "contents": "Redirect the pretty-printer output to the given channel. (All the output functions of the standard formatter are set to the default output functions printing to the given channel.)", "rendered": "Redirect the pretty-printer output to the given channel. (All the output functions of the standard formatter are set to the default output functions printing to the given channel.)", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_formatter_out_channel", "title": "set_formatter_out_channel", "contents": "set_formatter_out_channel out_channel unit ", "rendered": "<h4 class='item'>let set_formatter_out_channel: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Redirecting-the-standard-formatter-output", "title": "Redirecting the standard formatter output", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_mark_tags", "title": "get_mark_tags", "contents": "Return the current status of tags marking.", "rendered": "Return the current status of tags marking.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_mark_tags", "title": "get_mark_tags", "contents": "get_mark_tags unit bool ", "rendered": "<h4 class='item'>let get_mark_tags: unit => bool</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_print_tags", "title": "get_print_tags", "contents": "Return the current status of tags printing.", "rendered": "Return the current status of tags printing.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_print_tags", "title": "get_print_tags", "contents": "get_print_tags unit bool ", "rendered": "<h4 class='item'>let get_print_tags: unit => bool</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_mark_tags", "title": "set_mark_tags", "contents": "set_mark_tags b turns on or off the output of tag markers.", "rendered": "<code>set_mark_tags b</code> turns on or off the output of tag markers.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_mark_tags", "title": "set_mark_tags", "contents": "set_mark_tags bool unit ", "rendered": "<h4 class='item'>let set_mark_tags: bool => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_print_tags", "title": "set_print_tags", "contents": "set_print_tags b turns on or off the printing of tags.", "rendered": "<code>set_print_tags b</code> turns on or off the printing of tags.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_print_tags", "title": "set_print_tags", "contents": "set_print_tags bool unit ", "rendered": "<h4 class='item'>let set_print_tags: bool => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_tags", "title": "set_tags", "contents": "set_tags b turns on or off the treatment of tags (default is off).", "rendered": "<code>set_tags b</code> turns on or off the treatment of tags (default is off).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_tags", "title": "set_tags", "contents": "set_tags bool unit ", "rendered": "<h4 class='item'>let set_tags: bool => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-close_tag", "title": "close_tag", "contents": "close_tag () closes the most recently opened tag t. In addition, the print_close_tag function of the formatter is called with t as argument. The marker mark_close_tag t will be flushed into the output device of the formatter.", "rendered": "<code>close_tag ()</code> closes the most recently opened tag <code>t</code>. In addition, the <code>print_close_tag</code> function of the formatter is called with <code>t</code> as argument. The marker <code>mark_close_tag t</code> will be flushed into the output device of the formatter.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-close_tag", "title": "close_tag", "contents": "close_tag unit unit ", "rendered": "<h4 class='item'>let close_tag: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_tag", "title": "open_tag", "contents": "open_tag t opens the tag named t; the print_open_tag function of the formatter is called with t as argument; the tag marker mark_open_tag t will be flushed into the output device of the formatter.", "rendered": "<code>open_tag t</code> opens the tag named <code>t</code>; the <code>print_open_tag</code> function of the formatter is called with <code>t</code> as argument; the tag marker <code>mark_open_tag t</code> will be flushed into the output device of the formatter.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_tag", "title": "open_tag", "contents": "open_tag tag unit ", "rendered": "<h4 class='item'>let open_tag: <a href=\"./api/Format.html#type-tag\">tag</a> => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Tag marking and tag printing functions are user definable and can be set by calling set_formatter_tag_functions.", "rendered": "Tag marking and tag printing functions are user definable and can be set by calling <code>set_formatter_tag_functions</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Default tag printing functions just do nothing.", "rendered": "Default tag printing functions just do nothing.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "In the spirit of HTML tags, the default tag marking functions output tags enclosed in &quot;&lt;&quot; and &quot;&gt;&quot;: hence, the opening marker of tag t is &quot;&lt;t&gt;&quot; and the closing marker &quot;&lt;/t&gt;&quot;.", "rendered": "In the spirit of HTML tags, the default tag marking functions output tags enclosed in &quot;&lt;&quot; and &quot;&gt;&quot;: hence, the opening marker of tag <code>t</code> is <code>&quot;&lt;t&gt;&quot;</code> and the closing marker <code>&quot;&lt;/t&gt;&quot;</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "When a tag has been opened (or closed), it is both and successively &#39;printed&#39; and &#39;marked&#39;. Printing a tag means calling a formatter specific function with the name of the tag as argument: that &#39;tag printing&#39; function can then print any regular material to the formatter (so that this material is enqueued as usual in the formatter queue for further line-breaking computation). Marking a tag means to output an arbitrary string (the &#39;tag marker&#39;), directly into the output device of the formatter. Hence, the formatter specific &#39;tag marking&#39; function must return the tag marker string associated to its tag argument. Being flushed directly into the output device of the formatter, tag marker strings are not considered as part of the printing material that drives line breaking (in other words, the length of the strings corresponding to tag markers is considered as zero for line breaking). In addition, advanced users may take advantage of the specificity of tag markers to be precisely output when the pretty printer has already decided where to break the lines, and precisely when the queue is flushed into the output device.", "rendered": "When a tag has been opened (or closed), it is both and successively &#39;printed&#39; and &#39;marked&#39;. Printing a tag means calling a formatter specific function with the name of the tag as argument: that &#39;tag printing&#39; function can then print any regular material to the formatter (so that this material is enqueued as usual in the formatter queue for further line-breaking computation). Marking a tag means to output an arbitrary string (the &#39;tag marker&#39;), directly into the output device of the formatter. Hence, the formatter specific &#39;tag marking&#39; function must return the tag marker string associated to its tag argument. Being flushed directly into the output device of the formatter, tag marker strings are not considered as part of the printing material that drives line breaking (in other words, the length of the strings corresponding to tag markers is considered as zero for line breaking). In addition, advanced users may take advantage of the specificity of tag markers to be precisely output when the pretty printer has already decided where to break the lines, and precisely when the queue is flushed into the output device.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Thus, tag handling is in some sense transparent to pretty-printing and does not interfere with usual indentation. Hence, a single pretty printing routine can output both simple &#39;verbatim&#39; material or richer decorated output depending on the treatment of tags. By default, tags are not active, hence the output is not decorated with tag information. Once set_tags is set to true, the pretty printer engine honours tags and decorates the output accordingly.", "rendered": "Thus, tag handling is in some sense transparent to pretty-printing and does not interfere with usual indentation. Hence, a single pretty printing routine can output both simple &#39;verbatim&#39; material or richer decorated output depending on the treatment of tags. By default, tags are not active, hence the output is not decorated with tag information. Once <code>set_tags</code> is set to <code>true</code>, the pretty printer engine honours tags and decorates the output accordingly.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "By default, those tags do not influence line breaking calculation: the tag &#39;markers&#39; are not considered as part of the printing material that drives line breaking (in other words, the length of those strings is considered as zero for line breaking).", "rendered": "By default, those tags do not influence line breaking calculation: the tag &#39;markers&#39; are not considered as part of the printing material that drives line breaking (in other words, the length of those strings is considered as zero for line breaking).", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Semantics tags (or simply tags) are used to decorate printed entities for user&#39;s defined purposes, e.g. setting font and giving size indications for a display device, or marking delimitation of semantics entities (e.g. HTML or TeX elements or terminal escape sequences).", "rendered": "<em>Semantics tags</em> (or simply <em>tags</em>) are used to decorate printed entities for user&#39;s defined purposes, e.g. setting font and giving size indications for a display device, or marking delimitation of semantics entities (e.g. HTML or TeX elements or terminal escape sequences).", "breadcrumb": "Format"},
{"href": "./api/Format.html#type-tag", "title": "tag", "contents": "tag string", "rendered": "<h4 class='item'>type tag = string</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Semantics-Tags", "title": "Semantics Tags", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_ellipsis_text", "title": "get_ellipsis_text", "contents": "Return the text of the ellipsis.", "rendered": "Return the text of the ellipsis.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_ellipsis_text", "title": "get_ellipsis_text", "contents": "get_ellipsis_text unit string ", "rendered": "<h4 class='item'>let get_ellipsis_text: unit => string</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_ellipsis_text", "title": "set_ellipsis_text", "contents": "Set the text of the ellipsis printed when too many boxes are opened (a single dot, ., by default).", "rendered": "Set the text of the ellipsis printed when too many boxes are opened (a single dot, <code>.</code>, by default).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_ellipsis_text", "title": "set_ellipsis_text", "contents": "set_ellipsis_text string unit ", "rendered": "<h4 class='item'>let set_ellipsis_text: string => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Ellipsis", "title": "Ellipsis", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_tab", "title": "print_tab", "contents": "print_tab () is equivalent to print_tbreak 0 0.", "rendered": "<code>print_tab ()</code> is equivalent to <code>print_tbreak 0 0</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_tab", "title": "print_tab", "contents": "print_tab unit unit ", "rendered": "<h4 class='item'>let print_tab: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_tab", "title": "set_tab", "contents": "Sets a tabulation mark at the current insertion point.", "rendered": "Sets a tabulation mark at the current insertion point.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_tab", "title": "set_tab", "contents": "set_tab unit unit ", "rendered": "<h4 class='item'>let set_tab: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_tbreak", "title": "print_tbreak", "contents": "Break hint in a tabulation box. print_tbreak spaces offset moves the insertion point to the next tabulation (spaces being added to this position). Nothing occurs if insertion point is already on a tabulation mark. If there is no next tabulation on the line, then a newline is printed and the insertion point moves to the first tabulation of the box. If a new line is printed, offset is added to the current indentation.", "rendered": "Break hint in a tabulation box. <code>print_tbreak spaces offset</code> moves the insertion point to the next tabulation (<code>spaces</code> being added to this position). Nothing occurs if insertion point is already on a tabulation mark. If there is no next tabulation on the line, then a newline is printed and the insertion point moves to the first tabulation of the box. If a new line is printed, <code>offset</code> is added to the current indentation.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_tbreak", "title": "print_tbreak", "contents": "print_tbreak int int unit  ", "rendered": "<h4 class='item'>let print_tbreak: (int, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-close_tbox", "title": "close_tbox", "contents": "Closes the most recently opened tabulation box.", "rendered": "Closes the most recently opened tabulation box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-close_tbox", "title": "close_tbox", "contents": "close_tbox unit unit ", "rendered": "<h4 class='item'>let close_tbox: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_tbox", "title": "open_tbox", "contents": "Opens a tabulation box.", "rendered": "Opens a tabulation box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_tbox", "title": "open_tbox", "contents": "open_tbox unit unit ", "rendered": "<h4 class='item'>let open_tbox: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Tabulations", "title": "Tabulations", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_hovbox", "title": "open_hovbox", "contents": "open_hovbox d opens a new pretty-printing box with offset d. This box is &#39;horizontal or vertical&#39;: break hints inside this box may lead to a new line, if there is no more room on the line to print the remainder of the box. When a new line is printed in the box, d is added to the current indentation.", "rendered": "<code>open_hovbox d</code> opens a new pretty-printing box with offset <code>d</code>. This box is &#39;horizontal or vertical&#39;: break hints inside this box may lead to a new line, if there is no more room on the line to print the remainder of the box. When a new line is printed in the box, <code>d</code> is added to the current indentation.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_hovbox", "title": "open_hovbox", "contents": "open_hovbox int unit ", "rendered": "<h4 class='item'>let open_hovbox: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_hvbox", "title": "open_hvbox", "contents": "open_hvbox d opens a new pretty-printing box with offset d. This box is &#39;horizontal-vertical&#39;: it behaves as an &#39;horizontal&#39; box if it fits on a single line, otherwise it behaves as a &#39;vertical&#39; box. When a new line is printed in the box, d is added to the current indentation.", "rendered": "<code>open_hvbox d</code> opens a new pretty-printing box with offset <code>d</code>. This box is &#39;horizontal-vertical&#39;: it behaves as an &#39;horizontal&#39; box if it fits on a single line, otherwise it behaves as a &#39;vertical&#39; box. When a new line is printed in the box, <code>d</code> is added to the current indentation.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_hvbox", "title": "open_hvbox", "contents": "open_hvbox int unit ", "rendered": "<h4 class='item'>let open_hvbox: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_vbox", "title": "open_vbox", "contents": "open_vbox d opens a new pretty-printing box with offset d. This box is &#39;vertical&#39;: every break hint inside this box leads to a new line. When a new line is printed in the box, d is added to the current indentation.", "rendered": "<code>open_vbox d</code> opens a new pretty-printing box with offset <code>d</code>. This box is &#39;vertical&#39;: every break hint inside this box leads to a new line. When a new line is printed in the box, <code>d</code> is added to the current indentation.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_vbox", "title": "open_vbox", "contents": "open_vbox int unit ", "rendered": "<h4 class='item'>let open_vbox: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_hbox", "title": "open_hbox", "contents": "open_hbox () opens a new pretty-printing box. This box is &#39;horizontal&#39;: the line is not split in this box (new lines may still occur inside boxes nested deeper).", "rendered": "<code>open_hbox ()</code> opens a new pretty-printing box. This box is &#39;horizontal&#39;: the line is not split in this box (new lines may still occur inside boxes nested deeper).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_hbox", "title": "open_hbox", "contents": "open_hbox unit unit ", "rendered": "<h4 class='item'>let open_hbox: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Advanced-formatting", "title": "Advanced formatting", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-over_max_boxes", "title": "over_max_boxes", "contents": "Tests if the maximum number of boxes allowed have already been opened.", "rendered": "Tests if the maximum number of boxes allowed have already been opened.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-over_max_boxes", "title": "over_max_boxes", "contents": "over_max_boxes unit bool ", "rendered": "<h4 class='item'>let over_max_boxes: unit => bool</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_max_boxes", "title": "get_max_boxes", "contents": "Returns the maximum number of boxes allowed before ellipsis.", "rendered": "Returns the maximum number of boxes allowed before ellipsis.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_max_boxes", "title": "get_max_boxes", "contents": "get_max_boxes unit int ", "rendered": "<h4 class='item'>let get_max_boxes: unit => int</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_max_boxes", "title": "set_max_boxes", "contents": "set_max_boxes max sets the maximum number of boxes simultaneously opened. Material inside boxes nested deeper is printed as an ellipsis (more precisely as the text returned by get_ellipsis_text ()). Nothing happens if max is smaller than 2.", "rendered": "<code>set_max_boxes max</code> sets the maximum number of boxes simultaneously opened. Material inside boxes nested deeper is printed as an ellipsis (more precisely as the text returned by <code>get_ellipsis_text ()</code>). Nothing happens if <code>max</code> is smaller than 2.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_max_boxes", "title": "set_max_boxes", "contents": "set_max_boxes int unit ", "rendered": "<h4 class='item'>let set_max_boxes: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Formatting-depth--maximum-number-of-boxes-allowed-before-ellipsis", "title": "Formatting depth: maximum number of boxes allowed before ellipsis", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_max_indent", "title": "get_max_indent", "contents": "Return the value of the maximum indentation limit (in characters).", "rendered": "Return the value of the maximum indentation limit (in characters).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_max_indent", "title": "get_max_indent", "contents": "get_max_indent unit int ", "rendered": "<h4 class='item'>let get_max_indent: unit => int</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_max_indent", "title": "set_max_indent", "contents": "set_max_indent d sets the value of the maximum indentation limit to d (in characters): once this limit is reached, boxes are rejected to the left, if they do not fit on the current line. Nothing happens if d is smaller than 2. If d is too large, the limit is set to the maximum admissible value (which is greater than 10^9).", "rendered": "<code>set_max_indent d</code> sets the value of the maximum indentation limit to <code>d</code> (in characters): once this limit is reached, boxes are rejected to the left, if they do not fit on the current line. Nothing happens if <code>d</code> is smaller than 2. If <code>d</code> is too large, the limit is set to the maximum admissible value (which is greater than <code>10^9</code>).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_max_indent", "title": "set_max_indent", "contents": "set_max_indent int unit ", "rendered": "<h4 class='item'>let set_max_indent: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Maximum-indentation-limit", "title": "Maximum indentation limit", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_margin", "title": "get_margin", "contents": "Returns the position of the right margin.", "rendered": "Returns the position of the right margin.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-get_margin", "title": "get_margin", "contents": "get_margin unit int ", "rendered": "<h4 class='item'>let get_margin: unit => int</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_margin", "title": "set_margin", "contents": "set_margin d sets the value of the right margin to d (in characters): this value is used to detect line overflows that leads to split lines. Nothing happens if d is smaller than 2. If d is too large, the right margin is set to the maximum admissible value (which is greater than 10^9).", "rendered": "<code>set_margin d</code> sets the value of the right margin to <code>d</code> (in characters): this value is used to detect line overflows that leads to split lines. Nothing happens if <code>d</code> is smaller than 2. If <code>d</code> is too large, the right margin is set to the maximum admissible value (which is greater than <code>10^9</code>).", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-set_margin", "title": "set_margin", "contents": "set_margin int unit ", "rendered": "<h4 class='item'>let set_margin: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Margin", "title": "Margin", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_if_newline", "title": "print_if_newline", "contents": "Executes the next formatting command if the preceding line has just been split. Otherwise, ignore the next formatting command.", "rendered": "Executes the next formatting command if the preceding line has just been split. Otherwise, ignore the next formatting command.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_if_newline", "title": "print_if_newline", "contents": "print_if_newline unit unit ", "rendered": "<h4 class='item'>let print_if_newline: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-force_newline", "title": "force_newline", "contents": "Forces a newline in the current box. Not the normal way of pretty-printing, you should prefer break hints.", "rendered": "Forces a newline in the current box. Not the normal way of pretty-printing, you should prefer break hints.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-force_newline", "title": "force_newline", "contents": "force_newline unit unit ", "rendered": "<h4 class='item'>let force_newline: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_newline", "title": "print_newline", "contents": "Equivalent to print_flush followed by a new line.", "rendered": "Equivalent to <code>print_flush</code> followed by a new line.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_newline", "title": "print_newline", "contents": "print_newline unit unit ", "rendered": "<h4 class='item'>let print_newline: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_flush", "title": "print_flush", "contents": "Flushes the pretty printer: all opened boxes are closed, and all pending text is displayed.", "rendered": "Flushes the pretty printer: all opened boxes are closed, and all pending text is displayed.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_flush", "title": "print_flush", "contents": "print_flush unit unit ", "rendered": "<h4 class='item'>let print_flush: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_break", "title": "print_break", "contents": "Inserts a break hint in a pretty-printing box. print_break nspaces offset indicates that the line may be split (a newline character is printed) at this point, if the contents of the current box does not fit on the current line. If the line is split at that point, offset is added to the current indentation. If the line is not split, nspaces spaces are printed.", "rendered": "Inserts a break hint in a pretty-printing box. <code>print_break nspaces offset</code> indicates that the line may be split (a newline character is printed) at this point, if the contents of the current box does not fit on the current line. If the line is split at that point, <code>offset</code> is added to the current indentation. If the line is not split, <code>nspaces</code> spaces are printed.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_break", "title": "print_break", "contents": "print_break int int unit  ", "rendered": "<h4 class='item'>let print_break: (int, int) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_cut", "title": "print_cut", "contents": "print_cut () is used to mark a good break position. It indicates that the line may be split at this point. It either prints nothing or splits the line. This allows line splitting at the current point, without printing spaces or adding indentation. It is equivalent to print_break 0 0.", "rendered": "<code>print_cut ()</code> is used to mark a good break position. It indicates that the line may be split at this point. It either prints nothing or splits the line. This allows line splitting at the current point, without printing spaces or adding indentation. It is equivalent to <code>print_break 0 0</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_cut", "title": "print_cut", "contents": "print_cut unit unit ", "rendered": "<h4 class='item'>let print_cut: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_space", "title": "print_space", "contents": "print_space () is used to separate items (typically to print a space between two words). It indicates that the line may be split at this point. It either prints one space or splits the line. It is equivalent to print_break 1 0.", "rendered": "<code>print_space ()</code> is used to separate items (typically to print a space between two words). It indicates that the line may be split at this point. It either prints one space or splits the line. It is equivalent to <code>print_break 1 0</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_space", "title": "print_space", "contents": "print_space unit unit ", "rendered": "<h4 class='item'>let print_space: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Break-hints", "title": "Break hints", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_bool", "title": "print_bool", "contents": "Prints a boolean in the current box.", "rendered": "Prints a boolean in the current box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_bool", "title": "print_bool", "contents": "print_bool bool unit ", "rendered": "<h4 class='item'>let print_bool: bool => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_char", "title": "print_char", "contents": "Prints a character in the current box.", "rendered": "Prints a character in the current box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_char", "title": "print_char", "contents": "print_char char unit ", "rendered": "<h4 class='item'>let print_char: char => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_float", "title": "print_float", "contents": "Prints a floating point number in the current box.", "rendered": "Prints a floating point number in the current box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_float", "title": "print_float", "contents": "print_float float unit ", "rendered": "<h4 class='item'>let print_float: float => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_int", "title": "print_int", "contents": "Prints an integer in the current box.", "rendered": "Prints an integer in the current box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_int", "title": "print_int", "contents": "print_int int unit ", "rendered": "<h4 class='item'>let print_int: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_as", "title": "print_as", "contents": "print_as len str prints str in the current box. The pretty-printer formats str as if it were of length len.", "rendered": "<code>print_as len str</code> prints <code>str</code> in the current box. The pretty-printer formats <code>str</code> as if it were of length <code>len</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_as", "title": "print_as", "contents": "print_as int string unit  ", "rendered": "<h4 class='item'>let print_as: (int, string) => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_string", "title": "print_string", "contents": "print_string str prints str in the current box.", "rendered": "<code>print_string str</code> prints <code>str</code> in the current box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-print_string", "title": "print_string", "contents": "print_string string unit ", "rendered": "<h4 class='item'>let print_string: string => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Formatting-functions", "title": "Formatting functions", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-close_box", "title": "close_box", "contents": "Closes the most recently opened pretty-printing box.", "rendered": "Closes the most recently opened pretty-printing box.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-close_box", "title": "close_box", "contents": "close_box unit unit ", "rendered": "<h4 class='item'>let close_box: unit => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_box", "title": "open_box", "contents": "open_box d opens a new pretty-printing box with offset d. This box is the general purpose pretty-printing box. Material in this box is displayed &#39;horizontal or vertical&#39;: break hints inside the box may lead to a new line, if there is no more room on the line to print the remainder of the box, or if a new line may lead to a new indentation (demonstrating the indentation of the box). When a new line is printed in the box, d is added to the current indentation.", "rendered": "<code>open_box d</code> opens a new pretty-printing box with offset <code>d</code>. This box is the general purpose pretty-printing box. Material in this box is displayed &#39;horizontal or vertical&#39;: break hints inside the box may lead to a new line, if there is no more room on the line to print the remainder of the box, or if a new line may lead to a new indentation (demonstrating the indentation of the box). When a new line is printed in the box, <code>d</code> is added to the current indentation.", "breadcrumb": "Format"},
{"href": "./api/Format.html#value-open_box", "title": "open_box", "contents": "open_box int unit ", "rendered": "<h4 class='item'>let open_box: int => unit</h4>", "breadcrumb": "Format"},
{"href": "./api/Format.html#Boxes", "title": "Boxes", "contents": "", "rendered": "", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "at the end of your routine, flush the pretty-printer to display all the remaining material, e.g. evaluate print_newline ().", "rendered": "at the end of your routine, flush the pretty-printer to display all the remaining material, e.g. evaluate <code>print_newline ()</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "when the material for a box has been printed, call close_box () to close the box;", "rendered": "when the material for a box has been printed, call <code>close_box ()</code> to close the box;", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "once a box is opened, display its material with basic printing functions (e. g. print_int and print_string);", "rendered": "once a box is opened, display its material with basic printing functions (e. g. <code>print_int</code> and <code>print_string</code>);", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "use simple break hints (as obtained by print_cut () that outputs a simple break hint, or by print_space () that outputs a space indicating a break hint);", "rendered": "use simple break hints (as obtained by <code>print_cut ()</code> that outputs a simple break hint, or by <code>print_space ()</code> that outputs a space indicating a break hint);", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "use simple boxes (as obtained by open_box 0);", "rendered": "use simple boxes (as obtained by <code>open_box 0</code>);", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Warning: the material output by the following functions is delayed in the pretty-printer queue in order to compute the proper line breaking. Hence, you should not mix calls to the printing functions of the basic I/O system with calls to the functions of this module: this could result in some strange output seemingly unrelated with the evaluation order of printing commands.", "rendered": "Warning: the material output by the following functions is delayed in the pretty-printer queue in order to compute the proper line breaking. Hence, you should not mix calls to the printing functions of the basic I/O system with calls to the functions of this module: this could result in some strange output seemingly unrelated with the evaluation order of printing commands.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "In case of interactive use, the system closes all opened boxes and flushes all pending text (as with the print_newline function) after each phrase. Each phrase is therefore executed in the initial state of the pretty-printer.", "rendered": "In case of interactive use, the system closes all opened boxes and flushes all pending text (as with the <code>print_newline</code> function) after each phrase. Each phrase is therefore executed in the initial state of the pretty-printer.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "The behaviour of pretty-printing commands is unspecified if there is no opened pretty-printing box. Each box opened via one of the open_ functions below must be closed using close_box for proper formatting. Otherwise, some of the material printed in the boxes may not be output, or may be formatted incorrectly.", "rendered": "The behaviour of pretty-printing commands is unspecified if there is no opened pretty-printing box. Each box opened via one of the <code>open_</code> functions below must be closed using <code>close_box</code> for proper formatting. Otherwise, some of the material printed in the boxes may not be output, or may be formatted incorrectly.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Rule of thumb for casual users of this library:", "rendered": "Rule of thumb for casual users of this library:", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "For instance, the sequence open_box 0; print_string &quot;x =&quot;; print_space ();\n    print_int 1; close_box (); print_newline () that prints x = 1 within a pretty-printing box, can be abbreviated as printf &quot;@[%s@ %i@]@.&quot; &quot;x =&quot; 1, or even shorter printf &quot;@[x =@ %i@]@.&quot; 1.", "rendered": "For instance, the sequence <code>open_box 0; print_string &quot;x =&quot;; print_space ();\n    print_int 1; close_box (); print_newline ()</code> that prints <code>x = 1</code> within a pretty-printing box, can be abbreviated as <code>printf &quot;@[%s@ %i@]@.&quot; &quot;x =&quot; 1</code>, or even shorter <code>printf &quot;@[x =@ %i@]@.&quot; 1</code>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "You may also use the explicit box management and printing functions provided by this module. This style is more basic but more verbose than the fprintf concise formats.", "rendered": "You may also use the explicit box management and printing functions provided by this module. This style is more basic but more verbose than the <code>fprintf</code> concise formats.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "You may consider this module as providing an extension to the printf facility to provide automatic line breaking. The addition of pretty-printing annotations to your regular printf formats gives you fancy indentation and line breaks. Pretty-printing annotations are described below in the documentation of the function fprintf.", "rendered": "You may consider this module as providing an extension to the <code>printf</code> facility to provide automatic line breaking. The addition of pretty-printing annotations to your regular <code>printf</code> formats gives you fancy indentation and line breaks. Pretty-printing annotations are described below in the documentation of the function fprintf.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "For a gentle introduction to the basics of pretty-printing using Format, read http://caml.inria.fr/resources/doc/guides/format.en.html.", "rendered": "For a gentle introduction to the basics of pretty-printing using <code>Format</code>, read <a href='http://caml.inria.fr/resources/doc/guides/format.en.html'>http://caml.inria.fr/resources/doc/guides/format.en.html</a>.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "This module implements a pretty-printing facility to format text within &#39;pretty-printing boxes&#39;. The pretty-printer breaks lines at specified break hints, and indents lines according to the box structure.", "rendered": "This module implements a pretty-printing facility to format text within &#39;pretty-printing boxes&#39;. The pretty-printer breaks lines at specified break hints, and indents lines according to the box structure.", "breadcrumb": "Format"},
{"href": "./api/Format.html", "title": "Format", "contents": "Pretty printing.", "rendered": "Pretty printing.", "breadcrumb": "Format"},
{"href": "./api/Weak.html", "title": "Weak", "contents": "The equal relation must be able to work on a shallow copy of the values and give the same result as with the values themselves.", "rendered": "The <code>equal</code> relation must be able to work on a shallow copy of the values and give the same result as with the values themselves.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html", "title": "Weak", "contents": "A weak hash table is a hashed set of values. Each value may magically disappear from the set when it is not used by the rest of the program any more. This is normally used to share data structures without inducing memory leaks. Weak hash tables are defined on values from a HashedType module; the equal relation and hash function are taken from that module. We will say that v is an instance of x if equal x v is true.", "rendered": "A weak hash table is a hashed set of values. Each value may magically disappear from the set when it is not used by the rest of the program any more. This is normally used to share data structures without inducing memory leaks. Weak hash tables are defined on values from a HashedType module; the <code>equal</code> relation and <code>hash</code> function are taken from that module. We will say that <code>v</code> is an instance of <code>x</code> if <code>equal x v</code> is <code>true</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#Weak-hash-tables", "title": "Weak hash tables", "contents": "", "rendered": "", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-blit", "title": "blit", "contents": "Weak.blit ar1 off1 ar2 off2 len copies len weak pointers from ar1 (starting at off1) to ar2 (starting at off2). It works correctly even if ar1 and ar2 are the same. Raise Invalid_argument &quot;Weak.blit&quot; if off1 and len do not designate a valid subarray of ar1, or if off2 and len do not designate a valid subarray of ar2.", "rendered": "<code>Weak.blit ar1 off1 ar2 off2 len</code> copies <code>len</code> weak pointers from <code>ar1</code> (starting at <code>off1</code>) to <code>ar2</code> (starting at <code>off2</code>). It works correctly even if <code>ar1</code> and <code>ar2</code> are the same. Raise <code>Invalid_argument &quot;Weak.blit&quot;</code> if <code>off1</code> and <code>len</code> do not designate a valid subarray of <code>ar1</code>, or if <code>off2</code> and <code>len</code> do not designate a valid subarray of <code>ar2</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-blit", "title": "blit", "contents": "blit t int t int int unit     ", "rendered": "<h4 class='item'>let blit: (<a href=\"./api/Weak.html#type-t\">t</a>('a), int, <a href=\"./api/Weak.html#type-t\">t</a>('a), int, int) => unit</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-fill", "title": "fill", "contents": "Weak.fill ar ofs len el sets to el all pointers of ar from ofs to ofs + len - 1. Raise Invalid_argument &quot;Weak.fill&quot; if ofs and len do not designate a valid subarray of a.", "rendered": "<code>Weak.fill ar ofs len el</code> sets to <code>el</code> all pointers of <code>ar</code> from <code>ofs</code> to <code>ofs + len - 1</code>. Raise <code>Invalid_argument &quot;Weak.fill&quot;</code> if <code>ofs</code> and <code>len</code> do not designate a valid subarray of <code>a</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-fill", "title": "fill", "contents": "fill t int int option unit    ", "rendered": "<h4 class='item'>let fill: (<a href=\"./api/Weak.html#type-t\">t</a>('a), int, int, option('a)) => unit</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-check", "title": "check", "contents": "Weak.check ar n returns true if the nth cell of ar is full, false if it is empty. Note that even if Weak.check ar n returns true, a subsequent get ar n can return None.", "rendered": "<code>Weak.check ar n</code> returns <code>true</code> if the <code>n</code>th cell of <code>ar</code> is full, <code>false</code> if it is empty. Note that even if <code>Weak.check ar n</code> returns <code>true</code>, a subsequent get<code> ar n</code> can return <code>None</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-check", "title": "check", "contents": "check t int bool  ", "rendered": "<h4 class='item'>let check: (<a href=\"./api/Weak.html#type-t\">t</a>('a), int) => bool</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-get_copy", "title": "get_copy", "contents": "Weak.get_copy ar n returns None if the nth cell of ar is empty, Some x (where x is a (shallow) copy of the value) if it is full. In addition to pitfalls with mutable values, the interesting difference with get is that get_copy does not prevent the incremental GC from erasing the value in its current cycle (get may delay the erasure to the next GC cycle). Raise Invalid_argument &quot;Weak.get&quot; if n is not in the range 0 to length a - 1.", "rendered": "<code>Weak.get_copy ar n</code> returns None if the <code>n</code>th cell of <code>ar</code> is empty, <code>Some x</code> (where <code>x</code> is a (shallow) copy of the value) if it is full. In addition to pitfalls with mutable values, the interesting difference with <code>get</code> is that <code>get_copy</code> does not prevent the incremental GC from erasing the value in its current cycle (<code>get</code> may delay the erasure to the next GC cycle). Raise <code>Invalid_argument &quot;Weak.get&quot;</code> if <code>n</code> is not in the range 0 to length<code> a - 1</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-get_copy", "title": "get_copy", "contents": "get_copy t int option  ", "rendered": "<h4 class='item'>let get_copy: (<a href=\"./api/Weak.html#type-t\">t</a>('a), int) => option('a)</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-get", "title": "get", "contents": "Weak.get ar n returns None if the nth cell of ar is empty, Some x (where x is the value) if it is full. Raise Invalid_argument &quot;Weak.get&quot; if n is not in the range 0 to length a - 1.", "rendered": "<code>Weak.get ar n</code> returns None if the <code>n</code>th cell of <code>ar</code> is empty, <code>Some x</code> (where <code>x</code> is the value) if it is full. Raise <code>Invalid_argument &quot;Weak.get&quot;</code> if <code>n</code> is not in the range 0 to length<code> a - 1</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-get", "title": "get", "contents": "get t int option  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Weak.html#type-t\">t</a>('a), int) => option('a)</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-set", "title": "set", "contents": "Weak.set ar n (Some el) sets the nth cell of ar to be a (full) pointer to el; Weak.set ar n None sets the nth cell of ar to empty. Raise Invalid_argument &quot;Weak.set&quot; if n is not in the range 0 to length a - 1.", "rendered": "<code>Weak.set ar n (Some el)</code> sets the <code>n</code>th cell of <code>ar</code> to be a (full) pointer to <code>el</code>; <code>Weak.set ar n None</code> sets the <code>n</code>th cell of <code>ar</code> to empty. Raise <code>Invalid_argument &quot;Weak.set&quot;</code> if <code>n</code> is not in the range 0 to length<code> a - 1</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-set", "title": "set", "contents": "set t int option unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Weak.html#type-t\">t</a>('a), int, option('a)) => unit</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-length", "title": "length", "contents": "Weak.length ar returns the length (number of elements) of ar.", "rendered": "<code>Weak.length ar</code> returns the length (number of elements) of <code>ar</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Weak.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-create", "title": "create", "contents": "Weak.create n returns a new weak array of length n. All the pointers are initially empty. Raise Invalid_argument if n is negative or greater than max_array_length-1.", "rendered": "<code>Weak.create n</code> returns a new weak array of length <code>n</code>. All the pointers are initially empty. Raise <code>Invalid_argument</code> if <code>n</code> is negative or greater than max_array_length<code>-1</code>.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#value-create", "title": "create", "contents": "create int t ", "rendered": "<h4 class='item'>let create: int => <a href=\"./api/Weak.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#type-t", "title": "t", "contents": "Weak arrays cannot be marshaled using output_value nor the functions of the Marshal module.", "rendered": "Weak arrays cannot be marshaled using output_value nor the functions of the Marshal module.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#type-t", "title": "t", "contents": "Integers are not allocated and cannot be stored in weak arrays.", "rendered": "Integers are not allocated and cannot be stored in weak arrays.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#type-t", "title": "t", "contents": "Notes:", "rendered": "Notes:", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#type-t", "title": "t", "contents": "A weak pointer is said to be full if it points to a value, empty if the value was erased by the GC.", "rendered": "A weak pointer is said to be full if it points to a value, empty if the value was erased by the GC.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#type-t", "title": "t", "contents": "The type of arrays of weak pointers (weak arrays). A weak pointer is a value that the garbage collector may erase whenever the value is not used any more (through normal pointers) by the program. Note that finalisation functions are run after the weak pointers are erased.", "rendered": "The type of arrays of weak pointers (weak arrays). A weak pointer is a value that the garbage collector may erase whenever the value is not used any more (through normal pointers) by the program. Note that finalisation functions are run after the weak pointers are erased.", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Weak"},
{"href": "./api/Weak.html#Low-level-functions", "title": "Low-level functions", "contents": "", "rendered": "", "breadcrumb": "Weak"},
{"href": "./api/Weak.html", "title": "Weak", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Weak"},
{"href": "./api/Weak.html", "title": "Weak", "contents": "Arrays of weak pointers and hash tables of weak pointers.", "rendered": "Arrays of weak pointers and hash tables of weak pointers.", "breadcrumb": "Weak"},
{"href": "./api/StdLabels.html", "title": "StdLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "StdLabels"},
{"href": "./api/StdLabels.html", "title": "StdLabels", "contents": "They only differ by their labels. Detailed interfaces can be found in arrayLabels.mli, bytesLabels.mli, listLabels.mli and stringLabels.mli.", "rendered": "They only differ by their labels. Detailed interfaces can be found in <code>arrayLabels.mli</code>, <code>bytesLabels.mli</code>, <code>listLabels.mli</code> and <code>stringLabels.mli</code>.", "breadcrumb": "StdLabels"},
{"href": "./api/StdLabels.html", "title": "StdLabels", "contents": "This meta-module provides labelized version of the Array, Bytes, List and String modules.", "rendered": "This meta-module provides labelized version of the Array, Bytes, List and String modules.", "breadcrumb": "StdLabels"},
{"href": "./api/StdLabels.html", "title": "StdLabels", "contents": "Standard labeled libraries.", "rendered": "Standard labeled libraries.", "breadcrumb": "StdLabels"},
{"href": "./api/Map.html#module-Make", "title": "Make", "contents": "Functor building an implementation of the map structure given a totally ordered type.", "rendered": "Functor building an implementation of the map structure given a totally ordered type.", "breadcrumb": "Map"},
{"href": "./api/Map.html", "title": "Map", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Map"},
{"href": "./api/Map.html", "title": "Map", "contents": "This creates a new module PairsMap, with a new type &#39;a PairsMap.t of maps from int * int to &#39;a. In this example, m contains string values so its type is string PairsMap.t.", "rendered": "This creates a new module <code>PairsMap</code>, with a new type <code>&#39;a PairsMap.t</code> of maps from <code>int * int</code> to <code>&#39;a</code>. In this example, <code>m</code> contains <code>string</code> values so its type is <code>string PairsMap.t</code>.", "breadcrumb": "Map"},
{"href": "./api/Map.html", "title": "code block", "contents": "module IntPairs =\n  struct\n    type t = int * int\n    let compare (x0,y0) (x1,y1) =\n      match Pervasives.compare x0 x1 with\n          0 -> Pervasives.compare y0 y1\n        | c -> c\n  end\n\nmodule PairsMap = Map.Make(IntPairs)\n\nlet m = PairsMap.(empty |> add (0,1) \"hello\" |> add (1,0) \"world\")", "rendered": "<pre><code>module IntPairs =\n  struct\n    type t = int * int\n    let compare (x0,y0) (x1,y1) =\n      match Pervasives.compare x0 x1 with\n          0 -> Pervasives.compare y0 y1\n        | c -> c\n  end\n\nmodule PairsMap = Map.Make(IntPairs)\n\nlet m = PairsMap.(empty |> add (0,1) \"hello\" |> add (1,0) \"world\")</code></pre>", "breadcrumb": "Map"},
{"href": "./api/Map.html", "title": "Map", "contents": "For instance:", "rendered": "For instance:", "breadcrumb": "Map"},
{"href": "./api/Map.html", "title": "Map", "contents": "This module implements applicative association tables, also known as finite maps or dictionaries, given a total ordering function over the keys. All operations over maps are purely applicative (no side-effects). The implementation uses balanced binary trees, and therefore searching and insertion take time logarithmic in the size of the map.", "rendered": "This module implements applicative association tables, also known as finite maps or dictionaries, given a total ordering function over the keys. All operations over maps are purely applicative (no side-effects). The implementation uses balanced binary trees, and therefore searching and insertion take time logarithmic in the size of the map.", "breadcrumb": "Map"},
{"href": "./api/Map.html", "title": "Map", "contents": "Association tables over ordered types.", "rendered": "Association tables over ordered types.", "breadcrumb": "Map"},
{"href": "./api/Arg.html#value-current", "title": "current", "contents": "Position (in argv) of the argument being processed. You can change this value, e.g. to force parse to skip some arguments. parse uses the initial value of current as the index of argument 0 (the program name) and starts parsing arguments at the next element.", "rendered": "Position (in argv) of the argument being processed. You can change this value, e.g. to force parse to skip some arguments. parse uses the initial value of current as the index of argument 0 (the program name) and starts parsing arguments at the next element.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-current", "title": "current", "contents": "current ref int", "rendered": "<h4 class='item'>let current: <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(int)</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-align", "title": "align", "contents": "align option int list key spec doc list key spec doc limit ", "rendered": "<h4 class='item'>let align: (\n  ~?limit: option(int),\n  list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>))\n) => list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>))</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-usage_string", "title": "usage_string", "contents": "Returns the message that would have been printed by usage, if provided with the same parameters.", "rendered": "Returns the message that would have been printed by usage, if provided with the same parameters.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-usage_string", "title": "usage_string", "contents": "usage_string list key spec doc usage_msg string  ", "rendered": "<h4 class='item'>let usage_string: (\n  list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>)),\n  <a href=\"./api/Arg.html#type-usage_msg\">usage_msg</a>\n) => string</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-usage", "title": "usage", "contents": "Arg.usage speclist usage_msg prints to standard error an error message that includes the list of valid options. This is the same message that parse prints in case of error. speclist and usage_msg are the same as for Arg.parse.", "rendered": "<code>Arg.usage speclist usage_msg</code> prints to standard error an error message that includes the list of valid options. This is the same message that parse prints in case of error. <code>speclist</code> and <code>usage_msg</code> are the same as for <code>Arg.parse</code>.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-usage", "title": "usage", "contents": "usage list key spec doc usage_msg unit  ", "rendered": "<h4 class='item'>let usage: (list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>)), <a href=\"./api/Arg.html#type-usage_msg\">usage_msg</a>) => unit</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_argv_dynamic", "title": "parse_argv_dynamic", "contents": "Same as parse_argv, except that the speclist argument is a reference and may be updated during the parsing. See parse_dynamic.", "rendered": "Same as parse_argv, except that the <code>speclist</code> argument is a reference and may be updated during the parsing. See parse_dynamic.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_argv_dynamic", "title": "parse_argv_dynamic", "contents": "parse_argv_dynamic option ref int array string ref list key spec doc anon_fun string unit current    ", "rendered": "<h4 class='item'>let parse_argv_dynamic: (\n  ~?current: option(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(int)),\n  array(string),\n  <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>))),\n  <a href=\"./api/Arg.html#type-anon_fun\">anon_fun</a>,\n  string\n) => unit</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_argv", "title": "parse_argv", "contents": "Arg.parse_argv ~current args speclist anon_fun usage_msg parses the array args as if it were the command line. It uses and updates the value of ~current (if given), or Arg.current. You must set it before calling parse_argv. The initial value of current is the index of the program name (argument 0) in the array. If an error occurs, Arg.parse_argv raises Arg.Bad with the error message as argument. If option -help or --help is given, Arg.parse_argv raises Arg.Help with the help message as argument.", "rendered": "<code>Arg.parse_argv ~current args speclist anon_fun usage_msg</code> parses the array <code>args</code> as if it were the command line. It uses and updates the value of <code>~current</code> (if given), or <code>Arg.current</code>. You must set it before calling <code>parse_argv</code>. The initial value of <code>current</code> is the index of the program name (argument 0) in the array. If an error occurs, <code>Arg.parse_argv</code> raises <code>Arg.Bad</code> with the error message as argument. If option <code>-help</code> or <code>--help</code> is given, <code>Arg.parse_argv</code> raises <code>Arg.Help</code> with the help message as argument.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_argv", "title": "parse_argv", "contents": "parse_argv option ref int array string list key spec doc anon_fun usage_msg unit current    ", "rendered": "<h4 class='item'>let parse_argv: (\n  ~?current: option(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(int)),\n  array(string),\n  list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>)),\n  <a href=\"./api/Arg.html#type-anon_fun\">anon_fun</a>,\n  <a href=\"./api/Arg.html#type-usage_msg\">usage_msg</a>\n) => unit</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_dynamic", "title": "parse_dynamic", "contents": "command subcommand options where the list of options depends on the value of the subcommand argument.", "rendered": "command subcommand <code>options</code> where the list of options depends on the value of the subcommand argument.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_dynamic", "title": "parse_dynamic", "contents": "Same as parse, except that the speclist argument is a reference and may be updated during the parsing. A typical use for this feature is to parse command lines of the form:", "rendered": "Same as parse, except that the <code>speclist</code> argument is a reference and may be updated during the parsing. A typical use for this feature is to parse command lines of the form:", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse_dynamic", "title": "parse_dynamic", "contents": "parse_dynamic ref list key spec doc anon_fun usage_msg unit   ", "rendered": "<h4 class='item'>let parse_dynamic: (\n  <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>))),\n  <a href=\"./api/Arg.html#type-anon_fun\">anon_fun</a>,\n  <a href=\"./api/Arg.html#type-usage_msg\">usage_msg</a>\n) => unit</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "The list of options, each followed by the corresponding doc string. Beware: options that have an empty doc string will not be included in the list.", "rendered": "The list of options, each followed by the corresponding <code>doc</code> string. Beware: options that have an empty <code>doc</code> string will not be included in the list.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "usage_msg", "rendered": "<code>usage_msg</code>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "The reason for the error: unknown option, invalid or missing argument, etc.", "rendered": "The reason for the error: unknown option, invalid or missing argument, etc.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "By default, parse recognizes two unit options, -help and --help, which will print to standard output usage_msg and the list of options, and exit the program. You can override this behaviour by specifying your own -help and --help options in speclist.", "rendered": "By default, <code>parse</code> recognizes two unit options, <code>-help</code> and <code>--help</code>, which will print to standard output <code>usage_msg</code> and the list of options, and exit the program. You can override this behaviour by specifying your own <code>-help</code> and <code>--help</code> options in <code>speclist</code>.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "For the user to be able to specify anonymous arguments starting with a -, include for example (&quot;-&quot;, String anon_fun, doc) in speclist.", "rendered": "For the user to be able to specify anonymous arguments starting with a <code>-</code>, include for example <code>(&quot;-&quot;, String anon_fun, doc)</code> in <code>speclist</code>.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "If an error occurs, Arg.parse exits the program, after printing to standard error an error message as follows:", "rendered": "If an error occurs, <code>Arg.parse</code> exits the program, after printing to standard error an error message as follows:", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "Arg.parse speclist anon_fun usage_msg parses the command line. speclist is a list of triples (key, spec, doc). key is the option keyword, it must start with a &#39;-&#39; character. spec gives the option type and the function to call when this option is found on the command line. doc is a one-line description of this option. anon_fun is called on anonymous arguments. The functions in spec and anon_fun are called in the same order as their arguments appear on the command line.", "rendered": "<code>Arg.parse speclist anon_fun usage_msg</code> parses the command line. <code>speclist</code> is a list of triples <code>(key, spec, doc)</code>. <code>key</code> is the option keyword, it must start with a <code>&#39;-&#39;</code> character. <code>spec</code> gives the option type and the function to call when this option is found on the command line. <code>doc</code> is a one-line description of this option. <code>anon_fun</code> is called on anonymous arguments. The functions in <code>spec</code> and <code>anon_fun</code> are called in the same order as their arguments appear on the command line.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#value-parse", "title": "parse", "contents": "parse list key spec doc anon_fun usage_msg unit   ", "rendered": "<h4 class='item'>let parse: (\n  list((<a href=\"./api/Arg.html#type-key\">key</a>, <a href=\"./api/Arg.html#type-spec\">spec</a>, <a href=\"./api/Arg.html#type-doc\">doc</a>)),\n  <a href=\"./api/Arg.html#type-anon_fun\">anon_fun</a>,\n  <a href=\"./api/Arg.html#type-usage_msg\">usage_msg</a>\n) => unit</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#type-anon_fun", "title": "anon_fun", "contents": "anon_fun string unit ", "rendered": "<h4 class='item'>type anon_fun = string => unit</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#type-usage_msg", "title": "usage_msg", "contents": "usage_msg string", "rendered": "<h4 class='item'>type usage_msg = string</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#type-doc", "title": "doc", "contents": "doc string", "rendered": "<h4 class='item'>type doc = string</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#type-key", "title": "key", "contents": "key string", "rendered": "<h4 class='item'>type key = string</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#type-spec", "title": "spec", "contents": "The concrete type describing the behavior associated with a keyword.", "rendered": "The concrete type describing the behavior associated with a keyword.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html#type-spec", "title": "spec", "contents": "spec unit unit  bool unit  ref bool ref bool string unit  ref string int unit  ref int float unit  ref float list spec list string string unit  string unit ", "rendered": "<h4 class='item'>type spec = \n  | Unit(unit => unit)\n  | Bool(bool => unit)\n  | Set(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(bool))\n  | Clear(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(bool))\n  | String(string => unit)\n  | Set_string(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(string))\n  | Int(int => unit)\n  | Set_int(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(int))\n  | Float(float => unit)\n  | Set_float(<a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(float))\n  | Tuple(list(<a href=\"./api/Arg.html#type-spec\">spec</a>))\n  | Symbol(list(string), string => unit)\n  | Rest(string => unit)\n</h4>", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "cmd a b -- c d      (two anonymous arguments and a rest option with two arguments)", "rendered": "<code>cmd a b -- c d      </code>(two anonymous arguments and a rest option with two arguments)", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "cmd a b c           (three anonymous arguments: &quot;a&quot;, &quot;b&quot;, and &quot;c&quot;)", "rendered": "<code>cmd a b c           </code>(three anonymous arguments: <code>&quot;a&quot;</code>, <code>&quot;b&quot;</code>, and <code>&quot;c&quot;</code>)", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "cmd -float 12.34    (a float option with argument 12.34)", "rendered": "<code>cmd -float 12.34    </code>(a float option with argument <code>12.34</code>)", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "cmd -string foobar  (a string option with argument &quot;foobar&quot;)", "rendered": "<code>cmd -string foobar  </code>(a string option with argument <code>&quot;foobar&quot;</code>)", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "cmd -int 1          (an int option with argument 1)", "rendered": "<code>cmd -int 1          </code>(an int option with argument <code>1</code>)", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "cmd -flag           (a unit option)", "rendered": "<code>cmd -flag           </code>(a unit option)", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "Examples (cmd is assumed to be the command name):", "rendered": "Examples (<code>cmd</code> is assumed to be the command name):", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "Syntax of command lines: A keyword is a character string starting with a -. An option is a keyword alone or followed by an argument. The types of keywords are: Unit, Bool, Set, Clear, String, Set_string, Int, Set_int, Float, Set_float, Tuple, Symbol, and Rest. Unit, Set and Clear keywords take no argument. A Rest keyword takes the remaining of the command line as arguments. Every other keyword takes the following word on the command line as argument. Arguments not preceded by a keyword are called anonymous arguments.", "rendered": "Syntax of command lines: A keyword is a character string starting with a <code>-</code>. An option is a keyword alone or followed by an argument. The types of keywords are: <code>Unit</code>, <code>Bool</code>, <code>Set</code>, <code>Clear</code>, <code>String</code>, <code>Set_string</code>, <code>Int</code>, <code>Set_int</code>, <code>Float</code>, <code>Set_float</code>, <code>Tuple</code>, <code>Symbol</code>, and <code>Rest</code>. <code>Unit</code>, <code>Set</code> and <code>Clear</code> keywords take no argument. A <code>Rest</code> keyword takes the remaining of the command line as arguments. Every other keyword takes the following word on the command line as argument. Arguments not preceded by a keyword are called anonymous arguments.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "This module provides a general mechanism for extracting options and arguments from the command line to the program.", "rendered": "This module provides a general mechanism for extracting options and arguments from the command line to the program.", "breadcrumb": "Arg"},
{"href": "./api/Arg.html", "title": "Arg", "contents": "Parsing of command line arguments.", "rendered": "Parsing of command line arguments.", "breadcrumb": "Arg"},
{"href": "./api/Bigarray.html#value-reshape_3", "title": "reshape_3", "contents": "Specialized version of reshape for reshaping to three-dimensional arrays.", "rendered": "Specialized version of reshape for reshaping to three-dimensional arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape_3", "title": "reshape_3", "contents": "reshape_3 Genarray t int int int Array3 t    ", "rendered": "<h4 class='item'>let reshape_3: (\n  <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c),\n  int,\n  int,\n  int\n) => <a href=\"./api/Bigarray.html#module-Array3\">Array3</a>.<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape_2", "title": "reshape_2", "contents": "Specialized version of reshape for reshaping to two-dimensional arrays.", "rendered": "Specialized version of reshape for reshaping to two-dimensional arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape_2", "title": "reshape_2", "contents": "reshape_2 Genarray t int int Array2 t   ", "rendered": "<h4 class='item'>let reshape_2: (\n  <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c),\n  int,\n  int\n) => <a href=\"./api/Bigarray.html#module-Array2\">Array2</a>.<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape_1", "title": "reshape_1", "contents": "Specialized version of reshape for reshaping to one-dimensional arrays.", "rendered": "Specialized version of reshape for reshaping to one-dimensional arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape_1", "title": "reshape_1", "contents": "reshape_1 Genarray t int Array1 t  ", "rendered": "<h4 class='item'>let reshape_1: (<a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c), int) => <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape", "title": "reshape", "contents": "reshape b [|d1;...;dN|] converts the big array b to a N-dimensional array of dimensions d1...dN. The returned array and the original array b share their data and have the same layout. For instance, assuming that b is a one-dimensional array of dimension 12, reshape b [|3;4|] returns a two-dimensional array b&#39; of dimensions 3 and 4. If b has C layout, the element (x,y) of b&#39; corresponds to the element x * 3 + y of b. If b has Fortran layout, the element (x,y) of b&#39; corresponds to the element x + (y - 1) * 4 of b. The returned big array must have exactly the same number of elements as the original big array b. That is, the product of the dimensions of b must be equal to i1 * ... * iN. Otherwise, Invalid_argument is raised.", "rendered": "<code>reshape b [|d1;...;dN|]</code> converts the big array <code>b</code> to a <code>N</code>-dimensional array of dimensions <code>d1</code>...<code>dN</code>. The returned array and the original array <code>b</code> share their data and have the same layout. For instance, assuming that <code>b</code> is a one-dimensional array of dimension 12, <code>reshape b [|3;4|]</code> returns a two-dimensional array <code>b&#39;</code> of dimensions 3 and 4. If <code>b</code> has C layout, the element <code>(x,y)</code> of <code>b&#39;</code> corresponds to the element <code>x * 3 + y</code> of <code>b</code>. If <code>b</code> has Fortran layout, the element <code>(x,y)</code> of <code>b&#39;</code> corresponds to the element <code>x + (y - 1) * 4</code> of <code>b</code>. The returned big array must have exactly the same number of elements as the original big array <code>b</code>. That is, the product of the dimensions of <code>b</code> must be equal to <code>i1 * ... * iN</code>. Otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-reshape", "title": "reshape", "contents": "reshape Genarray t array int Genarray t  ", "rendered": "<h4 class='item'>let reshape: (\n  <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c),\n  array(int)\n) => <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Re-shaping-big-arrays", "title": "Re-shaping big arrays", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-array3_of_genarray", "title": "array3_of_genarray", "contents": "Return the three-dimensional big array corresponding to the given generic big array. Raise Invalid_argument if the generic big array does not have exactly three dimensions.", "rendered": "Return the three-dimensional big array corresponding to the given generic big array. Raise <code>Invalid_argument</code> if the generic big array does not have exactly three dimensions.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-array3_of_genarray", "title": "array3_of_genarray", "contents": "array3_of_genarray Genarray t Array3 t ", "rendered": "<h4 class='item'>let array3_of_genarray: <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#module-Array3\">Array3</a>.<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-array2_of_genarray", "title": "array2_of_genarray", "contents": "Return the two-dimensional big array corresponding to the given generic big array. Raise Invalid_argument if the generic big array does not have exactly two dimensions.", "rendered": "Return the two-dimensional big array corresponding to the given generic big array. Raise <code>Invalid_argument</code> if the generic big array does not have exactly two dimensions.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-array2_of_genarray", "title": "array2_of_genarray", "contents": "array2_of_genarray Genarray t Array2 t ", "rendered": "<h4 class='item'>let array2_of_genarray: <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#module-Array2\">Array2</a>.<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-array1_of_genarray", "title": "array1_of_genarray", "contents": "Return the one-dimensional big array corresponding to the given generic big array. Raise Invalid_argument if the generic big array does not have exactly one dimension.", "rendered": "Return the one-dimensional big array corresponding to the given generic big array. Raise <code>Invalid_argument</code> if the generic big array does not have exactly one dimension.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-array1_of_genarray", "title": "array1_of_genarray", "contents": "array1_of_genarray Genarray t Array1 t ", "rendered": "<h4 class='item'>let array1_of_genarray: <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-genarray_of_array3", "title": "genarray_of_array3", "contents": "Return the generic big array corresponding to the given three-dimensional big array.", "rendered": "Return the generic big array corresponding to the given three-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-genarray_of_array3", "title": "genarray_of_array3", "contents": "genarray_of_array3 Array3 t Genarray t ", "rendered": "<h4 class='item'>let genarray_of_array3: <a href=\"./api/Bigarray.html#module-Array3\">Array3</a>.<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-genarray_of_array2", "title": "genarray_of_array2", "contents": "Return the generic big array corresponding to the given two-dimensional big array.", "rendered": "Return the generic big array corresponding to the given two-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-genarray_of_array2", "title": "genarray_of_array2", "contents": "genarray_of_array2 Array2 t Genarray t ", "rendered": "<h4 class='item'>let genarray_of_array2: <a href=\"./api/Bigarray.html#module-Array2\">Array2</a>.<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-genarray_of_array1", "title": "genarray_of_array1", "contents": "Return the generic big array corresponding to the given one-dimensional big array.", "rendered": "Return the generic big array corresponding to the given one-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-genarray_of_array1", "title": "genarray_of_array1", "contents": "genarray_of_array1 Array1 t Genarray t ", "rendered": "<h4 class='item'>let genarray_of_array1: <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#module-Genarray\">Genarray</a>.<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Coercions-between-generic-big-arrays-and-fixed-dimension-big-arrays", "title": "Coercions between generic big arrays and fixed-dimension big arrays", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.unsafe_set", "title": "Array3.unsafe_set", "contents": "Like set, but bounds checking is not always performed.", "rendered": "Like set, but bounds checking is not always performed.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.unsafe_set", "title": "Array3.unsafe_set", "contents": "unsafe_set t int int int unit     ", "rendered": "<h4 class='item'>let unsafe_set: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c), int, int, int, 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.unsafe_get", "title": "Array3.unsafe_get", "contents": "Like get, but bounds checking is not always performed.", "rendered": "Like get, but bounds checking is not always performed.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.unsafe_get", "title": "Array3.unsafe_get", "contents": "unsafe_get t int int int    ", "rendered": "<h4 class='item'>let unsafe_get: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c), int, int, int) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.map_file", "title": "Array3.map_file", "contents": "Memory mapping of a file as a three-dimensional big array. See map_file for more details.", "rendered": "Memory mapping of a file as a three-dimensional big array. See map_file for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.map_file", "title": "Array3.map_file", "contents": "map_file file_descr option int64 kind layout bool int int int t  pos      ", "rendered": "<h4 class='item'>let map_file: (\n  <a href=\"./api/Unix.html#type-file_descr\" title=\"Unix.file_descr\">file_descr</a>,\n  ~?pos: option(int64),\n  <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b),\n  <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c),\n  bool,\n  int,\n  int,\n  int\n) => <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.of_array", "title": "Array3.of_array", "contents": "Build a three-dimensional big array initialized from the given array of arrays of arrays.", "rendered": "Build a three-dimensional big array initialized from the given array of arrays of arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.of_array", "title": "Array3.of_array", "contents": "of_array kind layout array array array t   ", "rendered": "<h4 class='item'>let of_array: (\n  <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b),\n  <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c),\n  array(array(array('a)))\n) => <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.fill", "title": "Array3.fill", "contents": "Fill the given big array with the given value. See fill for more details.", "rendered": "Fill the given big array with the given value. See fill for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.fill", "title": "Array3.fill", "contents": "fill t unit  ", "rendered": "<h4 class='item'>let fill: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c), 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.blit", "title": "Array3.blit", "contents": "Copy the first big array to the second big array. See blit for more details.", "rendered": "Copy the first big array to the second big array. See blit for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.blit", "title": "Array3.blit", "contents": "blit t t unit  ", "rendered": "<h4 class='item'>let blit: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c), <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c)) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_right_2", "title": "Array3.slice_right_2", "contents": "Extract a two-dimensional slice of the given three-dimensional big array by fixing the last coordinate. The integer parameter is the coordinate of the slice to extract. See slice_right for more details. Array3.slice_right_2 applies only to arrays with Fortran layout.", "rendered": "Extract a two-dimensional slice of the given three-dimensional big array by fixing the last coordinate. The integer parameter is the coordinate of the slice to extract. See slice_right for more details. <code>Array3.slice_right_2</code> applies only to arrays with Fortran layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_right_2", "title": "Array3.slice_right_2", "contents": "slice_right_2 t fortran_layout int Array2 t fortran_layout  ", "rendered": "<h4 class='item'>let slice_right_2: (\n  <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>),\n  int\n) => <a href=\"./api/Bigarray.html#module-Array2\">Array2</a>.<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_left_2", "title": "Array3.slice_left_2", "contents": "Extract a two-dimensional slice of the given three-dimensional big array by fixing the first coordinate. The integer parameter is the first coordinate of the slice to extract. See slice_left for more details. Array3.slice_left_2 applies only to arrays with C layout.", "rendered": "Extract a two-dimensional slice of the given three-dimensional big array by fixing the first coordinate. The integer parameter is the first coordinate of the slice to extract. See slice_left for more details. <code>Array3.slice_left_2</code> applies only to arrays with C layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_left_2", "title": "Array3.slice_left_2", "contents": "slice_left_2 t c_layout int Array2 t c_layout  ", "rendered": "<h4 class='item'>let slice_left_2: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>), int) => <a href=\"./api/Bigarray.html#module-Array2\">Array2</a>.<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_right_1", "title": "Array3.slice_right_1", "contents": "Extract a one-dimensional slice of the given three-dimensional big array by fixing the last two coordinates. The integer parameters are the coordinates of the slice to extract. See slice_right for more details. Array3.slice_right_1 applies only to arrays with Fortran layout.", "rendered": "Extract a one-dimensional slice of the given three-dimensional big array by fixing the last two coordinates. The integer parameters are the coordinates of the slice to extract. See slice_right for more details. <code>Array3.slice_right_1</code> applies only to arrays with Fortran layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_right_1", "title": "Array3.slice_right_1", "contents": "slice_right_1 t fortran_layout int int Array1 t fortran_layout   ", "rendered": "<h4 class='item'>let slice_right_1: (\n  <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>),\n  int,\n  int\n) => <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_left_1", "title": "Array3.slice_left_1", "contents": "Extract a one-dimensional slice of the given three-dimensional big array by fixing the first two coordinates. The integer parameters are the coordinates of the slice to extract. See slice_left for more details. Array3.slice_left_1 applies only to arrays with C layout.", "rendered": "Extract a one-dimensional slice of the given three-dimensional big array by fixing the first two coordinates. The integer parameters are the coordinates of the slice to extract. See slice_left for more details. <code>Array3.slice_left_1</code> applies only to arrays with C layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.slice_left_1", "title": "Array3.slice_left_1", "contents": "slice_left_1 t c_layout int int Array1 t c_layout   ", "rendered": "<h4 class='item'>let slice_left_1: (\n  <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>),\n  int,\n  int\n) => <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.sub_right", "title": "Array3.sub_right", "contents": "Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the second dimension. See sub_right for more details. Array3.sub_right applies only to arrays with Fortran layout.", "rendered": "Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the second dimension. See sub_right for more details. <code>Array3.sub_right</code> applies only to arrays with Fortran layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.sub_right", "title": "Array3.sub_right", "contents": "sub_right t fortran_layout int int t fortran_layout   ", "rendered": "<h4 class='item'>let sub_right: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>), int, int) => <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.sub_left", "title": "Array3.sub_left", "contents": "Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the first dimension. See sub_left for more details. Array3.sub_left applies only to arrays with C layout.", "rendered": "Extract a three-dimensional sub-array of the given three-dimensional big array by restricting the first dimension. See sub_left for more details. <code>Array3.sub_left</code> applies only to arrays with C layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.sub_left", "title": "Array3.sub_left", "contents": "sub_left t c_layout int int t c_layout   ", "rendered": "<h4 class='item'>let sub_left: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>), int, int) => <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.set", "title": "Array3.set", "contents": "Array3.set a x y v, or alternatively a.{x,y,z} &lt;- v, stores the value v at coordinates (x, y, z) in a. x, y and z must be within the bounds of a, as described for set; otherwise, Invalid_argument is raised.", "rendered": "<code>Array3.set a x y v</code>, or alternatively <code>a.{x,y,z} &lt;- v</code>, stores the value <code>v</code> at coordinates (<code>x</code>, <code>y</code>, <code>z</code>) in <code>a</code>. <code>x</code>, <code>y</code> and <code>z</code> must be within the bounds of <code>a</code>, as described for set; otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.set", "title": "Array3.set", "contents": "set t int int int unit     ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c), int, int, int, 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.get", "title": "Array3.get", "contents": "Array3.get a x y z, also written a.{x,y,z}, returns the element of a at coordinates (x, y, z). x, y and z must be within the bounds of a, as described for get; otherwise, Invalid_argument is raised.", "rendered": "<code>Array3.get a x y z</code>, also written <code>a.{x,y,z}</code>, returns the element of <code>a</code> at coordinates (<code>x</code>, <code>y</code>, <code>z</code>). <code>x</code>, <code>y</code> and <code>z</code> must be within the bounds of <code>a</code>, as described for get; otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.get", "title": "Array3.get", "contents": "get t int int int    ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c), int, int, int) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.layout", "title": "Array3.layout", "contents": "Return the layout of the given big array.", "rendered": "Return the layout of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.layout", "title": "Array3.layout", "contents": "layout t layout ", "rendered": "<h4 class='item'>let layout: <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.kind", "title": "Array3.kind", "contents": "Return the kind of the given big array.", "rendered": "Return the kind of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.kind", "title": "Array3.kind", "contents": "kind t kind ", "rendered": "<h4 class='item'>let kind: <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.dim3", "title": "Array3.dim3", "contents": "Return the third dimension of the given three-dimensional big array.", "rendered": "Return the third dimension of the given three-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.dim3", "title": "Array3.dim3", "contents": "dim3 t int ", "rendered": "<h4 class='item'>let dim3: <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.dim2", "title": "Array3.dim2", "contents": "Return the second dimension of the given three-dimensional big array.", "rendered": "Return the second dimension of the given three-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.dim2", "title": "Array3.dim2", "contents": "dim2 t int ", "rendered": "<h4 class='item'>let dim2: <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.dim1", "title": "Array3.dim1", "contents": "Return the first dimension of the given three-dimensional big array.", "rendered": "Return the first dimension of the given three-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.dim1", "title": "Array3.dim1", "contents": "dim1 t int ", "rendered": "<h4 class='item'>let dim1: <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.create", "title": "Array3.create", "contents": "Array3.create kind layout dim1 dim2 dim3 returns a new bigarray of three dimension, whose size is dim1 in the first dimension, dim2 in the second dimension, and dim3 in the third. kind and layout determine the array element kind and the array layout as described for create.", "rendered": "<code>Array3.create kind layout dim1 dim2 dim3</code> returns a new bigarray of three dimension, whose size is <code>dim1</code> in the first dimension, <code>dim2</code> in the second dimension, and <code>dim3</code> in the third. <code>kind</code> and <code>layout</code> determine the array element kind and the array layout as described for create.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array3.create", "title": "Array3.create", "contents": "create kind layout int int int t     ", "rendered": "<h4 class='item'>let create: (<a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b), <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c), int, int, int) => <a href=\"./api/Bigarray.html#type-Array3.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Array3.t", "title": "Array3.t", "contents": "The type of three-dimensional big arrays whose elements have OCaml type &#39;a, representation kind &#39;b, and memory layout &#39;c.", "rendered": "The type of three-dimensional big arrays whose elements have OCaml type <code>&#39;a</code>, representation kind <code>&#39;b</code>, and memory layout <code>&#39;c</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Array3.t", "title": "Array3.t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Array3", "title": "Array3", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Array3", "title": "Array3", "contents": "Three-dimensional arrays. The Array3 structure provides operations similar to those of Genarray, but specialized to the case of three-dimensional arrays.", "rendered": "Three-dimensional arrays. The <code>Array3</code> structure provides operations similar to those of Genarray, but specialized to the case of three-dimensional arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Three-dimensional-arrays", "title": "Three-dimensional arrays", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.unsafe_set", "title": "Array2.unsafe_set", "contents": "Like set, but bounds checking is not always performed.", "rendered": "Like set, but bounds checking is not always performed.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.unsafe_set", "title": "Array2.unsafe_set", "contents": "unsafe_set t int int unit    ", "rendered": "<h4 class='item'>let unsafe_set: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c), int, int, 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.unsafe_get", "title": "Array2.unsafe_get", "contents": "Like get, but bounds checking is not always performed.", "rendered": "Like get, but bounds checking is not always performed.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.unsafe_get", "title": "Array2.unsafe_get", "contents": "unsafe_get t int int   ", "rendered": "<h4 class='item'>let unsafe_get: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c), int, int) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.map_file", "title": "Array2.map_file", "contents": "Memory mapping of a file as a two-dimensional big array. See map_file for more details.", "rendered": "Memory mapping of a file as a two-dimensional big array. See map_file for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.map_file", "title": "Array2.map_file", "contents": "map_file file_descr option int64 kind layout bool int int t  pos     ", "rendered": "<h4 class='item'>let map_file: (\n  <a href=\"./api/Unix.html#type-file_descr\" title=\"Unix.file_descr\">file_descr</a>,\n  ~?pos: option(int64),\n  <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b),\n  <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c),\n  bool,\n  int,\n  int\n) => <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.of_array", "title": "Array2.of_array", "contents": "Build a two-dimensional big array initialized from the given array of arrays.", "rendered": "Build a two-dimensional big array initialized from the given array of arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.of_array", "title": "Array2.of_array", "contents": "of_array kind layout array array t   ", "rendered": "<h4 class='item'>let of_array: (\n  <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b),\n  <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c),\n  array(array('a))\n) => <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.fill", "title": "Array2.fill", "contents": "Fill the given big array with the given value. See fill for more details.", "rendered": "Fill the given big array with the given value. See fill for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.fill", "title": "Array2.fill", "contents": "fill t unit  ", "rendered": "<h4 class='item'>let fill: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c), 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.blit", "title": "Array2.blit", "contents": "Copy the first big array to the second big array. See blit for more details.", "rendered": "Copy the first big array to the second big array. See blit for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.blit", "title": "Array2.blit", "contents": "blit t t unit  ", "rendered": "<h4 class='item'>let blit: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c), <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c)) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.slice_right", "title": "Array2.slice_right", "contents": "Extract a column (one-dimensional slice) of the given two-dimensional big array. The integer parameter is the index of the column to extract. See slice_right for more details. Array2.slice_right applies only to arrays with Fortran layout.", "rendered": "Extract a column (one-dimensional slice) of the given two-dimensional big array. The integer parameter is the index of the column to extract. See slice_right for more details. <code>Array2.slice_right</code> applies only to arrays with Fortran layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.slice_right", "title": "Array2.slice_right", "contents": "slice_right t fortran_layout int Array1 t fortran_layout  ", "rendered": "<h4 class='item'>let slice_right: (\n  <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>),\n  int\n) => <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.slice_left", "title": "Array2.slice_left", "contents": "Extract a row (one-dimensional slice) of the given two-dimensional big array. The integer parameter is the index of the row to extract. See slice_left for more details. Array2.slice_left applies only to arrays with C layout.", "rendered": "Extract a row (one-dimensional slice) of the given two-dimensional big array. The integer parameter is the index of the row to extract. See slice_left for more details. <code>Array2.slice_left</code> applies only to arrays with C layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.slice_left", "title": "Array2.slice_left", "contents": "slice_left t c_layout int Array1 t c_layout  ", "rendered": "<h4 class='item'>let slice_left: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>), int) => <a href=\"./api/Bigarray.html#module-Array1\">Array1</a>.<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.sub_right", "title": "Array2.sub_right", "contents": "Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the second dimension. See sub_right for more details. Array2.sub_right applies only to arrays with Fortran layout.", "rendered": "Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the second dimension. See sub_right for more details. <code>Array2.sub_right</code> applies only to arrays with Fortran layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.sub_right", "title": "Array2.sub_right", "contents": "sub_right t fortran_layout int int t fortran_layout   ", "rendered": "<h4 class='item'>let sub_right: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>), int, int) => <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.sub_left", "title": "Array2.sub_left", "contents": "Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the first dimension. See sub_left for more details. Array2.sub_left applies only to arrays with C layout.", "rendered": "Extract a two-dimensional sub-array of the given two-dimensional big array by restricting the first dimension. See sub_left for more details. <code>Array2.sub_left</code> applies only to arrays with C layout.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.sub_left", "title": "Array2.sub_left", "contents": "sub_left t c_layout int int t c_layout   ", "rendered": "<h4 class='item'>let sub_left: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>), int, int) => <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.set", "title": "Array2.set", "contents": "Array2.set a x y v, or alternatively a.{x,y} &lt;- v, stores the value v at coordinates (x, y) in a. x and y must be within the bounds of a, as described for set; otherwise, Invalid_argument is raised.", "rendered": "<code>Array2.set a x y v</code>, or alternatively <code>a.{x,y} &lt;- v</code>, stores the value <code>v</code> at coordinates (<code>x</code>, <code>y</code>) in <code>a</code>. <code>x</code> and <code>y</code> must be within the bounds of <code>a</code>, as described for set; otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.set", "title": "Array2.set", "contents": "set t int int unit    ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c), int, int, 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.get", "title": "Array2.get", "contents": "Array2.get a x y, also written a.{x,y}, returns the element of a at coordinates (x, y). x and y must be within the bounds of a, as described for get; otherwise, Invalid_argument is raised.", "rendered": "<code>Array2.get a x y</code>, also written <code>a.{x,y}</code>, returns the element of <code>a</code> at coordinates (<code>x</code>, <code>y</code>). <code>x</code> and <code>y</code> must be within the bounds of <code>a</code>, as described for get; otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.get", "title": "Array2.get", "contents": "get t int int   ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c), int, int) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.layout", "title": "Array2.layout", "contents": "Return the layout of the given big array.", "rendered": "Return the layout of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.layout", "title": "Array2.layout", "contents": "layout t layout ", "rendered": "<h4 class='item'>let layout: <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.kind", "title": "Array2.kind", "contents": "Return the kind of the given big array.", "rendered": "Return the kind of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.kind", "title": "Array2.kind", "contents": "kind t kind ", "rendered": "<h4 class='item'>let kind: <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.dim2", "title": "Array2.dim2", "contents": "Return the second dimension of the given two-dimensional big array.", "rendered": "Return the second dimension of the given two-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.dim2", "title": "Array2.dim2", "contents": "dim2 t int ", "rendered": "<h4 class='item'>let dim2: <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.dim1", "title": "Array2.dim1", "contents": "Return the first dimension of the given two-dimensional big array.", "rendered": "Return the first dimension of the given two-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.dim1", "title": "Array2.dim1", "contents": "dim1 t int ", "rendered": "<h4 class='item'>let dim1: <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.create", "title": "Array2.create", "contents": "Array2.create kind layout dim1 dim2 returns a new bigarray of two dimension, whose size is dim1 in the first dimension and dim2 in the second dimension. kind and layout determine the array element kind and the array layout as described for create.", "rendered": "<code>Array2.create kind layout dim1 dim2</code> returns a new bigarray of two dimension, whose size is <code>dim1</code> in the first dimension and <code>dim2</code> in the second dimension. <code>kind</code> and <code>layout</code> determine the array element kind and the array layout as described for create.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array2.create", "title": "Array2.create", "contents": "create kind layout int int t    ", "rendered": "<h4 class='item'>let create: (<a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b), <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c), int, int) => <a href=\"./api/Bigarray.html#type-Array2.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Array2.t", "title": "Array2.t", "contents": "The type of two-dimensional big arrays whose elements have OCaml type &#39;a, representation kind &#39;b, and memory layout &#39;c.", "rendered": "The type of two-dimensional big arrays whose elements have OCaml type <code>&#39;a</code>, representation kind <code>&#39;b</code>, and memory layout <code>&#39;c</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Array2.t", "title": "Array2.t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Array2", "title": "Array2", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Array2", "title": "Array2", "contents": "Two-dimensional arrays. The Array2 structure provides operations similar to those of Genarray, but specialized to the case of two-dimensional arrays.", "rendered": "Two-dimensional arrays. The <code>Array2</code> structure provides operations similar to those of Genarray, but specialized to the case of two-dimensional arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Two-dimensional-arrays", "title": "Two-dimensional arrays", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.unsafe_set", "title": "Array1.unsafe_set", "contents": "Like set, but bounds checking is not always performed. Use with caution and only when the program logic guarantees that the access is within bounds.", "rendered": "Like set, but bounds checking is not always performed. Use with caution and only when the program logic guarantees that the access is within bounds.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.unsafe_set", "title": "Array1.unsafe_set", "contents": "unsafe_set t int unit   ", "rendered": "<h4 class='item'>let unsafe_set: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), int, 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.unsafe_get", "title": "Array1.unsafe_get", "contents": "Like get, but bounds checking is not always performed. Use with caution and only when the program logic guarantees that the access is within bounds.", "rendered": "Like get, but bounds checking is not always performed. Use with caution and only when the program logic guarantees that the access is within bounds.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.unsafe_get", "title": "Array1.unsafe_get", "contents": "unsafe_get t int  ", "rendered": "<h4 class='item'>let unsafe_get: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), int) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.map_file", "title": "Array1.map_file", "contents": "Memory mapping of a file as a one-dimensional big array. See map_file for more details.", "rendered": "Memory mapping of a file as a one-dimensional big array. See map_file for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.map_file", "title": "Array1.map_file", "contents": "map_file file_descr option int64 kind layout bool int t  pos    ", "rendered": "<h4 class='item'>let map_file: (\n  <a href=\"./api/Unix.html#type-file_descr\" title=\"Unix.file_descr\">file_descr</a>,\n  ~?pos: option(int64),\n  <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b),\n  <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c),\n  bool,\n  int\n) => <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.of_array", "title": "Array1.of_array", "contents": "Build a one-dimensional big array initialized from the given array.", "rendered": "Build a one-dimensional big array initialized from the given array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.of_array", "title": "Array1.of_array", "contents": "of_array kind layout array t   ", "rendered": "<h4 class='item'>let of_array: (<a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b), <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c), array('a)) => <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.fill", "title": "Array1.fill", "contents": "Fill the given big array with the given value. See Genarray.fill for more details.", "rendered": "Fill the given big array with the given value. See <code>Genarray.fill</code> for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.fill", "title": "Array1.fill", "contents": "fill t unit  ", "rendered": "<h4 class='item'>let fill: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.blit", "title": "Array1.blit", "contents": "Copy the first big array to the second big array. See Genarray.blit for more details.", "rendered": "Copy the first big array to the second big array. See <code>Genarray.blit</code> for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.blit", "title": "Array1.blit", "contents": "blit t t unit  ", "rendered": "<h4 class='item'>let blit: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c)) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.sub", "title": "Array1.sub", "contents": "Extract a sub-array of the given one-dimensional big array. See Genarray.sub_left for more details.", "rendered": "Extract a sub-array of the given one-dimensional big array. See <code>Genarray.sub_left</code> for more details.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.sub", "title": "Array1.sub", "contents": "sub t int int t   ", "rendered": "<h4 class='item'>let sub: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), int, int) => <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.set", "title": "Array1.set", "contents": "Array1.set a x v, also written a.{x} &lt;- v, stores the value v at index x in a. x must be inside the bounds of a as described in get; otherwise, Invalid_argument is raised.", "rendered": "<code>Array1.set a x v</code>, also written <code>a.{x} &lt;- v</code>, stores the value <code>v</code> at index <code>x</code> in <code>a</code>. <code>x</code> must be inside the bounds of <code>a</code> as described in get; otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.set", "title": "Array1.set", "contents": "set t int unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), int, 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.get", "title": "Array1.get", "contents": "Array1.get a x, or alternatively a.{x}, returns the element of a at index x. x must be greater or equal than 0 and strictly less than Array1.dim a if a has C layout. If a has Fortran layout, x must be greater or equal than 1 and less or equal than Array1.dim a. Otherwise, Invalid_argument is raised.", "rendered": "<code>Array1.get a x</code>, or alternatively <code>a.{x}</code>, returns the element of <code>a</code> at index <code>x</code>. <code>x</code> must be greater or equal than <code>0</code> and strictly less than <code>Array1.dim a</code> if <code>a</code> has C layout. If <code>a</code> has Fortran layout, <code>x</code> must be greater or equal than <code>1</code> and less or equal than <code>Array1.dim a</code>. Otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.get", "title": "Array1.get", "contents": "get t int  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c), int) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.layout", "title": "Array1.layout", "contents": "Return the layout of the given big array.", "rendered": "Return the layout of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.layout", "title": "Array1.layout", "contents": "layout t layout ", "rendered": "<h4 class='item'>let layout: <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.kind", "title": "Array1.kind", "contents": "Return the kind of the given big array.", "rendered": "Return the kind of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.kind", "title": "Array1.kind", "contents": "kind t kind ", "rendered": "<h4 class='item'>let kind: <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.dim", "title": "Array1.dim", "contents": "Return the size (dimension) of the given one-dimensional big array.", "rendered": "Return the size (dimension) of the given one-dimensional big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.dim", "title": "Array1.dim", "contents": "dim t int ", "rendered": "<h4 class='item'>let dim: <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.create", "title": "Array1.create", "contents": "Array1.create kind layout dim returns a new bigarray of one dimension, whose size is dim. kind and layout determine the array element kind and the array layout as described for Genarray.create.", "rendered": "<code>Array1.create kind layout dim</code> returns a new bigarray of one dimension, whose size is <code>dim</code>. <code>kind</code> and <code>layout</code> determine the array element kind and the array layout as described for <code>Genarray.create</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Array1.create", "title": "Array1.create", "contents": "create kind layout int t   ", "rendered": "<h4 class='item'>let create: (<a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b), <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c), int) => <a href=\"./api/Bigarray.html#type-Array1.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Array1.t", "title": "Array1.t", "contents": "The type of one-dimensional big arrays whose elements have OCaml type &#39;a, representation kind &#39;b, and memory layout &#39;c.", "rendered": "The type of one-dimensional big arrays whose elements have OCaml type <code>&#39;a</code>, representation kind <code>&#39;b</code>, and memory layout <code>&#39;c</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Array1.t", "title": "Array1.t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Array1", "title": "Array1", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Array1", "title": "Array1", "contents": "One-dimensional arrays. The Array1 structure provides operations similar to those of Genarray, but specialized to the case of one-dimensional arrays. (The Array2 and Array3 structures below provide operations specialized for two- and three-dimensional arrays.) Statically knowing the number of dimensions of the array allows faster operations, and more precise static type-checking.", "rendered": "One-dimensional arrays. The <code>Array1</code> structure provides operations similar to those of Genarray, but specialized to the case of one-dimensional arrays. (The <code>Array2</code> and <code>Array3</code> structures below provide operations specialized for two- and three-dimensional arrays.) Statically knowing the number of dimensions of the array allows faster operations, and more precise static type-checking.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#One-dimensional-arrays", "title": "One-dimensional arrays", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "This function raises Sys_error in the case of any errors from the underlying system calls. Invalid_argument or Failure may be raised in cases where argument validation fails.", "rendered": "This function raises <code>Sys_error</code> in the case of any errors from the underlying system calls. <code>Invalid_argument</code> or <code>Failure</code> may be raised in cases where argument validation fails.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "Array accesses are bounds-checked, but the bounds are determined by the initial call to map_file. Therefore, you should make sure no other process modifies the mapped file while you&#39;re accessing it, or a SIGBUS signal may be raised. This happens, for instance, if the file is shrunk.", "rendered": "Array accesses are bounds-checked, but the bounds are determined by the initial call to <code>map_file</code>. Therefore, you should make sure no other process modifies the mapped file while you&#39;re accessing it, or a SIGBUS signal may be raised. This happens, for instance, if the file is shrunk.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "If all dimensions of the big array are given, the file size is matched against the size of the big array. If the file is larger than the big array, only the initial portion of the file is mapped to the big array. If the file is smaller than the big array, the file is automatically grown to the size of the big array. This requires write permissions on fd.", "rendered": "If all dimensions of the big array are given, the file size is matched against the size of the big array. If the file is larger than the big array, only the initial portion of the file is mapped to the big array. If the file is smaller than the big array, the file is automatically grown to the size of the big array. This requires write permissions on <code>fd</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "To adjust automatically the dimensions of the big array to the actual size of the file, the major dimension (that is, the first dimension for an array with C layout, and the last dimension for an array with Fortran layout) can be given as -1. Genarray.map_file then determines the major dimension from the size of the file. The file must contain an integral number of sub-arrays as determined by the non-major dimensions, otherwise Failure is raised.", "rendered": "To adjust automatically the dimensions of the big array to the actual size of the file, the major dimension (that is, the first dimension for an array with C layout, and the last dimension for an array with Fortran layout) can be given as <code>-1</code>. <code>Genarray.map_file</code> then determines the major dimension from the size of the file. The file must contain an integral number of sub-arrays as determined by the non-major dimensions, otherwise <code>Failure</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "Genarray.map_file is much more efficient than reading the whole file in a big array, modifying that big array, and writing it afterwards.", "rendered": "<code>Genarray.map_file</code> is much more efficient than reading the whole file in a big array, modifying that big array, and writing it afterwards.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "If shared is true, all modifications performed on the array are reflected in the file. This requires that fd be opened with write permissions. If shared is false, modifications performed on the array are done in memory only, using copy-on-write of the modified pages; the underlying file is not affected.", "rendered": "If <code>shared</code> is <code>true</code>, all modifications performed on the array are reflected in the file. This requires that <code>fd</code> be opened with write permissions. If <code>shared</code> is <code>false</code>, modifications performed on the array are done in memory only, using copy-on-write of the modified pages; the underlying file is not affected.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "Memory mapping of a file as a big array. Genarray.map_file fd kind layout shared dims returns a big array of kind kind, layout layout, and dimensions as specified in dims. The data contained in this big array are the contents of the file referred to by the file descriptor fd (as opened previously with Unix.openfile, for example). The optional pos parameter is the byte offset in the file of the data being mapped; it defaults to 0 (map from the beginning of the file).", "rendered": "Memory mapping of a file as a big array. <code>Genarray.map_file fd kind layout shared dims</code> returns a big array of kind <code>kind</code>, layout <code>layout</code>, and dimensions as specified in <code>dims</code>. The data contained in this big array are the contents of the file referred to by the file descriptor <code>fd</code> (as opened previously with <code>Unix.openfile</code>, for example). The optional <code>pos</code> parameter is the byte offset in the file of the data being mapped; it defaults to 0 (map from the beginning of the file).", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.map_file", "title": "Genarray.map_file", "contents": "map_file file_descr option int64 kind layout bool array int t  pos    ", "rendered": "<h4 class='item'>let map_file: (\n  <a href=\"./api/Unix.html#type-file_descr\" title=\"Unix.file_descr\">file_descr</a>,\n  ~?pos: option(int64),\n  <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b),\n  <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c),\n  bool,\n  array(int)\n) => <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.fill", "title": "Genarray.fill", "contents": "Set all elements of a big array to a given value. Genarray.fill a v stores the value v in all elements of the big array a. Setting only some elements of a to v can be achieved by applying Genarray.fill to a sub-array or a slice of a.", "rendered": "Set all elements of a big array to a given value. <code>Genarray.fill a v</code> stores the value <code>v</code> in all elements of the big array <code>a</code>. Setting only some elements of <code>a</code> to <code>v</code> can be achieved by applying <code>Genarray.fill</code> to a sub-array or a slice of <code>a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.fill", "title": "Genarray.fill", "contents": "fill t unit  ", "rendered": "<h4 class='item'>let fill: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c), 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.blit", "title": "Genarray.blit", "contents": "Copy all elements of a big array in another big array. Genarray.blit src dst copies all elements of src into dst. Both arrays src and dst must have the same number of dimensions and equal dimensions. Copying a sub-array of src to a sub-array of dst can be achieved by applying Genarray.blit to sub-array or slices of src and dst.", "rendered": "Copy all elements of a big array in another big array. <code>Genarray.blit src dst</code> copies all elements of <code>src</code> into <code>dst</code>. Both arrays <code>src</code> and <code>dst</code> must have the same number of dimensions and equal dimensions. Copying a sub-array of <code>src</code> to a sub-array of <code>dst</code> can be achieved by applying <code>Genarray.blit</code> to sub-array or slices of <code>src</code> and <code>dst</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.blit", "title": "Genarray.blit", "contents": "blit t t unit  ", "rendered": "<h4 class='item'>let blit: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c), <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c)) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.slice_right", "title": "Genarray.slice_right", "contents": "Genarray.slice_right applies only to big arrays in Fortran layout. Raise Invalid_argument if M &gt;= N, or if [|i1; ... ; iM|] is outside the bounds of a.", "rendered": "<code>Genarray.slice_right</code> applies only to big arrays in Fortran layout. Raise <code>Invalid_argument</code> if <code>M &gt;= N</code>, or if <code>[|i1; ... ; iM|]</code> is outside the bounds of <code>a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.slice_right", "title": "Genarray.slice_right", "contents": "Extract a sub-array of lower dimension from the given big array by fixing one or several of the last (right-most) coordinates. Genarray.slice_right a [|i1; ... ; iM|] returns the &#39;slice&#39; of a obtained by setting the last M coordinates to i1, ..., iM. If a has N dimensions, the slice has dimension N - M, and the element at coordinates [|j1; ...; j(N-M)|] in the slice is identical to the element at coordinates [|j1; ...; j(N-M); i1; ...; iM|] in the original array a. No copying of elements is involved: the slice and the original array share the same storage space.", "rendered": "Extract a sub-array of lower dimension from the given big array by fixing one or several of the last (right-most) coordinates. <code>Genarray.slice_right a [|i1; ... ; iM|]</code> returns the &#39;slice&#39; of <code>a</code> obtained by setting the last <code>M</code> coordinates to <code>i1</code>, ..., <code>iM</code>. If <code>a</code> has <code>N</code> dimensions, the slice has dimension <code>N - M</code>, and the element at coordinates <code>[|j1; ...; j(N-M)|]</code> in the slice is identical to the element at coordinates <code>[|j1; ...; j(N-M); i1; ...; iM|]</code> in the original array <code>a</code>. No copying of elements is involved: the slice and the original array share the same storage space.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.slice_right", "title": "Genarray.slice_right", "contents": "slice_right t fortran_layout array int t fortran_layout  ", "rendered": "<h4 class='item'>let slice_right: (\n  <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>),\n  array(int)\n) => <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.slice_left", "title": "Genarray.slice_left", "contents": "Genarray.slice_left applies only to big arrays in C layout. Raise Invalid_argument if M &gt;= N, or if [|i1; ... ; iM|] is outside the bounds of a.", "rendered": "<code>Genarray.slice_left</code> applies only to big arrays in C layout. Raise <code>Invalid_argument</code> if <code>M &gt;= N</code>, or if <code>[|i1; ... ; iM|]</code> is outside the bounds of <code>a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.slice_left", "title": "Genarray.slice_left", "contents": "Extract a sub-array of lower dimension from the given big array by fixing one or several of the first (left-most) coordinates. Genarray.slice_left a [|i1; ... ; iM|] returns the &#39;slice&#39; of a obtained by setting the first M coordinates to i1, ..., iM. If a has N dimensions, the slice has dimension N - M, and the element at coordinates [|j1; ...; j(N-M)|] in the slice is identical to the element at coordinates [|i1; ...; iM; j1; ...; j(N-M)|] in the original array a. No copying of elements is involved: the slice and the original array share the same storage space.", "rendered": "Extract a sub-array of lower dimension from the given big array by fixing one or several of the first (left-most) coordinates. <code>Genarray.slice_left a [|i1; ... ; iM|]</code> returns the &#39;slice&#39; of <code>a</code> obtained by setting the first <code>M</code> coordinates to <code>i1</code>, ..., <code>iM</code>. If <code>a</code> has <code>N</code> dimensions, the slice has dimension <code>N - M</code>, and the element at coordinates <code>[|j1; ...; j(N-M)|]</code> in the slice is identical to the element at coordinates <code>[|i1; ...; iM; j1; ...; j(N-M)|]</code> in the original array <code>a</code>. No copying of elements is involved: the slice and the original array share the same storage space.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.slice_left", "title": "Genarray.slice_left", "contents": "slice_left t c_layout array int t c_layout  ", "rendered": "<h4 class='item'>let slice_left: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>), array(int)) => <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.sub_right", "title": "Genarray.sub_right", "contents": "Genarray.sub_right applies only to big arrays in Fortran layout. Raise Invalid_argument if ofs and len do not designate a valid sub-array of a, that is, if ofs &lt; 1, or len &lt; 0, or ofs + len &gt; Genarray.nth_dim a (Genarray.num_dims a - 1).", "rendered": "<code>Genarray.sub_right</code> applies only to big arrays in Fortran layout. Raise <code>Invalid_argument</code> if <code>ofs</code> and <code>len</code> do not designate a valid sub-array of <code>a</code>, that is, if <code>ofs &lt; 1</code>, or <code>len &lt; 0</code>, or <code>ofs + len &gt; Genarray.nth_dim a (Genarray.num_dims a - 1)</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.sub_right", "title": "Genarray.sub_right", "contents": "Extract a sub-array of the given big array by restricting the last (right-most) dimension. Genarray.sub_right a ofs len returns a big array with the same number of dimensions as a, and the same dimensions as a, except the last dimension, which corresponds to the interval [ofs ... ofs + len - 1] of the last dimension of a. No copying of elements is involved: the sub-array and the original array share the same storage space. In other terms, the element at coordinates [|i1; ...; iN|] of the sub-array is identical to the element at coordinates [|i1; ...; iN+ofs|] of the original array a.", "rendered": "Extract a sub-array of the given big array by restricting the last (right-most) dimension. <code>Genarray.sub_right a ofs len</code> returns a big array with the same number of dimensions as <code>a</code>, and the same dimensions as <code>a</code>, except the last dimension, which corresponds to the interval <code>[ofs ... ofs + len - 1]</code> of the last dimension of <code>a</code>. No copying of elements is involved: the sub-array and the original array share the same storage space. In other terms, the element at coordinates <code>[|i1; ...; iN|]</code> of the sub-array is identical to the element at coordinates <code>[|i1; ...; iN+ofs|]</code> of the original array <code>a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.sub_right", "title": "Genarray.sub_right", "contents": "sub_right t fortran_layout int int t fortran_layout   ", "rendered": "<h4 class='item'>let sub_right: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>), int, int) => <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.sub_left", "title": "Genarray.sub_left", "contents": "Genarray.sub_left applies only to big arrays in C layout. Raise Invalid_argument if ofs and len do not designate a valid sub-array of a, that is, if ofs &lt; 0, or len &lt; 0, or ofs + len &gt; Genarray.nth_dim a 0.", "rendered": "<code>Genarray.sub_left</code> applies only to big arrays in C layout. Raise <code>Invalid_argument</code> if <code>ofs</code> and <code>len</code> do not designate a valid sub-array of <code>a</code>, that is, if <code>ofs &lt; 0</code>, or <code>len &lt; 0</code>, or <code>ofs + len &gt; Genarray.nth_dim a 0</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.sub_left", "title": "Genarray.sub_left", "contents": "Extract a sub-array of the given big array by restricting the first (left-most) dimension. Genarray.sub_left a ofs len returns a big array with the same number of dimensions as a, and the same dimensions as a, except the first dimension, which corresponds to the interval [ofs ... ofs + len - 1] of the first dimension of a. No copying of elements is involved: the sub-array and the original array share the same storage space. In other terms, the element at coordinates [|i1; ...; iN|] of the sub-array is identical to the element at coordinates [|i1+ofs; ...; iN|] of the original array a.", "rendered": "Extract a sub-array of the given big array by restricting the first (left-most) dimension. <code>Genarray.sub_left a ofs len</code> returns a big array with the same number of dimensions as <code>a</code>, and the same dimensions as <code>a</code>, except the first dimension, which corresponds to the interval <code>[ofs ... ofs + len - 1]</code> of the first dimension of <code>a</code>. No copying of elements is involved: the sub-array and the original array share the same storage space. In other terms, the element at coordinates <code>[|i1; ...; iN|]</code> of the sub-array is identical to the element at coordinates <code>[|i1+ofs; ...; iN|]</code> of the original array <code>a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.sub_left", "title": "Genarray.sub_left", "contents": "sub_left t c_layout int int t c_layout   ", "rendered": "<h4 class='item'>let sub_left: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>), int, int) => <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  <a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.set", "title": "Genarray.set", "contents": "If N &gt; 3, alternate syntax is provided: you can write a.{i1, i2, ..., iN} &lt;- v instead of Genarray.set a [|i1; ...; iN|] v. (The syntax a.{...} &lt;- v with one, two or three coordinates is reserved for updating one-, two- and three-dimensional arrays as described below.)", "rendered": "If <code>N &gt; 3</code>, alternate syntax is provided: you can write <code>a.{i1, i2, ..., iN} &lt;- v</code> instead of <code>Genarray.set a [|i1; ...; iN|] v</code>. (The syntax <code>a.{...} &lt;- v</code> with one, two or three coordinates is reserved for updating one-, two- and three-dimensional arrays as described below.)", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.set", "title": "Genarray.set", "contents": "The array a must have exactly N dimensions, and all coordinates must lie inside the array bounds, as described for Genarray.get; otherwise, Invalid_argument is raised.", "rendered": "The array <code>a</code> must have exactly <code>N</code> dimensions, and all coordinates must lie inside the array bounds, as described for <code>Genarray.get</code>; otherwise, <code>Invalid_argument</code> is raised.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.set", "title": "Genarray.set", "contents": "Assign an element of a generic big array. Genarray.set a [|i1; ...; iN|] v stores the value v in the element of a whose coordinates are i1 in the first dimension, i2 in the second dimension, ..., iN in the N-th dimension.", "rendered": "Assign an element of a generic big array. <code>Genarray.set a [|i1; ...; iN|] v</code> stores the value <code>v</code> in the element of <code>a</code> whose coordinates are <code>i1</code> in the first dimension, <code>i2</code> in the second dimension, ..., <code>iN</code> in the <code>N</code>-th dimension.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.set", "title": "Genarray.set", "contents": "set t array int unit   ", "rendered": "<h4 class='item'>let set: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c), array(int), 'a) => unit</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.get", "title": "Genarray.get", "contents": "If N &gt; 3, alternate syntax is provided: you can write a.{i1, i2, ..., iN} instead of Genarray.get a [|i1; ...; iN|]. (The syntax a.{...} with one, two or three coordinates is reserved for accessing one-, two- and three-dimensional arrays as described below.)", "rendered": "If <code>N &gt; 3</code>, alternate syntax is provided: you can write <code>a.{i1, i2, ..., iN}</code> instead of <code>Genarray.get a [|i1; ...; iN|]</code>. (The syntax <code>a.{...}</code> with one, two or three coordinates is reserved for accessing one-, two- and three-dimensional arrays as described below.)", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.get", "title": "Genarray.get", "contents": "If a has C layout, the coordinates must be greater or equal than 0 and strictly less than the corresponding dimensions of a. If a has Fortran layout, the coordinates must be greater or equal than 1 and less or equal than the corresponding dimensions of a. Raise Invalid_argument if the array a does not have exactly N dimensions, or if the coordinates are outside the array bounds.", "rendered": "If <code>a</code> has C layout, the coordinates must be greater or equal than 0 and strictly less than the corresponding dimensions of <code>a</code>. If <code>a</code> has Fortran layout, the coordinates must be greater or equal than 1 and less or equal than the corresponding dimensions of <code>a</code>. Raise <code>Invalid_argument</code> if the array <code>a</code> does not have exactly <code>N</code> dimensions, or if the coordinates are outside the array bounds.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.get", "title": "Genarray.get", "contents": "Read an element of a generic big array. Genarray.get a [|i1; ...; iN|] returns the element of a whose coordinates are i1 in the first dimension, i2 in the second dimension, ..., iN in the N-th dimension.", "rendered": "Read an element of a generic big array. <code>Genarray.get a [|i1; ...; iN|]</code> returns the element of <code>a</code> whose coordinates are <code>i1</code> in the first dimension, <code>i2</code> in the second dimension, ..., <code>iN</code> in the <code>N</code>-th dimension.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.get", "title": "Genarray.get", "contents": "get t array int  ", "rendered": "<h4 class='item'>let get: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c), array(int)) => 'a</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.layout", "title": "Genarray.layout", "contents": "Return the layout of the given big array.", "rendered": "Return the layout of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.layout", "title": "Genarray.layout", "contents": "layout t layout ", "rendered": "<h4 class='item'>let layout: <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.kind", "title": "Genarray.kind", "contents": "Return the kind of the given big array.", "rendered": "Return the kind of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.kind", "title": "Genarray.kind", "contents": "kind t kind ", "rendered": "<h4 class='item'>let kind: <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => <a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.nth_dim", "title": "Genarray.nth_dim", "contents": "Genarray.nth_dim a n returns the n-th dimension of the big array a. The first dimension corresponds to n = 0; the second dimension corresponds to n = 1; the last dimension, to n = Genarray.num_dims a - 1. Raise Invalid_argument if n is less than 0 or greater or equal than Genarray.num_dims a.", "rendered": "<code>Genarray.nth_dim a n</code> returns the <code>n</code>-th dimension of the big array <code>a</code>. The first dimension corresponds to <code>n = 0</code>; the second dimension corresponds to <code>n = 1</code>; the last dimension, to <code>n = Genarray.num_dims a - 1</code>. Raise <code>Invalid_argument</code> if <code>n</code> is less than 0 or greater or equal than <code>Genarray.num_dims a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.nth_dim", "title": "Genarray.nth_dim", "contents": "nth_dim t int int  ", "rendered": "<h4 class='item'>let nth_dim: (<a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c), int) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.dims", "title": "Genarray.dims", "contents": "Genarray.dims a returns all dimensions of the big array a, as an array of integers of length Genarray.num_dims a.", "rendered": "<code>Genarray.dims a</code> returns all dimensions of the big array <code>a</code>, as an array of integers of length <code>Genarray.num_dims a</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.dims", "title": "Genarray.dims", "contents": "dims t array int ", "rendered": "<h4 class='item'>let dims: <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => array(int)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.num_dims", "title": "Genarray.num_dims", "contents": "Return the number of dimensions of the given big array.", "rendered": "Return the number of dimensions of the given big array.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.num_dims", "title": "Genarray.num_dims", "contents": "num_dims t int ", "rendered": "<h4 class='item'>let num_dims: <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>('a, 'b, 'c) => int</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.create", "title": "Genarray.create", "contents": "Genarray.create raises Invalid_argument if the number of dimensions is not in the range 1 to 16 inclusive, or if one of the dimensions is negative.", "rendered": "<code>Genarray.create</code> raises <code>Invalid_argument</code> if the number of dimensions is not in the range 1 to 16 inclusive, or if one of the dimensions is negative.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.create", "title": "Genarray.create", "contents": "Big arrays returned by Genarray.create are not initialized: the initial values of array elements is unspecified.", "rendered": "Big arrays returned by <code>Genarray.create</code> are not initialized: the initial values of array elements is unspecified.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.create", "title": "Genarray.create", "contents": "For instance, Genarray.create int32 c_layout [|4;6;8|] returns a fresh big array of 32-bit integers, in C layout, having three dimensions, the three dimensions being 4, 6 and 8 respectively.", "rendered": "For instance, <code>Genarray.create int32 c_layout [|4;6;8|]</code> returns a fresh big array of 32-bit integers, in C layout, having three dimensions, the three dimensions being 4, 6 and 8 respectively.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.create", "title": "Genarray.create", "contents": "Genarray.create kind layout dimensions returns a new big array whose element kind is determined by the parameter kind (one of float32, float64, int8_signed, etc) and whose layout is determined by the parameter layout (one of c_layout or fortran_layout). The dimensions parameter is an array of integers that indicate the size of the big array in each dimension. The length of dimensions determines the number of dimensions of the bigarray.", "rendered": "<code>Genarray.create kind layout dimensions</code> returns a new big array whose element kind is determined by the parameter <code>kind</code> (one of <code>float32</code>, <code>float64</code>, <code>int8_signed</code>, etc) and whose layout is determined by the parameter <code>layout</code> (one of <code>c_layout</code> or <code>fortran_layout</code>). The <code>dimensions</code> parameter is an array of integers that indicate the size of the big array in each dimension. The length of <code>dimensions</code> determines the number of dimensions of the bigarray.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-Genarray.create", "title": "Genarray.create", "contents": "create kind layout array int t   ", "rendered": "<h4 class='item'>let create: (<a href=\"./api/Bigarray.html#type-kind\">kind</a>('a, 'b), <a href=\"./api/Bigarray.html#type-layout\">layout</a>('c), array(int)) => <a href=\"./api/Bigarray.html#type-Genarray.t\">t</a>(\n  'a,\n  'b,\n  'c\n)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "the third parameter, &#39;c, identifies the array layout (c_layout or fortran_layout).", "rendered": "the third parameter, <code>&#39;c</code>, identifies the array layout (<code>c_layout</code> or <code>fortran_layout</code>).", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "the second parameter, &#39;b, is the actual kind of array elements (float32_elt, float64_elt, int8_signed_elt, int8_unsigned_elt, etc);", "rendered": "the second parameter, <code>&#39;b</code>, is the actual kind of array elements (<code>float32_elt</code>, <code>float64_elt</code>, <code>int8_signed_elt</code>, <code>int8_unsigned_elt</code>, etc);", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "the first parameter, &#39;a, is the OCaml type for accessing array elements (float, int, int32, int64, nativeint);", "rendered": "the first parameter, <code>&#39;a</code>, is the OCaml type for accessing array elements (<code>float</code>, <code>int</code>, <code>int32</code>, <code>int64</code>, <code>nativeint</code>);", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "For instance, (float, float32_elt, fortran_layout) Genarray.t is the type of generic big arrays containing 32-bit floats in Fortran layout; reads and writes in this array use the OCaml type float.", "rendered": "For instance, <code>(float, float32_elt, fortran_layout) Genarray.t</code> is the type of generic big arrays containing 32-bit floats in Fortran layout; reads and writes in this array use the OCaml type <code>float</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "The three type parameters to Genarray.t identify the array element kind and layout, as follows:", "rendered": "The three type parameters to <code>Genarray.t</code> identify the array element kind and layout, as follows:", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "The type Genarray.t is the type of big arrays with variable numbers of dimensions. Any number of dimensions between 1 and 16 is supported.", "rendered": "The type <code>Genarray.t</code> is the type of big arrays with variable numbers of dimensions. Any number of dimensions between 1 and 16 is supported.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-Genarray.t", "title": "Genarray.t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'b, 'c)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Genarray", "title": "Genarray", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#module-Genarray", "title": "Genarray", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Generic-arrays--of-arbitrarily-many-dimensions-", "title": "Generic arrays (of arbitrarily many dimensions)", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-fortran_layout", "title": "fortran_layout", "contents": "fortran_layout layout fortran_layout", "rendered": "<h4 class='item'>let fortran_layout: <a href=\"./api/Bigarray.html#type-layout\">layout</a>(<a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-c_layout", "title": "c_layout", "contents": "c_layout layout c_layout", "rendered": "<h4 class='item'>let c_layout: <a href=\"./api/Bigarray.html#type-layout\">layout</a>(<a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-layout", "title": "layout", "contents": "layout layout c_layout layout fortran_layout", "rendered": "<h4 class='item'>type layout('a) = \n  | C_layout: <a href=\"./api/Bigarray.html#type-layout\">layout</a>(<a href=\"./api/Bigarray.html#type-c_layout\">c_layout</a>)\n  | Fortran_layout: <a href=\"./api/Bigarray.html#type-layout\">layout</a>(<a href=\"./api/Bigarray.html#type-fortran_layout\">fortran_layout</a>)\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "The GADT type &#39;a layout represents one of the two supported memory layouts: C-style or Fortran-style. Its constructors are re-exported as values below for backward-compatibility reasons.", "rendered": "The GADT type <code>&#39;a layout</code> represents one of the two supported memory layouts: C-style or Fortran-style. Its constructors are re-exported as values below for backward-compatibility reasons.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Supported-layouts", "title": "Supported layouts", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-fortran_layout", "title": "fortran_layout", "contents": "fortran_layout ", "rendered": "<h4 class='item'>type fortran_layout = | Fortran_layout_typ\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-c_layout", "title": "c_layout", "contents": "c_layout ", "rendered": "<h4 class='item'>type c_layout = | C_layout_typ\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Array-layouts", "title": "Array layouts", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-char", "title": "char", "contents": "As shown by the types of the values above, big arrays of kind float32_elt and float64_elt are accessed using the OCaml type float. Big arrays of complex kinds complex32_elt, complex64_elt are accessed with the OCaml type t. Big arrays of integer kinds are accessed using the smallest OCaml integer type large enough to represent the array elements: int for 8- and 16-bit integer bigarrays, as well as OCaml-integer bigarrays; int32 for 32-bit integer bigarrays; int64 for 64-bit integer bigarrays; and nativeint for platform-native integer bigarrays. Finally, big arrays of kind int8_unsigned_elt can also be accessed as arrays of characters instead of arrays of small integers, by using the kind value char instead of int8_unsigned.", "rendered": "As shown by the types of the values above, big arrays of kind <code>float32_elt</code> and <code>float64_elt</code> are accessed using the OCaml type <code>float</code>. Big arrays of complex kinds <code>complex32_elt</code>, <code>complex64_elt</code> are accessed with the OCaml type t. Big arrays of integer kinds are accessed using the smallest OCaml integer type large enough to represent the array elements: <code>int</code> for 8- and 16-bit integer bigarrays, as well as OCaml-integer bigarrays; <code>int32</code> for 32-bit integer bigarrays; <code>int64</code> for 64-bit integer bigarrays; and <code>nativeint</code> for platform-native integer bigarrays. Finally, big arrays of kind <code>int8_unsigned_elt</code> can also be accessed as arrays of characters instead of arrays of small integers, by using the kind value <code>char</code> instead of <code>int8_unsigned</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-char", "title": "char", "contents": "char kind char int8_unsigned_elt", "rendered": "<h4 class='item'>let char: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(char, <a href=\"./api/Bigarray.html#type-int8_unsigned_elt\">int8_unsigned_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-nativeint", "title": "nativeint", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-nativeint", "title": "nativeint", "contents": "nativeint kind nativeint nativeint_elt", "rendered": "<h4 class='item'>let nativeint: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(nativeint, <a href=\"./api/Bigarray.html#type-nativeint_elt\">nativeint_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int64", "title": "int64", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int64", "title": "int64", "contents": "int64 kind int64 int64_elt", "rendered": "<h4 class='item'>let int64: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int64, <a href=\"./api/Bigarray.html#type-int64_elt\">int64_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int32", "title": "int32", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int32", "title": "int32", "contents": "int32 kind int32 int32_elt", "rendered": "<h4 class='item'>let int32: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int32, <a href=\"./api/Bigarray.html#type-int32_elt\">int32_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int", "title": "int", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int", "title": "int", "contents": "int kind int int_elt", "rendered": "<h4 class='item'>let int: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int_elt\">int_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int16_unsigned", "title": "int16_unsigned", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int16_unsigned", "title": "int16_unsigned", "contents": "int16_unsigned kind int int16_unsigned_elt", "rendered": "<h4 class='item'>let int16_unsigned: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int16_unsigned_elt\">int16_unsigned_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int16_signed", "title": "int16_signed", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int16_signed", "title": "int16_signed", "contents": "int16_signed kind int int16_signed_elt", "rendered": "<h4 class='item'>let int16_signed: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int16_signed_elt\">int16_signed_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int8_unsigned", "title": "int8_unsigned", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int8_unsigned", "title": "int8_unsigned", "contents": "int8_unsigned kind int int8_unsigned_elt", "rendered": "<h4 class='item'>let int8_unsigned: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int8_unsigned_elt\">int8_unsigned_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int8_signed", "title": "int8_signed", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-int8_signed", "title": "int8_signed", "contents": "int8_signed kind int int8_signed_elt", "rendered": "<h4 class='item'>let int8_signed: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int8_signed_elt\">int8_signed_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-complex64", "title": "complex64", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-complex64", "title": "complex64", "contents": "complex64 kind Complex t complex64_elt", "rendered": "<h4 class='item'>let complex64: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(<a href=\"./api/Complex.html\">Complex</a>.<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Bigarray.html#type-complex64_elt\">complex64_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-complex32", "title": "complex32", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-complex32", "title": "complex32", "contents": "complex32 kind Complex t complex32_elt", "rendered": "<h4 class='item'>let complex32: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(<a href=\"./api/Complex.html\">Complex</a>.<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Bigarray.html#type-complex32_elt\">complex32_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-float64", "title": "float64", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-float64", "title": "float64", "contents": "float64 kind float float64_elt", "rendered": "<h4 class='item'>let float64: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(float, <a href=\"./api/Bigarray.html#type-float64_elt\">float64_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-float32", "title": "float32", "contents": "See char.", "rendered": "See char.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#value-float32", "title": "float32", "contents": "float32 kind float float32_elt", "rendered": "<h4 class='item'>let float32: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(float, <a href=\"./api/Bigarray.html#type-float32_elt\">float32_elt</a>)</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-kind", "title": "kind", "contents": "kind kind float float32_elt kind float float64_elt kind int int8_signed_elt kind int int8_unsigned_elt kind int int16_signed_elt kind int int16_unsigned_elt kind int32 int32_elt kind int64 int64_elt kind int int_elt kind nativeint nativeint_elt kind Complex t complex32_elt kind Complex t complex64_elt kind char int8_unsigned_elt", "rendered": "<h4 class='item'>type kind('a, 'b) = \n  | Float32: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(float, <a href=\"./api/Bigarray.html#type-float32_elt\">float32_elt</a>)\n  | Float64: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(float, <a href=\"./api/Bigarray.html#type-float64_elt\">float64_elt</a>)\n  | Int8_signed: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int8_signed_elt\">int8_signed_elt</a>)\n  | Int8_unsigned: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int8_unsigned_elt\">int8_unsigned_elt</a>)\n  | Int16_signed: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int16_signed_elt\">int16_signed_elt</a>)\n  | Int16_unsigned: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int16_unsigned_elt\">int16_unsigned_elt</a>)\n  | Int32: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int32, <a href=\"./api/Bigarray.html#type-int32_elt\">int32_elt</a>)\n  | Int64: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int64, <a href=\"./api/Bigarray.html#type-int64_elt\">int64_elt</a>)\n  | Int: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(int, <a href=\"./api/Bigarray.html#type-int_elt\">int_elt</a>)\n  | Nativeint: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(nativeint, <a href=\"./api/Bigarray.html#type-nativeint_elt\">nativeint_elt</a>)\n  | Complex32: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(<a href=\"./api/Complex.html\">Complex</a>.<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Bigarray.html#type-complex32_elt\">complex32_elt</a>)\n  | Complex64: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(<a href=\"./api/Complex.html\">Complex</a>.<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Bigarray.html#type-complex64_elt\">complex64_elt</a>)\n  | Char: <a href=\"./api/Bigarray.html#type-kind\">kind</a>(char, <a href=\"./api/Bigarray.html#type-int8_unsigned_elt\">int8_unsigned_elt</a>)\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-complex64_elt", "title": "complex64_elt", "contents": "complex64_elt ", "rendered": "<h4 class='item'>type complex64_elt = | Complex64_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-complex32_elt", "title": "complex32_elt", "contents": "complex32_elt ", "rendered": "<h4 class='item'>type complex32_elt = | Complex32_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-nativeint_elt", "title": "nativeint_elt", "contents": "nativeint_elt ", "rendered": "<h4 class='item'>type nativeint_elt = | Nativeint_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int_elt", "title": "int_elt", "contents": "int_elt ", "rendered": "<h4 class='item'>type int_elt = | Int_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int64_elt", "title": "int64_elt", "contents": "int64_elt ", "rendered": "<h4 class='item'>type int64_elt = | Int64_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int32_elt", "title": "int32_elt", "contents": "int32_elt ", "rendered": "<h4 class='item'>type int32_elt = | Int32_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int16_unsigned_elt", "title": "int16_unsigned_elt", "contents": "int16_unsigned_elt ", "rendered": "<h4 class='item'>type int16_unsigned_elt = | Int16_unsigned_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int16_signed_elt", "title": "int16_signed_elt", "contents": "int16_signed_elt ", "rendered": "<h4 class='item'>type int16_signed_elt = | Int16_signed_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int8_unsigned_elt", "title": "int8_unsigned_elt", "contents": "int8_unsigned_elt ", "rendered": "<h4 class='item'>type int8_unsigned_elt = | Int8_unsigned_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-int8_signed_elt", "title": "int8_signed_elt", "contents": "int8_signed_elt ", "rendered": "<h4 class='item'>type int8_signed_elt = | Int8_signed_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-float64_elt", "title": "float64_elt", "contents": "float64_elt ", "rendered": "<h4 class='item'>type float64_elt = | Float64_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#type-float32_elt", "title": "float32_elt", "contents": "float32_elt ", "rendered": "<h4 class='item'>type float32_elt = | Float32_elt\n</h4>", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html#Element-kinds", "title": "Element kinds", "contents": "", "rendered": "", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "and structured input-output (the functions from the Marshal module, as well as output_value and input_value).", "rendered": "and structured input-output (the functions from the Marshal module, as well as output_value and input_value).", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "hashing (module Hash);", "rendered": "hashing (module <code>Hash</code>);", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "comparisons (=, &lt;&gt;, &lt;=, etc, as well as compare);", "rendered": "comparisons (<code>=</code>, <code>&lt;&gt;</code>, <code>&lt;=</code>, etc, as well as compare);", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "Big arrays support all the OCaml ad-hoc polymorphic operations:", "rendered": "Big arrays support all the OCaml ad-hoc polymorphic operations:", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "Concerning the naming conventions, users of this module are encouraged to do open Bigarray in their source, then refer to array types and operations via short dot notation, e.g. Array1.t or Array2.sub.", "rendered": "Concerning the naming conventions, users of this module are encouraged to do <code>open Bigarray</code> in their source, then refer to array types and operations via short dot notation, e.g. <code>Array1.t</code> or <code>Array2.sub</code>.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "This module implements multi-dimensional arrays of integers and floating-point numbers, thereafter referred to as &#39;big arrays&#39;. The implementation allows efficient sharing of large numerical arrays between OCaml code and C or Fortran numerical libraries.", "rendered": "This module implements multi-dimensional arrays of integers and floating-point numbers, thereafter referred to as &#39;big arrays&#39;. The implementation allows efficient sharing of large numerical arrays between OCaml code and C or Fortran numerical libraries.", "breadcrumb": "Bigarray"},
{"href": "./api/Bigarray.html", "title": "Bigarray", "contents": "Large, multi-dimensional, numerical arrays.", "rendered": "Large, multi-dimensional, numerical arrays.", "breadcrumb": "Bigarray"},
{"href": "./api/Digest.html#value-from_hex", "title": "from_hex", "contents": "Convert a hexadecimal representation back into the corresponding digest. Raise Invalid_argument if the argument is not exactly 32 hexadecimal characters.", "rendered": "Convert a hexadecimal representation back into the corresponding digest. Raise <code>Invalid_argument</code> if the argument is not exactly 32 hexadecimal characters.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-from_hex", "title": "from_hex", "contents": "from_hex string t ", "rendered": "<h4 class='item'>let from_hex: string => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-to_hex", "title": "to_hex", "contents": "Return the printable hexadecimal representation of the given digest.", "rendered": "Return the printable hexadecimal representation of the given digest.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-to_hex", "title": "to_hex", "contents": "to_hex t string ", "rendered": "<h4 class='item'>let to_hex: <a href=\"./api/Digest.html#type-t\">t</a> => string</h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-input", "title": "input", "contents": "Read a digest from the given input channel.", "rendered": "Read a digest from the given input channel.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-input", "title": "input", "contents": "input in_channel t ", "rendered": "<h4 class='item'>let input: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-output", "title": "output", "contents": "Write a digest on the given output channel.", "rendered": "Write a digest on the given output channel.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-output", "title": "output", "contents": "output out_channel t unit  ", "rendered": "<h4 class='item'>let output: (<a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, <a href=\"./api/Digest.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-file", "title": "file", "contents": "Return the digest of the file whose name is given.", "rendered": "Return the digest of the file whose name is given.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-file", "title": "file", "contents": "file string t ", "rendered": "<h4 class='item'>let file: string => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-channel", "title": "channel", "contents": "If len is nonnegative, Digest.channel ic len reads len characters from channel ic and returns their digest, or raises End_of_file if end-of-file is reached before len characters are read. If len is negative, Digest.channel ic len reads all characters from ic until end-of-file is reached and return their digest.", "rendered": "If <code>len</code> is nonnegative, <code>Digest.channel ic len</code> reads <code>len</code> characters from channel <code>ic</code> and returns their digest, or raises <code>End_of_file</code> if end-of-file is reached before <code>len</code> characters are read. If <code>len</code> is negative, <code>Digest.channel ic len</code> reads all characters from <code>ic</code> until end-of-file is reached and return their digest.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-channel", "title": "channel", "contents": "channel in_channel int t  ", "rendered": "<h4 class='item'>let channel: (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, int) => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-subbytes", "title": "subbytes", "contents": "Digest.subbytes s ofs len returns the digest of the subsequence of s starting at index ofs and containing len bytes.", "rendered": "<code>Digest.subbytes s ofs len</code> returns the digest of the subsequence of <code>s</code> starting at index <code>ofs</code> and containing <code>len</code> bytes.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-subbytes", "title": "subbytes", "contents": "subbytes bytes int int t   ", "rendered": "<h4 class='item'>let subbytes: (bytes, int, int) => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-substring", "title": "substring", "contents": "Digest.substring s ofs len returns the digest of the substring of s starting at index ofs and containing len characters.", "rendered": "<code>Digest.substring s ofs len</code> returns the digest of the substring of <code>s</code> starting at index <code>ofs</code> and containing <code>len</code> characters.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-substring", "title": "substring", "contents": "substring string int int t   ", "rendered": "<h4 class='item'>let substring: (string, int, int) => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-bytes", "title": "bytes", "contents": "Return the digest of the given byte sequence.", "rendered": "Return the digest of the given byte sequence.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-bytes", "title": "bytes", "contents": "bytes bytes t ", "rendered": "<h4 class='item'>let bytes: bytes => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-string", "title": "string", "contents": "Return the digest of the given string.", "rendered": "Return the digest of the given string.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-string", "title": "string", "contents": "string string t ", "rendered": "<h4 class='item'>let string: string => <a href=\"./api/Digest.html#type-t\">t</a></h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-compare", "title": "compare", "contents": "The comparison function for 16-character digest, with the same specification as compare and the implementation shared with compare. Along with the type t, this function compare allows the module Digest to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for 16-character digest, with the same specification as compare and the implementation shared with compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Digest</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Digest.html#type-t\">t</a>, <a href=\"./api/Digest.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#type-t", "title": "t", "contents": "The type of digests: 16-character strings.", "rendered": "The type of digests: 16-character strings.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html#type-t", "title": "t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "Digest"},
{"href": "./api/Digest.html", "title": "Digest", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Digest"},
{"href": "./api/Digest.html", "title": "Digest", "contents": "This module provides functions to compute 128-bit &#39;digests&#39; of arbitrary-length strings or files. The digests are of cryptographic quality: it is very hard, given a digest, to forge a string having that digest. The algorithm used is MD5. This module should not be used for secure and sensitive cryptographic applications. For these kind of applications more recent and stronger cryptographic primitives should be used instead.", "rendered": "This module provides functions to compute 128-bit &#39;digests&#39; of arbitrary-length strings or files. The digests are of cryptographic quality: it is very hard, given a digest, to forge a string having that digest. The algorithm used is MD5. This module should not be used for secure and sensitive cryptographic applications. For these kind of applications more recent and stronger cryptographic primitives should be used instead.", "breadcrumb": "Digest"},
{"href": "./api/Digest.html", "title": "Digest", "contents": "MD5 message digest.", "rendered": "MD5 message digest.", "breadcrumb": "Digest"},
{"href": "./api/StringLabels.html#value-unsafe_fill", "title": "unsafe_fill", "contents": "unsafe_fill bytes int int char unit  pos len ", "rendered": "<h4 class='item'>let unsafe_fill: (bytes, ~pos: int, ~len: int, char) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-unsafe_blit", "title": "unsafe_blit", "contents": "unsafe_blit string int bytes int int unit src src_pos dst dst_pos len", "rendered": "<h4 class='item'>let unsafe_blit: (\n  ~src: string,\n  ~src_pos: int,\n  ~dst: bytes,\n  ~dst_pos: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set bytes int char unit   ", "rendered": "<h4 class='item'>let unsafe_set: (bytes, int, char) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get string int char  ", "rendered": "<h4 class='item'>let unsafe_get: (string, int) => char</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html", "title": "StringLabels", "contents": "/*", "rendered": "/*", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-compare", "title": "compare", "contents": "The comparison function for strings, with the same specification as compare. Along with the type t, this function compare allows the module String to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for strings, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>String</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/StringLabels.html#type-t\">t</a>, <a href=\"./api/StringLabels.html#type-t\">t</a>) => int</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#type-t", "title": "t", "contents": "An alias for the type of strings.", "rendered": "An alias for the type of strings.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#type-t", "title": "t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-uncapitalize", "title": "uncapitalize", "contents": "Return a copy of the argument, with the first character set to lowercase.", "rendered": "Return a copy of the argument, with the first character set to lowercase.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-uncapitalize", "title": "uncapitalize", "contents": "uncapitalize string string ", "rendered": "<h4 class='item'>let uncapitalize: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-capitalize", "title": "capitalize", "contents": "Return a copy of the argument, with the first character set to uppercase.", "rendered": "Return a copy of the argument, with the first character set to uppercase.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-capitalize", "title": "capitalize", "contents": "capitalize string string ", "rendered": "<h4 class='item'>let capitalize: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-lowercase", "title": "lowercase", "contents": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-lowercase", "title": "lowercase", "contents": "lowercase string string ", "rendered": "<h4 class='item'>let lowercase: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-uppercase", "title": "uppercase", "contents": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-uppercase", "title": "uppercase", "contents": "uppercase string string ", "rendered": "<h4 class='item'>let uppercase: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rcontains_from", "title": "rcontains_from", "contents": "Raise Invalid_argument if stop &lt; 0 or stop+1 is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>stop &lt; 0</code> or <code>stop+1</code> is not a valid position in <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rcontains_from", "title": "rcontains_from", "contents": "String.rcontains_from s stop c tests if character c appears in s before position stop+1.", "rendered": "<code>String.rcontains_from s stop c</code> tests if character <code>c</code> appears in <code>s</code> before position <code>stop+1</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rcontains_from", "title": "rcontains_from", "contents": "rcontains_from string int char bool   ", "rendered": "<h4 class='item'>let rcontains_from: (string, int, char) => bool</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-contains_from", "title": "contains_from", "contents": "Raise Invalid_argument if start is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> is not a valid position in <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-contains_from", "title": "contains_from", "contents": "String.contains_from s start c tests if character c appears in s after position start. String.contains s c is equivalent to String.contains_from s 0 c.", "rendered": "<code>String.contains_from s start c</code> tests if character <code>c</code> appears in <code>s</code> after position <code>start</code>. <code>String.contains s c</code> is equivalent to <code>String.contains_from s 0 c</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-contains_from", "title": "contains_from", "contents": "contains_from string int char bool   ", "rendered": "<h4 class='item'>let contains_from: (string, int, char) => bool</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-contains", "title": "contains", "contents": "String.contains s c tests if character c appears in the string s.", "rendered": "<code>String.contains s c</code> tests if character <code>c</code> appears in the string <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-contains", "title": "contains", "contents": "contains string char bool  ", "rendered": "<h4 class='item'>let contains: (string, char) => bool</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rindex_from", "title": "rindex_from", "contents": "Raise Invalid_argument if i+1 is not a valid position in s. Raise Not_found if c does not occur in s before position i+1.", "rendered": "Raise <code>Invalid_argument</code> if <code>i+1</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> before position <code>i+1</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rindex_from", "title": "rindex_from", "contents": "String.rindex_from s i c returns the index of the last occurrence of character c in string s before position i+1. String.rindex s c is equivalent to String.rindex_from s (String.length s - 1) c.", "rendered": "<code>String.rindex_from s i c</code> returns the index of the last occurrence of character <code>c</code> in string <code>s</code> before position <code>i+1</code>. <code>String.rindex s c</code> is equivalent to <code>String.rindex_from s (String.length s - 1) c</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rindex_from", "title": "rindex_from", "contents": "rindex_from string int char int   ", "rendered": "<h4 class='item'>let rindex_from: (string, int, char) => int</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-index_from", "title": "index_from", "contents": "Raise Invalid_argument if i is not a valid position in s. Raise Not_found if c does not occur in s after position i.", "rendered": "Raise <code>Invalid_argument</code> if <code>i</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> after position <code>i</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-index_from", "title": "index_from", "contents": "String.index_from s i c returns the index of the first occurrence of character c in string s after position i. String.index s c is equivalent to String.index_from s 0 c.", "rendered": "<code>String.index_from s i c</code> returns the index of the first occurrence of character <code>c</code> in string <code>s</code> after position <code>i</code>. <code>String.index s c</code> is equivalent to <code>String.index_from s 0 c</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-index_from", "title": "index_from", "contents": "index_from string int char int   ", "rendered": "<h4 class='item'>let index_from: (string, int, char) => int</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rindex", "title": "rindex", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rindex", "title": "rindex", "contents": "String.rindex s c returns the index of the last occurrence of character c in string s.", "rendered": "<code>String.rindex s c</code> returns the index of the last occurrence of character <code>c</code> in string <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-rindex", "title": "rindex", "contents": "rindex string char int  ", "rendered": "<h4 class='item'>let rindex: (string, char) => int</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-index", "title": "index", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-index", "title": "index", "contents": "String.index s c returns the index of the first occurrence of character c in string s.", "rendered": "<code>String.index s c</code> returns the index of the first occurrence of character <code>c</code> in string <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-index", "title": "index", "contents": "index string char int  ", "rendered": "<h4 class='item'>let index: (string, char) => int</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-escaped", "title": "escaped", "contents": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. If there is no special character in the argument, return the original string itself, not a copy. Its inverse function is Scanf.unescaped.", "rendered": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. If there is no special character in the argument, return the original string itself, not a copy. Its inverse function is Scanf.unescaped.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-escaped", "title": "escaped", "contents": "escaped string string ", "rendered": "<h4 class='item'>let escaped: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-trim", "title": "trim", "contents": "Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace are: &#39; &#39;, &#39;\\012&#39;, &#39;\\n&#39;, &#39;\\r&#39;, and &#39;\\t&#39;. If there is no leading nor trailing whitespace character in the argument, return the original string itself, not a copy.", "rendered": "Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace are: <code>&#39; &#39;</code>, <code>&#39;\\012&#39;</code>, <code>&#39;\\n&#39;</code>, <code>&#39;\\r&#39;</code>, and <code>&#39;\\t&#39;</code>. If there is no leading nor trailing whitespace character in the argument, return the original string itself, not a copy.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-trim", "title": "trim", "contents": "trim string string ", "rendered": "<h4 class='item'>let trim: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-mapi", "title": "mapi", "contents": "String.mapi f s calls f with each character of s and its index (in increasing index order) and stores the results in a new string that is returned.", "rendered": "<code>String.mapi f s</code> calls <code>f</code> with each character of <code>s</code> and its index (in increasing index order) and stores the results in a new string that is returned.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-mapi", "title": "mapi", "contents": "mapi int char char   string string f ", "rendered": "<h4 class='item'>let mapi: (~f: (int, char) => char, string) => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-map", "title": "map", "contents": "String.map f s applies function f in turn to all the characters of s and stores the results in a new string that is returned.", "rendered": "<code>String.map f s</code> applies function <code>f</code> in turn to all the characters of <code>s</code> and stores the results in a new string that is returned.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-map", "title": "map", "contents": "map char char  string string f ", "rendered": "<h4 class='item'>let map: (~f: char => char, string) => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-iteri", "title": "iteri", "contents": "iteri int char unit   string unit f ", "rendered": "<h4 class='item'>let iteri: (~f: (int, char) => unit, string) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-iter", "title": "iter", "contents": "String.iter f s applies function f in turn to all the characters of s. It is equivalent to f s.[0]; f s.[1]; ...; f s.[String.length s - 1]; ().", "rendered": "<code>String.iter f s</code> applies function <code>f</code> in turn to all the characters of <code>s</code>. It is equivalent to <code>f s.[0]; f s.[1]; ...; f s.[String.length s - 1]; ()</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-iter", "title": "iter", "contents": "iter char unit  string unit f ", "rendered": "<h4 class='item'>let iter: (~f: char => unit, string) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-concat", "title": "concat", "contents": "String.concat sep sl concatenates the list of strings sl, inserting the separator string sep between each.", "rendered": "<code>String.concat sep sl</code> concatenates the list of strings <code>sl</code>, inserting the separator string <code>sep</code> between each.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-concat", "title": "concat", "contents": "concat string list string string sep ", "rendered": "<h4 class='item'>let concat: (~sep: string, list(string)) => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-blit", "title": "blit", "contents": "Raise Invalid_argument if srcoff and len do not designate a valid range of src, or if dstoff and len do not designate a valid range of dst.", "rendered": "Raise <code>Invalid_argument</code> if <code>srcoff</code> and <code>len</code> do not designate a valid range of <code>src</code>, or if <code>dstoff</code> and <code>len</code> do not designate a valid range of <code>dst</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-blit", "title": "blit", "contents": "String.blit src srcoff dst dstoff len copies len bytes from the string src, starting at index srcoff, to byte sequence dst, starting at character number dstoff.", "rendered": "<code>String.blit src srcoff dst dstoff len</code> copies <code>len</code> bytes from the string <code>src</code>, starting at index <code>srcoff</code>, to byte sequence <code>dst</code>, starting at character number <code>dstoff</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-blit", "title": "blit", "contents": "blit string int bytes int int unit src src_pos dst dst_pos len", "rendered": "<h4 class='item'>let blit: (\n  ~src: string,\n  ~src_pos: int,\n  ~dst: bytes,\n  ~dst_pos: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-fill", "title": "fill", "contents": "This is a deprecated alias of fill.", "rendered": "This is a deprecated alias of fill.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-fill", "title": "fill", "contents": "Deprecated: This is a deprecated alias of fill.\n\n", "rendered": "Deprecated: <p>This is a deprecated alias of fill.</p>\n", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-fill", "title": "fill", "contents": "Raise Invalid_argument if start and len do not designate a valid substring of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid substring of <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-fill", "title": "fill", "contents": "String.fill s start len c modifies byte sequence s in place, replacing len bytes by c, starting at start.", "rendered": "<code>String.fill s start len c</code> modifies byte sequence <code>s</code> in place, replacing <code>len</code> bytes by <code>c</code>, starting at <code>start</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-fill", "title": "fill", "contents": "fill bytes int int char unit  pos len ", "rendered": "<h4 class='item'>let fill: (bytes, ~pos: int, ~len: int, char) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-sub", "title": "sub", "contents": "Raise Invalid_argument if start and len do not designate a valid substring of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid substring of <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-sub", "title": "sub", "contents": "String.sub s start len returns a fresh string of length len, containing the substring of s that starts at position start and has length len.", "rendered": "<code>String.sub s start len</code> returns a fresh string of length <code>len</code>, containing the substring of <code>s</code> that starts at position <code>start</code> and has length <code>len</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-sub", "title": "sub", "contents": "sub string int int string  pos len", "rendered": "<h4 class='item'>let sub: (string, ~pos: int, ~len: int) => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-copy", "title": "copy", "contents": "Return a copy of the given string.", "rendered": "Return a copy of the given string.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-copy", "title": "copy", "contents": "copy string string ", "rendered": "<h4 class='item'>let copy: string => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-init", "title": "init", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-init", "title": "init", "contents": "init n f returns a string of length n, with character i initialized to the result of f i.", "rendered": "<code>init n f</code> returns a string of length <code>n</code>, with character <code>i</code> initialized to the result of <code>f i</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-init", "title": "init", "contents": "init int int char  string  f", "rendered": "<h4 class='item'>let init: (int, ~f: int => char) => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-make", "title": "make", "contents": "String.make n c returns a fresh string of length n, filled with the character c.", "rendered": "<code>String.make n c</code> returns a fresh string of length <code>n</code>, filled with the character <code>c</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-make", "title": "make", "contents": "make int char string  ", "rendered": "<h4 class='item'>let make: (int, char) => string</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-create", "title": "create", "contents": "This is a deprecated alias of create.", "rendered": "This is a deprecated alias of create.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-create", "title": "create", "contents": "Deprecated: This is a deprecated alias of create.\n\n", "rendered": "Deprecated: <p>This is a deprecated alias of create.</p>\n", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-create", "title": "create", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-create", "title": "create", "contents": "String.create n returns a fresh byte sequence of length n. The sequence is uninitialized and contains arbitrary bytes.", "rendered": "<code>String.create n</code> returns a fresh byte sequence of length <code>n</code>. The sequence is uninitialized and contains arbitrary bytes.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-create", "title": "create", "contents": "create int bytes ", "rendered": "<h4 class='item'>let create: int => bytes</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-set", "title": "set", "contents": "This is a deprecated alias of set.", "rendered": "This is a deprecated alias of set.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-set", "title": "set", "contents": "Deprecated: This is a deprecated alias of set.\n\n", "rendered": "Deprecated: <p>This is a deprecated alias of set.</p>\n", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-set", "title": "set", "contents": "Raise Invalid_argument if n is not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> is not a valid index in <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-set", "title": "set", "contents": "String.set s n c modifies byte sequence s in place, replacing the byte at index n with c. You can also write s.[n] &lt;- c instead of String.set s n c.", "rendered": "<code>String.set s n c</code> modifies byte sequence <code>s</code> in place, replacing the byte at index <code>n</code> with <code>c</code>. You can also write <code>s.[n] &lt;- c</code> instead of <code>String.set s n c</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-set", "title": "set", "contents": "set bytes int char unit   ", "rendered": "<h4 class='item'>let set: (bytes, int, char) => unit</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-get", "title": "get", "contents": "Raise Invalid_argument if n not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> not a valid index in <code>s</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-get", "title": "get", "contents": "String.get s n returns the character at index n in string s. You can also write s.[n] instead of String.get s n.", "rendered": "<code>String.get s n</code> returns the character at index <code>n</code> in string <code>s</code>. You can also write <code>s.[n]</code> instead of <code>String.get s n</code>.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-get", "title": "get", "contents": "get string int char  ", "rendered": "<h4 class='item'>let get: (string, int) => char</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-length", "title": "length", "contents": "Return the length (number of characters) of the given string.", "rendered": "Return the length (number of characters) of the given string.", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html#value-length", "title": "length", "contents": "length string int ", "rendered": "<h4 class='item'>let length: string => int</h4>", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html", "title": "StringLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "StringLabels"},
{"href": "./api/StringLabels.html", "title": "StringLabels", "contents": "String operations.", "rendered": "String operations.", "breadcrumb": "StringLabels"},
{"href": "./api/Sort.html#value-merge", "title": "merge", "contents": "Merge two lists according to the given predicate. Assuming the two argument lists are sorted according to the predicate, merge returns a sorted list containing the elements from the two lists. The behavior is undefined if the two argument lists were not sorted.", "rendered": "Merge two lists according to the given predicate. Assuming the two argument lists are sorted according to the predicate, <code>merge</code> returns a sorted list containing the elements from the two lists. The behavior is undefined if the two argument lists were not sorted.", "breadcrumb": "Sort"},
{"href": "./api/Sort.html#value-merge", "title": "merge", "contents": "merge bool   list list list   ", "rendered": "<h4 class='item'>let merge: (('a, 'a) => bool, list('a), list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "Sort"},
{"href": "./api/Sort.html#value-array", "title": "array", "contents": "Sort an array in increasing order according to an ordering predicate. The predicate should return true if its first argument is less than or equal to its second argument. The array is sorted in place.", "rendered": "Sort an array in increasing order according to an ordering predicate. The predicate should return <code>true</code> if its first argument is less than or equal to its second argument. The array is sorted in place.", "breadcrumb": "Sort"},
{"href": "./api/Sort.html#value-array", "title": "array", "contents": "array bool   array unit  ", "rendered": "<h4 class='item'>let array: (('a, 'a) => bool, array('a)) => unit</h4>", "breadcrumb": "Sort"},
{"href": "./api/Sort.html#value-list", "title": "list", "contents": "Sort a list in increasing order according to an ordering predicate. The predicate should return true if its first argument is less than or equal to its second argument.", "rendered": "Sort a list in increasing order according to an ordering predicate. The predicate should return <code>true</code> if its first argument is less than or equal to its second argument.", "breadcrumb": "Sort"},
{"href": "./api/Sort.html#value-list", "title": "list", "contents": "list bool   list list  ", "rendered": "<h4 class='item'>let list: (('a, 'a) => bool, list('a)) => list('a)</h4>", "breadcrumb": "Sort"},
{"href": "./api/Sort.html", "title": "Sort", "contents": "This module is obsolete and exists only for backward compatibility. The sorting functions in Array and List should be used instead. The new functions are faster and use less memory.", "rendered": "This module is obsolete and exists only for backward compatibility. The sorting functions in Array and List should be used instead. The new functions are faster and use less memory.", "breadcrumb": "Sort"},
{"href": "./api/Sort.html", "title": "Sort", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Sort"},
{"href": "./api/Sort.html", "title": "Sort", "contents": "Deprecated: This module is obsolete and exists only for backward compatibility. The sorting functions in Array and List should be used instead. The new functions are faster and use less memory.\n\n", "rendered": "Deprecated: <p>This module is obsolete and exists only for backward compatibility. The sorting functions in Array and List should be used instead. The new functions are faster and use less memory.</p>\n", "breadcrumb": "Sort"},
{"href": "./api/Sort.html", "title": "Sort", "contents": "Sorting and merging lists.", "rendered": "Sorting and merging lists.", "breadcrumb": "Sort"},
{"href": "./api/Int64.html#value-format", "title": "format", "contents": "Do not use this deprecated function. Instead, used sprintf with a %L... format.", "rendered": "Do not use this deprecated function. Instead, used sprintf with a <code>%L...</code> format.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-format", "title": "format", "contents": "format string int64 string  ", "rendered": "<h4 class='item'>let format: (string, int64) => string</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#Deprecated-functions", "title": "Deprecated functions", "contents": "", "rendered": "", "breadcrumb": "Int64"},
{"href": "./api/Int64.html", "title": "Int64", "contents": "/*", "rendered": "/*", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-compare", "title": "compare", "contents": "The comparison function for 64-bit integers, with the same specification as compare. Along with the type t, this function compare allows the module Int64 to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for 64-bit integers, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Int64</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Int64.html#type-t\">t</a>, <a href=\"./api/Int64.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#type-t", "title": "t", "contents": "An alias for the type of 64-bit integers.", "rendered": "An alias for the type of 64-bit integers.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#type-t", "title": "t", "contents": "t int64", "rendered": "<h4 class='item'>type t = int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-float_of_bits", "title": "float_of_bits", "contents": "Return the floating-point number whose internal representation, according to the IEEE 754 floating-point &#39;double format&#39; bit layout, is the given int64.", "rendered": "Return the floating-point number whose internal representation, according to the IEEE 754 floating-point &#39;double format&#39; bit layout, is the given <code>int64</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-float_of_bits", "title": "float_of_bits", "contents": "float_of_bits int64 float ", "rendered": "<h4 class='item'>let float_of_bits: int64 => float</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-bits_of_float", "title": "bits_of_float", "contents": "Return the internal representation of the given float according to the IEEE 754 floating-point &#39;double format&#39; bit layout. Bit 63 of the result represents the sign of the float; bits 62 to 52 represent the (biased) exponent; bits 51 to 0 represent the mantissa.", "rendered": "Return the internal representation of the given float according to the IEEE 754 floating-point &#39;double format&#39; bit layout. Bit 63 of the result represents the sign of the float; bits 62 to 52 represent the (biased) exponent; bits 51 to 0 represent the mantissa.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-bits_of_float", "title": "bits_of_float", "contents": "bits_of_float float int64 ", "rendered": "<h4 class='item'>let bits_of_float: float => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_string", "title": "to_string", "contents": "Return the string representation of its argument, in decimal.", "rendered": "Return the string representation of its argument, in decimal.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_string", "title": "to_string", "contents": "to_string int64 string ", "rendered": "<h4 class='item'>let to_string: int64 => string</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_string", "title": "of_string", "contents": "Convert the given string to a 64-bit integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with 0x, 0o or 0b respectively. Raise Failure &quot;int_of_string&quot; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int64.", "rendered": "Convert the given string to a 64-bit integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with <code>0x</code>, <code>0o</code> or <code>0b</code> respectively. Raise <code>Failure &quot;int_of_string&quot;</code> if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type <code>int64</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_string", "title": "of_string", "contents": "of_string string int64 ", "rendered": "<h4 class='item'>let of_string: string => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_nativeint", "title": "to_nativeint", "contents": "Convert the given 64-bit integer (type int64) to a native integer. On 32-bit platforms, the 64-bit integer is taken modulo 2Superscript. On 64-bit platforms, the conversion is exact.", "rendered": "Convert the given 64-bit integer (type <code>int64</code>) to a native integer. On 32-bit platforms, the 64-bit integer is taken modulo 2Superscript. On 64-bit platforms, the conversion is exact.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_nativeint", "title": "to_nativeint", "contents": "to_nativeint int64 nativeint ", "rendered": "<h4 class='item'>let to_nativeint: int64 => nativeint</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_nativeint", "title": "of_nativeint", "contents": "Convert the given native integer (type nativeint) to a 64-bit integer (type int64).", "rendered": "Convert the given native integer (type <code>nativeint</code>) to a 64-bit integer (type <code>int64</code>).", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_nativeint", "title": "of_nativeint", "contents": "of_nativeint nativeint int64 ", "rendered": "<h4 class='item'>let of_nativeint: nativeint => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_int32", "title": "to_int32", "contents": "Convert the given 64-bit integer (type int64) to a 32-bit integer (type int32). The 64-bit integer is taken modulo 2Superscript, i.e. the top 32 bits are lost during the conversion.", "rendered": "Convert the given 64-bit integer (type <code>int64</code>) to a 32-bit integer (type <code>int32</code>). The 64-bit integer is taken modulo 2Superscript, i.e. the top 32 bits are lost during the conversion.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_int32", "title": "to_int32", "contents": "to_int32 int64 int32 ", "rendered": "<h4 class='item'>let to_int32: int64 => int32</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_int32", "title": "of_int32", "contents": "Convert the given 32-bit integer (type int32) to a 64-bit integer (type int64).", "rendered": "Convert the given 32-bit integer (type <code>int32</code>) to a 64-bit integer (type <code>int64</code>).", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_int32", "title": "of_int32", "contents": "of_int32 int32 int64 ", "rendered": "<h4 class='item'>let of_int32: int32 => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_float", "title": "to_float", "contents": "Convert the given 64-bit integer to a floating-point number.", "rendered": "Convert the given 64-bit integer to a floating-point number.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_float", "title": "to_float", "contents": "to_float int64 float ", "rendered": "<h4 class='item'>let to_float: int64 => float</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_float", "title": "of_float", "contents": "Convert the given floating-point number to a 64-bit integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [min_int, max_int].", "rendered": "Convert the given floating-point number to a 64-bit integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [min_int, max_int].", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_float", "title": "of_float", "contents": "of_float float int64 ", "rendered": "<h4 class='item'>let of_float: float => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_int", "title": "to_int", "contents": "Convert the given 64-bit integer (type int64) to an integer (type int). On 64-bit platforms, the 64-bit integer is taken modulo 2Superscript, i.e. the high-order bit is lost during the conversion. On 32-bit platforms, the 64-bit integer is taken modulo 2Superscript, i.e. the top 33 bits are lost during the conversion.", "rendered": "Convert the given 64-bit integer (type <code>int64</code>) to an integer (type <code>int</code>). On 64-bit platforms, the 64-bit integer is taken modulo 2Superscript, i.e. the high-order bit is lost during the conversion. On 32-bit platforms, the 64-bit integer is taken modulo 2Superscript, i.e. the top 33 bits are lost during the conversion.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-to_int", "title": "to_int", "contents": "to_int int64 int ", "rendered": "<h4 class='item'>let to_int: int64 => int</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_int", "title": "of_int", "contents": "Convert the given integer (type int) to a 64-bit integer (type int64).", "rendered": "Convert the given integer (type <code>int</code>) to a 64-bit integer (type <code>int64</code>).", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-of_int", "title": "of_int", "contents": "of_int int int64 ", "rendered": "<h4 class='item'>let of_int: int => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-shift_right_logical", "title": "shift_right_logical", "contents": "Int64.shift_right_logical x y shifts x to the right by y bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of x. The result is unspecified if y &lt; 0 or y &gt;= 64.", "rendered": "<code>Int64.shift_right_logical x y</code> shifts <code>x</code> to the right by <code>y</code> bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of <code>x</code>. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= 64</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-shift_right_logical", "title": "shift_right_logical", "contents": "shift_right_logical int64 int int64  ", "rendered": "<h4 class='item'>let shift_right_logical: (int64, int) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-shift_right", "title": "shift_right", "contents": "Int64.shift_right x y shifts x to the right by y bits. This is an arithmetic shift: the sign bit of x is replicated and inserted in the vacated bits. The result is unspecified if y &lt; 0 or y &gt;= 64.", "rendered": "<code>Int64.shift_right x y</code> shifts <code>x</code> to the right by <code>y</code> bits. This is an arithmetic shift: the sign bit of <code>x</code> is replicated and inserted in the vacated bits. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= 64</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-shift_right", "title": "shift_right", "contents": "shift_right int64 int int64  ", "rendered": "<h4 class='item'>let shift_right: (int64, int) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-shift_left", "title": "shift_left", "contents": "Int64.shift_left x y shifts x to the left by y bits. The result is unspecified if y &lt; 0 or y &gt;= 64.", "rendered": "<code>Int64.shift_left x y</code> shifts <code>x</code> to the left by <code>y</code> bits. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= 64</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-shift_left", "title": "shift_left", "contents": "shift_left int64 int int64  ", "rendered": "<h4 class='item'>let shift_left: (int64, int) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-lognot", "title": "lognot", "contents": "Bitwise logical negation", "rendered": "Bitwise logical negation", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-lognot", "title": "lognot", "contents": "lognot int64 int64 ", "rendered": "<h4 class='item'>let lognot: int64 => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-logxor", "title": "logxor", "contents": "Bitwise logical exclusive or.", "rendered": "Bitwise logical exclusive or.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-logxor", "title": "logxor", "contents": "logxor int64 int64 int64  ", "rendered": "<h4 class='item'>let logxor: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-logor", "title": "logor", "contents": "Bitwise logical or.", "rendered": "Bitwise logical or.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-logor", "title": "logor", "contents": "logor int64 int64 int64  ", "rendered": "<h4 class='item'>let logor: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-logand", "title": "logand", "contents": "Bitwise logical and.", "rendered": "Bitwise logical and.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-logand", "title": "logand", "contents": "logand int64 int64 int64  ", "rendered": "<h4 class='item'>let logand: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-min_int", "title": "min_int", "contents": "The smallest representable 64-bit integer, -2Superscript.", "rendered": "The smallest representable 64-bit integer, -2Superscript.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-min_int", "title": "min_int", "contents": "min_int int64", "rendered": "<h4 class='item'>let min_int: int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-max_int", "title": "max_int", "contents": "The greatest representable 64-bit integer, 2Superscript - 1.", "rendered": "The greatest representable 64-bit integer, 2Superscript - 1.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-max_int", "title": "max_int", "contents": "max_int int64", "rendered": "<h4 class='item'>let max_int: int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-abs", "title": "abs", "contents": "Return the absolute value of its argument.", "rendered": "Return the absolute value of its argument.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-abs", "title": "abs", "contents": "abs int64 int64 ", "rendered": "<h4 class='item'>let abs: int64 => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-pred", "title": "pred", "contents": "Predecessor. Int64.pred x is Int64.sub x Int64.one.", "rendered": "Predecessor. <code>Int64.pred x</code> is <code>Int64.sub x Int64.one</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-pred", "title": "pred", "contents": "pred int64 int64 ", "rendered": "<h4 class='item'>let pred: int64 => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-succ", "title": "succ", "contents": "Successor. Int64.succ x is Int64.add x Int64.one.", "rendered": "Successor. <code>Int64.succ x</code> is <code>Int64.add x Int64.one</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-succ", "title": "succ", "contents": "succ int64 int64 ", "rendered": "<h4 class='item'>let succ: int64 => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-rem", "title": "rem", "contents": "Integer remainder. If y is not zero, the result of Int64.rem x y satisfies the following property: x = Int64.add (Int64.mul (Int64.div x y) y) (Int64.rem x y). If y = 0, Int64.rem x y raises Division_by_zero.", "rendered": "Integer remainder. If <code>y</code> is not zero, the result of <code>Int64.rem x y</code> satisfies the following property: <code>x = Int64.add (Int64.mul (Int64.div x y) y) (Int64.rem x y)</code>. If <code>y = 0</code>, <code>Int64.rem x y</code> raises <code>Division_by_zero</code>.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-rem", "title": "rem", "contents": "rem int64 int64 int64  ", "rendered": "<h4 class='item'>let rem: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-div", "title": "div", "contents": "Integer division. Raise Division_by_zero if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for (/).", "rendered": "Integer division. Raise <code>Division_by_zero</code> if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for (/).", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-div", "title": "div", "contents": "div int64 int64 int64  ", "rendered": "<h4 class='item'>let div: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-mul", "title": "mul", "contents": "Multiplication.", "rendered": "Multiplication.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-mul", "title": "mul", "contents": "mul int64 int64 int64  ", "rendered": "<h4 class='item'>let mul: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-sub", "title": "sub", "contents": "Subtraction.", "rendered": "Subtraction.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-sub", "title": "sub", "contents": "sub int64 int64 int64  ", "rendered": "<h4 class='item'>let sub: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-add", "title": "add", "contents": "Addition.", "rendered": "Addition.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-add", "title": "add", "contents": "add int64 int64 int64  ", "rendered": "<h4 class='item'>let add: (int64, int64) => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-neg", "title": "neg", "contents": "Unary negation.", "rendered": "Unary negation.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-neg", "title": "neg", "contents": "neg int64 int64 ", "rendered": "<h4 class='item'>let neg: int64 => int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-minus_one", "title": "minus_one", "contents": "The 64-bit integer -1.", "rendered": "The 64-bit integer -1.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-minus_one", "title": "minus_one", "contents": "minus_one int64", "rendered": "<h4 class='item'>let minus_one: int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-one", "title": "one", "contents": "The 64-bit integer 1.", "rendered": "The 64-bit integer 1.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-one", "title": "one", "contents": "one int64", "rendered": "<h4 class='item'>let one: int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-zero", "title": "zero", "contents": "The 64-bit integer 0.", "rendered": "The 64-bit integer 0.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html#value-zero", "title": "zero", "contents": "zero int64", "rendered": "<h4 class='item'>let zero: int64</h4>", "breadcrumb": "Int64"},
{"href": "./api/Int64.html", "title": "Int64", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Int64"},
{"href": "./api/Int64.html", "title": "Int64", "contents": "Performance notice: values of type int64 occupy more memory space than values of type int, and arithmetic operations on int64 are generally slower than those on int. Use int64 only when the application requires exact 64-bit arithmetic.", "rendered": "Performance notice: values of type <code>int64</code> occupy more memory space than values of type <code>int</code>, and arithmetic operations on <code>int64</code> are generally slower than those on <code>int</code>. Use <code>int64</code> only when the application requires exact 64-bit arithmetic.", "breadcrumb": "Int64"},
{"href": "./api/Int64.html", "title": "Int64", "contents": "This module provides operations on the type int64 of signed 64-bit integers. Unlike the built-in int type, the type int64 is guaranteed to be exactly 64-bit wide on all platforms. All arithmetic operations over int64 are taken modulo 2Superscript", "rendered": "This module provides operations on the type <code>int64</code> of signed 64-bit integers. Unlike the built-in <code>int</code> type, the type <code>int64</code> is guaranteed to be exactly 64-bit wide on all platforms. All arithmetic operations over <code>int64</code> are taken modulo 2Superscript", "breadcrumb": "Int64"},
{"href": "./api/Int64.html", "title": "Int64", "contents": "64-bit integers.", "rendered": "64-bit integers.", "breadcrumb": "Int64"},
{"href": "./api/ArrayLabels.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set array int unit   ", "rendered": "<h4 class='item'>let unsafe_set: (array('a), int, 'a) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get array int  ", "rendered": "<h4 class='item'>let unsafe_get: (array('a), int) => 'a</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#Undocumented-functions", "title": "Undocumented functions", "contents": "", "rendered": "", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html", "title": "ArrayLabels", "contents": "/*", "rendered": "/*", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fast_sort", "title": "fast_sort", "contents": "Same as sort or stable_sort, whichever is faster on typical input.", "rendered": "Same as sort or stable_sort, whichever is faster on typical input.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fast_sort", "title": "fast_sort", "contents": "fast_sort int   array unit cmp ", "rendered": "<h4 class='item'>let fast_sort: (~cmp: ('a, 'a) => int, array('a)) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-stable_sort", "title": "stable_sort", "contents": "The current implementation uses Merge Sort. It uses n/2 words of heap space, where n is the length of the array. It is usually faster than the current implementation of sort.", "rendered": "The current implementation uses Merge Sort. It uses <code>n/2</code> words of heap space, where <code>n</code> is the length of the array. It is usually faster than the current implementation of sort.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-stable_sort", "title": "stable_sort", "contents": "Same as sort, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.", "rendered": "Same as sort, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-stable_sort", "title": "stable_sort", "contents": "stable_sort int   array unit cmp ", "rendered": "<h4 class='item'>let stable_sort: (~cmp: ('a, 'a) => int, array('a)) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "if cmp x y &gt;= 0 and cmp y z &gt;= 0 then cmp x z &gt;= 0", "rendered": "if <code>cmp x y</code> &gt;= 0 and <code>cmp y z</code> &gt;= 0 then <code>cmp x z</code> &gt;= 0", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "cmp x y &gt; 0 if and only if cmp y x &lt; 0", "rendered": "<code>cmp x y</code> &gt; 0 if and only if <code>cmp y x</code> &lt; 0", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "cmp a.(i) a.(j) &gt;= 0 if and only if i &gt;= j", "rendered": "<code>cmp a.(i) a.(j)</code> &gt;= 0 if and only if i &gt;= j", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "When ArrayLabels.sort returns, a contains the same elements as before, reordered in such a way that for all i and j valid indices of a :", "rendered": "When <code>ArrayLabels.sort</code> returns, <code>a</code> contains the same elements as before, reordered in such a way that for all i and j valid indices of <code>a</code> :", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "Specification of the comparison function: Let a be the array and cmp the comparison function. The following must be true for all x, y, z in a :", "rendered": "Specification of the comparison function: Let <code>a</code> be the array and <code>cmp</code> the comparison function. The following must be true for all x, y, z in a :", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "The current implementation uses Heap Sort. It runs in constant stack space.", "rendered": "The current implementation uses Heap Sort. It runs in constant stack space.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "Sort an array in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, compare is a suitable comparison function, provided there are no floating-point NaN values in the data. After calling ArrayLabels.sort, the array is sorted in place in increasing order. ArrayLabels.sort is guaranteed to run in constant heap space and (at most) logarithmic stack space.", "rendered": "Sort an array in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, compare is a suitable comparison function, provided there are no floating-point NaN values in the data. After calling <code>ArrayLabels.sort</code>, the array is sorted in place in increasing order. <code>ArrayLabels.sort</code> is guaranteed to run in constant heap space and (at most) logarithmic stack space.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sort", "title": "sort", "contents": "sort int   array unit cmp ", "rendered": "<h4 class='item'>let sort: (~cmp: ('a, 'a) => int, array('a)) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#Sorting", "title": "Sorting", "contents": "", "rendered": "", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fold_right", "title": "fold_right", "contents": "ArrayLabels.fold_right f a x computes f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...)), where n is the length of the array a.", "rendered": "<code>ArrayLabels.fold_right f a x</code> computes <code>f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>, where <code>n</code> is the length of the array <code>a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fold_right", "title": "fold_right", "contents": "fold_right   array f  init", "rendered": "<h4 class='item'>let fold_right: (\n  ~f: ('b, 'a) => 'a,\n  array('b),\n  ~init: 'a\n) => 'a</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fold_left", "title": "fold_left", "contents": "ArrayLabels.fold_left f x a computes f (... (f (f x a.(0)) a.(1)) ...) a.(n-1), where n is the length of the array a.", "rendered": "<code>ArrayLabels.fold_left f x a</code> computes <code>f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>, where <code>n</code> is the length of the array <code>a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fold_left", "title": "fold_left", "contents": "fold_left   array f init ", "rendered": "<h4 class='item'>let fold_left: (\n  ~f: ('a, 'b) => 'a,\n  ~init: 'a,\n  array('b)\n) => 'a</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-mapi", "title": "mapi", "contents": "Same as map, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "rendered": "Same as map, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-mapi", "title": "mapi", "contents": "mapi int   array array f ", "rendered": "<h4 class='item'>let mapi: (~f: (int, 'a) => 'b, array('a)) => array('b)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-iteri", "title": "iteri", "contents": "iteri int unit   array unit f ", "rendered": "<h4 class='item'>let iteri: (~f: (int, 'a) => unit, array('a)) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-map", "title": "map", "contents": "ArrayLabels.map f a applies function f to all the elements of a, and builds an array with the results returned by f: [| f a.(0); f a.(1); ...; f a.(ArrayLabels.length a - 1) |].", "rendered": "<code>ArrayLabels.map f a</code> applies function <code>f</code> to all the elements of <code>a</code>, and builds an array with the results returned by <code>f</code>: <code>[| f a.(0); f a.(1); ...; f a.(ArrayLabels.length a - 1) |]</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-map", "title": "map", "contents": "map  array array f ", "rendered": "<h4 class='item'>let map: (~f: 'a => 'b, array('a)) => array('b)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-iter", "title": "iter", "contents": "ArrayLabels.iter f a applies function f in turn to all the elements of a. It is equivalent to f a.(0); f a.(1); ...; f a.(ArrayLabels.length a - 1); ().", "rendered": "<code>ArrayLabels.iter f a</code> applies function <code>f</code> in turn to all the elements of <code>a</code>. It is equivalent to <code>f a.(0); f a.(1); ...; f a.(ArrayLabels.length a - 1); ()</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-iter", "title": "iter", "contents": "iter unit  array unit f ", "rendered": "<h4 class='item'>let iter: (~f: 'a => unit, array('a)) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-of_list", "title": "of_list", "contents": "ArrayLabels.of_list l returns a fresh array containing the elements of l.", "rendered": "<code>ArrayLabels.of_list l</code> returns a fresh array containing the elements of <code>l</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-of_list", "title": "of_list", "contents": "of_list list array ", "rendered": "<h4 class='item'>let of_list: list('a) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-to_list", "title": "to_list", "contents": "ArrayLabels.to_list a returns the list of all the elements of a.", "rendered": "<code>ArrayLabels.to_list a</code> returns the list of all the elements of <code>a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-to_list", "title": "to_list", "contents": "to_list array list ", "rendered": "<h4 class='item'>let to_list: array('a) => list('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-blit", "title": "blit", "contents": "Raise Invalid_argument &quot;Array.blit&quot; if o1 and len do not designate a valid subarray of v1, or if o2 and len do not designate a valid subarray of v2.", "rendered": "Raise <code>Invalid_argument &quot;Array.blit&quot;</code> if <code>o1</code> and <code>len</code> do not designate a valid subarray of <code>v1</code>, or if <code>o2</code> and <code>len</code> do not designate a valid subarray of <code>v2</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-blit", "title": "blit", "contents": "ArrayLabels.blit v1 o1 v2 o2 len copies len elements from array v1, starting at element number o1, to array v2, starting at element number o2. It works correctly even if v1 and v2 are the same array, and the source and destination chunks overlap.", "rendered": "<code>ArrayLabels.blit v1 o1 v2 o2 len</code> copies <code>len</code> elements from array <code>v1</code>, starting at element number <code>o1</code>, to array <code>v2</code>, starting at element number <code>o2</code>. It works correctly even if <code>v1</code> and <code>v2</code> are the same array, and the source and destination chunks overlap.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-blit", "title": "blit", "contents": "blit array int array int int unit src src_pos dst dst_pos len", "rendered": "<h4 class='item'>let blit: (\n  ~src: array('a),\n  ~src_pos: int,\n  ~dst: array('a),\n  ~dst_pos: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fill", "title": "fill", "contents": "Raise Invalid_argument &quot;Array.fill&quot; if ofs and len do not designate a valid subarray of a.", "rendered": "Raise <code>Invalid_argument &quot;Array.fill&quot;</code> if <code>ofs</code> and <code>len</code> do not designate a valid subarray of <code>a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fill", "title": "fill", "contents": "ArrayLabels.fill a ofs len x modifies the array a in place, storing x in elements number ofs to ofs + len - 1.", "rendered": "<code>ArrayLabels.fill a ofs len x</code> modifies the array <code>a</code> in place, storing <code>x</code> in elements number <code>ofs</code> to <code>ofs + len - 1</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-fill", "title": "fill", "contents": "fill array int int unit  pos len ", "rendered": "<h4 class='item'>let fill: (array('a), ~pos: int, ~len: int, 'a) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-copy", "title": "copy", "contents": "ArrayLabels.copy a returns a copy of a, that is, a fresh array containing the same elements as a.", "rendered": "<code>ArrayLabels.copy a</code> returns a copy of <code>a</code>, that is, a fresh array containing the same elements as <code>a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-copy", "title": "copy", "contents": "copy array array ", "rendered": "<h4 class='item'>let copy: array('a) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sub", "title": "sub", "contents": "Raise Invalid_argument &quot;Array.sub&quot; if start and len do not designate a valid subarray of a; that is, if start &lt; 0, or len &lt; 0, or start + len &gt; ArrayLabels.length a.", "rendered": "Raise <code>Invalid_argument &quot;Array.sub&quot;</code> if <code>start</code> and <code>len</code> do not designate a valid subarray of <code>a</code>; that is, if <code>start &lt; 0</code>, or <code>len &lt; 0</code>, or <code>start + len &gt; ArrayLabels.length a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sub", "title": "sub", "contents": "ArrayLabels.sub a start len returns a fresh array of length len, containing the elements number start to start + len - 1 of array a.", "rendered": "<code>ArrayLabels.sub a start len</code> returns a fresh array of length <code>len</code>, containing the elements number <code>start</code> to <code>start + len - 1</code> of array <code>a</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-sub", "title": "sub", "contents": "sub array int int array  pos len", "rendered": "<h4 class='item'>let sub: (array('a), ~pos: int, ~len: int) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-concat", "title": "concat", "contents": "Same as ArrayLabels.append, but concatenates a list of arrays.", "rendered": "Same as <code>ArrayLabels.append</code>, but concatenates a list of arrays.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-concat", "title": "concat", "contents": "concat list array array ", "rendered": "<h4 class='item'>let concat: list(array('a)) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-append", "title": "append", "contents": "ArrayLabels.append v1 v2 returns a fresh array containing the concatenation of the arrays v1 and v2.", "rendered": "<code>ArrayLabels.append v1 v2</code> returns a fresh array containing the concatenation of the arrays <code>v1</code> and <code>v2</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-append", "title": "append", "contents": "append array array array  ", "rendered": "<h4 class='item'>let append: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-create_matrix", "title": "create_matrix", "contents": "ArrayLabels.create_matrix is an alias for make_matrix.", "rendered": "<code>ArrayLabels.create_matrix</code> is an alias for make_matrix.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-create_matrix", "title": "create_matrix", "contents": "Deprecated: ArrayLabels.create_matrix is an alias for make_matrix.\n\n", "rendered": "Deprecated: <p><code>ArrayLabels.create_matrix</code> is an alias for make_matrix.</p>\n", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-create_matrix", "title": "create_matrix", "contents": "create_matrix int int array array dimx dimy ", "rendered": "<h4 class='item'>let create_matrix: (~dimx: int, ~dimy: int, 'a) => array(\n  array('a)\n)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-make_matrix", "title": "make_matrix", "contents": "Raise Invalid_argument if dimx or dimy is negative or greater than Sys.max_array_length. If the value of e is a floating-point number, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>dimx</code> or <code>dimy</code> is negative or greater than <code>Sys.max_array_length</code>. If the value of <code>e</code> is a floating-point number, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-make_matrix", "title": "make_matrix", "contents": "ArrayLabels.make_matrix dimx dimy e returns a two-dimensional array (an array of arrays) with first dimension dimx and second dimension dimy. All the elements of this new matrix are initially physically equal to e. The element (x,y) of a matrix m is accessed with the notation m.(x).(y).", "rendered": "<code>ArrayLabels.make_matrix dimx dimy e</code> returns a two-dimensional array (an array of arrays) with first dimension <code>dimx</code> and second dimension <code>dimy</code>. All the elements of this new matrix are initially physically equal to <code>e</code>. The element (<code>x,y</code>) of a matrix <code>m</code> is accessed with the notation <code>m.(x).(y)</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-make_matrix", "title": "make_matrix", "contents": "make_matrix int int array array dimx dimy ", "rendered": "<h4 class='item'>let make_matrix: (~dimx: int, ~dimy: int, 'a) => array(\n  array('a)\n)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-init", "title": "init", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; Sys.max_array_length. If the return type of f is float, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; Sys.max_array_length</code>. If the return type of <code>f</code> is <code>float</code>, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-init", "title": "init", "contents": "ArrayLabels.init n f returns a fresh array of length n, with element number i initialized to the result of f i. In other terms, ArrayLabels.init n f tabulates the results of f applied to the integers 0 to n-1.", "rendered": "<code>ArrayLabels.init n f</code> returns a fresh array of length <code>n</code>, with element number <code>i</code> initialized to the result of <code>f i</code>. In other terms, <code>ArrayLabels.init n f</code> tabulates the results of <code>f</code> applied to the integers <code>0</code> to <code>n-1</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-init", "title": "init", "contents": "init int int  array  f", "rendered": "<h4 class='item'>let init: (int, ~f: int => 'a) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-create", "title": "create", "contents": "ArrayLabels.create is an alias for make.", "rendered": "<code>ArrayLabels.create</code> is an alias for make.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-create", "title": "create", "contents": "Deprecated: ArrayLabels.create is an alias for make.\n\n", "rendered": "Deprecated: <p><code>ArrayLabels.create</code> is an alias for make.</p>\n", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-create", "title": "create", "contents": "create int array  ", "rendered": "<h4 class='item'>let create: (int, 'a) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; Sys.max_array_length. If the value of x is a floating-point number, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; Sys.max_array_length</code>. If the value of <code>x</code> is a floating-point number, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-make", "title": "make", "contents": "ArrayLabels.make n x returns a fresh array of length n, initialized with x. All the elements of this new array are initially physically equal to x (in the sense of the == predicate). Consequently, if x is mutable, it is shared among all elements of the array, and modifying x through one of the array entries will modify all other entries at the same time.", "rendered": "<code>ArrayLabels.make n x</code> returns a fresh array of length <code>n</code>, initialized with <code>x</code>. All the elements of this new array are initially physically equal to <code>x</code> (in the sense of the <code>==</code> predicate). Consequently, if <code>x</code> is mutable, it is shared among all elements of the array, and modifying <code>x</code> through one of the array entries will modify all other entries at the same time.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-make", "title": "make", "contents": "make int array  ", "rendered": "<h4 class='item'>let make: (int, 'a) => array('a)</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-set", "title": "set", "contents": "Raise Invalid_argument &quot;index out of bounds&quot; if n is outside the range 0 to ArrayLabels.length a - 1.", "rendered": "Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside the range 0 to <code>ArrayLabels.length a - 1</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-set", "title": "set", "contents": "ArrayLabels.set a n x modifies array a in place, replacing element number n with x. You can also write a.(n) &lt;- x instead of ArrayLabels.set a n x.", "rendered": "<code>ArrayLabels.set a n x</code> modifies array <code>a</code> in place, replacing element number <code>n</code> with <code>x</code>. You can also write <code>a.(n) &lt;- x</code> instead of <code>ArrayLabels.set a n x</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-set", "title": "set", "contents": "set array int unit   ", "rendered": "<h4 class='item'>let set: (array('a), int, 'a) => unit</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-get", "title": "get", "contents": "Raise Invalid_argument &quot;index out of bounds&quot; if n is outside the range 0 to (ArrayLabels.length a - 1).", "rendered": "Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside the range 0 to <code>(ArrayLabels.length a - 1)</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-get", "title": "get", "contents": "ArrayLabels.get a n returns the element number n of array a. The first element has number 0. The last element has number ArrayLabels.length a - 1. You can also write a.(n) instead of ArrayLabels.get a n.", "rendered": "<code>ArrayLabels.get a n</code> returns the element number <code>n</code> of array <code>a</code>. The first element has number 0. The last element has number <code>ArrayLabels.length a - 1</code>. You can also write <code>a.(n)</code> instead of <code>ArrayLabels.get a n</code>.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-get", "title": "get", "contents": "get array int  ", "rendered": "<h4 class='item'>let get: (array('a), int) => 'a</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-length", "title": "length", "contents": "Return the length (number of elements) of the given array.", "rendered": "Return the length (number of elements) of the given array.", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html#value-length", "title": "length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html", "title": "ArrayLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ArrayLabels"},
{"href": "./api/ArrayLabels.html", "title": "ArrayLabels", "contents": "Array operations.", "rendered": "Array operations.", "breadcrumb": "ArrayLabels"},
{"href": "./api/String.html#value-unsafe_fill", "title": "unsafe_fill", "contents": "unsafe_fill bytes int int char unit    ", "rendered": "<h4 class='item'>let unsafe_fill: (bytes, int, int, char) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-unsafe_blit", "title": "unsafe_blit", "contents": "unsafe_blit string int bytes int int unit     ", "rendered": "<h4 class='item'>let unsafe_blit: (string, int, bytes, int, int) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set bytes int char unit   ", "rendered": "<h4 class='item'>let unsafe_set: (bytes, int, char) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get string int char  ", "rendered": "<h4 class='item'>let unsafe_get: (string, int) => char</h4>", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "/*", "rendered": "/*", "breadcrumb": "String"},
{"href": "./api/String.html#value-compare", "title": "compare", "contents": "The comparison function for strings, with the same specification as compare. Along with the type t, this function compare allows the module String to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for strings, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>String</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "String"},
{"href": "./api/String.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/String.html#type-t\">t</a>, <a href=\"./api/String.html#type-t\">t</a>) => int</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#type-t", "title": "t", "contents": "An alias for the type of strings.", "rendered": "An alias for the type of strings.", "breadcrumb": "String"},
{"href": "./api/String.html#type-t", "title": "t", "contents": "t string", "rendered": "<h4 class='item'>type t = string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-uncapitalize", "title": "uncapitalize", "contents": "Return a copy of the argument, with the first character set to lowercase.", "rendered": "Return a copy of the argument, with the first character set to lowercase.", "breadcrumb": "String"},
{"href": "./api/String.html#value-uncapitalize", "title": "uncapitalize", "contents": "uncapitalize string string ", "rendered": "<h4 class='item'>let uncapitalize: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-capitalize", "title": "capitalize", "contents": "Return a copy of the argument, with the first character set to uppercase.", "rendered": "Return a copy of the argument, with the first character set to uppercase.", "breadcrumb": "String"},
{"href": "./api/String.html#value-capitalize", "title": "capitalize", "contents": "capitalize string string ", "rendered": "<h4 class='item'>let capitalize: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-lowercase", "title": "lowercase", "contents": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "String"},
{"href": "./api/String.html#value-lowercase", "title": "lowercase", "contents": "lowercase string string ", "rendered": "<h4 class='item'>let lowercase: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-uppercase", "title": "uppercase", "contents": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "String"},
{"href": "./api/String.html#value-uppercase", "title": "uppercase", "contents": "uppercase string string ", "rendered": "<h4 class='item'>let uppercase: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-rcontains_from", "title": "rcontains_from", "contents": "Raise Invalid_argument if stop &lt; 0 or stop+1 is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>stop &lt; 0</code> or <code>stop+1</code> is not a valid position in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-rcontains_from", "title": "rcontains_from", "contents": "String.rcontains_from s stop c tests if character c appears in s before position stop+1.", "rendered": "<code>String.rcontains_from s stop c</code> tests if character <code>c</code> appears in <code>s</code> before position <code>stop+1</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-rcontains_from", "title": "rcontains_from", "contents": "rcontains_from string int char bool   ", "rendered": "<h4 class='item'>let rcontains_from: (string, int, char) => bool</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-contains_from", "title": "contains_from", "contents": "Raise Invalid_argument if start is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> is not a valid position in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-contains_from", "title": "contains_from", "contents": "String.contains_from s start c tests if character c appears in s after position start. String.contains s c is equivalent to String.contains_from s 0 c.", "rendered": "<code>String.contains_from s start c</code> tests if character <code>c</code> appears in <code>s</code> after position <code>start</code>. <code>String.contains s c</code> is equivalent to <code>String.contains_from s 0 c</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-contains_from", "title": "contains_from", "contents": "contains_from string int char bool   ", "rendered": "<h4 class='item'>let contains_from: (string, int, char) => bool</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-contains", "title": "contains", "contents": "String.contains s c tests if character c appears in the string s.", "rendered": "<code>String.contains s c</code> tests if character <code>c</code> appears in the string <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-contains", "title": "contains", "contents": "contains string char bool  ", "rendered": "<h4 class='item'>let contains: (string, char) => bool</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-rindex_from", "title": "rindex_from", "contents": "Raise Invalid_argument if i+1 is not a valid position in s. Raise Not_found if c does not occur in s before position i+1.", "rendered": "Raise <code>Invalid_argument</code> if <code>i+1</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> before position <code>i+1</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-rindex_from", "title": "rindex_from", "contents": "String.rindex_from s i c returns the index of the last occurrence of character c in string s before position i+1. String.rindex s c is equivalent to String.rindex_from s (String.length s - 1) c.", "rendered": "<code>String.rindex_from s i c</code> returns the index of the last occurrence of character <code>c</code> in string <code>s</code> before position <code>i+1</code>. <code>String.rindex s c</code> is equivalent to <code>String.rindex_from s (String.length s - 1) c</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-rindex_from", "title": "rindex_from", "contents": "rindex_from string int char int   ", "rendered": "<h4 class='item'>let rindex_from: (string, int, char) => int</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-index_from", "title": "index_from", "contents": "Raise Invalid_argument if i is not a valid position in s. Raise Not_found if c does not occur in s after position i.", "rendered": "Raise <code>Invalid_argument</code> if <code>i</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> after position <code>i</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-index_from", "title": "index_from", "contents": "String.index_from s i c returns the index of the first occurrence of character c in string s after position i. String.index s c is equivalent to String.index_from s 0 c.", "rendered": "<code>String.index_from s i c</code> returns the index of the first occurrence of character <code>c</code> in string <code>s</code> after position <code>i</code>. <code>String.index s c</code> is equivalent to <code>String.index_from s 0 c</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-index_from", "title": "index_from", "contents": "index_from string int char int   ", "rendered": "<h4 class='item'>let index_from: (string, int, char) => int</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-rindex", "title": "rindex", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-rindex", "title": "rindex", "contents": "String.rindex s c returns the index of the last occurrence of character c in string s.", "rendered": "<code>String.rindex s c</code> returns the index of the last occurrence of character <code>c</code> in string <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-rindex", "title": "rindex", "contents": "rindex string char int  ", "rendered": "<h4 class='item'>let rindex: (string, char) => int</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-index", "title": "index", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-index", "title": "index", "contents": "String.index s c returns the index of the first occurrence of character c in string s.", "rendered": "<code>String.index s c</code> returns the index of the first occurrence of character <code>c</code> in string <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-index", "title": "index", "contents": "index string char int  ", "rendered": "<h4 class='item'>let index: (string, char) => int</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-escaped", "title": "escaped", "contents": "Raise Invalid_argument if the result is longer than max_string_length bytes.", "rendered": "Raise <code>Invalid_argument</code> if the result is longer than max_string_length bytes.", "breadcrumb": "String"},
{"href": "./api/String.html#value-escaped", "title": "escaped", "contents": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. If there is no special character in the argument, return the original string itself, not a copy. Its inverse function is Scanf.unescaped.", "rendered": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml. If there is no special character in the argument, return the original string itself, not a copy. Its inverse function is Scanf.unescaped.", "breadcrumb": "String"},
{"href": "./api/String.html#value-escaped", "title": "escaped", "contents": "escaped string string ", "rendered": "<h4 class='item'>let escaped: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-trim", "title": "trim", "contents": "Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace are: &#39; &#39;, &#39;\\012&#39;, &#39;\\n&#39;, &#39;\\r&#39;, and &#39;\\t&#39;. If there is neither leading nor trailing whitespace character in the argument, return the original string itself, not a copy.", "rendered": "Return a copy of the argument, without leading and trailing whitespace. The characters regarded as whitespace are: <code>&#39; &#39;</code>, <code>&#39;\\012&#39;</code>, <code>&#39;\\n&#39;</code>, <code>&#39;\\r&#39;</code>, and <code>&#39;\\t&#39;</code>. If there is neither leading nor trailing whitespace character in the argument, return the original string itself, not a copy.", "breadcrumb": "String"},
{"href": "./api/String.html#value-trim", "title": "trim", "contents": "trim string string ", "rendered": "<h4 class='item'>let trim: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-mapi", "title": "mapi", "contents": "String.mapi f s calls f with each character of s and its index (in increasing index order) and stores the results in a new string that is returned.", "rendered": "<code>String.mapi f s</code> calls <code>f</code> with each character of <code>s</code> and its index (in increasing index order) and stores the results in a new string that is returned.", "breadcrumb": "String"},
{"href": "./api/String.html#value-mapi", "title": "mapi", "contents": "mapi int char char   string string  ", "rendered": "<h4 class='item'>let mapi: ((int, char) => char, string) => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-map", "title": "map", "contents": "String.map f s applies function f in turn to all the characters of s (in increasing index order) and stores the results in a new string that is returned.", "rendered": "<code>String.map f s</code> applies function <code>f</code> in turn to all the characters of <code>s</code> (in increasing index order) and stores the results in a new string that is returned.", "breadcrumb": "String"},
{"href": "./api/String.html#value-map", "title": "map", "contents": "map char char  string string  ", "rendered": "<h4 class='item'>let map: (char => char, string) => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the character itself as second argument.", "breadcrumb": "String"},
{"href": "./api/String.html#value-iteri", "title": "iteri", "contents": "iteri int char unit   string unit  ", "rendered": "<h4 class='item'>let iteri: ((int, char) => unit, string) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-iter", "title": "iter", "contents": "String.iter f s applies function f in turn to all the characters of s. It is equivalent to f s.[0]; f s.[1]; ...; f s.[String.length s - 1]; ().", "rendered": "<code>String.iter f s</code> applies function <code>f</code> in turn to all the characters of <code>s</code>. It is equivalent to <code>f s.[0]; f s.[1]; ...; f s.[String.length s - 1]; ()</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-iter", "title": "iter", "contents": "iter char unit  string unit  ", "rendered": "<h4 class='item'>let iter: (char => unit, string) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-concat", "title": "concat", "contents": "Raise Invalid_argument if the result is longer than max_string_length bytes.", "rendered": "Raise <code>Invalid_argument</code> if the result is longer than max_string_length bytes.", "breadcrumb": "String"},
{"href": "./api/String.html#value-concat", "title": "concat", "contents": "String.concat sep sl concatenates the list of strings sl, inserting the separator string sep between each.", "rendered": "<code>String.concat sep sl</code> concatenates the list of strings <code>sl</code>, inserting the separator string <code>sep</code> between each.", "breadcrumb": "String"},
{"href": "./api/String.html#value-concat", "title": "concat", "contents": "concat string list string string  ", "rendered": "<h4 class='item'>let concat: (string, list(string)) => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-blit", "title": "blit", "contents": "Same as blit_string.", "rendered": "Same as blit_string.", "breadcrumb": "String"},
{"href": "./api/String.html#value-blit", "title": "blit", "contents": "blit string int bytes int int unit     ", "rendered": "<h4 class='item'>let blit: (string, int, bytes, int, int) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-fill", "title": "fill", "contents": "This is a deprecated alias of fill. ", "rendered": "This is a deprecated alias of fill.<code> </code>", "breadcrumb": "String"},
{"href": "./api/String.html#value-fill", "title": "fill", "contents": "Deprecated: This is a deprecated alias of fill. \n\n", "rendered": "Deprecated: <p>This is a deprecated alias of fill.<code> </code></p>\n", "breadcrumb": "String"},
{"href": "./api/String.html#value-fill", "title": "fill", "contents": "Raise Invalid_argument if start and len do not designate a valid range of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid range of <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-fill", "title": "fill", "contents": "String.fill s start len c modifies byte sequence s in place, replacing len bytes with c, starting at start.", "rendered": "<code>String.fill s start len c</code> modifies byte sequence <code>s</code> in place, replacing <code>len</code> bytes with <code>c</code>, starting at <code>start</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-fill", "title": "fill", "contents": "fill bytes int int char unit    ", "rendered": "<h4 class='item'>let fill: (bytes, int, int, char) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-sub", "title": "sub", "contents": "Raise Invalid_argument if start and len do not designate a valid substring of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid substring of <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-sub", "title": "sub", "contents": "String.sub s start len returns a fresh string of length len, containing the substring of s that starts at position start and has length len.", "rendered": "<code>String.sub s start len</code> returns a fresh string of length <code>len</code>, containing the substring of <code>s</code> that starts at position <code>start</code> and has length <code>len</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-sub", "title": "sub", "contents": "sub string int int string   ", "rendered": "<h4 class='item'>let sub: (string, int, int) => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-copy", "title": "copy", "contents": "Because strings are immutable, it doesn&#39;t make much sense to make identical copies of them.", "rendered": "Because strings are immutable, it doesn&#39;t make much sense to make identical copies of them.", "breadcrumb": "String"},
{"href": "./api/String.html#value-copy", "title": "copy", "contents": "Deprecated: Because strings are immutable, it doesn&#39;t make much sense to make identical copies of them.\n\n", "rendered": "Deprecated: <p>Because strings are immutable, it doesn&#39;t make much sense to make identical copies of them.</p>\n", "breadcrumb": "String"},
{"href": "./api/String.html#value-copy", "title": "copy", "contents": "Return a copy of the given string.", "rendered": "Return a copy of the given string.", "breadcrumb": "String"},
{"href": "./api/String.html#value-copy", "title": "copy", "contents": "copy string string ", "rendered": "<h4 class='item'>let copy: string => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-init", "title": "init", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "String"},
{"href": "./api/String.html#value-init", "title": "init", "contents": "String.init n f returns a string of length n, with character i initialized to the result of f i (called in increasing index order).", "rendered": "<code>String.init n f</code> returns a string of length <code>n</code>, with character <code>i</code> initialized to the result of <code>f i</code> (called in increasing index order).", "breadcrumb": "String"},
{"href": "./api/String.html#value-init", "title": "init", "contents": "init int int char  string  ", "rendered": "<h4 class='item'>let init: (int, int => char) => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "String"},
{"href": "./api/String.html#value-make", "title": "make", "contents": "String.make n c returns a fresh string of length n, filled with the character c.", "rendered": "<code>String.make n c</code> returns a fresh string of length <code>n</code>, filled with the character <code>c</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-make", "title": "make", "contents": "make int char string  ", "rendered": "<h4 class='item'>let make: (int, char) => string</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-create", "title": "create", "contents": "This is a deprecated alias of create. ", "rendered": "This is a deprecated alias of create.<code> </code>", "breadcrumb": "String"},
{"href": "./api/String.html#value-create", "title": "create", "contents": "Deprecated: This is a deprecated alias of create. \n\n", "rendered": "Deprecated: <p>This is a deprecated alias of create.<code> </code></p>\n", "breadcrumb": "String"},
{"href": "./api/String.html#value-create", "title": "create", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "String"},
{"href": "./api/String.html#value-create", "title": "create", "contents": "String.create n returns a fresh byte sequence of length n. The sequence is uninitialized and contains arbitrary bytes.", "rendered": "<code>String.create n</code> returns a fresh byte sequence of length <code>n</code>. The sequence is uninitialized and contains arbitrary bytes.", "breadcrumb": "String"},
{"href": "./api/String.html#value-create", "title": "create", "contents": "create int bytes ", "rendered": "<h4 class='item'>let create: int => bytes</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-set", "title": "set", "contents": "This is a deprecated alias of set. ", "rendered": "This is a deprecated alias of set.<code> </code>", "breadcrumb": "String"},
{"href": "./api/String.html#value-set", "title": "set", "contents": "Deprecated: This is a deprecated alias of set. \n\n", "rendered": "Deprecated: <p>This is a deprecated alias of set.<code> </code></p>\n", "breadcrumb": "String"},
{"href": "./api/String.html#value-set", "title": "set", "contents": "Raise Invalid_argument if n is not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> is not a valid index in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-set", "title": "set", "contents": "String.set s n c modifies byte sequence s in place, replacing the byte at index n with c. You can also write s.[n] &lt;- c instead of String.set s n c.", "rendered": "<code>String.set s n c</code> modifies byte sequence <code>s</code> in place, replacing the byte at index <code>n</code> with <code>c</code>. You can also write <code>s.[n] &lt;- c</code> instead of <code>String.set s n c</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-set", "title": "set", "contents": "set bytes int char unit   ", "rendered": "<h4 class='item'>let set: (bytes, int, char) => unit</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-get", "title": "get", "contents": "Raise Invalid_argument if n not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> not a valid index in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-get", "title": "get", "contents": "String.get s n returns the character at index n in string s. You can also write s.[n] instead of String.get s n.", "rendered": "<code>String.get s n</code> returns the character at index <code>n</code> in string <code>s</code>. You can also write <code>s.[n]</code> instead of <code>String.get s n</code>.", "breadcrumb": "String"},
{"href": "./api/String.html#value-get", "title": "get", "contents": "get string int char  ", "rendered": "<h4 class='item'>let get: (string, int) => char</h4>", "breadcrumb": "String"},
{"href": "./api/String.html#value-length", "title": "length", "contents": "Return the length (number of characters) of the given string.", "rendered": "Return the length (number of characters) of the given string.", "breadcrumb": "String"},
{"href": "./api/String.html#value-length", "title": "length", "contents": "length string int ", "rendered": "<h4 class='item'>let length: string => int</h4>", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "@rest", "rendered": "@rest", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "All new code should avoid this feature and be compiled with the -safe-string command-line option to enforce the separation between the types string and bytes.", "rendered": "All new code should avoid this feature and be compiled with the <code>-safe-string</code> command-line option to enforce the separation between the types <code>string</code> and <code>bytes</code>.", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "OCaml strings used to be modifiable in place, for instance via the set and blit functions described below. This usage is deprecated and only possible when the compiler is put in &quot;unsafe-string&quot; mode by giving the -unsafe-string command-line option (which is currently the default for reasons of backward compatibility). This is done by making the types string and bytes (see module Bytes) interchangeable so that functions expecting byte sequences can also accept strings as arguments and modify them.", "rendered": "OCaml strings used to be modifiable in place, for instance via the set and blit functions described below. This usage is deprecated and only possible when the compiler is put in &quot;unsafe-string&quot; mode by giving the <code>-unsafe-string</code> command-line option (which is currently the default for reasons of backward compatibility). This is done by making the types <code>string</code> and <code>bytes</code> (see module Bytes) interchangeable so that functions expecting byte sequences can also accept strings as arguments and modify them.", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "Two parameters start and len are said to designate a valid substring of s if len &gt;= 0 and start and start+len are valid positions in s.", "rendered": "Two parameters <code>start</code> and <code>len</code> are said to designate a valid substring of <code>s</code> if <code>len &gt;= 0</code> and <code>start</code> and <code>start+len</code> are valid positions in <code>s</code>.", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "Given a string s of length l, we can access each of the l characters of s via its index in the sequence. Indexes start at 0, and we will call an index valid in s if it falls within the range [0...l-1] (inclusive). A position is the point between two characters or at the beginning or end of the string. We call a position valid in s if it falls within the range [0...l] (inclusive). Note that the character at index n is between positions n and n+1.", "rendered": "Given a string <code>s</code> of length <code>l</code>, we can access each of the <code>l</code> characters of <code>s</code> via its index in the sequence. Indexes start at <code>0</code>, and we will call an index valid in <code>s</code> if it falls within the range <code>[0...l-1]</code> (inclusive). A position is the point between two characters or at the beginning or end of the string. We call a position valid in <code>s</code> if it falls within the range <code>[0...l]</code> (inclusive). Note that the character at index <code>n</code> is between positions <code>n</code> and <code>n+1</code>.", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "A string is an immutable data structure that contains a fixed-length sequence of (single-byte) characters. Each character can be accessed in constant time through its index.", "rendered": "A string is an immutable data structure that contains a fixed-length sequence of (single-byte) characters. Each character can be accessed in constant time through its index.", "breadcrumb": "String"},
{"href": "./api/String.html", "title": "String", "contents": "String operations.", "rendered": "String operations.", "breadcrumb": "String"},
{"href": "./api/CamlinternalMod.html#type-shape", "title": "shape", "contents": "shape array shape Obj t", "rendered": "<h4 class='item'>type shape = \n  | Function\n  | Lazy\n  | Class\n  | Module(array(<a href=\"./api/CamlinternalMod.html#type-shape\">shape</a>))\n  | Value(<a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>)\n</h4>", "breadcrumb": "CamlinternalMod"},
{"href": "./api/CamlinternalMod.html", "title": "CamlinternalMod", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CamlinternalMod"},
{"href": "./api/CamlinternalMod.html", "title": "CamlinternalMod", "contents": "Run-time support for recursive modules. All functions in this module are for system use only, not for the casual user.", "rendered": "Run-time support for recursive modules. All functions in this module are for system use only, not for the casual user.", "breadcrumb": "CamlinternalMod"},
{"href": "./api/Oo.html#value-public_method_label", "title": "public_method_label", "contents": "public_method_label string tag ", "rendered": "<h4 class='item'>let public_method_label: string => <a href=\"./api/CamlinternalOO.html#type-tag\" title=\"CamlinternalOO.tag\">tag</a></h4>", "breadcrumb": "Oo"},
{"href": "./api/Oo.html#value-new_method", "title": "new_method", "contents": "For internal use (CamlIDL)", "rendered": "For internal use (CamlIDL)", "breadcrumb": "Oo"},
{"href": "./api/Oo.html#value-new_method", "title": "new_method", "contents": "new_method string tag ", "rendered": "<h4 class='item'>let new_method: string => <a href=\"./api/CamlinternalOO.html#type-tag\" title=\"CamlinternalOO.tag\">tag</a></h4>", "breadcrumb": "Oo"},
{"href": "./api/Oo.html", "title": "Oo", "contents": "/*", "rendered": "/*", "breadcrumb": "Oo"},
{"href": "./api/Oo.html#value-id", "title": "id", "contents": "Return an integer identifying this object, unique for the current execution of the program. The generic comparison and hashing functions are based on this integer. When an object is obtained by unmarshaling, the id is refreshed, and thus different from the original object. As a consequence, the internal invariants of data structures such as hash table or sets containing objects are broken after unmarshaling the data structures.", "rendered": "Return an integer identifying this object, unique for the current execution of the program. The generic comparison and hashing functions are based on this integer. When an object is obtained by unmarshaling, the id is refreshed, and thus different from the original object. As a consequence, the internal invariants of data structures such as hash table or sets containing objects are broken after unmarshaling the data structures.", "breadcrumb": "Oo"},
{"href": "./api/Oo.html#value-id", "title": "id", "contents": "id int ", "rendered": "<h4 class='item'>let id: &lt; .. &gt; => int</h4>", "breadcrumb": "Oo"},
{"href": "./api/Oo.html#value-copy", "title": "copy", "contents": "Oo.copy o returns a copy of object o, that is a fresh object with the same methods and instance variables as o.", "rendered": "<code>Oo.copy o</code> returns a copy of object <code>o</code>, that is a fresh object with the same methods and instance variables as <code>o</code>.", "breadcrumb": "Oo"},
{"href": "./api/Oo.html#value-copy", "title": "copy", "contents": "copy ", "rendered": "<h4 class='item'>let copy: &lt; .. &gt; => &lt; .. &gt;</h4>", "breadcrumb": "Oo"},
{"href": "./api/Oo.html", "title": "Oo", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Oo"},
{"href": "./api/Oo.html", "title": "Oo", "contents": "Operations on objects", "rendered": "Operations on objects", "breadcrumb": "Oo"},
{"href": "./api/Parsing.html#value-parse_error", "title": "parse_error", "contents": "parse_error string unit ", "rendered": "<h4 class='item'>let parse_error: string => unit</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-is_current_lookahead", "title": "is_current_lookahead", "contents": "is_current_lookahead bool ", "rendered": "<h4 class='item'>let is_current_lookahead: 'a => bool</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-peek_val", "title": "peek_val", "contents": "peek_val parser_env int  ", "rendered": "<h4 class='item'>let peek_val: (<a href=\"./api/Parsing.html#type-parser_env\">parser_env</a>, int) => 'a</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-yyparse", "title": "yyparse", "contents": "yyparse parse_tables int lexbuf  lexbuf    ", "rendered": "<h4 class='item'>let yyparse: (<a href=\"./api/Parsing.html#type-parse_tables\">parse_tables</a>, int, <a href=\"./api/Lexing.html#type-lexbuf\" title=\"Lexing.lexbuf\">lexbuf</a> => 'a, <a href=\"./api/Lexing.html#type-lexbuf\" title=\"Lexing.lexbuf\">lexbuf</a>) => 'b</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#type-parse_tables", "title": "parse_tables", "contents": "parse_tables actions array parser_env Obj t  transl_const array int transl_block array int lhs string len string defred string dgoto string sindex string rindex string gindex string tablesize int table string check string error_function string unit  names_const string names_block string", "rendered": "<h4 class='item'>type parse_tables = {\n  actions: array(<a href=\"./api/Parsing.html#type-parser_env\">parser_env</a> => <a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>),\n  transl_const: array(int),\n  transl_block: array(int),\n  lhs: string,\n  len: string,\n  defred: string,\n  dgoto: string,\n  sindex: string,\n  rindex: string,\n  gindex: string,\n  tablesize: int,\n  table: string,\n  check: string,\n  error_function: string => unit,\n  names_const: string,\n  names_block: string\n}</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#type-parser_env", "title": "parser_env", "contents": "parser_env ", "rendered": "<h4 class='item'>type parser_env</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html", "title": "Parsing", "contents": "The following definitions are used by the generated parsers only. They are not intended to be used directly by user programs.", "rendered": "The following definitions are used by the generated parsers only. They are not intended to be used directly by user programs.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html", "title": "Parsing", "contents": "/*", "rendered": "/*", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-set_trace", "title": "set_trace", "contents": "Control debugging support for ocamlyacc-generated parsers. After Parsing.set_trace true, the pushdown automaton that executes the parsers prints a trace of its actions (reading a token, shifting a state, reducing by a rule) on standard output. Parsing.set_trace false turns this debugging trace off. The boolean returned is the previous state of the trace flag.", "rendered": "Control debugging support for <code>ocamlyacc</code>-generated parsers. After <code>Parsing.set_trace true</code>, the pushdown automaton that executes the parsers prints a trace of its actions (reading a token, shifting a state, reducing by a rule) on standard output. <code>Parsing.set_trace false</code> turns this debugging trace off. The boolean returned is the previous state of the trace flag.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-set_trace", "title": "set_trace", "contents": "set_trace bool bool ", "rendered": "<h4 class='item'>let set_trace: bool => bool</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-clear_parser", "title": "clear_parser", "contents": "Empty the parser stack. Call it just after a parsing function has returned, to remove all pointers from the parser stack to structures that were built by semantic actions during parsing. This is optional, but lowers the memory requirements of the programs.", "rendered": "Empty the parser stack. Call it just after a parsing function has returned, to remove all pointers from the parser stack to structures that were built by semantic actions during parsing. This is optional, but lowers the memory requirements of the programs.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-clear_parser", "title": "clear_parser", "contents": "clear_parser unit unit ", "rendered": "<h4 class='item'>let clear_parser: unit => unit</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_end_pos", "title": "rhs_end_pos", "contents": "Same as rhs_end, but return a position instead of an offset.", "rendered": "Same as <code>rhs_end</code>, but return a <code>position</code> instead of an offset.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_end_pos", "title": "rhs_end_pos", "contents": "rhs_end_pos int position ", "rendered": "<h4 class='item'>let rhs_end_pos: int => <a href=\"./api/Lexing.html#type-position\" title=\"Lexing.position\">position</a></h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_start_pos", "title": "rhs_start_pos", "contents": "Same as rhs_start, but return a position instead of an offset.", "rendered": "Same as <code>rhs_start</code>, but return a <code>position</code> instead of an offset.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_start_pos", "title": "rhs_start_pos", "contents": "rhs_start_pos int position ", "rendered": "<h4 class='item'>let rhs_start_pos: int => <a href=\"./api/Lexing.html#type-position\" title=\"Lexing.position\">position</a></h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_end_pos", "title": "symbol_end_pos", "contents": "Same as symbol_end, but return a position instead of an offset.", "rendered": "Same as <code>symbol_end</code>, but return a <code>position</code> instead of an offset.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_end_pos", "title": "symbol_end_pos", "contents": "symbol_end_pos unit position ", "rendered": "<h4 class='item'>let symbol_end_pos: unit => <a href=\"./api/Lexing.html#type-position\" title=\"Lexing.position\">position</a></h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_start_pos", "title": "symbol_start_pos", "contents": "symbol_start_pos unit position ", "rendered": "<h4 class='item'>let symbol_start_pos: unit => <a href=\"./api/Lexing.html#type-position\" title=\"Lexing.position\">position</a></h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_end", "title": "rhs_end", "contents": "See rhs_start.", "rendered": "See rhs_start.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_end", "title": "rhs_end", "contents": "rhs_end int int ", "rendered": "<h4 class='item'>let rhs_end: int => int</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_start", "title": "rhs_start", "contents": "Same as symbol_start and symbol_end, but return the offset of the string matching the nth item on the right-hand side of the rule, where n is the integer parameter to rhs_start and rhs_end. n is 1 for the leftmost item.", "rendered": "Same as symbol_start and symbol_end, but return the offset of the string matching the <code>n</code>th item on the right-hand side of the rule, where <code>n</code> is the integer parameter to <code>rhs_start</code> and <code>rhs_end</code>. <code>n</code> is 1 for the leftmost item.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-rhs_start", "title": "rhs_start", "contents": "rhs_start int int ", "rendered": "<h4 class='item'>let rhs_start: int => int</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_end", "title": "symbol_end", "contents": "See symbol_start.", "rendered": "See symbol_start.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_end", "title": "symbol_end", "contents": "symbol_end unit int ", "rendered": "<h4 class='item'>let symbol_end: unit => int</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_start", "title": "symbol_start", "contents": "symbol_start and symbol_end are to be called in the action part of a grammar rule only. They return the offset of the string that matches the left-hand side of the rule: symbol_start() returns the offset of the first character; symbol_end() returns the offset after the last character. The first character in a file is at offset 0.", "rendered": "<code>symbol_start</code> and symbol_end are to be called in the action part of a grammar rule only. They return the offset of the string that matches the left-hand side of the rule: <code>symbol_start()</code> returns the offset of the first character; <code>symbol_end()</code> returns the offset after the last character. The first character in a file is at offset 0.", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html#value-symbol_start", "title": "symbol_start", "contents": "symbol_start unit int ", "rendered": "<h4 class='item'>let symbol_start: unit => int</h4>", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html", "title": "Parsing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Parsing"},
{"href": "./api/Parsing.html", "title": "Parsing", "contents": "The run-time library for parsers generated by ocamlyacc.", "rendered": "The run-time library for parsers generated by <code>ocamlyacc</code>.", "breadcrumb": "Parsing"},
{"href": "./api/BytesLabels.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "unsafe_of_string string bytes ", "rendered": "<h4 class='item'>let unsafe_of_string: string => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "unsafe_to_string bytes string ", "rendered": "<h4 class='item'>let unsafe_to_string: bytes => string</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-unsafe_fill", "title": "unsafe_fill", "contents": "unsafe_fill bytes int int char unit  pos len ", "rendered": "<h4 class='item'>let unsafe_fill: (bytes, ~pos: int, ~len: int, char) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-unsafe_blit", "title": "unsafe_blit", "contents": "unsafe_blit bytes int bytes int int unit src src_pos dst dst_pos len", "rendered": "<h4 class='item'>let unsafe_blit: (\n  ~src: bytes,\n  ~src_pos: int,\n  ~dst: bytes,\n  ~dst_pos: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set bytes int char unit   ", "rendered": "<h4 class='item'>let unsafe_set: (bytes, int, char) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get bytes int char  ", "rendered": "<h4 class='item'>let unsafe_get: (bytes, int) => char</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html", "title": "BytesLabels", "contents": "/*", "rendered": "/*", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-compare", "title": "compare", "contents": "The comparison function for byte sequences, with the same specification as compare. Along with the type t, this function compare allows the module Bytes to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for byte sequences, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Bytes</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/BytesLabels.html#type-t\">t</a>, <a href=\"./api/BytesLabels.html#type-t\">t</a>) => int</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#type-t", "title": "t", "contents": "An alias for the type of byte sequences.", "rendered": "An alias for the type of byte sequences.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#type-t", "title": "t", "contents": "t bytes", "rendered": "<h4 class='item'>type t = bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-uncapitalize", "title": "uncapitalize", "contents": "Return a copy of the argument, with the first byte set to lowercase.", "rendered": "Return a copy of the argument, with the first byte set to lowercase.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-uncapitalize", "title": "uncapitalize", "contents": "uncapitalize bytes bytes ", "rendered": "<h4 class='item'>let uncapitalize: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-capitalize", "title": "capitalize", "contents": "Return a copy of the argument, with the first byte set to uppercase.", "rendered": "Return a copy of the argument, with the first byte set to uppercase.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-capitalize", "title": "capitalize", "contents": "capitalize bytes bytes ", "rendered": "<h4 class='item'>let capitalize: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-lowercase", "title": "lowercase", "contents": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-lowercase", "title": "lowercase", "contents": "lowercase bytes bytes ", "rendered": "<h4 class='item'>let lowercase: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-uppercase", "title": "uppercase", "contents": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-uppercase", "title": "uppercase", "contents": "uppercase bytes bytes ", "rendered": "<h4 class='item'>let uppercase: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rcontains_from", "title": "rcontains_from", "contents": "Raise Invalid_argument if stop &lt; 0 or stop+1 is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>stop &lt; 0</code> or <code>stop+1</code> is not a valid position in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rcontains_from", "title": "rcontains_from", "contents": "rcontains_from s stop c tests if byte c appears in s before position stop+1.", "rendered": "<code>rcontains_from s stop c</code> tests if byte <code>c</code> appears in <code>s</code> before position <code>stop+1</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rcontains_from", "title": "rcontains_from", "contents": "rcontains_from bytes int char bool   ", "rendered": "<h4 class='item'>let rcontains_from: (bytes, int, char) => bool</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-contains_from", "title": "contains_from", "contents": "Raise Invalid_argument if start is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> is not a valid position in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-contains_from", "title": "contains_from", "contents": "contains_from s start c tests if byte c appears in s after position start. contains s c is equivalent to contains_from\n    s 0 c.", "rendered": "<code>contains_from s start c</code> tests if byte <code>c</code> appears in <code>s</code> after position <code>start</code>. <code>contains s c</code> is equivalent to <code>contains_from\n    s 0 c</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-contains_from", "title": "contains_from", "contents": "contains_from bytes int char bool   ", "rendered": "<h4 class='item'>let contains_from: (bytes, int, char) => bool</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-contains", "title": "contains", "contents": "contains s c tests if byte c appears in s.", "rendered": "<code>contains s c</code> tests if byte <code>c</code> appears in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-contains", "title": "contains", "contents": "contains bytes char bool  ", "rendered": "<h4 class='item'>let contains: (bytes, char) => bool</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rindex_from", "title": "rindex_from", "contents": "Raise Invalid_argument if i+1 is not a valid position in s. Raise Not_found if c does not occur in s before position i+1.", "rendered": "Raise <code>Invalid_argument</code> if <code>i+1</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> before position <code>i+1</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rindex_from", "title": "rindex_from", "contents": "rindex_from s i c returns the index of the last occurrence of byte c in s before position i+1. rindex s c is equivalent to rindex_from s (Bytes.length s - 1) c.", "rendered": "<code>rindex_from s i c</code> returns the index of the last occurrence of byte <code>c</code> in <code>s</code> before position <code>i+1</code>. <code>rindex s c</code> is equivalent to <code>rindex_from s (Bytes.length s - 1) c</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rindex_from", "title": "rindex_from", "contents": "rindex_from bytes int char int   ", "rendered": "<h4 class='item'>let rindex_from: (bytes, int, char) => int</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-index_from", "title": "index_from", "contents": "Raise Invalid_argument if i is not a valid position in s. Raise Not_found if c does not occur in s after position i.", "rendered": "Raise <code>Invalid_argument</code> if <code>i</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> after position <code>i</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-index_from", "title": "index_from", "contents": "index_from s i c returns the index of the first occurrence of byte c in s after position i. Bytes.index s c is equivalent to Bytes.index_from s 0 c.", "rendered": "<code>index_from s i c</code> returns the index of the first occurrence of byte <code>c</code> in <code>s</code> after position <code>i</code>. <code>Bytes.index s c</code> is equivalent to <code>Bytes.index_from s 0 c</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-index_from", "title": "index_from", "contents": "index_from bytes int char int   ", "rendered": "<h4 class='item'>let index_from: (bytes, int, char) => int</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rindex", "title": "rindex", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rindex", "title": "rindex", "contents": "rindex s c returns the index of the last occurrence of byte c in s.", "rendered": "<code>rindex s c</code> returns the index of the last occurrence of byte <code>c</code> in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-rindex", "title": "rindex", "contents": "rindex bytes char int  ", "rendered": "<h4 class='item'>let rindex: (bytes, char) => int</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-index", "title": "index", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-index", "title": "index", "contents": "index s c returns the index of the first occurrence of byte c in s.", "rendered": "<code>index s c</code> returns the index of the first occurrence of byte <code>c</code> in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-index", "title": "index", "contents": "index bytes char int  ", "rendered": "<h4 class='item'>let index: (bytes, char) => int</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-escaped", "title": "escaped", "contents": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.", "rendered": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-escaped", "title": "escaped", "contents": "escaped bytes bytes ", "rendered": "<h4 class='item'>let escaped: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-trim", "title": "trim", "contents": "Return a copy of the argument, without leading and trailing whitespace. The bytes regarded as whitespace are the ASCII characters &#39; &#39;, &#39;\\012&#39;, &#39;\\n&#39;, &#39;\\r&#39;, and &#39;\\t&#39;.", "rendered": "Return a copy of the argument, without leading and trailing whitespace. The bytes regarded as whitespace are the ASCII characters <code>&#39; &#39;</code>, <code>&#39;\\012&#39;</code>, <code>&#39;\\n&#39;</code>, <code>&#39;\\r&#39;</code>, and <code>&#39;\\t&#39;</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-trim", "title": "trim", "contents": "trim bytes bytes ", "rendered": "<h4 class='item'>let trim: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-mapi", "title": "mapi", "contents": "mapi f s calls f with each character of s and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.", "rendered": "<code>mapi f s</code> calls <code>f</code> with each character of <code>s</code> and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-mapi", "title": "mapi", "contents": "mapi int char char   bytes bytes f ", "rendered": "<h4 class='item'>let mapi: (~f: (int, char) => char, bytes) => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-map", "title": "map", "contents": "map f s applies function f in turn to all the bytes of s and stores the resulting bytes in a new sequence that is returned as the result.", "rendered": "<code>map f s</code> applies function <code>f</code> in turn to all the bytes of <code>s</code> and stores the resulting bytes in a new sequence that is returned as the result.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-map", "title": "map", "contents": "map char char  bytes bytes f ", "rendered": "<h4 class='item'>let map: (~f: char => char, bytes) => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-iteri", "title": "iteri", "contents": "iteri int char unit   bytes unit f ", "rendered": "<h4 class='item'>let iteri: (~f: (int, char) => unit, bytes) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-iter", "title": "iter", "contents": "iter f s applies function f in turn to all the bytes of s. It is equivalent to f (get s 0); f (get s 1); ...; f (get s\n    (length s - 1)); ().", "rendered": "<code>iter f s</code> applies function <code>f</code> in turn to all the bytes of <code>s</code>. It is equivalent to <code>f (get s 0); f (get s 1); ...; f (get s\n    (length s - 1)); ()</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-iter", "title": "iter", "contents": "iter char unit  bytes unit f ", "rendered": "<h4 class='item'>let iter: (~f: char => unit, bytes) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-concat", "title": "concat", "contents": "concat sep sl concatenates the list of byte sequences sl, inserting the separator byte sequence sep between each, and returns the result as a new byte sequence.", "rendered": "<code>concat sep sl</code> concatenates the list of byte sequences <code>sl</code>, inserting the separator byte sequence <code>sep</code> between each, and returns the result as a new byte sequence.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-concat", "title": "concat", "contents": "concat bytes list bytes bytes sep ", "rendered": "<h4 class='item'>let concat: (~sep: bytes, list(bytes)) => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-blit", "title": "blit", "contents": "Raise Invalid_argument if srcoff and len do not designate a valid range of src, or if dstoff and len do not designate a valid range of dst.", "rendered": "Raise <code>Invalid_argument</code> if <code>srcoff</code> and <code>len</code> do not designate a valid range of <code>src</code>, or if <code>dstoff</code> and <code>len</code> do not designate a valid range of <code>dst</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-blit", "title": "blit", "contents": "blit src srcoff dst dstoff len copies len bytes from sequence src, starting at index srcoff, to sequence dst, starting at index dstoff. It works correctly even if src and dst are the same byte sequence, and the source and destination intervals overlap.", "rendered": "<code>blit src srcoff dst dstoff len</code> copies <code>len</code> bytes from sequence <code>src</code>, starting at index <code>srcoff</code>, to sequence <code>dst</code>, starting at index <code>dstoff</code>. It works correctly even if <code>src</code> and <code>dst</code> are the same byte sequence, and the source and destination intervals overlap.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-blit", "title": "blit", "contents": "blit bytes int bytes int int unit src src_pos dst dst_pos len", "rendered": "<h4 class='item'>let blit: (\n  ~src: bytes,\n  ~src_pos: int,\n  ~dst: bytes,\n  ~dst_pos: int,\n  ~len: int\n) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-fill", "title": "fill", "contents": "Raise Invalid_argument if start and len do not designate a valid range of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid range of <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-fill", "title": "fill", "contents": "fill s start len c modifies s in place, replacing len characters with c, starting at start.", "rendered": "<code>fill s start len c</code> modifies <code>s</code> in place, replacing <code>len</code> characters with <code>c</code>, starting at <code>start</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-fill", "title": "fill", "contents": "fill bytes int int char unit  pos len ", "rendered": "<h4 class='item'>let fill: (bytes, ~pos: int, ~len: int, char) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-sub_string", "title": "sub_string", "contents": "Same as sub but return a string instead of a byte sequence.", "rendered": "Same as <code>sub</code> but return a string instead of a byte sequence.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-sub_string", "title": "sub_string", "contents": "sub_string bytes int int string   ", "rendered": "<h4 class='item'>let sub_string: (bytes, int, int) => string</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-sub", "title": "sub", "contents": "Raise Invalid_argument if start and len do not designate a valid range of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid range of <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-sub", "title": "sub", "contents": "sub s start len returns a new byte sequence of length len, containing the subsequence of s that starts at position start and has length len.", "rendered": "<code>sub s start len</code> returns a new byte sequence of length <code>len</code>, containing the subsequence of <code>s</code> that starts at position <code>start</code> and has length <code>len</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-sub", "title": "sub", "contents": "sub bytes int int bytes  pos len", "rendered": "<h4 class='item'>let sub: (bytes, ~pos: int, ~len: int) => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-to_string", "title": "to_string", "contents": "Return a new string that contains the same bytes as the given byte sequence.", "rendered": "Return a new string that contains the same bytes as the given byte sequence.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-to_string", "title": "to_string", "contents": "to_string bytes string ", "rendered": "<h4 class='item'>let to_string: bytes => string</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-of_string", "title": "of_string", "contents": "Return a new byte sequence that contains the same bytes as the given string.", "rendered": "Return a new byte sequence that contains the same bytes as the given string.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-of_string", "title": "of_string", "contents": "of_string string bytes ", "rendered": "<h4 class='item'>let of_string: string => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-copy", "title": "copy", "contents": "Return a new byte sequence that contains the same bytes as the argument.", "rendered": "Return a new byte sequence that contains the same bytes as the argument.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-copy", "title": "copy", "contents": "copy bytes bytes ", "rendered": "<h4 class='item'>let copy: bytes => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-empty", "title": "empty", "contents": "A byte sequence of size 0.", "rendered": "A byte sequence of size 0.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-empty", "title": "empty", "contents": "empty bytes", "rendered": "<h4 class='item'>let empty: bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-init", "title": "init", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-init", "title": "init", "contents": "init n f returns a fresh byte sequence of length n, with character i initialized to the result of f i.", "rendered": "<code>init n f</code> returns a fresh byte sequence of length <code>n</code>, with character <code>i</code> initialized to the result of <code>f i</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-init", "title": "init", "contents": "init int int char  bytes  f", "rendered": "<h4 class='item'>let init: (int, ~f: int => char) => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-make", "title": "make", "contents": "make n c returns a new byte sequence of length n, filled with the byte c.", "rendered": "<code>make n c</code> returns a new byte sequence of length <code>n</code>, filled with the byte <code>c</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-make", "title": "make", "contents": "make int char bytes  ", "rendered": "<h4 class='item'>let make: (int, char) => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-create", "title": "create", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-create", "title": "create", "contents": "create n returns a new byte sequence of length n. The sequence is uninitialized and contains arbitrary bytes.", "rendered": "<code>create n</code> returns a new byte sequence of length <code>n</code>. The sequence is uninitialized and contains arbitrary bytes.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-create", "title": "create", "contents": "create int bytes ", "rendered": "<h4 class='item'>let create: int => bytes</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-set", "title": "set", "contents": "Raise Invalid_argument if n is not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> is not a valid index in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-set", "title": "set", "contents": "set s n c modifies s in place, replacing the byte at index n with c.", "rendered": "<code>set s n c</code> modifies <code>s</code> in place, replacing the byte at index <code>n</code> with <code>c</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-set", "title": "set", "contents": "set bytes int char unit   ", "rendered": "<h4 class='item'>let set: (bytes, int, char) => unit</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-get", "title": "get", "contents": "Raise Invalid_argument if n not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> not a valid index in <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-get", "title": "get", "contents": "get s n returns the byte at index n in argument s.", "rendered": "<code>get s n</code> returns the byte at index <code>n</code> in argument <code>s</code>.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-get", "title": "get", "contents": "get bytes int char  ", "rendered": "<h4 class='item'>let get: (bytes, int) => char</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-length", "title": "length", "contents": "Return the length (number of bytes) of the argument.", "rendered": "Return the length (number of bytes) of the argument.", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html#value-length", "title": "length", "contents": "length bytes int ", "rendered": "<h4 class='item'>let length: bytes => int</h4>", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html", "title": "BytesLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "BytesLabels"},
{"href": "./api/BytesLabels.html", "title": "BytesLabels", "contents": "Byte sequence operations.", "rendered": "Byte sequence operations.", "breadcrumb": "BytesLabels"},
{"href": "./api/Queue.html#value-transfer", "title": "transfer", "contents": "transfer q1 q2 adds all of q1&#39;s elements at the end of the queue q2, then clears q1. It is equivalent to the sequence iter (fun x -&gt; add x q2) q1; clear q1, but runs in constant time.", "rendered": "<code>transfer q1 q2</code> adds all of <code>q1</code>&#39;s elements at the end of the queue <code>q2</code>, then clears <code>q1</code>. It is equivalent to the sequence <code>iter (fun x -&gt; add x q2) q1; clear q1</code>, but runs in constant time.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-transfer", "title": "transfer", "contents": "transfer t t unit  ", "rendered": "<h4 class='item'>let transfer: (<a href=\"./api/Queue.html#type-t\">t</a>('a), <a href=\"./api/Queue.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-fold", "title": "fold", "contents": "fold f accu q is equivalent to List.fold_left f accu l, where l is the list of q&#39;s elements. The queue remains unchanged.", "rendered": "<code>fold f accu q</code> is equivalent to <code>List.fold_left f accu l</code>, where <code>l</code> is the list of <code>q</code>&#39;s elements. The queue remains unchanged.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-fold", "title": "fold", "contents": "fold   t   ", "rendered": "<h4 class='item'>let fold: (('b, 'a) => 'b, 'b, <a href=\"./api/Queue.html#type-t\">t</a>('a)) => 'b</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-iter", "title": "iter", "contents": "iter f q applies f in turn to all elements of q, from the least recently entered to the most recently entered. The queue itself is unchanged.", "rendered": "<code>iter f q</code> applies <code>f</code> in turn to all elements of <code>q</code>, from the least recently entered to the most recently entered. The queue itself is unchanged.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-iter", "title": "iter", "contents": "iter unit  t unit  ", "rendered": "<h4 class='item'>let iter: ('a => unit, <a href=\"./api/Queue.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-length", "title": "length", "contents": "Return the number of elements in a queue.", "rendered": "Return the number of elements in a queue.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Queue.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-is_empty", "title": "is_empty", "contents": "Return true if the given queue is empty, false otherwise.", "rendered": "Return <code>true</code> if the given queue is empty, <code>false</code> otherwise.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-is_empty", "title": "is_empty", "contents": "is_empty t bool ", "rendered": "<h4 class='item'>let is_empty: <a href=\"./api/Queue.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-copy", "title": "copy", "contents": "Return a copy of the given queue.", "rendered": "Return a copy of the given queue.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Queue.html#type-t\">t</a>('a) => <a href=\"./api/Queue.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-clear", "title": "clear", "contents": "Discard all elements from a queue.", "rendered": "Discard all elements from a queue.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Queue.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-top", "title": "top", "contents": "top is a synonym for peek.", "rendered": "<code>top</code> is a synonym for <code>peek</code>.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-top", "title": "top", "contents": "top t ", "rendered": "<h4 class='item'>let top: <a href=\"./api/Queue.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-peek", "title": "peek", "contents": "peek q returns the first element in queue q, without removing it from the queue, or raises Empty if the queue is empty.", "rendered": "<code>peek q</code> returns the first element in queue <code>q</code>, without removing it from the queue, or raises <code>Empty</code> if the queue is empty.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-peek", "title": "peek", "contents": "peek t ", "rendered": "<h4 class='item'>let peek: <a href=\"./api/Queue.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-pop", "title": "pop", "contents": "pop is a synonym for take.", "rendered": "<code>pop</code> is a synonym for <code>take</code>.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-pop", "title": "pop", "contents": "pop t ", "rendered": "<h4 class='item'>let pop: <a href=\"./api/Queue.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-take", "title": "take", "contents": "take q removes and returns the first element in queue q, or raises Empty if the queue is empty.", "rendered": "<code>take q</code> removes and returns the first element in queue <code>q</code>, or raises <code>Empty</code> if the queue is empty.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-take", "title": "take", "contents": "take t ", "rendered": "<h4 class='item'>let take: <a href=\"./api/Queue.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-push", "title": "push", "contents": "push is a synonym for add.", "rendered": "<code>push</code> is a synonym for <code>add</code>.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-push", "title": "push", "contents": "push t unit  ", "rendered": "<h4 class='item'>let push: ('a, <a href=\"./api/Queue.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-add", "title": "add", "contents": "add x q adds the element x at the end of the queue q.", "rendered": "<code>add x q</code> adds the element <code>x</code> at the end of the queue <code>q</code>.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-add", "title": "add", "contents": "add t unit  ", "rendered": "<h4 class='item'>let add: ('a, <a href=\"./api/Queue.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-create", "title": "create", "contents": "Return a new queue, initially empty.", "rendered": "Return a new queue, initially empty.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#value-create", "title": "create", "contents": "create unit t ", "rendered": "<h4 class='item'>let create: unit => <a href=\"./api/Queue.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#type-t", "title": "t", "contents": "The type of queues containing elements of type &#39;a.", "rendered": "The type of queues containing elements of type <code>&#39;a</code>.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Queue"},
{"href": "./api/Queue.html", "title": "Queue", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Queue"},
{"href": "./api/Queue.html", "title": "Queue", "contents": "Warning This module is not thread-safe: each t value must be protected from concurrent access (e.g. with a Mutex.t). Failure to do so can lead to a crash.", "rendered": "<strong>Warning</strong> This module is not thread-safe: each t value must be protected from concurrent access (e.g. with a <code>Mutex.t</code>). Failure to do so can lead to a crash.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html", "title": "Queue", "contents": "This module implements queues (FIFOs), with in-place modification.", "rendered": "This module implements queues (FIFOs), with in-place modification.", "breadcrumb": "Queue"},
{"href": "./api/Queue.html", "title": "Queue", "contents": "First-in first-out queues.", "rendered": "First-in first-out queues.", "breadcrumb": "Queue"},
{"href": "./api/CamlinternalFormat.html#value-recast", "title": "recast", "contents": "recast fmt fmtty_rel fmt  ", "rendered": "<h4 class='item'>let recast: (\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('a1, 'b1, 'c1, 'd1, 'e1, 'f1),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\" title=\"CamlinternalFormatBasics.fmtty_rel\">fmtty_rel</a>(\n    'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('a2, 'b2, 'c2, 'd2, 'e2, 'f2)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-trans", "title": "trans", "contents": "trans fmtty_rel fmtty_rel fmtty_rel  ", "rendered": "<h4 class='item'>let trans: (\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\" title=\"CamlinternalFormatBasics.fmtty_rel\">fmtty_rel</a>(\n    'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  ),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\" title=\"CamlinternalFormatBasics.fmtty_rel\">fmtty_rel</a>(\n    'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2,\n    'a3,\n    'b3,\n    'c3,\n    'd3,\n    'e3,\n    'f3\n  )\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\" title=\"CamlinternalFormatBasics.fmtty_rel\">fmtty_rel</a>(\n  'a1,\n  'b1,\n  'c1,\n  'd1,\n  'e1,\n  'f1,\n  'a3,\n  'b3,\n  'c3,\n  'd3,\n  'e3,\n  'f3\n)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-symm", "title": "symm", "contents": "symm fmtty_rel fmtty_rel ", "rendered": "<h4 class='item'>let symm: <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\" title=\"CamlinternalFormatBasics.fmtty_rel\">fmtty_rel</a>(\n  'a1,\n  'b1,\n  'c1,\n  'd1,\n  'e1,\n  'f1,\n  'a2,\n  'b2,\n  'c2,\n  'd2,\n  'e2,\n  'f2\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\" title=\"CamlinternalFormatBasics.fmtty_rel\">fmtty_rel</a>(\n  'a2,\n  'b2,\n  'c2,\n  'd2,\n  'e2,\n  'f2,\n  'a1,\n  'b1,\n  'c1,\n  'd1,\n  'e1,\n  'f1\n)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-open_box_of_string", "title": "open_box_of_string", "contents": "open_box_of_string string int block_type ", "rendered": "<h4 class='item'>let open_box_of_string: string => (int, <a href=\"./api/CamlinternalFormatBasics.html#type-block_type\" title=\"CamlinternalFormatBasics.block_type\">block_type</a>)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-string_of_fmt", "title": "string_of_fmt", "contents": "string_of_fmt fmt string ", "rendered": "<h4 class='item'>let string_of_fmt: <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f) => string</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-string_of_fmtty", "title": "string_of_fmtty", "contents": "string_of_fmtty fmtty string ", "rendered": "<h4 class='item'>let string_of_fmtty: <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\" title=\"CamlinternalFormatBasics.fmtty\">fmtty</a>('a, 'b, 'c, 'd, 'e, 'f) => string</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-string_of_formatting_gen", "title": "string_of_formatting_gen", "contents": "string_of_formatting_gen formatting_gen string ", "rendered": "<h4 class='item'>let string_of_formatting_gen: <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_gen\" title=\"CamlinternalFormatBasics.formatting_gen\">formatting_gen</a>(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n) => string</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-string_of_formatting_lit", "title": "string_of_formatting_lit", "contents": "string_of_formatting_lit formatting_lit string ", "rendered": "<h4 class='item'>let string_of_formatting_lit: <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_lit\" title=\"CamlinternalFormatBasics.formatting_lit\">formatting_lit</a> => string</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-char_of_iconv", "title": "char_of_iconv", "contents": "char_of_iconv int_conv char ", "rendered": "<h4 class='item'>let char_of_iconv: <a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\" title=\"CamlinternalFormatBasics.int_conv\">int_conv</a> => char</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-format_of_string_format", "title": "format_of_string_format", "contents": "format_of_string_format string format6 format6  ", "rendered": "<h4 class='item'>let format_of_string_format: (\n  string,\n  <a href=\"./api/CamlinternalFormatBasics.html#type-format6\" title=\"CamlinternalFormatBasics.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-format6\" title=\"CamlinternalFormatBasics.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-format_of_string_fmtty", "title": "format_of_string_fmtty", "contents": "format_of_string_fmtty string fmtty format6  ", "rendered": "<h4 class='item'>let format_of_string_fmtty: (\n  string,\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\" title=\"CamlinternalFormatBasics.fmtty\">fmtty</a>('a, 'b, 'c, 'd, 'e, 'f)\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-format6\" title=\"CamlinternalFormatBasics.format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-fmt_ebb_of_string", "title": "fmt_ebb_of_string", "contents": "fmt_ebb_of_string option bool string fmt_ebb legacy_behavior ", "rendered": "<h4 class='item'>let fmt_ebb_of_string: (\n  ~?legacy_behavior: option(bool),\n  string\n) => <a href=\"./api/CamlinternalFormat.html#type-fmt_ebb\">fmt_ebb</a>('b, 'c, 'e, 'f)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-type_format", "title": "type_format", "contents": "type_format fmt fmtty fmt  ", "rendered": "<h4 class='item'>let type_format: (\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('x, 'b, 'c, 't, 'u, 'v),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\" title=\"CamlinternalFormatBasics.fmtty\">fmtty</a>('a, 'b, 'c, 'd, 'e, 'f)\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-strput_acc", "title": "strput_acc", "contents": "strput_acc Buffer t acc unit string unit  ", "rendered": "<h4 class='item'>let strput_acc: (<a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, <a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>(unit, string)) => unit</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-bufput_acc", "title": "bufput_acc", "contents": "bufput_acc Buffer t acc Buffer t unit unit  ", "rendered": "<h4 class='item'>let bufput_acc: (<a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, <a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>(<a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, unit)) => unit</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-output_acc", "title": "output_acc", "contents": "output_acc out_channel acc out_channel unit unit  ", "rendered": "<h4 class='item'>let output_acc: (\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>(<a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, unit)\n) => unit</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-make_printf", "title": "make_printf", "contents": "make_printf acc   acc fmt    ", "rendered": "<h4 class='item'>let make_printf: (\n  ('b, <a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c)) => 'd,\n  'b,\n  <a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('a, 'b, 'c, 'c, 'c, 'd)\n) => 'a</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#type-fmt_ebb", "title": "fmt_ebb", "contents": "fmt_ebb fmt fmt_ebb", "rendered": "<h4 class='item'>type fmt_ebb('b, 'c, 'e, 'f) = \n  | Fmt_EBB(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormat.html#type-fmt_ebb\">fmt_ebb</a>(\n    'b,\n    'c,\n    'e,\n    'f\n  )\n</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#type-heter_list", "title": "heter_list", "contents": "heter_list heter_list heter_list  heter_list", "rendered": "<h4 class='item'>type heter_list('a, 'b) = \n  | Cons('c, <a href=\"./api/CamlinternalFormat.html#type-heter_list\">heter_list</a>('a, 'b)): <a href=\"./api/CamlinternalFormat.html#type-heter_list\">heter_list</a>('c => 'a, 'b)\n  | Nil: <a href=\"./api/CamlinternalFormat.html#type-heter_list\">heter_list</a>('b, 'b)\n</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#type-acc", "title": "acc", "contents": "acc acc formatting_lit acc acc_formatting_gen acc string acc char acc string acc char acc  acc acc string", "rendered": "<h4 class='item'>type acc('b, 'c) = \n  | Acc_formatting_lit(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_lit\" title=\"CamlinternalFormatBasics.formatting_lit\">formatting_lit</a>)\n  | Acc_formatting_gen(\n    <a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c),\n    <a href=\"./api/CamlinternalFormat.html#type-acc_formatting_gen\">acc_formatting_gen</a>('b, 'c)\n  )\n  | Acc_string_literal(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), string)\n  | Acc_char_literal(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), char)\n  | Acc_data_string(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), string)\n  | Acc_data_char(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), char)\n  | Acc_delay(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), 'b => 'c)\n  | Acc_flush(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c))\n  | Acc_invalid_arg(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c), string)\n  | End_of_acc\n</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#type-acc_formatting_gen", "title": "acc_formatting_gen", "contents": "acc_formatting_gen acc acc", "rendered": "<h4 class='item'>type acc_formatting_gen('b, 'c) = \n  | Acc_open_tag(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c))\n  | Acc_open_box(<a href=\"./api/CamlinternalFormat.html#type-acc\">acc</a>('b, 'c))\n</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-param_format_of_ignored_format", "title": "param_format_of_ignored_format", "contents": "param_format_of_ignored_format ignored fmt param_format_ebb  ", "rendered": "<h4 class='item'>let param_format_of_ignored_format: (\n  <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\" title=\"CamlinternalFormatBasics.ignored\">ignored</a>('a, 'b, 'c, 'd, 'y, 'x),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('x, 'b, 'c, 'y, 'e, 'f)\n) => <a href=\"./api/CamlinternalFormat.html#type-param_format_ebb\">param_format_ebb</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#type-param_format_ebb", "title": "param_format_ebb", "contents": "param_format_ebb fmt  param_format_ebb", "rendered": "<h4 class='item'>type param_format_ebb('a, 'b, 'c, 'd, 'e, 'f) = \n  | Param_format_EBB(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\" title=\"CamlinternalFormatBasics.fmt\">fmt</a>('x => 'a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormat.html#type-param_format_ebb\">param_format_ebb</a>('a, 'b, 'c, 'd, 'e, 'f)\n</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-freeze_char_set", "title": "freeze_char_set", "contents": "freeze_char_set mutable_char_set char_set ", "rendered": "<h4 class='item'>let freeze_char_set: <a href=\"./api/CamlinternalFormat.html#type-mutable_char_set\">mutable_char_set</a> => <a href=\"./api/CamlinternalFormatBasics.html#type-char_set\" title=\"CamlinternalFormatBasics.char_set\">char_set</a></h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-add_in_char_set", "title": "add_in_char_set", "contents": "add_in_char_set mutable_char_set char unit  ", "rendered": "<h4 class='item'>let add_in_char_set: (<a href=\"./api/CamlinternalFormat.html#type-mutable_char_set\">mutable_char_set</a>, char) => unit</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-create_char_set", "title": "create_char_set", "contents": "create_char_set unit mutable_char_set ", "rendered": "<h4 class='item'>let create_char_set: unit => <a href=\"./api/CamlinternalFormat.html#type-mutable_char_set\">mutable_char_set</a></h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#type-mutable_char_set", "title": "mutable_char_set", "contents": "mutable_char_set bytes", "rendered": "<h4 class='item'>type mutable_char_set = bytes</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-rev_char_set", "title": "rev_char_set", "contents": "rev_char_set char_set char_set ", "rendered": "<h4 class='item'>let rev_char_set: <a href=\"./api/CamlinternalFormatBasics.html#type-char_set\" title=\"CamlinternalFormatBasics.char_set\">char_set</a> => <a href=\"./api/CamlinternalFormatBasics.html#type-char_set\" title=\"CamlinternalFormatBasics.char_set\">char_set</a></h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#value-is_in_char_set", "title": "is_in_char_set", "contents": "is_in_char_set char_set char bool  ", "rendered": "<h4 class='item'>let is_in_char_set: (<a href=\"./api/CamlinternalFormatBasics.html#type-char_set\" title=\"CamlinternalFormatBasics.char_set\">char_set</a>, char) => bool</h4>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html", "title": "CamlinternalFormat", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html", "title": "CamlinternalFormat", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/CamlinternalFormat.html#CamlinternalFormat", "title": "CamlinternalFormat", "contents": "", "rendered": "", "breadcrumb": "CamlinternalFormat"},
{"href": "./api/Hashtbl.html#value-seeded_hash_param", "title": "seeded_hash_param", "contents": "A variant of hash_param that is further parameterized by an integer seed. Usage: Hashtbl.seeded_hash_param meaningful total seed x.", "rendered": "A variant of hash_param that is further parameterized by an integer seed. Usage: <code>Hashtbl.seeded_hash_param meaningful total seed x</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-seeded_hash_param", "title": "seeded_hash_param", "contents": "seeded_hash_param int int int int    ", "rendered": "<h4 class='item'>let seeded_hash_param: (int, int, int, 'a) => int</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-hash_param", "title": "hash_param", "contents": "Hashtbl.hash_param meaningful total x computes a hash value for x, with the same properties as for hash. The two extra integer parameters meaningful and total give more precise control over hashing. Hashing performs a breadth-first, left-to-right traversal of the structure x, stopping after meaningful meaningful nodes were encountered, or total nodes (meaningful or not) were encountered. If total as specified by the user exceeds a certain value, currently 256, then it is capped to that value. Meaningful nodes are: integers; floating-point numbers; strings; characters; booleans; and constant constructors. Larger values of meaningful and total means that more nodes are taken into account to compute the final hash value, and therefore collisions are less likely to happen. However, hashing takes longer. The parameters meaningful and total govern the tradeoff between accuracy and speed. As default choices, hash and seeded_hash take meaningful = 10 and total = 100.", "rendered": "<code>Hashtbl.hash_param meaningful total x</code> computes a hash value for <code>x</code>, with the same properties as for <code>hash</code>. The two extra integer parameters <code>meaningful</code> and <code>total</code> give more precise control over hashing. Hashing performs a breadth-first, left-to-right traversal of the structure <code>x</code>, stopping after <code>meaningful</code> meaningful nodes were encountered, or <code>total</code> nodes (meaningful or not) were encountered. If <code>total</code> as specified by the user exceeds a certain value, currently 256, then it is capped to that value. Meaningful nodes are: integers; floating-point numbers; strings; characters; booleans; and constant constructors. Larger values of <code>meaningful</code> and <code>total</code> means that more nodes are taken into account to compute the final hash value, and therefore collisions are less likely to happen. However, hashing takes longer. The parameters <code>meaningful</code> and <code>total</code> govern the tradeoff between accuracy and speed. As default choices, hash and seeded_hash take <code>meaningful = 10</code> and <code>total = 100</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-hash_param", "title": "hash_param", "contents": "hash_param int int int   ", "rendered": "<h4 class='item'>let hash_param: (int, int, 'a) => int</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-seeded_hash", "title": "seeded_hash", "contents": "A variant of hash that is further parameterized by an integer seed.", "rendered": "A variant of hash that is further parameterized by an integer seed.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-seeded_hash", "title": "seeded_hash", "contents": "seeded_hash int int  ", "rendered": "<h4 class='item'>let seeded_hash: (int, 'a) => int</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-hash", "title": "hash", "contents": "Hashtbl.hash x associates a nonnegative integer to any value of any type. It is guaranteed that if x = y or Pervasives.compare x y = 0, then hash x = hash y. Moreover, hash always terminates, even on cyclic structures.", "rendered": "<code>Hashtbl.hash x</code> associates a nonnegative integer to any value of any type. It is guaranteed that if <code>x = y</code> or <code>Pervasives.compare x y = 0</code>, then <code>hash x = hash y</code>. Moreover, <code>hash</code> always terminates, even on cyclic structures.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-hash", "title": "hash", "contents": "hash int ", "rendered": "<h4 class='item'>let hash: 'a => int</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#The-polymorphic-hash-functions", "title": "The polymorphic hash functions", "contents": "", "rendered": "", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#module-MakeSeeded", "title": "MakeSeeded", "contents": "Functor building an implementation of the hashtable structure. The functor Hashtbl.MakeSeeded returns a structure containing a type key of keys and a type &#39;a t of hash tables associating data of type &#39;a to keys of type key. The operations perform similarly to those of the generic interface, but use the seeded hashing and equality functions specified in the functor argument H instead of generic equality and hashing. The create operation of the result structure supports the ~random optional parameter and returns randomized hash tables if ~random:true is passed or if randomization is globally on (see randomize).", "rendered": "Functor building an implementation of the hashtable structure. The functor <code>Hashtbl.MakeSeeded</code> returns a structure containing a type <code>key</code> of keys and a type <code>&#39;a t</code> of hash tables associating data of type <code>&#39;a</code> to keys of type <code>key</code>. The operations perform similarly to those of the generic interface, but use the seeded hashing and equality functions specified in the functor argument <code>H</code> instead of generic equality and hashing. The <code>create</code> operation of the result structure supports the <code>~random</code> optional parameter and returns randomized hash tables if <code>~random:true</code> is passed or if randomization is globally on (see randomize).", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#module-Make", "title": "Make", "contents": "Functor building an implementation of the hashtable structure. The functor Hashtbl.Make returns a structure containing a type key of keys and a type &#39;a t of hash tables associating data of type &#39;a to keys of type key. The operations perform similarly to those of the generic interface, but use the hashing and equality functions specified in the functor argument H instead of generic equality and hashing. Since the hash function is not seeded, the create operation of the result structure always returns non-randomized hash tables.", "rendered": "Functor building an implementation of the hashtable structure. The functor <code>Hashtbl.Make</code> returns a structure containing a type <code>key</code> of keys and a type <code>&#39;a t</code> of hash tables associating data of type <code>&#39;a</code> to keys of type <code>key</code>. The operations perform similarly to those of the generic interface, but use the hashing and equality functions specified in the functor argument <code>H</code> instead of generic equality and hashing. Since the hash function is not seeded, the <code>create</code> operation of the result structure always returns non-randomized hash tables.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "Note that the new type &#39;a IntHashtbl.t is not compatible with the type (&#39;a,&#39;b) Hashtbl.t of the generic interface. For example, Hashtbl.length h would not type-check, you must use IntHashtbl.length.", "rendered": "Note that the new type <code>&#39;a IntHashtbl.t</code> is not compatible with the type <code>(&#39;a,&#39;b) Hashtbl.t</code> of the generic interface. For example, <code>Hashtbl.length h</code> would not type-check, you must use <code>IntHashtbl.length</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "This creates a new module IntHashtbl, with a new type &#39;a\n    IntHashtbl.t of tables from int to &#39;a. In this example, h contains string values so its type is string IntHashtbl.t.", "rendered": "This creates a new module <code>IntHashtbl</code>, with a new type <code>&#39;a\n    IntHashtbl.t</code> of tables from <code>int</code> to <code>&#39;a</code>. In this example, <code>h</code> contains <code>string</code> values so its type is <code>string IntHashtbl.t</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "code block", "contents": "module IntHash =\n  struct\n    type t = int\n    let equal i j = i=j\n    let hash i = i land max_int\n  end\n\nmodule IntHashtbl = Hashtbl.Make(IntHash)\n\nlet h = IntHashtbl.create 17 in\nIntHashtbl.add h 12 \"hello\";;", "rendered": "<pre><code>module IntHash =\n  struct\n    type t = int\n    let equal i j = i=j\n    let hash i = i land max_int\n  end\n\nmodule IntHashtbl = Hashtbl.Make(IntHash)\n\nlet h = IntHashtbl.create 17 in\nIntHashtbl.add h 12 \"hello\";;</code></pre>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "For instance, one might want to specialize a table for integer keys:", "rendered": "For instance, one might want to specialize a table for integer keys:", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "The functorial interface allows the use of specific comparison and hash functions, either for performance/security concerns, or because keys are not hashable/comparable with the polymorphic builtins.", "rendered": "The functorial interface allows the use of specific comparison and hash functions, either for performance/security concerns, or because keys are not hashable/comparable with the polymorphic builtins.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#Functorial-interface", "title": "Functorial interface", "contents": "", "rendered": "", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-stats", "title": "stats", "contents": "Hashtbl.stats tbl returns statistics about the table tbl: number of buckets, size of the biggest bucket, distribution of buckets by size.", "rendered": "<code>Hashtbl.stats tbl</code> returns statistics about the table <code>tbl</code>: number of buckets, size of the biggest bucket, distribution of buckets by size.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-stats", "title": "stats", "contents": "stats t statistics ", "rendered": "<h4 class='item'>let stats: <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b) => <a href=\"./api/Hashtbl.html#type-statistics\">statistics</a></h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#type-statistics", "title": "statistics", "contents": "statistics num_bindings int num_buckets int max_bucket_length int bucket_histogram array int", "rendered": "<h4 class='item'>type statistics = {\n  num_bindings: int,\n  num_buckets: int,\n  max_bucket_length: int,\n  bucket_histogram: array(int)\n}</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-randomize", "title": "randomize", "contents": "Note that once Hashtbl.randomize() was called, there is no way to revert to the non-randomized default behavior of create. This is intentional. Non-randomized hash tables can still be created using Hashtbl.create ~random:false.", "rendered": "Note that once <code>Hashtbl.randomize()</code> was called, there is no way to revert to the non-randomized default behavior of create. This is intentional. Non-randomized hash tables can still be created using <code>Hashtbl.create ~random:false</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-randomize", "title": "randomize", "contents": "It is recommended that applications or Web frameworks that need to protect themselves against the denial-of-service attack described in create call Hashtbl.randomize() at initialization time.", "rendered": "It is recommended that applications or Web frameworks that need to protect themselves against the denial-of-service attack described in create call <code>Hashtbl.randomize()</code> at initialization time.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-randomize", "title": "randomize", "contents": "After a call to Hashtbl.randomize(), hash tables are created in randomized mode by default: create returns randomized hash tables, unless the ~random:false optional parameter is given. The same effect can be achieved by setting the R parameter in the OCAMLRUNPARAM environment variable.", "rendered": "After a call to <code>Hashtbl.randomize()</code>, hash tables are created in randomized mode by default: create returns randomized hash tables, unless the <code>~random:false</code> optional parameter is given. The same effect can be achieved by setting the <code>R</code> parameter in the <code>OCAMLRUNPARAM</code> environment variable.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-randomize", "title": "randomize", "contents": "randomize unit unit ", "rendered": "<h4 class='item'>let randomize: unit => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-length", "title": "length", "contents": "Hashtbl.length tbl returns the number of bindings in tbl. It takes constant time. Multiple bindings are counted once each, so Hashtbl.length gives the number of times Hashtbl.iter calls its first argument.", "rendered": "<code>Hashtbl.length tbl</code> returns the number of bindings in <code>tbl</code>. It takes constant time. Multiple bindings are counted once each, so <code>Hashtbl.length</code> gives the number of times <code>Hashtbl.iter</code> calls its first argument.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b) => int</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-fold", "title": "fold", "contents": "If the hash table was created in non-randomized mode, the order in which the bindings are enumerated is reproducible between successive runs of the program, and even between minor versions of OCaml. For randomized hash tables, the order of enumeration is entirely random.", "rendered": "If the hash table was created in non-randomized mode, the order in which the bindings are enumerated is reproducible between successive runs of the program, and even between minor versions of OCaml. For randomized hash tables, the order of enumeration is entirely random.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-fold", "title": "fold", "contents": "The order in which the bindings are passed to f is unspecified. However, if the table contains several bindings for the same key, they are passed to f in reverse order of introduction, that is, the most recent binding is passed first.", "rendered": "The order in which the bindings are passed to <code>f</code> is unspecified. However, if the table contains several bindings for the same key, they are passed to <code>f</code> in reverse order of introduction, that is, the most recent binding is passed first.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-fold", "title": "fold", "contents": "Hashtbl.fold f tbl init computes (f kN dN ... (f k1 d1 init)...), where k1 ... kN are the keys of all bindings in tbl, and d1 ... dN are the associated values. Each binding is presented exactly once to f.", "rendered": "<code>Hashtbl.fold f tbl init</code> computes <code>(f kN dN ... (f k1 d1 init)...)</code>, where <code>k1 ... kN</code> are the keys of all bindings in <code>tbl</code>, and <code>d1 ... dN</code> are the associated values. Each binding is presented exactly once to <code>f</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-fold", "title": "fold", "contents": "fold    t   ", "rendered": "<h4 class='item'>let fold: (('a, 'b, 'c) => 'c, <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'c) => 'c</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-iter", "title": "iter", "contents": "If the hash table was created in non-randomized mode, the order in which the bindings are enumerated is reproducible between successive runs of the program, and even between minor versions of OCaml. For randomized hash tables, the order of enumeration is entirely random.", "rendered": "If the hash table was created in non-randomized mode, the order in which the bindings are enumerated is reproducible between successive runs of the program, and even between minor versions of OCaml. For randomized hash tables, the order of enumeration is entirely random.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-iter", "title": "iter", "contents": "The order in which the bindings are passed to f is unspecified. However, if the table contains several bindings for the same key, they are passed to f in reverse order of introduction, that is, the most recent binding is passed first.", "rendered": "The order in which the bindings are passed to <code>f</code> is unspecified. However, if the table contains several bindings for the same key, they are passed to <code>f</code> in reverse order of introduction, that is, the most recent binding is passed first.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-iter", "title": "iter", "contents": "Hashtbl.iter f tbl applies f to all bindings in table tbl. f receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to f.", "rendered": "<code>Hashtbl.iter f tbl</code> applies <code>f</code> to all bindings in table <code>tbl</code>. <code>f</code> receives the key as first argument, and the associated value as second argument. Each binding is presented exactly once to <code>f</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-iter", "title": "iter", "contents": "iter unit   t unit  ", "rendered": "<h4 class='item'>let iter: (('a, 'b) => unit, <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b)) => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-replace", "title": "replace", "contents": "Hashtbl.replace tbl x y replaces the current binding of x in tbl by a binding of x to y. If x is unbound in tbl, a binding of x to y is added to tbl. This is functionally equivalent to remove tbl x followed by add tbl x y.", "rendered": "<code>Hashtbl.replace tbl x y</code> replaces the current binding of <code>x</code> in <code>tbl</code> by a binding of <code>x</code> to <code>y</code>. If <code>x</code> is unbound in <code>tbl</code>, a binding of <code>x</code> to <code>y</code> is added to <code>tbl</code>. This is functionally equivalent to remove<code> tbl x</code> followed by add<code> tbl x y</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-replace", "title": "replace", "contents": "replace t unit   ", "rendered": "<h4 class='item'>let replace: (<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'a, 'b) => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-remove", "title": "remove", "contents": "Hashtbl.remove tbl x removes the current binding of x in tbl, restoring the previous binding if it exists. It does nothing if x is not bound in tbl.", "rendered": "<code>Hashtbl.remove tbl x</code> removes the current binding of <code>x</code> in <code>tbl</code>, restoring the previous binding if it exists. It does nothing if <code>x</code> is not bound in <code>tbl</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-remove", "title": "remove", "contents": "remove t unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'a) => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-mem", "title": "mem", "contents": "Hashtbl.mem tbl x checks if x is bound in tbl.", "rendered": "<code>Hashtbl.mem tbl x</code> checks if <code>x</code> is bound in <code>tbl</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-mem", "title": "mem", "contents": "mem t bool  ", "rendered": "<h4 class='item'>let mem: (<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'a) => bool</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-find_all", "title": "find_all", "contents": "Hashtbl.find_all tbl x returns the list of all data associated with x in tbl. The current binding is returned first, then the previous bindings, in reverse order of introduction in the table.", "rendered": "<code>Hashtbl.find_all tbl x</code> returns the list of all data associated with <code>x</code> in <code>tbl</code>. The current binding is returned first, then the previous bindings, in reverse order of introduction in the table.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-find_all", "title": "find_all", "contents": "find_all t list  ", "rendered": "<h4 class='item'>let find_all: (<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'a) => list('b)</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-find", "title": "find", "contents": "Hashtbl.find tbl x returns the current binding of x in tbl, or raises Not_found if no such binding exists.", "rendered": "<code>Hashtbl.find tbl x</code> returns the current binding of <code>x</code> in <code>tbl</code>, or raises <code>Not_found</code> if no such binding exists.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-find", "title": "find", "contents": "find t  ", "rendered": "<h4 class='item'>let find: (<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'a) => 'b</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-add", "title": "add", "contents": "Hashtbl.add tbl x y adds a binding of x to y in table tbl. Previous bindings for x are not removed, but simply hidden. That is, after performing remove tbl x, the previous binding for x, if any, is restored. (Same behavior as with association lists.)", "rendered": "<code>Hashtbl.add tbl x y</code> adds a binding of <code>x</code> to <code>y</code> in table <code>tbl</code>. Previous bindings for <code>x</code> are not removed, but simply hidden. That is, after performing remove<code> tbl x</code>, the previous binding for <code>x</code>, if any, is restored. (Same behavior as with association lists.)", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-add", "title": "add", "contents": "add t unit   ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b), 'a, 'b) => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-copy", "title": "copy", "contents": "Return a copy of the given hashtable.", "rendered": "Return a copy of the given hashtable.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b) => <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-reset", "title": "reset", "contents": "Empty a hash table and shrink the size of the bucket table to its initial size.", "rendered": "Empty a hash table and shrink the size of the bucket table to its initial size.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-reset", "title": "reset", "contents": "reset t unit ", "rendered": "<h4 class='item'>let reset: <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b) => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-clear", "title": "clear", "contents": "Empty a hash table. Use reset instead of clear to shrink the size of the bucket table to its initial size.", "rendered": "Empty a hash table. Use <code>reset</code> instead of <code>clear</code> to shrink the size of the bucket table to its initial size.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b) => unit</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-create", "title": "create", "contents": "If no ~random parameter is given, hash tables are created in non-random mode by default. This default can be changed either programmatically by calling randomize or by setting the R flag in the OCAMLRUNPARAM environment variable.", "rendered": "If no <code>~random</code> parameter is given, hash tables are created in non-random mode by default. This default can be changed either programmatically by calling randomize or by setting the <code>R</code> flag in the <code>OCAMLRUNPARAM</code> environment variable.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-create", "title": "create", "contents": "A hash table that is created with ~random:true uses the seeded hash function seeded_hash with a seed that is randomly chosen at hash table creation time. In effect, the hash function used is randomly selected among 2^{30} different hash functions. All these hash functions have different collision patterns, rendering ineffective the denial-of-service attack described above. However, because of randomization, enumerating all elements of the hash table using fold or iter is no longer deterministic: elements are enumerated in different orders at different runs of the program.", "rendered": "A hash table that is created with <code>~random:true</code> uses the seeded hash function seeded_hash with a seed that is randomly chosen at hash table creation time. In effect, the hash function used is randomly selected among <code>2^{30}</code> different hash functions. All these hash functions have different collision patterns, rendering ineffective the denial-of-service attack described above. However, because of randomization, enumerating all elements of the hash table using fold or iter is no longer deterministic: elements are enumerated in different orders at different runs of the program.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-create", "title": "create", "contents": "A hash table that is created with ~random:false uses a fixed hash function (hash) to distribute keys among buckets. As a consequence, collisions between keys happen deterministically. In Web-facing applications or other security-sensitive applications, the deterministic collision patterns can be exploited by a malicious user to create a denial-of-service attack: the attacker sends input crafted to create many collisions in the table, slowing the application down.", "rendered": "A hash table that is created with <code>~random:false</code> uses a fixed hash function (hash) to distribute keys among buckets. As a consequence, collisions between keys happen deterministically. In Web-facing applications or other security-sensitive applications, the deterministic collision patterns can be exploited by a malicious user to create a denial-of-service attack: the attacker sends input crafted to create many collisions in the table, slowing the application down.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-create", "title": "create", "contents": "The optional random parameter (a boolean) controls whether the internal organization of the hash table is randomized at each execution of Hashtbl.create or deterministic over all executions.", "rendered": "The optional <code>random</code> parameter (a boolean) controls whether the internal organization of the hash table is randomized at each execution of <code>Hashtbl.create</code> or deterministic over all executions.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-create", "title": "create", "contents": "Hashtbl.create n creates a new, empty hash table, with initial size n. For best results, n should be on the order of the expected number of elements that will be in the table. The table grows as needed, so n is just an initial guess.", "rendered": "<code>Hashtbl.create n</code> creates a new, empty hash table, with initial size <code>n</code>. For best results, <code>n</code> should be on the order of the expected number of elements that will be in the table. The table grows as needed, so <code>n</code> is just an initial guess.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#value-create", "title": "create", "contents": "create option bool int t random ", "rendered": "<h4 class='item'>let create: (~?random: option(bool), int) => <a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#type-t", "title": "t", "contents": "The type of hash tables from type &#39;a to type &#39;b.", "rendered": "The type of hash tables from type <code>&#39;a</code> to type <code>&#39;b</code>.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a, 'b)</h4>", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html#Generic-interface", "title": "Generic interface", "contents": "", "rendered": "", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "Hash tables are hashed association tables, with in-place modification.", "rendered": "Hash tables are hashed association tables, with in-place modification.", "breadcrumb": "Hashtbl"},
{"href": "./api/Hashtbl.html", "title": "Hashtbl", "contents": "Hash tables and hash functions.", "rendered": "Hash tables and hash functions.", "breadcrumb": "Hashtbl"},
{"href": "./api/Bytes.html#value-unsafe_fill", "title": "unsafe_fill", "contents": "unsafe_fill bytes int int char unit    ", "rendered": "<h4 class='item'>let unsafe_fill: (bytes, int, int, char) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_blit", "title": "unsafe_blit", "contents": "unsafe_blit bytes int bytes int int unit     ", "rendered": "<h4 class='item'>let unsafe_blit: (bytes, int, bytes, int, int) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set bytes int char unit   ", "rendered": "<h4 class='item'>let unsafe_set: (bytes, int, char) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get bytes int char  ", "rendered": "<h4 class='item'>let unsafe_get: (bytes, int) => char</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "/*", "rendered": "/*", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "The only case we have reasonable confidence is safe is if the produced bytes is shared -- used as an immutable byte sequence. This is possibly useful for incremental migration of low-level programs that manipulate immutable sequences of bytes (for example from_bytes) and previously used the string type for this purpose.", "rendered": "The only case we have reasonable confidence is safe is if the produced <code>bytes</code> is shared -- used as an immutable byte sequence. This is possibly useful for incremental migration of low-level programs that manipulate immutable sequences of bytes (for example from_bytes) and previously used the <code>string</code> type for this purpose.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "Assuming unique ownership of strings that are not string literals, but are (partly) built from string literals, is also incorrect. For example, mutating unsafe_of_string (&quot;foo&quot; ^ s) could mutate the shared string &quot;foo&quot; -- assuming a rope-like representation of strings. More generally, functions operating on strings will assume shared ownership, they do not preserve unique ownership. It is thus incorrect to assume unique ownership of the result of unsafe_of_string.", "rendered": "Assuming unique ownership of strings that are not string literals, but are (partly) built from string literals, is also incorrect. For example, mutating <code>unsafe_of_string (&quot;foo&quot; ^ s)</code> could mutate the shared string <code>&quot;foo&quot;</code> -- assuming a rope-like representation of strings. More generally, functions operating on strings will assume shared ownership, they do not preserve unique ownership. It is thus incorrect to assume unique ownership of the result of <code>unsafe_of_string</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "The first declaration is incorrect, because the string literal &quot;hello&quot; could be shared by the compiler with other parts of the program, and mutating incorrect is a bug. You must always use the second version, which performs a copy and is thus correct.", "rendered": "The first declaration is incorrect, because the string literal <code>&quot;hello&quot;</code> could be shared by the compiler with other parts of the program, and mutating <code>incorrect</code> is a bug. You must always use the second version, which performs a copy and is thus correct.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "code block", "contents": "let incorrect = Bytes.unsafe_of_string \"hello\"\nlet s = Bytes.of_string \"hello\"", "rendered": "<pre><code>let incorrect = Bytes.unsafe_of_string \"hello\"\nlet s = Bytes.of_string \"hello\"</code></pre>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "For example, string literals are implicitly shared by the compiler, so you never uniquely own them.", "rendered": "For example, string literals are implicitly shared by the compiler, so you never uniquely own them.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "In practice, unique ownership of string values is extremely difficult to reason about correctly. You should always assume strings are shared, never uniquely owned.", "rendered": "In practice, unique ownership of string values is extremely difficult to reason about correctly. You should always assume strings are shared, never uniquely owned.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "The same ownership discipline that makes unsafe_to_string correct applies to unsafe_of_string: you may use it if you were the owner of the string value, and you will own the return bytes in the same mode.", "rendered": "The same ownership discipline that makes <code>unsafe_to_string</code> correct applies to <code>unsafe_of_string</code>: you may use it if you were the owner of the <code>string</code> value, and you will own the return <code>bytes</code> in the same mode.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "Unsafely convert a shared string to a byte sequence that should not be mutated.", "rendered": "Unsafely convert a shared string to a byte sequence that should not be mutated.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_of_string", "title": "unsafe_of_string", "contents": "unsafe_of_string string bytes ", "rendered": "<h4 class='item'>let unsafe_of_string: string => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "Shared ownership: the data has several owners, that may only access it, not mutate it.", "rendered": "Shared ownership: the data has several owners, that may only access it, not mutate it.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "Unique ownership: the data may be accessed and mutated", "rendered": "Unique ownership: the data may be accessed and mutated", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "The caller may not mutate s while the string is borrowed (it has temporarily given up ownership). This affects concurrent programs, but also higher-order functions: if String.length returned a closure to be called later, s should not be mutated until this closure is fully applied and returns ownership.", "rendered": "The caller may not mutate <code>s</code> while the string is borrowed (it has temporarily given up ownership). This affects concurrent programs, but also higher-order functions: if <code>String.length</code> returned a closure to be called later, <code>s</code> should not be mutated until this closure is fully applied and returns ownership.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "In this use-case, we do not promise that s will never be mutated after the call to bytes_length s. The length function temporarily borrows unique ownership of the byte sequence (and sees it as a string), but returns this ownership back to the caller, which may assume that s is still a valid byte sequence after the call. Note that this is only correct because we know that length does not capture its argument -- it could escape by a side-channel such as a memoization combinator.", "rendered": "In this use-case, we do not promise that <code>s</code> will never be mutated after the call to <code>bytes_length s</code>. The length function temporarily borrows unique ownership of the byte sequence (and sees it as a <code>string</code>), but returns this ownership back to the caller, which may assume that <code>s</code> is still a valid byte sequence after the call. Note that this is only correct because we know that length does not capture its argument -- it could escape by a side-channel such as a memoization combinator.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "code block", "contents": "let bytes_length (s : bytes) =\n  String.length (Bytes.unsafe_to_string s)", "rendered": "<pre><code>let bytes_length (s : bytes) =\n  String.length (Bytes.unsafe_to_string s)</code></pre>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "2. Temporarily giving ownership of a byte sequence to a function that expects a uniquely owned string and returns ownership back, so that we can mutate the sequence again after the call ended.", "rendered": "2. Temporarily giving ownership of a byte sequence to a function that expects a uniquely owned string and returns ownership back, so that we can mutate the sequence again after the call ended.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "We have provided the init, map and mapi functions to cover most cases of building new strings. You should prefer those over to_string or unsafe_to_string whenever applicable.", "rendered": "We have provided the init, map and mapi functions to cover most cases of building new strings. You should prefer those over <code>to_string</code> or <code>unsafe_to_string</code> whenever applicable.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "Note that it would be unsafe if s was passed as an additional parameter to the function f as it could escape this way and be mutated in the future -- string_init would give up ownership of s to pass it to f, and could not call unsafe_to_string safely.", "rendered": "Note that it would be unsafe if <code>s</code> was passed as an additional parameter to the function <code>f</code> as it could escape this way and be mutated in the future -- <code>string_init</code> would give up ownership of <code>s</code> to pass it to <code>f</code>, and could not call <code>unsafe_to_string</code> safely.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "This function is safe because the byte sequence s will never be accessed or mutated after unsafe_to_string is called. The string_init code gives up ownership of s, and returns the ownership of the resulting string to its caller.", "rendered": "This function is safe because the byte sequence <code>s</code> will never be accessed or mutated after <code>unsafe_to_string</code> is called. The <code>string_init</code> code gives up ownership of <code>s</code>, and returns the ownership of the resulting string to its caller.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "code block", "contents": "let string_init len f : string =\n  let s = Bytes.create len in\n  for i = 0 to len - 1 do Bytes.set s i (f i) done;\n  Bytes.unsafe_to_string s", "rendered": "<pre><code>let string_init len f : string =\n  let s = Bytes.create len in\n  for i = 0 to len - 1 do Bytes.set s i (f i) done;\n  Bytes.unsafe_to_string s</code></pre>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "1. Creating a string by initializing and mutating a byte sequence that is never changed after initialization is performed.", "rendered": "1. Creating a string by initializing and mutating a byte sequence that is never changed after initialization is performed.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "There are two valid use-cases that respect this ownership discipline:", "rendered": "There are two valid use-cases that respect this ownership discipline:", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "unsafe_to_string s can only be used when the caller owns the byte sequence s -- either uniquely or as shared immutable data. The caller gives up ownership of s, and gains ownership of the returned string.", "rendered": "<code>unsafe_to_string s</code> can only be used when the caller owns the byte sequence <code>s</code> -- either uniquely or as shared immutable data. The caller gives up ownership of <code>s</code>, and gains ownership of the returned string.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "Unique ownership is linear: passing the data to another piece of code means giving up ownership (we cannot write the data again). A unique owner may decide to make the data shared (giving up mutation rights on it), but shared data may not become uniquely-owned again.", "rendered": "Unique ownership is linear: passing the data to another piece of code means giving up ownership (we cannot write the data again). A unique owner may decide to make the data shared (giving up mutation rights on it), but shared data may not become uniquely-owned again.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "To reason about the use of unsafe_to_string, it is convenient to consider an &quot;ownership&quot; discipline. A piece of code that manipulates some data &quot;owns&quot; it; there are several disjoint ownership modes, including:", "rendered": "To reason about the use of <code>unsafe_to_string</code>, it is convenient to consider an &quot;ownership&quot; discipline. A piece of code that manipulates some data &quot;owns&quot; it; there are several disjoint ownership modes, including:", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "Unsafely convert a byte sequence into a string.", "rendered": "Unsafely convert a byte sequence into a string.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-unsafe_to_string", "title": "unsafe_to_string", "contents": "unsafe_to_string bytes string ", "rendered": "<h4 class='item'>let unsafe_to_string: bytes => string</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "This section describes unsafe, low-level conversion functions between bytes and string. They do not copy the internal data; used improperly, they can break the immutability invariant on strings provided by the -safe-string option. They are available for expert library authors, but for most purposes you should use the always-correct to_string and of_string instead.", "rendered": "This section describes unsafe, low-level conversion functions between <code>bytes</code> and <code>string</code>. They do not copy the internal data; used improperly, they can break the immutability invariant on strings provided by the <code>-safe-string</code> option. They are available for expert library authors, but for most purposes you should use the always-correct to_string and of_string instead.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#Unsafe-conversions--for-advanced-users-", "title": "Unsafe conversions (for advanced users)", "contents": "", "rendered": "", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-compare", "title": "compare", "contents": "The comparison function for byte sequences, with the same specification as compare. Along with the type t, this function compare allows the module Bytes to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for byte sequences, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Bytes</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Bytes.html#type-t\">t</a>, <a href=\"./api/Bytes.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#type-t", "title": "t", "contents": "An alias for the type of byte sequences.", "rendered": "An alias for the type of byte sequences.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#type-t", "title": "t", "contents": "t bytes", "rendered": "<h4 class='item'>type t = bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-uncapitalize", "title": "uncapitalize", "contents": "Return a copy of the argument, with the first byte set to lowercase.", "rendered": "Return a copy of the argument, with the first byte set to lowercase.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-uncapitalize", "title": "uncapitalize", "contents": "uncapitalize bytes bytes ", "rendered": "<h4 class='item'>let uncapitalize: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-capitalize", "title": "capitalize", "contents": "Return a copy of the argument, with the first byte set to uppercase.", "rendered": "Return a copy of the argument, with the first byte set to uppercase.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-capitalize", "title": "capitalize", "contents": "capitalize bytes bytes ", "rendered": "<h4 class='item'>let capitalize: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-lowercase", "title": "lowercase", "contents": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all uppercase letters translated to lowercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-lowercase", "title": "lowercase", "contents": "lowercase bytes bytes ", "rendered": "<h4 class='item'>let lowercase: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-uppercase", "title": "uppercase", "contents": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "rendered": "Return a copy of the argument, with all lowercase letters translated to uppercase, including accented letters of the ISO Latin-1 (8859-1) character set.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-uppercase", "title": "uppercase", "contents": "uppercase bytes bytes ", "rendered": "<h4 class='item'>let uppercase: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rcontains_from", "title": "rcontains_from", "contents": "Raise Invalid_argument if stop &lt; 0 or stop+1 is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>stop &lt; 0</code> or <code>stop+1</code> is not a valid position in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rcontains_from", "title": "rcontains_from", "contents": "rcontains_from s stop c tests if byte c appears in s before position stop+1.", "rendered": "<code>rcontains_from s stop c</code> tests if byte <code>c</code> appears in <code>s</code> before position <code>stop+1</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rcontains_from", "title": "rcontains_from", "contents": "rcontains_from bytes int char bool   ", "rendered": "<h4 class='item'>let rcontains_from: (bytes, int, char) => bool</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-contains_from", "title": "contains_from", "contents": "Raise Invalid_argument if start is not a valid position in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> is not a valid position in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-contains_from", "title": "contains_from", "contents": "contains_from s start c tests if byte c appears in s after position start. contains s c is equivalent to contains_from\n    s 0 c.", "rendered": "<code>contains_from s start c</code> tests if byte <code>c</code> appears in <code>s</code> after position <code>start</code>. <code>contains s c</code> is equivalent to <code>contains_from\n    s 0 c</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-contains_from", "title": "contains_from", "contents": "contains_from bytes int char bool   ", "rendered": "<h4 class='item'>let contains_from: (bytes, int, char) => bool</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-contains", "title": "contains", "contents": "contains s c tests if byte c appears in s.", "rendered": "<code>contains s c</code> tests if byte <code>c</code> appears in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-contains", "title": "contains", "contents": "contains bytes char bool  ", "rendered": "<h4 class='item'>let contains: (bytes, char) => bool</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rindex_from", "title": "rindex_from", "contents": "Raise Invalid_argument if i+1 is not a valid position in s. Raise Not_found if c does not occur in s before position i+1.", "rendered": "Raise <code>Invalid_argument</code> if <code>i+1</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> before position <code>i+1</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rindex_from", "title": "rindex_from", "contents": "rindex_from s i c returns the index of the last occurrence of byte c in s before position i+1. rindex s c is equivalent to rindex_from s (Bytes.length s - 1) c.", "rendered": "<code>rindex_from s i c</code> returns the index of the last occurrence of byte <code>c</code> in <code>s</code> before position <code>i+1</code>. <code>rindex s c</code> is equivalent to <code>rindex_from s (Bytes.length s - 1) c</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rindex_from", "title": "rindex_from", "contents": "rindex_from bytes int char int   ", "rendered": "<h4 class='item'>let rindex_from: (bytes, int, char) => int</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-index_from", "title": "index_from", "contents": "Raise Invalid_argument if i is not a valid position in s. Raise Not_found if c does not occur in s after position i.", "rendered": "Raise <code>Invalid_argument</code> if <code>i</code> is not a valid position in <code>s</code>. Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code> after position <code>i</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-index_from", "title": "index_from", "contents": "index_from s i c returns the index of the first occurrence of byte c in s after position i. Bytes.index s c is equivalent to Bytes.index_from s 0 c.", "rendered": "<code>index_from s i c</code> returns the index of the first occurrence of byte <code>c</code> in <code>s</code> after position <code>i</code>. <code>Bytes.index s c</code> is equivalent to <code>Bytes.index_from s 0 c</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-index_from", "title": "index_from", "contents": "index_from bytes int char int   ", "rendered": "<h4 class='item'>let index_from: (bytes, int, char) => int</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rindex", "title": "rindex", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rindex", "title": "rindex", "contents": "rindex s c returns the index of the last occurrence of byte c in s.", "rendered": "<code>rindex s c</code> returns the index of the last occurrence of byte <code>c</code> in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-rindex", "title": "rindex", "contents": "rindex bytes char int  ", "rendered": "<h4 class='item'>let rindex: (bytes, char) => int</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-index", "title": "index", "contents": "Raise Not_found if c does not occur in s.", "rendered": "Raise <code>Not_found</code> if <code>c</code> does not occur in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-index", "title": "index", "contents": "index s c returns the index of the first occurrence of byte c in s.", "rendered": "<code>index s c</code> returns the index of the first occurrence of byte <code>c</code> in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-index", "title": "index", "contents": "index bytes char int  ", "rendered": "<h4 class='item'>let index: (bytes, char) => int</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-escaped", "title": "escaped", "contents": "Raise Invalid_argument if the result is longer than max_string_length bytes.", "rendered": "Raise <code>Invalid_argument</code> if the result is longer than max_string_length bytes.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-escaped", "title": "escaped", "contents": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.", "rendered": "Return a copy of the argument, with special characters represented by escape sequences, following the lexical conventions of OCaml.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-escaped", "title": "escaped", "contents": "escaped bytes bytes ", "rendered": "<h4 class='item'>let escaped: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-trim", "title": "trim", "contents": "Return a copy of the argument, without leading and trailing whitespace. The bytes regarded as whitespace are the ASCII characters &#39; &#39;, &#39;\\012&#39;, &#39;\\n&#39;, &#39;\\r&#39;, and &#39;\\t&#39;.", "rendered": "Return a copy of the argument, without leading and trailing whitespace. The bytes regarded as whitespace are the ASCII characters <code>&#39; &#39;</code>, <code>&#39;\\012&#39;</code>, <code>&#39;\\n&#39;</code>, <code>&#39;\\r&#39;</code>, and <code>&#39;\\t&#39;</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-trim", "title": "trim", "contents": "trim bytes bytes ", "rendered": "<h4 class='item'>let trim: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-mapi", "title": "mapi", "contents": "mapi f s calls f with each character of s and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.", "rendered": "<code>mapi f s</code> calls <code>f</code> with each character of <code>s</code> and its index (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-mapi", "title": "mapi", "contents": "mapi int char char   bytes bytes  ", "rendered": "<h4 class='item'>let mapi: ((int, char) => char, bytes) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-map", "title": "map", "contents": "map f s applies function f in turn to all the bytes of s (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.", "rendered": "<code>map f s</code> applies function <code>f</code> in turn to all the bytes of <code>s</code> (in increasing index order) and stores the resulting bytes in a new sequence that is returned as the result.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-map", "title": "map", "contents": "map char char  bytes bytes  ", "rendered": "<h4 class='item'>let map: (char => char, bytes) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the byte as first argument and the byte itself as second argument.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-iteri", "title": "iteri", "contents": "iteri int char unit   bytes unit  ", "rendered": "<h4 class='item'>let iteri: ((int, char) => unit, bytes) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-iter", "title": "iter", "contents": "iter f s applies function f in turn to all the bytes of s. It is equivalent to f (get s 0); f (get s 1); ...; f (get s\n    (length s - 1)); ().", "rendered": "<code>iter f s</code> applies function <code>f</code> in turn to all the bytes of <code>s</code>. It is equivalent to <code>f (get s 0); f (get s 1); ...; f (get s\n    (length s - 1)); ()</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-iter", "title": "iter", "contents": "iter char unit  bytes unit  ", "rendered": "<h4 class='item'>let iter: (char => unit, bytes) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-cat", "title": "cat", "contents": "Raise Invalid_argument if the result is longer than max_string_length bytes.", "rendered": "Raise <code>Invalid_argument</code> if the result is longer than max_string_length bytes.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-cat", "title": "cat", "contents": "cat s1 s2 concatenates s1 and s2 and returns the result as new byte sequence.", "rendered": "<code>cat s1 s2</code> concatenates <code>s1</code> and <code>s2</code> and returns the result as new byte sequence.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-cat", "title": "cat", "contents": "cat bytes bytes bytes  ", "rendered": "<h4 class='item'>let cat: (bytes, bytes) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-concat", "title": "concat", "contents": "Raise Invalid_argument if the result is longer than max_string_length bytes.", "rendered": "Raise <code>Invalid_argument</code> if the result is longer than max_string_length bytes.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-concat", "title": "concat", "contents": "concat sep sl concatenates the list of byte sequences sl, inserting the separator byte sequence sep between each, and returns the result as a new byte sequence.", "rendered": "<code>concat sep sl</code> concatenates the list of byte sequences <code>sl</code>, inserting the separator byte sequence <code>sep</code> between each, and returns the result as a new byte sequence.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-concat", "title": "concat", "contents": "concat bytes list bytes bytes  ", "rendered": "<h4 class='item'>let concat: (bytes, list(bytes)) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-blit_string", "title": "blit_string", "contents": "Raise Invalid_argument if srcoff and len do not designate a valid range of src, or if dstoff and len do not designate a valid range of dst.", "rendered": "Raise <code>Invalid_argument</code> if <code>srcoff</code> and <code>len</code> do not designate a valid range of <code>src</code>, or if <code>dstoff</code> and <code>len</code> do not designate a valid range of <code>dst</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-blit_string", "title": "blit_string", "contents": "blit src srcoff dst dstoff len copies len bytes from string src, starting at index srcoff, to byte sequence dst, starting at index dstoff.", "rendered": "<code>blit src srcoff dst dstoff len</code> copies <code>len</code> bytes from string <code>src</code>, starting at index <code>srcoff</code>, to byte sequence <code>dst</code>, starting at index <code>dstoff</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-blit_string", "title": "blit_string", "contents": "blit_string string int bytes int int unit     ", "rendered": "<h4 class='item'>let blit_string: (string, int, bytes, int, int) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-blit", "title": "blit", "contents": "Raise Invalid_argument if srcoff and len do not designate a valid range of src, or if dstoff and len do not designate a valid range of dst.", "rendered": "Raise <code>Invalid_argument</code> if <code>srcoff</code> and <code>len</code> do not designate a valid range of <code>src</code>, or if <code>dstoff</code> and <code>len</code> do not designate a valid range of <code>dst</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-blit", "title": "blit", "contents": "blit src srcoff dst dstoff len copies len bytes from sequence src, starting at index srcoff, to sequence dst, starting at index dstoff. It works correctly even if src and dst are the same byte sequence, and the source and destination intervals overlap.", "rendered": "<code>blit src srcoff dst dstoff len</code> copies <code>len</code> bytes from sequence <code>src</code>, starting at index <code>srcoff</code>, to sequence <code>dst</code>, starting at index <code>dstoff</code>. It works correctly even if <code>src</code> and <code>dst</code> are the same byte sequence, and the source and destination intervals overlap.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-blit", "title": "blit", "contents": "blit bytes int bytes int int unit     ", "rendered": "<h4 class='item'>let blit: (bytes, int, bytes, int, int) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-fill", "title": "fill", "contents": "Raise Invalid_argument if start and len do not designate a valid range of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid range of <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-fill", "title": "fill", "contents": "fill s start len c modifies s in place, replacing len characters with c, starting at start.", "rendered": "<code>fill s start len c</code> modifies <code>s</code> in place, replacing <code>len</code> characters with <code>c</code>, starting at <code>start</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-fill", "title": "fill", "contents": "fill bytes int int char unit    ", "rendered": "<h4 class='item'>let fill: (bytes, int, int, char) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-extend", "title": "extend", "contents": "Raise Invalid_argument if the result length is negative or longer than max_string_length bytes.", "rendered": "Raise <code>Invalid_argument</code> if the result length is negative or longer than max_string_length bytes.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-extend", "title": "extend", "contents": "extend s left right returns a new byte sequence that contains the bytes of s, with left uninitialized bytes prepended and right uninitialized bytes appended to it. If left or right is negative, then bytes are removed (instead of appended) from the corresponding side of s.", "rendered": "<code>extend s left right</code> returns a new byte sequence that contains the bytes of <code>s</code>, with <code>left</code> uninitialized bytes prepended and <code>right</code> uninitialized bytes appended to it. If <code>left</code> or <code>right</code> is negative, then bytes are removed (instead of appended) from the corresponding side of <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-extend", "title": "extend", "contents": "extend bytes int int bytes   ", "rendered": "<h4 class='item'>let extend: (bytes, int, int) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-sub_string", "title": "sub_string", "contents": "Same as sub but return a string instead of a byte sequence.", "rendered": "Same as <code>sub</code> but return a string instead of a byte sequence.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-sub_string", "title": "sub_string", "contents": "sub_string bytes int int string   ", "rendered": "<h4 class='item'>let sub_string: (bytes, int, int) => string</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-sub", "title": "sub", "contents": "Raise Invalid_argument if start and len do not designate a valid range of s.", "rendered": "Raise <code>Invalid_argument</code> if <code>start</code> and <code>len</code> do not designate a valid range of <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-sub", "title": "sub", "contents": "sub s start len returns a new byte sequence of length len, containing the subsequence of s that starts at position start and has length len.", "rendered": "<code>sub s start len</code> returns a new byte sequence of length <code>len</code>, containing the subsequence of <code>s</code> that starts at position <code>start</code> and has length <code>len</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-sub", "title": "sub", "contents": "sub bytes int int bytes   ", "rendered": "<h4 class='item'>let sub: (bytes, int, int) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-to_string", "title": "to_string", "contents": "Return a new string that contains the same bytes as the given byte sequence.", "rendered": "Return a new string that contains the same bytes as the given byte sequence.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-to_string", "title": "to_string", "contents": "to_string bytes string ", "rendered": "<h4 class='item'>let to_string: bytes => string</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-of_string", "title": "of_string", "contents": "Return a new byte sequence that contains the same bytes as the given string.", "rendered": "Return a new byte sequence that contains the same bytes as the given string.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-of_string", "title": "of_string", "contents": "of_string string bytes ", "rendered": "<h4 class='item'>let of_string: string => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-copy", "title": "copy", "contents": "Return a new byte sequence that contains the same bytes as the argument.", "rendered": "Return a new byte sequence that contains the same bytes as the argument.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-copy", "title": "copy", "contents": "copy bytes bytes ", "rendered": "<h4 class='item'>let copy: bytes => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-empty", "title": "empty", "contents": "A byte sequence of size 0.", "rendered": "A byte sequence of size 0.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-empty", "title": "empty", "contents": "empty bytes", "rendered": "<h4 class='item'>let empty: bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-init", "title": "init", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-init", "title": "init", "contents": "Bytes.init n f returns a fresh byte sequence of length n, with character i initialized to the result of f i (in increasing index order).", "rendered": "<code>Bytes.init n f</code> returns a fresh byte sequence of length <code>n</code>, with character <code>i</code> initialized to the result of <code>f i</code> (in increasing index order).", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-init", "title": "init", "contents": "init int int char  bytes  ", "rendered": "<h4 class='item'>let init: (int, int => char) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-make", "title": "make", "contents": "make n c returns a new byte sequence of length n, filled with the byte c.", "rendered": "<code>make n c</code> returns a new byte sequence of length <code>n</code>, filled with the byte <code>c</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-make", "title": "make", "contents": "make int char bytes  ", "rendered": "<h4 class='item'>let make: (int, char) => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-create", "title": "create", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; max_string_length.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; </code>max_string_length.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-create", "title": "create", "contents": "create n returns a new byte sequence of length n. The sequence is uninitialized and contains arbitrary bytes.", "rendered": "<code>create n</code> returns a new byte sequence of length <code>n</code>. The sequence is uninitialized and contains arbitrary bytes.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-create", "title": "create", "contents": "create int bytes ", "rendered": "<h4 class='item'>let create: int => bytes</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-set", "title": "set", "contents": "Raise Invalid_argument if n is not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> is not a valid index in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-set", "title": "set", "contents": "set s n c modifies s in place, replacing the byte at index n with c.", "rendered": "<code>set s n c</code> modifies <code>s</code> in place, replacing the byte at index <code>n</code> with <code>c</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-set", "title": "set", "contents": "set bytes int char unit   ", "rendered": "<h4 class='item'>let set: (bytes, int, char) => unit</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-get", "title": "get", "contents": "Raise Invalid_argument if n not a valid index in s.", "rendered": "Raise <code>Invalid_argument</code> if <code>n</code> not a valid index in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-get", "title": "get", "contents": "get s n returns the byte at index n in argument s.", "rendered": "<code>get s n</code> returns the byte at index <code>n</code> in argument <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-get", "title": "get", "contents": "get bytes int char  ", "rendered": "<h4 class='item'>let get: (bytes, int) => char</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-length", "title": "length", "contents": "Return the length (number of bytes) of the argument.", "rendered": "Return the length (number of bytes) of the argument.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html#value-length", "title": "length", "contents": "length bytes int ", "rendered": "<h4 class='item'>let length: bytes => int</h4>", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "Bytes are represented by the OCaml type char.", "rendered": "Bytes are represented by the OCaml type <code>char</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "Byte sequences can be modified in place, for instance via the set and blit functions described below. See also strings (module String), which are almost the same data structure, but cannot be modified in place.", "rendered": "Byte sequences can be modified in place, for instance via the <code>set</code> and <code>blit</code> functions described below. See also strings (module String), which are almost the same data structure, but cannot be modified in place.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "Two parameters start and len are said to designate a valid range of s if len &gt;= 0 and start and start+len are valid positions in s.", "rendered": "Two parameters <code>start</code> and <code>len</code> are said to designate a valid range of <code>s</code> if <code>len &gt;= 0</code> and <code>start</code> and <code>start+len</code> are valid positions in <code>s</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "Given a byte sequence s of length l, we can access each of the l bytes of s via its index in the sequence. Indexes start at 0, and we will call an index valid in s if it falls within the range [0...l-1] (inclusive). A position is the point between two bytes or at the beginning or end of the sequence. We call a position valid in s if it falls within the range [0...l] (inclusive). Note that the byte at index n is between positions n and n+1.", "rendered": "Given a byte sequence <code>s</code> of length <code>l</code>, we can access each of the <code>l</code> bytes of <code>s</code> via its index in the sequence. Indexes start at <code>0</code>, and we will call an index valid in <code>s</code> if it falls within the range <code>[0...l-1]</code> (inclusive). A position is the point between two bytes or at the beginning or end of the sequence. We call a position valid in <code>s</code> if it falls within the range <code>[0...l]</code> (inclusive). Note that the byte at index <code>n</code> is between positions <code>n</code> and <code>n+1</code>.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "A byte sequence is a mutable data structure that contains a fixed-length sequence of bytes. Each byte can be indexed in constant time for reading or writing.", "rendered": "A byte sequence is a mutable data structure that contains a fixed-length sequence of bytes. Each byte can be indexed in constant time for reading or writing.", "breadcrumb": "Bytes"},
{"href": "./api/Bytes.html", "title": "Bytes", "contents": "Byte sequence operations.", "rendered": "Byte sequence operations.", "breadcrumb": "Bytes"},
{"href": "./api/List.html#value-merge", "title": "merge", "contents": "Merge two lists: Assuming that l1 and l2 are sorted according to the comparison function cmp, merge cmp l1 l2 will return a sorted list containting all the elements of l1 and l2. If several elements compare equal, the elements of l1 will be before the elements of l2. Not tail-recursive (sum of the lengths of the arguments).", "rendered": "Merge two lists: Assuming that <code>l1</code> and <code>l2</code> are sorted according to the comparison function <code>cmp</code>, <code>merge cmp l1 l2</code> will return a sorted list containting all the elements of <code>l1</code> and <code>l2</code>. If several elements compare equal, the elements of <code>l1</code> will be before the elements of <code>l2</code>. Not tail-recursive (sum of the lengths of the arguments).", "breadcrumb": "List"},
{"href": "./api/List.html#value-merge", "title": "merge", "contents": "merge int   list list list   ", "rendered": "<h4 class='item'>let merge: (('a, 'a) => int, list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort_uniq", "title": "sort_uniq", "contents": "Same as sort, but also remove duplicates.", "rendered": "Same as sort, but also remove duplicates.", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort_uniq", "title": "sort_uniq", "contents": "sort_uniq int   list list  ", "rendered": "<h4 class='item'>let sort_uniq: (('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-fast_sort", "title": "fast_sort", "contents": "Same as sort or stable_sort, whichever is faster on typical input.", "rendered": "Same as sort or stable_sort, whichever is faster on typical input.", "breadcrumb": "List"},
{"href": "./api/List.html#value-fast_sort", "title": "fast_sort", "contents": "fast_sort int   list list  ", "rendered": "<h4 class='item'>let fast_sort: (('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-stable_sort", "title": "stable_sort", "contents": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "rendered": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "breadcrumb": "List"},
{"href": "./api/List.html#value-stable_sort", "title": "stable_sort", "contents": "Same as sort, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .", "rendered": "Same as sort, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .", "breadcrumb": "List"},
{"href": "./api/List.html#value-stable_sort", "title": "stable_sort", "contents": "stable_sort int   list list  ", "rendered": "<h4 class='item'>let stable_sort: (('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort", "title": "sort", "contents": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "rendered": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort", "title": "sort", "contents": "Sort a list in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see Array.sort for a complete specification). For example, compare is a suitable comparison function. The resulting list is sorted in increasing order. List.sort is guaranteed to run in constant heap space (in addition to the size of the result list) and logarithmic stack space.", "rendered": "Sort a list in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see Array.sort for a complete specification). For example, compare is a suitable comparison function. The resulting list is sorted in increasing order. <code>List.sort</code> is guaranteed to run in constant heap space (in addition to the size of the result list) and logarithmic stack space.", "breadcrumb": "List"},
{"href": "./api/List.html#value-sort", "title": "sort", "contents": "sort int   list list  ", "rendered": "<h4 class='item'>let sort: (('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#Sorting", "title": "Sorting", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-combine", "title": "combine", "contents": "Transform a pair of lists into a list of pairs: combine [a1; ...; an] [b1; ...; bn] is [(a1,b1); ...; (an,bn)]. Raise Invalid_argument if the two lists have different lengths. Not tail-recursive.", "rendered": "Transform a pair of lists into a list of pairs: <code>combine [a1; ...; an] [b1; ...; bn]</code> is <code>[(a1,b1); ...; (an,bn)]</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-combine", "title": "combine", "contents": "combine list list list  ", "rendered": "<h4 class='item'>let combine: (list('a), list('b)) => list(('a, 'b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-split", "title": "split", "contents": "Transform a list of pairs into a pair of lists: split [(a1,b1); ...; (an,bn)] is ([a1; ...; an], [b1; ...; bn]). Not tail-recursive.", "rendered": "Transform a list of pairs into a pair of lists: <code>split [(a1,b1); ...; (an,bn)]</code> is <code>([a1; ...; an], [b1; ...; bn])</code>. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-split", "title": "split", "contents": "split list list list ", "rendered": "<h4 class='item'>let split: list(('a, 'b)) => (list('a), list('b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#Lists-of-pairs", "title": "Lists of pairs", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-remove_assq", "title": "remove_assq", "contents": "Same as remove_assoc, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.", "rendered": "Same as remove_assoc, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-remove_assq", "title": "remove_assq", "contents": "remove_assq list list  ", "rendered": "<h4 class='item'>let remove_assq: ('a, list(('a, 'b))) => list(('a, 'b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-remove_assoc", "title": "remove_assoc", "contents": "remove_assoc a l returns the list of pairs l without the first pair with key a, if any. Not tail-recursive.", "rendered": "<code>remove_assoc a l</code> returns the list of pairs <code>l</code> without the first pair with key <code>a</code>, if any. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-remove_assoc", "title": "remove_assoc", "contents": "remove_assoc list list  ", "rendered": "<h4 class='item'>let remove_assoc: ('a, list(('a, 'b))) => list(('a, 'b))</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mem_assq", "title": "mem_assq", "contents": "Same as mem_assoc, but uses physical equality instead of structural equality to compare keys.", "rendered": "Same as mem_assoc, but uses physical equality instead of structural equality to compare keys.", "breadcrumb": "List"},
{"href": "./api/List.html#value-mem_assq", "title": "mem_assq", "contents": "mem_assq list bool  ", "rendered": "<h4 class='item'>let mem_assq: ('a, list(('a, 'b))) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mem_assoc", "title": "mem_assoc", "contents": "Same as assoc, but simply return true if a binding exists, and false if no bindings exist for the given key.", "rendered": "Same as assoc, but simply return true if a binding exists, and false if no bindings exist for the given key.", "breadcrumb": "List"},
{"href": "./api/List.html#value-mem_assoc", "title": "mem_assoc", "contents": "mem_assoc list bool  ", "rendered": "<h4 class='item'>let mem_assoc: ('a, list(('a, 'b))) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-assq", "title": "assq", "contents": "Same as assoc, but uses physical equality instead of structural equality to compare keys.", "rendered": "Same as assoc, but uses physical equality instead of structural equality to compare keys.", "breadcrumb": "List"},
{"href": "./api/List.html#value-assq", "title": "assq", "contents": "assq list  ", "rendered": "<h4 class='item'>let assq: ('a, list(('a, 'b))) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-assoc", "title": "assoc", "contents": "assoc a l returns the value associated with key a in the list of pairs l. That is, assoc a [ ...; (a,b); ...] = b if (a,b) is the leftmost binding of a in list l. Raise Not_found if there is no value associated with a in the list l.", "rendered": "<code>assoc a l</code> returns the value associated with key <code>a</code> in the list of pairs <code>l</code>. That is, <code>assoc a [ ...; (a,b); ...] = b</code> if <code>(a,b)</code> is the leftmost binding of <code>a</code> in list <code>l</code>. Raise <code>Not_found</code> if there is no value associated with <code>a</code> in the list <code>l</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-assoc", "title": "assoc", "contents": "assoc list  ", "rendered": "<h4 class='item'>let assoc: ('a, list(('a, 'b))) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#Association-lists", "title": "Association lists", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-partition", "title": "partition", "contents": "partition p l returns a pair of lists (l1, l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. The order of the elements in the input list is preserved.", "rendered": "<code>partition p l</code> returns a pair of lists <code>(l1, l2)</code>, where <code>l1</code> is the list of all the elements of <code>l</code> that satisfy the predicate <code>p</code>, and <code>l2</code> is the list of all the elements of <code>l</code> that do not satisfy <code>p</code>. The order of the elements in the input list is preserved.", "breadcrumb": "List"},
{"href": "./api/List.html#value-partition", "title": "partition", "contents": "partition bool  list list list  ", "rendered": "<h4 class='item'>let partition: ('a => bool, list('a)) => (\n  list('a),\n  list('a)\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-find_all", "title": "find_all", "contents": "find_all is another name for filter.", "rendered": "<code>find_all</code> is another name for filter.", "breadcrumb": "List"},
{"href": "./api/List.html#value-find_all", "title": "find_all", "contents": "find_all bool  list list  ", "rendered": "<h4 class='item'>let find_all: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-filter", "title": "filter", "contents": "filter p l returns all the elements of the list l that satisfy the predicate p. The order of the elements in the input list is preserved.", "rendered": "<code>filter p l</code> returns all the elements of the list <code>l</code> that satisfy the predicate <code>p</code>. The order of the elements in the input list is preserved.", "breadcrumb": "List"},
{"href": "./api/List.html#value-filter", "title": "filter", "contents": "filter bool  list list  ", "rendered": "<h4 class='item'>let filter: ('a => bool, list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-find", "title": "find", "contents": "find p l returns the first element of the list l that satisfies the predicate p. Raise Not_found if there is no value that satisfies p in the list l.", "rendered": "<code>find p l</code> returns the first element of the list <code>l</code> that satisfies the predicate <code>p</code>. Raise <code>Not_found</code> if there is no value that satisfies <code>p</code> in the list <code>l</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-find", "title": "find", "contents": "find bool  list  ", "rendered": "<h4 class='item'>let find: ('a => bool, list('a)) => 'a</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#List-searching", "title": "List searching", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-memq", "title": "memq", "contents": "Same as mem, but uses physical equality instead of structural equality to compare list elements.", "rendered": "Same as mem, but uses physical equality instead of structural equality to compare list elements.", "breadcrumb": "List"},
{"href": "./api/List.html#value-memq", "title": "memq", "contents": "memq list bool  ", "rendered": "<h4 class='item'>let memq: ('a, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mem", "title": "mem", "contents": "mem a l is true if and only if a is equal to an element of l.", "rendered": "<code>mem a l</code> is true if and only if <code>a</code> is equal to an element of <code>l</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-mem", "title": "mem", "contents": "mem list bool  ", "rendered": "<h4 class='item'>let mem: ('a, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-exists2", "title": "exists2", "contents": "Same as exists, but for a two-argument predicate. Raise Invalid_argument if the two lists have different lengths.", "rendered": "Same as exists, but for a two-argument predicate. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "List"},
{"href": "./api/List.html#value-exists2", "title": "exists2", "contents": "exists2 bool   list list bool   ", "rendered": "<h4 class='item'>let exists2: (('a, 'b) => bool, list('a), list('b)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-for_all2", "title": "for_all2", "contents": "Same as for_all, but for a two-argument predicate. Raise Invalid_argument if the two lists have different lengths.", "rendered": "Same as for_all, but for a two-argument predicate. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "List"},
{"href": "./api/List.html#value-for_all2", "title": "for_all2", "contents": "for_all2 bool   list list bool   ", "rendered": "<h4 class='item'>let for_all2: (('a, 'b) => bool, list('a), list('b)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-exists", "title": "exists", "contents": "exists p [a1; ...; an] checks if at least one element of the list satisfies the predicate p. That is, it returns (p a1) || (p a2) || ... || (p an).", "rendered": "<code>exists p [a1; ...; an]</code> checks if at least one element of the list satisfies the predicate <code>p</code>. That is, it returns <code>(p a1) || (p a2) || ... || (p an)</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-exists", "title": "exists", "contents": "exists bool  list bool  ", "rendered": "<h4 class='item'>let exists: ('a => bool, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-for_all", "title": "for_all", "contents": "for_all p [a1; ...; an] checks if all elements of the list satisfy the predicate p. That is, it returns (p a1) &amp;&amp; (p a2) &amp;&amp; ... &amp;&amp; (p an).", "rendered": "<code>for_all p [a1; ...; an]</code> checks if all elements of the list satisfy the predicate <code>p</code>. That is, it returns <code>(p a1) &amp;&amp; (p a2) &amp;&amp; ... &amp;&amp; (p an)</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-for_all", "title": "for_all", "contents": "for_all bool  list bool  ", "rendered": "<h4 class='item'>let for_all: ('a => bool, list('a)) => bool</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#List-scanning", "title": "List scanning", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_right2", "title": "fold_right2", "contents": "List.fold_right2 f [a1; ...; an] [b1; ...; bn] c is f a1 b1 (f a2 b2 (... (f an bn c) ...)). Raise Invalid_argument if the two lists have different lengths. Not tail-recursive.", "rendered": "<code>List.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is <code>f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_right2", "title": "fold_right2", "contents": "fold_right2    list list    ", "rendered": "<h4 class='item'>let fold_right2: (\n  ('a, 'b, 'c) => 'c,\n  list('a),\n  list('b),\n  'c\n) => 'c</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_left2", "title": "fold_left2", "contents": "List.fold_left2 f a [b1; ...; bn] [c1; ...; cn] is f (... (f (f a b1 c1) b2 c2) ...) bn cn. Raise Invalid_argument if the two lists have different lengths.", "rendered": "<code>List.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is <code>f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_left2", "title": "fold_left2", "contents": "fold_left2    list list    ", "rendered": "<h4 class='item'>let fold_left2: (\n  ('a, 'b, 'c) => 'a,\n  'a,\n  list('b),\n  list('c)\n) => 'a</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev_map2", "title": "rev_map2", "contents": "List.rev_map2 f l1 l2 gives the same result as rev (map2 f l1 l2), but is tail-recursive and more efficient.", "rendered": "<code>List.rev_map2 f l1 l2</code> gives the same result as rev<code> (</code>map2<code> f l1 l2)</code>, but is tail-recursive and more efficient.", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev_map2", "title": "rev_map2", "contents": "rev_map2   list list list   ", "rendered": "<h4 class='item'>let rev_map2: (('a, 'b) => 'c, list('a), list('b)) => list(\n  'c\n)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map2", "title": "map2", "contents": "List.map2 f [a1; ...; an] [b1; ...; bn] is [f a1 b1; ...; f an bn]. Raise Invalid_argument if the two lists have different lengths. Not tail-recursive.", "rendered": "<code>List.map2 f [a1; ...; an] [b1; ...; bn]</code> is <code>[f a1 b1; ...; f an bn]</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-map2", "title": "map2", "contents": "map2   list list list   ", "rendered": "<h4 class='item'>let map2: (('a, 'b) => 'c, list('a), list('b)) => list('c)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-iter2", "title": "iter2", "contents": "List.iter2 f [a1; ...; an] [b1; ...; bn] calls in turn f a1 b1; ...; f an bn. Raise Invalid_argument if the two lists have different lengths.", "rendered": "<code>List.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn <code>f a1 b1; ...; f an bn</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "List"},
{"href": "./api/List.html#value-iter2", "title": "iter2", "contents": "iter2 unit   list list unit   ", "rendered": "<h4 class='item'>let iter2: (('a, 'b) => unit, list('a), list('b)) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#Iterators-on-two-lists", "title": "Iterators on two lists", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_right", "title": "fold_right", "contents": "List.fold_right f [a1; ...; an] b is f a1 (f a2 (... (f an b) ...)). Not tail-recursive.", "rendered": "<code>List.fold_right f [a1; ...; an] b</code> is <code>f a1 (f a2 (... (f an b) ...))</code>. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_right", "title": "fold_right", "contents": "fold_right   list   ", "rendered": "<h4 class='item'>let fold_right: (('a, 'b) => 'b, list('a), 'b) => 'b</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_left", "title": "fold_left", "contents": "List.fold_left f a [b1; ...; bn] is f (... (f (f a b1) b2) ...) bn.", "rendered": "<code>List.fold_left f a [b1; ...; bn]</code> is <code>f (... (f (f a b1) b2) ...) bn</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-fold_left", "title": "fold_left", "contents": "fold_left   list   ", "rendered": "<h4 class='item'>let fold_left: (('a, 'b) => 'a, 'a, list('b)) => 'a</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev_map", "title": "rev_map", "contents": "List.rev_map f l gives the same result as rev (map f l), but is tail-recursive and more efficient.", "rendered": "<code>List.rev_map f l</code> gives the same result as rev<code> (</code>map<code> f l)</code>, but is tail-recursive and more efficient.", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev_map", "title": "rev_map", "contents": "rev_map  list list  ", "rendered": "<h4 class='item'>let rev_map: ('a => 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-mapi", "title": "mapi", "contents": "Same as map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. Not tail-recursive.", "rendered": "Same as map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-mapi", "title": "mapi", "contents": "mapi int   list list  ", "rendered": "<h4 class='item'>let mapi: ((int, 'a) => 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-map", "title": "map", "contents": "List.map f [a1; ...; an] applies function f to a1, ..., an, and builds the list [f a1; ...; f an] with the results returned by f. Not tail-recursive.", "rendered": "<code>List.map f [a1; ...; an]</code> applies function <code>f</code> to <code>a1, ..., an</code>, and builds the list <code>[f a1; ...; f an]</code> with the results returned by <code>f</code>. Not tail-recursive.", "breadcrumb": "List"},
{"href": "./api/List.html#value-map", "title": "map", "contents": "map  list list  ", "rendered": "<h4 class='item'>let map: ('a => 'b, list('a)) => list('b)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.", "breadcrumb": "List"},
{"href": "./api/List.html#value-iteri", "title": "iteri", "contents": "iteri int unit   list unit  ", "rendered": "<h4 class='item'>let iteri: ((int, 'a) => unit, list('a)) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-iter", "title": "iter", "contents": "List.iter f [a1; ...; an] applies function f in turn to a1; ...; an. It is equivalent to begin f a1; f a2; ...; f an; () end.", "rendered": "<code>List.iter f [a1; ...; an]</code> applies function <code>f</code> in turn to <code>a1; ...; an</code>. It is equivalent to <code>begin f a1; f a2; ...; f an; () end</code>.", "breadcrumb": "List"},
{"href": "./api/List.html#value-iter", "title": "iter", "contents": "iter unit  list unit  ", "rendered": "<h4 class='item'>let iter: ('a => unit, list('a)) => unit</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#Iterators", "title": "Iterators", "contents": "", "rendered": "", "breadcrumb": "List"},
{"href": "./api/List.html#value-flatten", "title": "flatten", "contents": "Same as concat. Not tail-recursive (length of the argument + length of the longest sub-list).", "rendered": "Same as <code>concat</code>. Not tail-recursive (length of the argument + length of the longest sub-list).", "breadcrumb": "List"},
{"href": "./api/List.html#value-flatten", "title": "flatten", "contents": "flatten list list list ", "rendered": "<h4 class='item'>let flatten: list(list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-concat", "title": "concat", "contents": "Concatenate a list of lists. The elements of the argument are all concatenated together (in the same order) to give the result. Not tail-recursive (length of the argument + length of the longest sub-list).", "rendered": "Concatenate a list of lists. The elements of the argument are all concatenated together (in the same order) to give the result. Not tail-recursive (length of the argument + length of the longest sub-list).", "breadcrumb": "List"},
{"href": "./api/List.html#value-concat", "title": "concat", "contents": "concat list list list ", "rendered": "<h4 class='item'>let concat: list(list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev_append", "title": "rev_append", "contents": "List.rev_append l1 l2 reverses l1 and concatenates it to l2. This is equivalent to rev l1 @ l2, but rev_append is tail-recursive and more efficient.", "rendered": "<code>List.rev_append l1 l2</code> reverses <code>l1</code> and concatenates it to <code>l2</code>. This is equivalent to rev<code> l1 @ l2</code>, but <code>rev_append</code> is tail-recursive and more efficient.", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev_append", "title": "rev_append", "contents": "rev_append list list list  ", "rendered": "<h4 class='item'>let rev_append: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-append", "title": "append", "contents": "Catenate two lists. Same function as the infix operator @. Not tail-recursive (length of the first argument). The @ operator is not tail-recursive either.", "rendered": "Catenate two lists. Same function as the infix operator <code>@</code>. Not tail-recursive (length of the first argument). The <code>@</code> operator is not tail-recursive either.", "breadcrumb": "List"},
{"href": "./api/List.html#value-append", "title": "append", "contents": "append list list list  ", "rendered": "<h4 class='item'>let append: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev", "title": "rev", "contents": "List reversal.", "rendered": "List reversal.", "breadcrumb": "List"},
{"href": "./api/List.html#value-rev", "title": "rev", "contents": "rev list list ", "rendered": "<h4 class='item'>let rev: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-nth", "title": "nth", "contents": "Return the n-th element of the given list. The first element (head of the list) is at position 0. Raise Failure &quot;nth&quot; if the list is too short. Raise Invalid_argument &quot;List.nth&quot; if n is negative.", "rendered": "Return the <code>n</code>-th element of the given list. The first element (head of the list) is at position 0. Raise <code>Failure &quot;nth&quot;</code> if the list is too short. Raise <code>Invalid_argument &quot;List.nth&quot;</code> if <code>n</code> is negative.", "breadcrumb": "List"},
{"href": "./api/List.html#value-nth", "title": "nth", "contents": "nth list int  ", "rendered": "<h4 class='item'>let nth: (list('a), int) => 'a</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-tl", "title": "tl", "contents": "Return the given list without its first element. Raise Failure &quot;tl&quot; if the list is empty.", "rendered": "Return the given list without its first element. Raise <code>Failure &quot;tl&quot;</code> if the list is empty.", "breadcrumb": "List"},
{"href": "./api/List.html#value-tl", "title": "tl", "contents": "tl list list ", "rendered": "<h4 class='item'>let tl: list('a) => list('a)</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-hd", "title": "hd", "contents": "Return the first element of the given list. Raise Failure &quot;hd&quot; if the list is empty.", "rendered": "Return the first element of the given list. Raise <code>Failure &quot;hd&quot;</code> if the list is empty.", "breadcrumb": "List"},
{"href": "./api/List.html#value-hd", "title": "hd", "contents": "hd list ", "rendered": "<h4 class='item'>let hd: list('a) => 'a</h4>", "breadcrumb": "List"},
{"href": "./api/List.html#value-length", "title": "length", "contents": "Return the length (number of elements) of the given list.", "rendered": "Return the length (number of elements) of the given list.", "breadcrumb": "List"},
{"href": "./api/List.html#value-length", "title": "length", "contents": "length list int ", "rendered": "<h4 class='item'>let length: list('a) => int</h4>", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "@rest", "rendered": "@rest", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "The above considerations can usually be ignored if your lists are not longer than about 10000 elements.", "rendered": "The above considerations can usually be ignored if your lists are not longer than about 10000 elements.", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "Some functions are flagged as not tail-recursive. A tail-recursive function uses constant stack space, while a non-tail-recursive function uses stack space proportional to the length of its list argument, which can be a problem with very long lists. When the function takes several list arguments, an approximate formula giving stack usage (in some unspecified constant unit) is shown in parentheses.", "rendered": "Some functions are flagged as not tail-recursive. A tail-recursive function uses constant stack space, while a non-tail-recursive function uses stack space proportional to the length of its list argument, which can be a problem with very long lists. When the function takes several list arguments, an approximate formula giving stack usage (in some unspecified constant unit) is shown in parentheses.", "breadcrumb": "List"},
{"href": "./api/List.html", "title": "List", "contents": "List operations.", "rendered": "List operations.", "breadcrumb": "List"},
{"href": "./api/Pervasives.html#value-do_at_exit", "title": "do_at_exit", "contents": "do_at_exit unit unit ", "rendered": "<h4 class='item'>let do_at_exit: unit => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-unsafe_really_input", "title": "unsafe_really_input", "contents": "unsafe_really_input in_channel bytes int int unit    ", "rendered": "<h4 class='item'>let unsafe_really_input: (\n  <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>,\n  bytes,\n  int,\n  int\n) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-valid_float_lexem", "title": "valid_float_lexem", "contents": "valid_float_lexem string string ", "rendered": "<h4 class='item'>let valid_float_lexem: string => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "/*", "rendered": "/*", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-at_exit", "title": "at_exit", "contents": "Register the given function to be called at program termination time. The functions registered with at_exit will be called when the program executes exit, or terminates, either normally or because of an uncaught exception. The functions are called in &#39;last in, first out&#39; order: the function most recently added with at_exit is called first.", "rendered": "Register the given function to be called at program termination time. The functions registered with <code>at_exit</code> will be called when the program executes exit, or terminates, either normally or because of an uncaught exception. The functions are called in &#39;last in, first out&#39; order: the function most recently added with <code>at_exit</code> is called first.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-at_exit", "title": "at_exit", "contents": "at_exit unit unit  unit ", "rendered": "<h4 class='item'>let at_exit: unit => unit => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-exit", "title": "exit", "contents": "Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure. All open output channels are flushed with flush_all. An implicit exit 0 is performed each time a program terminates normally. An implicit exit 2 is performed if the program terminates early because of an uncaught exception.", "rendered": "Terminate the process, returning the given status code to the operating system: usually 0 to indicate no errors, and a small positive integer to indicate failure. All open output channels are flushed with <code>flush_all</code>. An implicit <code>exit 0</code> is performed each time a program terminates normally. An implicit <code>exit 2</code> is performed if the program terminates early because of an uncaught exception.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-exit", "title": "exit", "contents": "exit int ", "rendered": "<h4 class='item'>let exit: int => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Program-termination", "title": "Program termination", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-^^", "title": "^^", "contents": "f1 ^^ f2 catenates format strings f1 and f2. The result is a format string that behaves as the concatenation of format strings f1 and f2: in case of formatted output, it accepts arguments from f1, then arguments from f2; in case of formatted input, it returns results from f1, then results from f2.", "rendered": "<code>f1 ^^ f2</code> catenates format strings <code>f1</code> and <code>f2</code>. The result is a format string that behaves as the concatenation of format strings <code>f1</code> and <code>f2</code>: in case of formatted output, it accepts arguments from <code>f1</code>, then arguments from <code>f2</code>; in case of formatted input, it returns results from <code>f1</code>, then results from <code>f2</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-^^", "title": "^^", "contents": "^^ format6 format6 format6  ", "rendered": "<h4 class='item'>let ^^: (\n  <a href=\"./api/Pervasives.html#type-format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f),\n  <a href=\"./api/Pervasives.html#type-format6\">format6</a>('f, 'b, 'c, 'e, 'g, 'h)\n) => <a href=\"./api/Pervasives.html#type-format6\">format6</a>('a, 'b, 'c, 'd, 'g, 'h)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-format_of_string", "title": "format_of_string", "contents": "format_of_string s returns a format string read from the string literal s. Note: format_of_string can not convert a string argument that is not a literal. If you need this functionality, use the more general format_from_string function.", "rendered": "<code>format_of_string s</code> returns a format string read from the string literal <code>s</code>. Note: <code>format_of_string</code> can not convert a string argument that is not a literal. If you need this functionality, use the more general format_from_string function.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-format_of_string", "title": "format_of_string", "contents": "format_of_string format6 format6 ", "rendered": "<h4 class='item'>let format_of_string: <a href=\"./api/Pervasives.html#type-format6\">format6</a>(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n) => <a href=\"./api/Pervasives.html#type-format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_format", "title": "string_of_format", "contents": "Converts a format string into a string.", "rendered": "Converts a format string into a string.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_format", "title": "string_of_format", "contents": "string_of_format format6 string ", "rendered": "<h4 class='item'>let string_of_format: <a href=\"./api/Pervasives.html#type-format6\">format6</a>(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n) => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-format", "title": "format", "contents": "format format4", "rendered": "<h4 class='item'>type format('a, 'b, 'c) = <a href=\"./api/Pervasives.html#type-format4\">format4</a>('a, 'b, 'c, 'c)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-format4", "title": "format4", "contents": "format4 format6", "rendered": "<h4 class='item'>type format4('a, 'b, 'c, 'd) = <a href=\"./api/Pervasives.html#type-format6\">format6</a>(\n  'a,\n  'b,\n  'c,\n  'c,\n  'c,\n  'd\n)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-format6", "title": "format6", "contents": "format6 format6", "rendered": "<h4 class='item'>type format6('a, 'b, 'c, 'd, 'e, 'f) = <a href=\"./api/CamlinternalFormatBasics.html#type-format6\" title=\"CamlinternalFormatBasics.format6\">format6</a>(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "&#39;a is the type of the parameters of the format for formatted output functions (printf-style functions); &#39;a is the type of the values read by the format for formatted input functions (scanf-style functions).", "rendered": "<code>&#39;a</code> is the type of the parameters of the format for formatted output functions (<code>printf</code>-style functions); <code>&#39;a</code> is the type of the values read by the format for formatted input functions (<code>scanf</code>-style functions).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "&#39;b is the type of input source for formatted input functions and the type of output target for formatted output functions. For printf-style functions from module Printf, &#39;b is typically out_channel; for printf-style functions from module Format, &#39;b is typically Format.formatter; for scanf-style functions from module Scanf, &#39;b is typically Scanf.Scanning.in_channel.", "rendered": "<code>&#39;b</code> is the type of input source for formatted input functions and the type of output target for formatted output functions. For <code>printf</code>-style functions from module <code>Printf</code>, <code>&#39;b</code> is typically <code>out_channel</code>; for <code>printf</code>-style functions from module <code>Format</code>, <code>&#39;b</code> is typically <code>Format.formatter</code>; for <code>scanf</code>-style functions from module <code>Scanf</code>, <code>&#39;b</code> is typically <code>Scanf.Scanning.in_channel</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "&#39;c is the type of the result of the %a and %t printing functions, and also the type of the argument transmitted to the first argument of kprintf-style functions or to the kscanf-style functions.", "rendered": "<code>&#39;c</code> is the type of the result of the <code>%a</code> and <code>%t</code> printing functions, and also the type of the argument transmitted to the first argument of <code>kprintf</code>-style functions or to the <code>kscanf</code>-style functions.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "&#39;d is the type of parameters for the scanf-style functions.", "rendered": "<code>&#39;d</code> is the type of parameters for the <code>scanf</code>-style functions.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "&#39;e is the type of the receiver function for the scanf-style functions.", "rendered": "<code>&#39;e</code> is the type of the receiver function for the <code>scanf</code>-style functions.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "&#39;f is the final result type of a formatted input/output function invocation: for the printf-style functions, it is typically unit; for the scanf-style functions, it is typically the result type of the receiver function.", "rendered": "<code>&#39;f</code> is the final result type of a formatted input/output function invocation: for the <code>printf</code>-style functions, it is typically <code>unit</code>; for the <code>scanf</code>-style functions, it is typically the result type of the receiver function.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Type argument &#39;b is also the type of the first argument given to user&#39;s defined printing functions for %a and %t conversions, and user&#39;s defined reading functions for %r conversion.", "rendered": "Type argument <code>&#39;b</code> is also the type of the first argument given to user&#39;s defined printing functions for <code>%a</code> and <code>%t</code> conversions, and user&#39;s defined reading functions for <code>%r</code> conversion.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "The meaning of format string type parameters is as follows:", "rendered": "The meaning of format string type parameters is as follows:", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Format strings have a general and highly polymorphic type (&#39;a, &#39;b, &#39;c, &#39;d, &#39;e, &#39;f) format6. The two simplified types, format and format4 below are included for backward compatibility with earlier releases of OCaml.", "rendered": "Format strings have a general and highly polymorphic type <code>(&#39;a, &#39;b, &#39;c, &#39;d, &#39;e, &#39;f) format6</code>. The two simplified types, <code>format</code> and <code>format4</code> below are included for backward compatibility with earlier releases of OCaml.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "plain characters that are regular characters with usual lexical conventions. Plain characters specify string literals to be read in the input or printed in the output.", "rendered": "<em>plain characters</em> that are regular characters with usual lexical conventions. Plain characters specify string literals to be read in the input or printed in the output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "formatting indications, introduced by the special character &#39;@&#39; followed by one or more characters specifying how to read or print the argument,", "rendered": "<em>formatting indications</em>, introduced by the special character <code>&#39;@&#39;</code> followed by one or more characters specifying how to read or print the argument,", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "conversions specifications, introduced by the special character &#39;%&#39; followed by one or more characters specifying what kind of argument to read or print,", "rendered": "<em>conversions specifications</em>, introduced by the special character <code>&#39;%&#39;</code> followed by one or more characters specifying what kind of argument to read or print,", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "For more information about conversion specifications and formatting indications available, read the documentation of modules Scanf, Printf and Format.", "rendered": "For more information about conversion specifications and formatting indications available, read the documentation of modules Scanf, Printf and Format.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "There is an additional lexical rule to escape the special characters &#39;%&#39; and &#39;@&#39; in format strings: if a special character follows a &#39;%&#39; character, it is treated as a plain character. In other words, &quot;%%&quot; is considered as a plain &#39;%&#39; and &quot;%@&quot; as a plain &#39;@&#39;.", "rendered": "There is an additional lexical rule to escape the special characters <code>&#39;%&#39;</code> and <code>&#39;@&#39;</code> in format strings: if a special character follows a <code>&#39;%&#39;</code> character, it is treated as a plain character. In other words, <code>&quot;%%&quot;</code> is considered as a plain <code>&#39;%&#39;</code> and <code>&quot;%@&quot;</code> as a plain <code>&#39;@&#39;</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Format strings are made of three kinds of entities:", "rendered": "Format strings are made of three kinds of entities:", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Format strings are character strings with special lexical conventions that defines the functionality of formatted input/output functions. Format strings are used to read data with formatted input functions from module Scanf and to print data with formatted output functions from modules Printf and Format.", "rendered": "Format strings are character strings with special lexical conventions that defines the functionality of formatted input/output functions. Format strings are used to read data with formatted input functions from module Scanf and to print data with formatted output functions from modules Printf and Format.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Operations-on-format-strings", "title": "Operations on format strings", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-decr", "title": "decr", "contents": "Decrement the integer contained in the given reference. Equivalent to fun r -&gt; r := pred !r.", "rendered": "Decrement the integer contained in the given reference. Equivalent to <code>fun r -&gt; r := pred !r</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-decr", "title": "decr", "contents": "decr ref int unit ", "rendered": "<h4 class='item'>let decr: <a href=\"./api/Pervasives.html#type-ref\">ref</a>(int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-incr", "title": "incr", "contents": "Increment the integer contained in the given reference. Equivalent to fun r -&gt; r := succ !r.", "rendered": "Increment the integer contained in the given reference. Equivalent to <code>fun r -&gt; r := succ !r</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-incr", "title": "incr", "contents": "incr ref int unit ", "rendered": "<h4 class='item'>let incr: <a href=\"./api/Pervasives.html#type-ref\">ref</a>(int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-:=", "title": ":=", "contents": "r := a stores the value of a in reference r. Equivalent to fun r v -&gt; r.contents &lt;- v.", "rendered": "<code>r := a</code> stores the value of <code>a</code> in reference <code>r</code>. Equivalent to <code>fun r v -&gt; r.contents &lt;- v</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-:=", "title": ":=", "contents": ":= ref unit  ", "rendered": "<h4 class='item'>let :=: (<a href=\"./api/Pervasives.html#type-ref\">ref</a>('a), 'a) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-!", "title": "!", "contents": "!r returns the current contents of reference r. Equivalent to fun r -&gt; r.contents.", "rendered": "<code>!r</code> returns the current contents of reference <code>r</code>. Equivalent to <code>fun r -&gt; r.contents</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-!", "title": "!", "contents": "! ref ", "rendered": "<h4 class='item'>let !: <a href=\"./api/Pervasives.html#type-ref\">ref</a>('a) => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ref", "title": "ref", "contents": "Return a fresh reference containing the given value.", "rendered": "Return a fresh reference containing the given value.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ref", "title": "ref", "contents": "ref ref ", "rendered": "<h4 class='item'>let ref: 'a => <a href=\"./api/Pervasives.html#type-ref\">ref</a>('a)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-ref", "title": "ref", "contents": "The type of references (mutable indirection cells) containing a value of type &#39;a.", "rendered": "The type of references (mutable indirection cells) containing a value of type <code>&#39;a</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-ref", "title": "ref", "contents": "ref contents", "rendered": "<h4 class='item'>type ref('a) = {mut contents: 'a}</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#References", "title": "References", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-LargeFile.in_channel_length", "title": "LargeFile.in_channel_length", "contents": "in_channel_length in_channel int64 ", "rendered": "<h4 class='item'>let in_channel_length: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => int64</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-LargeFile.pos_in", "title": "LargeFile.pos_in", "contents": "pos_in in_channel int64 ", "rendered": "<h4 class='item'>let pos_in: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => int64</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-LargeFile.seek_in", "title": "LargeFile.seek_in", "contents": "seek_in in_channel int64 unit  ", "rendered": "<h4 class='item'>let seek_in: (<a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>, int64) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-LargeFile.out_channel_length", "title": "LargeFile.out_channel_length", "contents": "out_channel_length out_channel int64 ", "rendered": "<h4 class='item'>let out_channel_length: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => int64</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-LargeFile.pos_out", "title": "LargeFile.pos_out", "contents": "pos_out out_channel int64 ", "rendered": "<h4 class='item'>let pos_out: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => int64</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-LargeFile.seek_out", "title": "LargeFile.seek_out", "contents": "seek_out out_channel int64 unit  ", "rendered": "<h4 class='item'>let seek_out: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, int64) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#module-LargeFile", "title": "LargeFile", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#module-LargeFile", "title": "LargeFile", "contents": "Operations on large files. This sub-module provides 64-bit variants of the channel functions that manipulate file positions and file sizes. By representing positions and sizes by 64-bit integers (type int64) instead of regular integers (type int), these alternate functions allow operating on files whose sizes are greater than max_int.", "rendered": "Operations on large files. This sub-module provides 64-bit variants of the channel functions that manipulate file positions and file sizes. By representing positions and sizes by 64-bit integers (type <code>int64</code>) instead of regular integers (type <code>int</code>), these alternate functions allow operating on files whose sizes are greater than <code>max_int</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Operations-on-large-files", "title": "Operations on large files", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-set_binary_mode_in", "title": "set_binary_mode_in", "contents": "set_binary_mode_in ic true sets the channel ic to binary mode: no translations take place during input. set_binary_mode_out ic false sets the channel ic to text mode: depending on the operating system, some translations may take place during input. For instance, under Windows, end-of-lines will be translated from \\r\\n to \\n. This function has no effect under operating systems that do not distinguish between text mode and binary mode.", "rendered": "<code>set_binary_mode_in ic true</code> sets the channel <code>ic</code> to binary mode: no translations take place during input. <code>set_binary_mode_out ic false</code> sets the channel <code>ic</code> to text mode: depending on the operating system, some translations may take place during input. For instance, under Windows, end-of-lines will be translated from <code>\\r\\n</code> to <code>\\n</code>. This function has no effect under operating systems that do not distinguish between text mode and binary mode.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-set_binary_mode_in", "title": "set_binary_mode_in", "contents": "set_binary_mode_in in_channel bool unit  ", "rendered": "<h4 class='item'>let set_binary_mode_in: (<a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>, bool) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_in_noerr", "title": "close_in_noerr", "contents": "Same as close_in, but ignore all errors.", "rendered": "Same as <code>close_in</code>, but ignore all errors.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_in_noerr", "title": "close_in_noerr", "contents": "close_in_noerr in_channel unit ", "rendered": "<h4 class='item'>let close_in_noerr: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_in", "title": "close_in", "contents": "Close the given channel. Input functions raise a Sys_error exception when they are applied to a closed input channel, except close_in, which does nothing when applied to an already closed channel.", "rendered": "Close the given channel. Input functions raise a <code>Sys_error</code> exception when they are applied to a closed input channel, except <code>close_in</code>, which does nothing when applied to an already closed channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_in", "title": "close_in", "contents": "close_in in_channel unit ", "rendered": "<h4 class='item'>let close_in: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-in_channel_length", "title": "in_channel_length", "contents": "Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless. The returned size does not take into account the end-of-line translations that can be performed when reading from a channel opened in text mode.", "rendered": "Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless. The returned size does not take into account the end-of-line translations that can be performed when reading from a channel opened in text mode.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-in_channel_length", "title": "in_channel_length", "contents": "in_channel_length in_channel int ", "rendered": "<h4 class='item'>let in_channel_length: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-pos_in", "title": "pos_in", "contents": "Return the current reading position for the given channel.", "rendered": "Return the current reading position for the given channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-pos_in", "title": "pos_in", "contents": "pos_in in_channel int ", "rendered": "<h4 class='item'>let pos_in: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-seek_in", "title": "seek_in", "contents": "seek_in chan pos sets the current reading position to pos for channel chan. This works only for regular files. On files of other kinds, the behavior is unspecified.", "rendered": "<code>seek_in chan pos</code> sets the current reading position to <code>pos</code> for channel <code>chan</code>. This works only for regular files. On files of other kinds, the behavior is unspecified.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-seek_in", "title": "seek_in", "contents": "seek_in in_channel int unit  ", "rendered": "<h4 class='item'>let seek_in: (<a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>, int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_value", "title": "input_value", "contents": "Read the representation of a structured value, as produced by output_value, and return the corresponding value. This function is identical to from_channel; see the description of module Marshal for more information, in particular concerning the lack of type safety.", "rendered": "Read the representation of a structured value, as produced by output_value, and return the corresponding value. This function is identical to from_channel; see the description of module Marshal for more information, in particular concerning the lack of type safety.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_value", "title": "input_value", "contents": "input_value in_channel ", "rendered": "<h4 class='item'>let input_value: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_binary_int", "title": "input_binary_int", "contents": "Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel. See output_binary_int. Raise End_of_file if an end of file was reached while reading the integer.", "rendered": "Read an integer encoded in binary format (4 bytes, big-endian) from the given input channel. See output_binary_int. Raise <code>End_of_file</code> if an end of file was reached while reading the integer.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_binary_int", "title": "input_binary_int", "contents": "input_binary_int in_channel int ", "rendered": "<h4 class='item'>let input_binary_int: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_byte", "title": "input_byte", "contents": "Same as input_char, but return the 8-bit integer representing the character. Raise End_of_file if an end of file was reached.", "rendered": "Same as input_char, but return the 8-bit integer representing the character. Raise <code>End_of_file</code> if an end of file was reached.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_byte", "title": "input_byte", "contents": "input_byte in_channel int ", "rendered": "<h4 class='item'>let input_byte: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-really_input_string", "title": "really_input_string", "contents": "really_input_string ic len reads len characters from channel ic and returns them in a new string. Raise End_of_file if the end of file is reached before len characters have been read.", "rendered": "<code>really_input_string ic len</code> reads <code>len</code> characters from channel <code>ic</code> and returns them in a new string. Raise <code>End_of_file</code> if the end of file is reached before <code>len</code> characters have been read.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-really_input_string", "title": "really_input_string", "contents": "really_input_string in_channel int string  ", "rendered": "<h4 class='item'>let really_input_string: (<a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>, int) => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-really_input", "title": "really_input", "contents": "really_input ic buf pos len reads len characters from channel ic, storing them in byte sequence buf, starting at character number pos. Raise End_of_file if the end of file is reached before len characters have been read. Raise Invalid_argument &quot;really_input&quot; if pos and len do not designate a valid range of buf.", "rendered": "<code>really_input ic buf pos len</code> reads <code>len</code> characters from channel <code>ic</code>, storing them in byte sequence <code>buf</code>, starting at character number <code>pos</code>. Raise <code>End_of_file</code> if the end of file is reached before <code>len</code> characters have been read. Raise <code>Invalid_argument &quot;really_input&quot;</code> if <code>pos</code> and <code>len</code> do not designate a valid range of <code>buf</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-really_input", "title": "really_input", "contents": "really_input in_channel bytes int int unit    ", "rendered": "<h4 class='item'>let really_input: (<a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>, bytes, int, int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input", "title": "input", "contents": "input ic buf pos len reads up to len characters from the given channel ic, storing them in byte sequence buf, starting at character number pos. It returns the actual number of characters read, between 0 and len (inclusive). A return value of 0 means that the end of file was reached. A return value between 0 and len exclusive means that not all requested len characters were read, either because no more characters were available at that time, or because the implementation found it convenient to do a partial read; input must be called again to read the remaining characters, if desired. (See also really_input for reading exactly len characters.) Exception Invalid_argument &quot;input&quot; is raised if pos and len do not designate a valid range of buf.", "rendered": "<code>input ic buf pos len</code> reads up to <code>len</code> characters from the given channel <code>ic</code>, storing them in byte sequence <code>buf</code>, starting at character number <code>pos</code>. It returns the actual number of characters read, between 0 and <code>len</code> (inclusive). A return value of 0 means that the end of file was reached. A return value between 0 and <code>len</code> exclusive means that not all requested <code>len</code> characters were read, either because no more characters were available at that time, or because the implementation found it convenient to do a partial read; <code>input</code> must be called again to read the remaining characters, if desired. (See also really_input for reading exactly <code>len</code> characters.) Exception <code>Invalid_argument &quot;input&quot;</code> is raised if <code>pos</code> and <code>len</code> do not designate a valid range of <code>buf</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input", "title": "input", "contents": "input in_channel bytes int int int    ", "rendered": "<h4 class='item'>let input: (<a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a>, bytes, int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_line", "title": "input_line", "contents": "Read characters from the given input channel, until a newline character is encountered. Return the string of all characters read, without the newline character at the end. Raise End_of_file if the end of the file is reached at the beginning of line.", "rendered": "Read characters from the given input channel, until a newline character is encountered. Return the string of all characters read, without the newline character at the end. Raise <code>End_of_file</code> if the end of the file is reached at the beginning of line.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_line", "title": "input_line", "contents": "input_line in_channel string ", "rendered": "<h4 class='item'>let input_line: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_char", "title": "input_char", "contents": "Read one character from the given input channel. Raise End_of_file if there are no more characters to read.", "rendered": "Read one character from the given input channel. Raise <code>End_of_file</code> if there are no more characters to read.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-input_char", "title": "input_char", "contents": "input_char in_channel char ", "rendered": "<h4 class='item'>let input_char: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a> => char</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_in_gen", "title": "open_in_gen", "contents": "open_in_gen mode perm filename opens the named file for reading, as described above. The extra arguments mode and perm specify the opening mode and file permissions. open_in and open_in_bin are special cases of this function.", "rendered": "<code>open_in_gen mode perm filename</code> opens the named file for reading, as described above. The extra arguments <code>mode</code> and <code>perm</code> specify the opening mode and file permissions. open_in and open_in_bin are special cases of this function.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_in_gen", "title": "open_in_gen", "contents": "open_in_gen list open_flag int string in_channel   ", "rendered": "<h4 class='item'>let open_in_gen: (\n  list(<a href=\"./api/Pervasives.html#type-open_flag\">open_flag</a>),\n  int,\n  string\n) => <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_in_bin", "title": "open_in_bin", "contents": "Same as open_in, but the file is opened in binary mode, so that no translation takes place during reads. On operating systems that do not distinguish between text mode and binary mode, this function behaves like open_in.", "rendered": "Same as open_in, but the file is opened in binary mode, so that no translation takes place during reads. On operating systems that do not distinguish between text mode and binary mode, this function behaves like open_in.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_in_bin", "title": "open_in_bin", "contents": "open_in_bin string in_channel ", "rendered": "<h4 class='item'>let open_in_bin: string => <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_in", "title": "open_in", "contents": "Open the named file for reading, and return a new input channel on that file, positionned at the beginning of the file.", "rendered": "Open the named file for reading, and return a new input channel on that file, positionned at the beginning of the file.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_in", "title": "open_in", "contents": "open_in string in_channel ", "rendered": "<h4 class='item'>let open_in: string => <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#General-input-functions", "title": "General input functions", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-set_binary_mode_out", "title": "set_binary_mode_out", "contents": "set_binary_mode_out oc true sets the channel oc to binary mode: no translations take place during output. set_binary_mode_out oc false sets the channel oc to text mode: depending on the operating system, some translations may take place during output. For instance, under Windows, end-of-lines will be translated from \\n to \\r\\n. This function has no effect under operating systems that do not distinguish between text mode and binary mode.", "rendered": "<code>set_binary_mode_out oc true</code> sets the channel <code>oc</code> to binary mode: no translations take place during output. <code>set_binary_mode_out oc false</code> sets the channel <code>oc</code> to text mode: depending on the operating system, some translations may take place during output. For instance, under Windows, end-of-lines will be translated from <code>\\n</code> to <code>\\r\\n</code>. This function has no effect under operating systems that do not distinguish between text mode and binary mode.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-set_binary_mode_out", "title": "set_binary_mode_out", "contents": "set_binary_mode_out out_channel bool unit  ", "rendered": "<h4 class='item'>let set_binary_mode_out: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, bool) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_out_noerr", "title": "close_out_noerr", "contents": "Same as close_out, but ignore all errors.", "rendered": "Same as <code>close_out</code>, but ignore all errors.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_out_noerr", "title": "close_out_noerr", "contents": "close_out_noerr out_channel unit ", "rendered": "<h4 class='item'>let close_out_noerr: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_out", "title": "close_out", "contents": "Close the given channel, flushing all buffered write operations. Output functions raise a Sys_error exception when they are applied to a closed output channel, except close_out and flush, which do nothing when applied to an already closed channel. Note that close_out may raise Sys_error if the operating system signals an error when flushing or closing.", "rendered": "Close the given channel, flushing all buffered write operations. Output functions raise a <code>Sys_error</code> exception when they are applied to a closed output channel, except <code>close_out</code> and <code>flush</code>, which do nothing when applied to an already closed channel. Note that <code>close_out</code> may raise <code>Sys_error</code> if the operating system signals an error when flushing or closing.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-close_out", "title": "close_out", "contents": "close_out out_channel unit ", "rendered": "<h4 class='item'>let close_out: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-out_channel_length", "title": "out_channel_length", "contents": "Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless.", "rendered": "Return the size (number of characters) of the regular file on which the given channel is opened. If the channel is opened on a file that is not a regular file, the result is meaningless.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-out_channel_length", "title": "out_channel_length", "contents": "out_channel_length out_channel int ", "rendered": "<h4 class='item'>let out_channel_length: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-pos_out", "title": "pos_out", "contents": "Return the current writing position for the given channel. Does not work on channels opened with the Open_append flag (returns unspecified results).", "rendered": "Return the current writing position for the given channel. Does not work on channels opened with the <code>Open_append</code> flag (returns unspecified results).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-pos_out", "title": "pos_out", "contents": "pos_out out_channel int ", "rendered": "<h4 class='item'>let pos_out: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-seek_out", "title": "seek_out", "contents": "seek_out chan pos sets the current writing position to pos for channel chan. This works only for regular files. On files of other kinds (such as terminals, pipes and sockets), the behavior is unspecified.", "rendered": "<code>seek_out chan pos</code> sets the current writing position to <code>pos</code> for channel <code>chan</code>. This works only for regular files. On files of other kinds (such as terminals, pipes and sockets), the behavior is unspecified.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-seek_out", "title": "seek_out", "contents": "seek_out out_channel int unit  ", "rendered": "<h4 class='item'>let seek_out: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_value", "title": "output_value", "contents": "Write the representation of a structured value of any type to a channel. Circularities and sharing inside the value are detected and preserved. The object can be read back, by the function input_value. See the description of module Marshal for more information. output_value is equivalent to to_channel with an empty list of flags.", "rendered": "Write the representation of a structured value of any type to a channel. Circularities and sharing inside the value are detected and preserved. The object can be read back, by the function input_value. See the description of module Marshal for more information. output_value is equivalent to to_channel with an empty list of flags.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_value", "title": "output_value", "contents": "output_value out_channel unit  ", "rendered": "<h4 class='item'>let output_value: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, 'a) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_binary_int", "title": "output_binary_int", "contents": "Write one integer in binary format (4 bytes, big-endian) on the given output channel. The given integer is taken modulo 2Superscript. The only reliable way to read it back is through the input_binary_int function. The format is compatible across all machines for a given version of OCaml.", "rendered": "Write one integer in binary format (4 bytes, big-endian) on the given output channel. The given integer is taken modulo 2Superscript. The only reliable way to read it back is through the input_binary_int function. The format is compatible across all machines for a given version of OCaml.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_binary_int", "title": "output_binary_int", "contents": "output_binary_int out_channel int unit  ", "rendered": "<h4 class='item'>let output_binary_int: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_byte", "title": "output_byte", "contents": "Write one 8-bit integer (as the single character with that code) on the given output channel. The given integer is taken modulo 256.", "rendered": "Write one 8-bit integer (as the single character with that code) on the given output channel. The given integer is taken modulo 256.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_byte", "title": "output_byte", "contents": "output_byte out_channel int unit  ", "rendered": "<h4 class='item'>let output_byte: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_substring", "title": "output_substring", "contents": "Same as output but take a string as argument instead of a byte sequence.", "rendered": "Same as <code>output</code> but take a string as argument instead of a byte sequence.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_substring", "title": "output_substring", "contents": "output_substring out_channel string int int unit    ", "rendered": "<h4 class='item'>let output_substring: (\n  <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>,\n  string,\n  int,\n  int\n) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output", "title": "output", "contents": "output oc buf pos len writes len characters from byte sequence buf, starting at offset pos, to the given output channel oc. Raise Invalid_argument &quot;output&quot; if pos and len do not designate a valid range of buf.", "rendered": "<code>output oc buf pos len</code> writes <code>len</code> characters from byte sequence <code>buf</code>, starting at offset <code>pos</code>, to the given output channel <code>oc</code>. Raise <code>Invalid_argument &quot;output&quot;</code> if <code>pos</code> and <code>len</code> do not designate a valid range of <code>buf</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output", "title": "output", "contents": "output out_channel bytes int int unit    ", "rendered": "<h4 class='item'>let output: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, bytes, int, int) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_bytes", "title": "output_bytes", "contents": "Write the byte sequence on the given output channel.", "rendered": "Write the byte sequence on the given output channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_bytes", "title": "output_bytes", "contents": "output_bytes out_channel bytes unit  ", "rendered": "<h4 class='item'>let output_bytes: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, bytes) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_string", "title": "output_string", "contents": "Write the string on the given output channel.", "rendered": "Write the string on the given output channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_string", "title": "output_string", "contents": "output_string out_channel string unit  ", "rendered": "<h4 class='item'>let output_string: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, string) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_char", "title": "output_char", "contents": "Write the character on the given output channel.", "rendered": "Write the character on the given output channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-output_char", "title": "output_char", "contents": "output_char out_channel char unit  ", "rendered": "<h4 class='item'>let output_char: (<a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a>, char) => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-flush_all", "title": "flush_all", "contents": "Flush all open output channels; ignore errors.", "rendered": "Flush all open output channels; ignore errors.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-flush_all", "title": "flush_all", "contents": "flush_all unit unit ", "rendered": "<h4 class='item'>let flush_all: unit => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-flush", "title": "flush", "contents": "Flush the buffer associated with the given output channel, performing all pending writes on that channel. Interactive programs must be careful about flushing standard output and standard error at the right time.", "rendered": "Flush the buffer associated with the given output channel, performing all pending writes on that channel. Interactive programs must be careful about flushing standard output and standard error at the right time.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-flush", "title": "flush", "contents": "flush out_channel unit ", "rendered": "<h4 class='item'>let flush: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a> => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_out_gen", "title": "open_out_gen", "contents": "open_out_gen mode perm filename opens the named file for writing, as described above. The extra argument mode specify the opening mode. The extra argument perm specifies the file permissions, in case the file must be created. open_out and open_out_bin are special cases of this function.", "rendered": "<code>open_out_gen mode perm filename</code> opens the named file for writing, as described above. The extra argument <code>mode</code> specify the opening mode. The extra argument <code>perm</code> specifies the file permissions, in case the file must be created. open_out and open_out_bin are special cases of this function.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_out_gen", "title": "open_out_gen", "contents": "open_out_gen list open_flag int string out_channel   ", "rendered": "<h4 class='item'>let open_out_gen: (\n  list(<a href=\"./api/Pervasives.html#type-open_flag\">open_flag</a>),\n  int,\n  string\n) => <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_out_bin", "title": "open_out_bin", "contents": "Same as open_out, but the file is opened in binary mode, so that no translation takes place during writes. On operating systems that do not distinguish between text mode and binary mode, this function behaves like open_out.", "rendered": "Same as open_out, but the file is opened in binary mode, so that no translation takes place during writes. On operating systems that do not distinguish between text mode and binary mode, this function behaves like open_out.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_out_bin", "title": "open_out_bin", "contents": "open_out_bin string out_channel ", "rendered": "<h4 class='item'>let open_out_bin: string => <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_out", "title": "open_out", "contents": "Open the named file for writing, and return a new output channel on that file, positionned at the beginning of the file. The file is truncated to zero length if it already exists. It is created if it does not already exists.", "rendered": "Open the named file for writing, and return a new output channel on that file, positionned at the beginning of the file. The file is truncated to zero length if it already exists. It is created if it does not already exists.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-open_out", "title": "open_out", "contents": "open_out string out_channel ", "rendered": "<h4 class='item'>let open_out: string => <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-open_flag", "title": "open_flag", "contents": "Opening modes for open_out_gen and open_in_gen.", "rendered": "Opening modes for open_out_gen and open_in_gen.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-open_flag", "title": "open_flag", "contents": "open_flag ", "rendered": "<h4 class='item'>type open_flag = \n  | Open_rdonly\n  | Open_wronly\n  | Open_append\n  | Open_creat\n  | Open_trunc\n  | Open_excl\n  | Open_binary\n  | Open_text\n  | Open_nonblock\n</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#General-output-functions", "title": "General output functions", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-read_float", "title": "read_float", "contents": "Flush standard output, then read one line from standard input and convert it to a floating-point number. The result is unspecified if the line read is not a valid representation of a floating-point number.", "rendered": "Flush standard output, then read one line from standard input and convert it to a floating-point number. The result is unspecified if the line read is not a valid representation of a floating-point number.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-read_float", "title": "read_float", "contents": "read_float unit float ", "rendered": "<h4 class='item'>let read_float: unit => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-read_int", "title": "read_int", "contents": "Flush standard output, then read one line from standard input and convert it to an integer. Raise Failure &quot;int_of_string&quot; if the line read is not a valid representation of an integer.", "rendered": "Flush standard output, then read one line from standard input and convert it to an integer. Raise <code>Failure &quot;int_of_string&quot;</code> if the line read is not a valid representation of an integer.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-read_int", "title": "read_int", "contents": "read_int unit int ", "rendered": "<h4 class='item'>let read_int: unit => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-read_line", "title": "read_line", "contents": "Flush standard output, then read characters from standard input until a newline character is encountered. Return the string of all characters read, without the newline character at the end.", "rendered": "Flush standard output, then read characters from standard input until a newline character is encountered. Return the string of all characters read, without the newline character at the end.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-read_line", "title": "read_line", "contents": "read_line unit string ", "rendered": "<h4 class='item'>let read_line: unit => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Input-functions-on-standard-input", "title": "Input functions on standard input", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_newline", "title": "prerr_newline", "contents": "Print a newline character on standard error, and flush standard error.", "rendered": "Print a newline character on standard error, and flush standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_newline", "title": "prerr_newline", "contents": "prerr_newline unit unit ", "rendered": "<h4 class='item'>let prerr_newline: unit => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Print a string, followed by a newline character on standard error and flush standard error.", "rendered": "Print a string, followed by a newline character on standard error and flush standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_endline", "title": "prerr_endline", "contents": "prerr_endline string unit ", "rendered": "<h4 class='item'>let prerr_endline: string => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_float", "title": "prerr_float", "contents": "Print a floating-point number, in decimal, on standard error.", "rendered": "Print a floating-point number, in decimal, on standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_float", "title": "prerr_float", "contents": "prerr_float float unit ", "rendered": "<h4 class='item'>let prerr_float: float => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_int", "title": "prerr_int", "contents": "Print an integer, in decimal, on standard error.", "rendered": "Print an integer, in decimal, on standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_int", "title": "prerr_int", "contents": "prerr_int int unit ", "rendered": "<h4 class='item'>let prerr_int: int => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_bytes", "title": "prerr_bytes", "contents": "Print a byte sequence on standard error.", "rendered": "Print a byte sequence on standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_bytes", "title": "prerr_bytes", "contents": "prerr_bytes bytes unit ", "rendered": "<h4 class='item'>let prerr_bytes: bytes => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_string", "title": "prerr_string", "contents": "Print a string on standard error.", "rendered": "Print a string on standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_string", "title": "prerr_string", "contents": "prerr_string string unit ", "rendered": "<h4 class='item'>let prerr_string: string => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_char", "title": "prerr_char", "contents": "Print a character on standard error.", "rendered": "Print a character on standard error.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-prerr_char", "title": "prerr_char", "contents": "prerr_char char unit ", "rendered": "<h4 class='item'>let prerr_char: char => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Output-functions-on-standard-error", "title": "Output functions on standard error", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_newline", "title": "print_newline", "contents": "Print a newline character on standard output, and flush standard output. This can be used to simulate line buffering of standard output.", "rendered": "Print a newline character on standard output, and flush standard output. This can be used to simulate line buffering of standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_newline", "title": "print_newline", "contents": "print_newline unit unit ", "rendered": "<h4 class='item'>let print_newline: unit => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Print a string, followed by a newline character, on standard output and flush standard output.", "rendered": "Print a string, followed by a newline character, on standard output and flush standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_endline", "title": "print_endline", "contents": "print_endline string unit ", "rendered": "<h4 class='item'>let print_endline: string => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_float", "title": "print_float", "contents": "Print a floating-point number, in decimal, on standard output.", "rendered": "Print a floating-point number, in decimal, on standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_float", "title": "print_float", "contents": "print_float float unit ", "rendered": "<h4 class='item'>let print_float: float => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_int", "title": "print_int", "contents": "Print an integer, in decimal, on standard output.", "rendered": "Print an integer, in decimal, on standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_int", "title": "print_int", "contents": "print_int int unit ", "rendered": "<h4 class='item'>let print_int: int => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_bytes", "title": "print_bytes", "contents": "Print a byte sequence on standard output.", "rendered": "Print a byte sequence on standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_bytes", "title": "print_bytes", "contents": "print_bytes bytes unit ", "rendered": "<h4 class='item'>let print_bytes: bytes => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_string", "title": "print_string", "contents": "Print a string on standard output.", "rendered": "Print a string on standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_string", "title": "print_string", "contents": "print_string string unit ", "rendered": "<h4 class='item'>let print_string: string => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_char", "title": "print_char", "contents": "Print a character on standard output.", "rendered": "Print a character on standard output.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-print_char", "title": "print_char", "contents": "print_char char unit ", "rendered": "<h4 class='item'>let print_char: char => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Output-functions-on-standard-output", "title": "Output functions on standard output", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-stderr", "title": "stderr", "contents": "The standard error output for the process.", "rendered": "The standard error output for the process.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-stderr", "title": "stderr", "contents": "stderr out_channel", "rendered": "<h4 class='item'>let stderr: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-stdout", "title": "stdout", "contents": "The standard output for the process.", "rendered": "The standard output for the process.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-stdout", "title": "stdout", "contents": "stdout out_channel", "rendered": "<h4 class='item'>let stdout: <a href=\"./api/Pervasives.html#type-out_channel\">out_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-stdin", "title": "stdin", "contents": "The standard input for the process.", "rendered": "The standard input for the process.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-stdin", "title": "stdin", "contents": "stdin in_channel", "rendered": "<h4 class='item'>let stdin: <a href=\"./api/Pervasives.html#type-in_channel\">in_channel</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-out_channel", "title": "out_channel", "contents": "The type of output channel.", "rendered": "The type of output channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-out_channel", "title": "out_channel", "contents": "out_channel ", "rendered": "<h4 class='item'>type out_channel</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-in_channel", "title": "in_channel", "contents": "The type of input channel.", "rendered": "The type of input channel.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-in_channel", "title": "in_channel", "contents": "in_channel ", "rendered": "<h4 class='item'>type in_channel</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Note: all input/output functions can raise Sys_error when the system calls they invoke fail.", "rendered": "Note: all input/output functions can raise <code>Sys_error</code> when the system calls they invoke fail.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Input-output", "title": "Input/output", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-@", "title": "@", "contents": "List concatenation.", "rendered": "List concatenation.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-@", "title": "@", "contents": "@ list list list  ", "rendered": "<h4 class='item'>let @: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "More list operations are provided in module List.", "rendered": "More list operations are provided in module List.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#List-operations", "title": "List operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-snd", "title": "snd", "contents": "Return the second component of a pair.", "rendered": "Return the second component of a pair.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-snd", "title": "snd", "contents": "snd ", "rendered": "<h4 class='item'>let snd: ('a, 'b) => 'b</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-fst", "title": "fst", "contents": "Return the first component of a pair.", "rendered": "Return the first component of a pair.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-fst", "title": "fst", "contents": "fst ", "rendered": "<h4 class='item'>let fst: ('a, 'b) => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Pair-operations", "title": "Pair operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-float_of_string", "title": "float_of_string", "contents": "Convert the given string to a float. Raise Failure &quot;float_of_string&quot; if the given string is not a valid representation of a float.", "rendered": "Convert the given string to a float. Raise <code>Failure &quot;float_of_string&quot;</code> if the given string is not a valid representation of a float.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-float_of_string", "title": "float_of_string", "contents": "float_of_string string float ", "rendered": "<h4 class='item'>let float_of_string: string => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_float", "title": "string_of_float", "contents": "Return the string representation of a floating-point number.", "rendered": "Return the string representation of a floating-point number.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_float", "title": "string_of_float", "contents": "string_of_float float string ", "rendered": "<h4 class='item'>let string_of_float: float => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-int_of_string", "title": "int_of_string", "contents": "Convert the given string to an integer. The string is read in decimal (by default) or in hexadecimal (if it begins with 0x or 0X), octal (if it begins with 0o or 0O), or binary (if it begins with 0b or 0B). Raise Failure &quot;int_of_string&quot; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int.", "rendered": "Convert the given string to an integer. The string is read in decimal (by default) or in hexadecimal (if it begins with <code>0x</code> or <code>0X</code>), octal (if it begins with <code>0o</code> or <code>0O</code>), or binary (if it begins with <code>0b</code> or <code>0B</code>). Raise <code>Failure &quot;int_of_string&quot;</code> if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type <code>int</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-int_of_string", "title": "int_of_string", "contents": "int_of_string string int ", "rendered": "<h4 class='item'>let int_of_string: string => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_int", "title": "string_of_int", "contents": "string_of_int int string ", "rendered": "<h4 class='item'>let string_of_int: int => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-bool_of_string", "title": "bool_of_string", "contents": "Convert the given string to a boolean. Raise Invalid_argument &quot;bool_of_string&quot; if the string is not &quot;true&quot; or &quot;false&quot;.", "rendered": "Convert the given string to a boolean. Raise <code>Invalid_argument &quot;bool_of_string&quot;</code> if the string is not <code>&quot;true&quot;</code> or <code>&quot;false&quot;</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-bool_of_string", "title": "bool_of_string", "contents": "bool_of_string string bool ", "rendered": "<h4 class='item'>let bool_of_string: string => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_bool", "title": "string_of_bool", "contents": "Return the string representation of a boolean. As the returned values may be shared, the user should not modify them directly.", "rendered": "Return the string representation of a boolean. As the returned values may be shared, the user should not modify them directly.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-string_of_bool", "title": "string_of_bool", "contents": "string_of_bool bool string ", "rendered": "<h4 class='item'>let string_of_bool: bool => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#String-conversion-functions", "title": "String conversion functions", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ignore", "title": "ignore", "contents": "Discard the value of its argument and return (). For instance, ignore(f x) discards the result of the side-effecting function f. It is equivalent to f x; (), except that the latter may generate a compiler warning; writing ignore(f x) instead avoids the warning.", "rendered": "Discard the value of its argument and return <code>()</code>. For instance, <code>ignore(f x)</code> discards the result of the side-effecting function <code>f</code>. It is equivalent to <code>f x; ()</code>, except that the latter may generate a compiler warning; writing <code>ignore(f x)</code> instead avoids the warning.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ignore", "title": "ignore", "contents": "ignore unit ", "rendered": "<h4 class='item'>let ignore: 'a => unit</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Unit-operations", "title": "Unit operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-char_of_int", "title": "char_of_int", "contents": "Return the character with the given ASCII code. Raise Invalid_argument &quot;char_of_int&quot; if the argument is outside the range 0--255.", "rendered": "Return the character with the given ASCII code. Raise <code>Invalid_argument &quot;char_of_int&quot;</code> if the argument is outside the range 0--255.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-char_of_int", "title": "char_of_int", "contents": "char_of_int int char ", "rendered": "<h4 class='item'>let char_of_int: int => char</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-int_of_char", "title": "int_of_char", "contents": "Return the ASCII code of the argument.", "rendered": "Return the ASCII code of the argument.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-int_of_char", "title": "int_of_char", "contents": "int_of_char char int ", "rendered": "<h4 class='item'>let int_of_char: char => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "More character operations are provided in module Char.", "rendered": "More character operations are provided in module Char.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Character-operations", "title": "Character operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "String concatenation.", "rendered": "String concatenation.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-^", "title": "^", "contents": "^ string string string  ", "rendered": "<h4 class='item'>let ^: (string, string) => string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "More string operations are provided in module String.", "rendered": "More string operations are provided in module String.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#String-operations", "title": "String operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-classify_float", "title": "classify_float", "contents": "Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number.", "rendered": "Return the class of the given floating-point number: normal, subnormal, zero, infinite, or not a number.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-classify_float", "title": "classify_float", "contents": "classify_float float fpclass ", "rendered": "<h4 class='item'>let classify_float: float => <a href=\"./api/Pervasives.html#type-fpclass\">fpclass</a></h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-fpclass", "title": "fpclass", "contents": "The five classes of floating-point numbers, as determined by the classify_float function.", "rendered": "The five classes of floating-point numbers, as determined by the classify_float function.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#type-fpclass", "title": "fpclass", "contents": "fpclass ", "rendered": "<h4 class='item'>type fpclass = \n  | FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\n</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-epsilon_float", "title": "epsilon_float", "contents": "epsilon_float float", "rendered": "<h4 class='item'>let epsilon_float: float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-min_float", "title": "min_float", "contents": "min_float float", "rendered": "<h4 class='item'>let min_float: float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-max_float", "title": "max_float", "contents": "max_float float", "rendered": "<h4 class='item'>let max_float: float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-nan", "title": "nan", "contents": "nan float", "rendered": "<h4 class='item'>let nan: float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-neg_infinity", "title": "neg_infinity", "contents": "neg_infinity float", "rendered": "<h4 class='item'>let neg_infinity: float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-infinity", "title": "infinity", "contents": "infinity float", "rendered": "<h4 class='item'>let infinity: float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-int_of_float", "title": "int_of_float", "contents": "Truncate the given floating-point number to an integer. The result is unspecified if the argument is nan or falls outside the range of representable integers.", "rendered": "Truncate the given floating-point number to an integer. The result is unspecified if the argument is <code>nan</code> or falls outside the range of representable integers.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-int_of_float", "title": "int_of_float", "contents": "int_of_float float int ", "rendered": "<h4 class='item'>let int_of_float: float => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-truncate", "title": "truncate", "contents": "Same as int_of_float.", "rendered": "Same as int_of_float.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-truncate", "title": "truncate", "contents": "truncate float int ", "rendered": "<h4 class='item'>let truncate: float => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-float_of_int", "title": "float_of_int", "contents": "Convert an integer to floating-point.", "rendered": "Convert an integer to floating-point.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-float_of_int", "title": "float_of_int", "contents": "float_of_int int float ", "rendered": "<h4 class='item'>let float_of_int: int => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-float", "title": "float", "contents": "Same as float_of_int.", "rendered": "Same as float_of_int.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-float", "title": "float", "contents": "float int float ", "rendered": "<h4 class='item'>let float: int => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-modf", "title": "modf", "contents": "modf f returns the pair of the fractional and integral part of f.", "rendered": "<code>modf f</code> returns the pair of the fractional and integral part of <code>f</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-modf", "title": "modf", "contents": "modf float float float ", "rendered": "<h4 class='item'>let modf: float => (float, float)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ldexp", "title": "ldexp", "contents": "ldexp x n returns x *. 2 ** n.", "rendered": "<code>ldexp x n</code> returns <code>x *. 2 ** n</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ldexp", "title": "ldexp", "contents": "ldexp float int float  ", "rendered": "<h4 class='item'>let ldexp: (float, int) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-frexp", "title": "frexp", "contents": "frexp float float int ", "rendered": "<h4 class='item'>let frexp: float => (float, int)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-mod_float", "title": "mod_float", "contents": "mod_float a b returns the remainder of a with respect to b. The returned value is a -. n *. b, where n is the quotient a /. b rounded towards zero to an integer.", "rendered": "<code>mod_float a b</code> returns the remainder of <code>a</code> with respect to <code>b</code>. The returned value is <code>a -. n *. b</code>, where <code>n</code> is the quotient <code>a /. b</code> rounded towards zero to an integer.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-mod_float", "title": "mod_float", "contents": "mod_float float float float  ", "rendered": "<h4 class='item'>let mod_float: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-copysign", "title": "copysign", "contents": "copysign x y returns a float whose absolute value is that of x and whose sign is that of y. If x is nan, returns nan. If y is nan, returns either x or -. x, but it is not specified which.", "rendered": "<code>copysign x y</code> returns a float whose absolute value is that of <code>x</code> and whose sign is that of <code>y</code>. If <code>x</code> is <code>nan</code>, returns <code>nan</code>. If <code>y</code> is <code>nan</code>, returns either <code>x</code> or <code>-. x</code>, but it is not specified which.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-copysign", "title": "copysign", "contents": "copysign float float float  ", "rendered": "<h4 class='item'>let copysign: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-abs_float", "title": "abs_float", "contents": "abs_float f returns the absolute value of f.", "rendered": "<code>abs_float f</code> returns the absolute value of <code>f</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-abs_float", "title": "abs_float", "contents": "abs_float float float ", "rendered": "<h4 class='item'>let abs_float: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-floor", "title": "floor", "contents": "Round below to an integer value. floor f returns the greatest integer value less than or equal to f. The result is returned as a float.", "rendered": "Round below to an integer value. <code>floor f</code> returns the greatest integer value less than or equal to <code>f</code>. The result is returned as a float.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-floor", "title": "floor", "contents": "floor float float ", "rendered": "<h4 class='item'>let floor: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ceil", "title": "ceil", "contents": "Round above to an integer value. ceil f returns the least integer value greater than or equal to f. The result is returned as a float.", "rendered": "Round above to an integer value. <code>ceil f</code> returns the least integer value greater than or equal to <code>f</code>. The result is returned as a float.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-ceil", "title": "ceil", "contents": "ceil float float ", "rendered": "<h4 class='item'>let ceil: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-tanh", "title": "tanh", "contents": "Hyperbolic tangent. Argument is in radians.", "rendered": "Hyperbolic tangent. Argument is in radians.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-tanh", "title": "tanh", "contents": "tanh float float ", "rendered": "<h4 class='item'>let tanh: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-sinh", "title": "sinh", "contents": "Hyperbolic sine. Argument is in radians.", "rendered": "Hyperbolic sine. Argument is in radians.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-sinh", "title": "sinh", "contents": "sinh float float ", "rendered": "<h4 class='item'>let sinh: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-cosh", "title": "cosh", "contents": "Hyperbolic cosine. Argument is in radians.", "rendered": "Hyperbolic cosine. Argument is in radians.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-cosh", "title": "cosh", "contents": "cosh float float ", "rendered": "<h4 class='item'>let cosh: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-hypot", "title": "hypot", "contents": "hypot x y returns sqrt(x *. x + y *. y), that is, the length of the hypotenuse of a right-angled triangle with sides of length x and y, or, equivalently, the distance of the point (x,y) to origin.", "rendered": "<code>hypot x y</code> returns <code>sqrt(x *. x + y *. y)</code>, that is, the length of the hypotenuse of a right-angled triangle with sides of length <code>x</code> and <code>y</code>, or, equivalently, the distance of the point <code>(x,y)</code> to origin.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-hypot", "title": "hypot", "contents": "hypot float float float  ", "rendered": "<h4 class='item'>let hypot: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-atan2", "title": "atan2", "contents": "atan2 y x returns the arc tangent of y /. x. The signs of x and y are used to determine the quadrant of the result. Result is in radians and is between -pi and pi.", "rendered": "<code>atan2 y x</code> returns the arc tangent of <code>y /. x</code>. The signs of <code>x</code> and <code>y</code> are used to determine the quadrant of the result. Result is in radians and is between <code>-pi</code> and <code>pi</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-atan2", "title": "atan2", "contents": "atan2 float float float  ", "rendered": "<h4 class='item'>let atan2: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-atan", "title": "atan", "contents": "Arc tangent. Result is in radians and is between -pi/2 and pi/2.", "rendered": "Arc tangent. Result is in radians and is between <code>-pi/2</code> and <code>pi/2</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-atan", "title": "atan", "contents": "atan float float ", "rendered": "<h4 class='item'>let atan: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-asin", "title": "asin", "contents": "Arc sine. The argument must fall within the range [-1.0, 1.0]. Result is in radians and is between -pi/2 and pi/2.", "rendered": "Arc sine. The argument must fall within the range <code>[-1.0, 1.0]</code>. Result is in radians and is between <code>-pi/2</code> and <code>pi/2</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-asin", "title": "asin", "contents": "asin float float ", "rendered": "<h4 class='item'>let asin: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-acos", "title": "acos", "contents": "Arc cosine. The argument must fall within the range [-1.0, 1.0]. Result is in radians and is between 0.0 and pi.", "rendered": "Arc cosine. The argument must fall within the range <code>[-1.0, 1.0]</code>. Result is in radians and is between <code>0.0</code> and <code>pi</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-acos", "title": "acos", "contents": "acos float float ", "rendered": "<h4 class='item'>let acos: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-tan", "title": "tan", "contents": "Tangent. Argument is in radians.", "rendered": "Tangent. Argument is in radians.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-tan", "title": "tan", "contents": "tan float float ", "rendered": "<h4 class='item'>let tan: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-sin", "title": "sin", "contents": "Sine. Argument is in radians.", "rendered": "Sine. Argument is in radians.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-sin", "title": "sin", "contents": "sin float float ", "rendered": "<h4 class='item'>let sin: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-cos", "title": "cos", "contents": "Cosine. Argument is in radians.", "rendered": "Cosine. Argument is in radians.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-cos", "title": "cos", "contents": "cos float float ", "rendered": "<h4 class='item'>let cos: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-log1p", "title": "log1p", "contents": "log1p x computes log(1.0 +. x) (natural logarithm), giving numerically-accurate results even if x is close to 0.0.", "rendered": "<code>log1p x</code> computes <code>log(1.0 +. x)</code> (natural logarithm), giving numerically-accurate results even if <code>x</code> is close to <code>0.0</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-log1p", "title": "log1p", "contents": "log1p float float ", "rendered": "<h4 class='item'>let log1p: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-expm1", "title": "expm1", "contents": "expm1 x computes exp x -. 1.0, giving numerically-accurate results even if x is close to 0.0.", "rendered": "<code>expm1 x</code> computes <code>exp x -. 1.0</code>, giving numerically-accurate results even if <code>x</code> is close to <code>0.0</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-expm1", "title": "expm1", "contents": "expm1 float float ", "rendered": "<h4 class='item'>let expm1: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-log10", "title": "log10", "contents": "Base 10 logarithm.", "rendered": "Base 10 logarithm.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-log10", "title": "log10", "contents": "log10 float float ", "rendered": "<h4 class='item'>let log10: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-log", "title": "log", "contents": "Natural logarithm.", "rendered": "Natural logarithm.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-log", "title": "log", "contents": "log float float ", "rendered": "<h4 class='item'>let log: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-exp", "title": "exp", "contents": "Exponential.", "rendered": "Exponential.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-exp", "title": "exp", "contents": "exp float float ", "rendered": "<h4 class='item'>let exp: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-sqrt", "title": "sqrt", "contents": "Square root.", "rendered": "Square root.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-sqrt", "title": "sqrt", "contents": "sqrt float float ", "rendered": "<h4 class='item'>let sqrt: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-**", "title": "**", "contents": "Exponentiation.", "rendered": "Exponentiation.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-**", "title": "**", "contents": "** float float float  ", "rendered": "<h4 class='item'>let **: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-/.", "title": "/.", "contents": "Floating-point division.", "rendered": "Floating-point division.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-/.", "title": "/.", "contents": "/. float float float  ", "rendered": "<h4 class='item'>let /.: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-*.", "title": "*.", "contents": "Floating-point multiplication", "rendered": "Floating-point multiplication", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-*.", "title": "*.", "contents": "*. float float float  ", "rendered": "<h4 class='item'>let *.: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value--.", "title": "-.", "contents": "Floating-point subtraction", "rendered": "Floating-point subtraction", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value--.", "title": "-.", "contents": "-. float float float  ", "rendered": "<h4 class='item'>let -.: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-+.", "title": "+.", "contents": "Floating-point addition", "rendered": "Floating-point addition", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-+.", "title": "+.", "contents": "+. float float float  ", "rendered": "<h4 class='item'>let +.: (float, float) => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~+.", "title": "~+.", "contents": "Unary addition. You can also write +. e instead of ~+. e.", "rendered": "Unary addition. You can also write <code>+. e</code> instead of <code>~+. e</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~+.", "title": "~+.", "contents": "~+. float float ", "rendered": "<h4 class='item'>let ~+.: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~-.", "title": "~-.", "contents": "Unary negation. You can also write -. e instead of ~-. e.", "rendered": "Unary negation. You can also write <code>-. e</code> instead of <code>~-. e</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~-.", "title": "~-.", "contents": "~-. float float ", "rendered": "<h4 class='item'>let ~-.: float => float</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "OCaml&#39;s floating-point numbers follow the IEEE 754 standard, using double precision (64 bits) numbers. Floating-point operations never raise an exception on overflow, underflow, division by zero, etc. Instead, special IEEE numbers are returned as appropriate, such as infinity for 1.0 /. 0.0, neg_infinity for -1.0 /. 0.0, and nan (&#39;not a number&#39;) for 0.0 /. 0.0. These special numbers then propagate through floating-point computations as expected: for instance, 1.0 /. infinity is 0.0, and any arithmetic operation with nan as argument returns nan as result.", "rendered": "OCaml&#39;s floating-point numbers follow the IEEE 754 standard, using double precision (64 bits) numbers. Floating-point operations never raise an exception on overflow, underflow, division by zero, etc. Instead, special IEEE numbers are returned as appropriate, such as <code>infinity</code> for <code>1.0 /. 0.0</code>, <code>neg_infinity</code> for <code>-1.0 /. 0.0</code>, and <code>nan</code> (&#39;not a number&#39;) for <code>0.0 /. 0.0</code>. These special numbers then propagate through floating-point computations as expected: for instance, <code>1.0 /. infinity</code> is <code>0.0</code>, and any arithmetic operation with <code>nan</code> as argument returns <code>nan</code> as result.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Floating-point-arithmetic", "title": "Floating-point arithmetic", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-asr", "title": "asr", "contents": "n asr m shifts n to the right by m bits. This is an arithmetic shift: the sign bit of n is replicated. The result is unspecified if m &lt; 0 or m &gt;= bitsize.", "rendered": "<code>n asr m</code> shifts <code>n</code> to the right by <code>m</code> bits. This is an arithmetic shift: the sign bit of <code>n</code> is replicated. The result is unspecified if <code>m &lt; 0</code> or <code>m &gt;= bitsize</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-asr", "title": "asr", "contents": "asr int int int  ", "rendered": "<h4 class='item'>let asr: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lsr", "title": "lsr", "contents": "n lsr m shifts n to the right by m bits. This is a logical shift: zeroes are inserted regardless of the sign of n. The result is unspecified if m &lt; 0 or m &gt;= bitsize.", "rendered": "<code>n lsr m</code> shifts <code>n</code> to the right by <code>m</code> bits. This is a logical shift: zeroes are inserted regardless of the sign of <code>n</code>. The result is unspecified if <code>m &lt; 0</code> or <code>m &gt;= bitsize</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lsr", "title": "lsr", "contents": "lsr int int int  ", "rendered": "<h4 class='item'>let lsr: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lsl", "title": "lsl", "contents": "n lsl m shifts n to the left by m bits. The result is unspecified if m &lt; 0 or m &gt;= bitsize, where bitsize is 32 on a 32-bit platform and 64 on a 64-bit platform.", "rendered": "<code>n lsl m</code> shifts <code>n</code> to the left by <code>m</code> bits. The result is unspecified if <code>m &lt; 0</code> or <code>m &gt;= bitsize</code>, where <code>bitsize</code> is <code>32</code> on a 32-bit platform and <code>64</code> on a 64-bit platform.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lsl", "title": "lsl", "contents": "lsl int int int  ", "rendered": "<h4 class='item'>let lsl: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lnot", "title": "lnot", "contents": "Bitwise logical negation.", "rendered": "Bitwise logical negation.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lnot", "title": "lnot", "contents": "lnot int int ", "rendered": "<h4 class='item'>let lnot: int => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lxor", "title": "lxor", "contents": "Bitwise logical exclusive or.", "rendered": "Bitwise logical exclusive or.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lxor", "title": "lxor", "contents": "lxor int int int  ", "rendered": "<h4 class='item'>let lxor: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lor", "title": "lor", "contents": "Bitwise logical or.", "rendered": "Bitwise logical or.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-lor", "title": "lor", "contents": "lor int int int  ", "rendered": "<h4 class='item'>let lor: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-land", "title": "land", "contents": "Bitwise logical and.", "rendered": "Bitwise logical and.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-land", "title": "land", "contents": "land int int int  ", "rendered": "<h4 class='item'>let land: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Bitwise-operations", "title": "Bitwise operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-min_int", "title": "min_int", "contents": "The smallest representable integer.", "rendered": "The smallest representable integer.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-min_int", "title": "min_int", "contents": "min_int int", "rendered": "<h4 class='item'>let min_int: int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-max_int", "title": "max_int", "contents": "The greatest representable integer.", "rendered": "The greatest representable integer.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-max_int", "title": "max_int", "contents": "max_int int", "rendered": "<h4 class='item'>let max_int: int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-abs", "title": "abs", "contents": "Return the absolute value of the argument. Note that this may be negative if the argument is min_int.", "rendered": "Return the absolute value of the argument. Note that this may be negative if the argument is <code>min_int</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-abs", "title": "abs", "contents": "abs int int ", "rendered": "<h4 class='item'>let abs: int => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-mod", "title": "mod", "contents": "mod int int int  ", "rendered": "<h4 class='item'>let mod: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-/", "title": "/", "contents": "Integer division. Raise Division_by_zero if the second argument is 0. Integer division rounds the real quotient of its arguments towards zero. More precisely, if x &gt;= 0 and y &gt; 0, x / y is the greatest integer less than or equal to the real quotient of x by y. Moreover, (- x) / y = x / (- y) = - (x / y).", "rendered": "Integer division. Raise <code>Division_by_zero</code> if the second argument is 0. Integer division rounds the real quotient of its arguments towards zero. More precisely, if <code>x &gt;= 0</code> and <code>y &gt; 0</code>, <code>x / y</code> is the greatest integer less than or equal to the real quotient of <code>x</code> by <code>y</code>. Moreover, <code>(- x) / y = x / (- y) = - (x / y)</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-/", "title": "/", "contents": "/ int int int  ", "rendered": "<h4 class='item'>let /: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-*", "title": "*", "contents": "Integer multiplication.", "rendered": "Integer multiplication.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-*", "title": "*", "contents": "* int int int  ", "rendered": "<h4 class='item'>let *: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value--", "title": "-", "contents": "Integer subtraction.", "rendered": "Integer subtraction.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value--", "title": "-", "contents": "- int int int  ", "rendered": "<h4 class='item'>let -: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-+", "title": "+", "contents": "Integer addition.", "rendered": "Integer addition.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-+", "title": "+", "contents": "+ int int int  ", "rendered": "<h4 class='item'>let +: (int, int) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-pred", "title": "pred", "contents": "pred x is x - 1.", "rendered": "<code>pred x</code> is <code>x - 1</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-pred", "title": "pred", "contents": "pred int int ", "rendered": "<h4 class='item'>let pred: int => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-succ", "title": "succ", "contents": "succ x is x + 1.", "rendered": "<code>succ x</code> is <code>x + 1</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-succ", "title": "succ", "contents": "succ int int ", "rendered": "<h4 class='item'>let succ: int => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~+", "title": "~+", "contents": "Unary addition. You can also write + e instead of ~+ e.", "rendered": "Unary addition. You can also write <code>+ e</code> instead of <code>~+ e</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~+", "title": "~+", "contents": "~+ int int ", "rendered": "<h4 class='item'>let ~+: int => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~-", "title": "~-", "contents": "Unary negation. You can also write - e instead of ~- e.", "rendered": "Unary negation. You can also write <code>- e</code> instead of <code>~- e</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-~-", "title": "~-", "contents": "~- int int ", "rendered": "<h4 class='item'>let ~-: int => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "Integers are 31 bits wide (or 63 bits on 64-bit processors). All operations are taken modulo 2Superscript (or 2Superscript). They do not fail on overflow.", "rendered": "Integers are 31 bits wide (or 63 bits on 64-bit processors). All operations are taken modulo 2Superscript (or 2Superscript). They do not fail on overflow.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Integer-arithmetic", "title": "Integer arithmetic", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-@@", "title": "@@", "contents": "Application operator: g @@ f @@ x is exactly equivalent to g (f (x)).", "rendered": "Application operator: <code>g @@ f @@ x</code> is exactly equivalent to <code>g (f (x))</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-@@", "title": "@@", "contents": "@@   ", "rendered": "<h4 class='item'>let @@: ('a => 'b, 'a) => 'b</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-|>", "title": "|>", "contents": "Reverse-application operator: x |&gt; f |&gt; g is exactly equivalent to g (f (x)).", "rendered": "Reverse-application operator: <code>x |&gt; f |&gt; g</code> is exactly equivalent to <code>g (f (x))</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-|>", "title": "|>", "contents": "|>   ", "rendered": "<h4 class='item'>let |>: ('a, 'a => 'b) => 'b</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Composition-operators", "title": "Composition operators", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__POS_OF__", "title": "__POS_OF__", "contents": "__LINE__ expr returns a pair (line, expr), where line is the line number at which the expression expr appears in the file currently being parsed by the compiler.", "rendered": "<code>__LINE__ expr</code> returns a pair <code>(line, expr)</code>, where <code>line</code> is the line number at which the expression <code>expr</code> appears in the file currently being parsed by the compiler.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__POS_OF__", "title": "__POS_OF__", "contents": "__POS_OF__ string int int int ", "rendered": "<h4 class='item'>let __POS_OF__: 'a => ((string, int, int, int), 'a)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LINE_OF__", "title": "__LINE_OF__", "contents": "__LOC_OF__ expr returns a pair (loc, expr) where loc is the location of expr in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "rendered": "<code>__LOC_OF__ expr</code> returns a pair <code>(loc, expr)</code> where <code>loc</code> is the location of <code>expr</code> in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LINE_OF__", "title": "__LINE_OF__", "contents": "__LINE_OF__ int ", "rendered": "<h4 class='item'>let __LINE_OF__: 'a => (int, 'a)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LOC_OF__", "title": "__LOC_OF__", "contents": "__LOC_OF__ expr returns a pair (loc, expr) where loc is the location of expr in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "rendered": "<code>__LOC_OF__ expr</code> returns a pair <code>(loc, expr)</code> where <code>loc</code> is the location of <code>expr</code> in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LOC_OF__", "title": "__LOC_OF__", "contents": "__LOC_OF__ string ", "rendered": "<h4 class='item'>let __LOC_OF__: 'a => (string, 'a)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__POS__", "title": "__POS__", "contents": "__MODULE__ returns the module name of the file being parsed by the compiler.", "rendered": "<code>__MODULE__</code> returns the module name of the file being parsed by the compiler.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__POS__", "title": "__POS__", "contents": "__POS__ string int int int", "rendered": "<h4 class='item'>let __POS__: (string, int, int, int)</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__MODULE__", "title": "__MODULE__", "contents": "__LINE__ returns the line number at which this expression appears in the file currently being parsed by the compiler.", "rendered": "<code>__LINE__</code> returns the line number at which this expression appears in the file currently being parsed by the compiler.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__MODULE__", "title": "__MODULE__", "contents": "__MODULE__ string", "rendered": "<h4 class='item'>let __MODULE__: string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LINE__", "title": "__LINE__", "contents": "__FILE__ returns the name of the file currently being parsed by the compiler.", "rendered": "<code>__FILE__</code> returns the name of the file currently being parsed by the compiler.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LINE__", "title": "__LINE__", "contents": "__LINE__ int", "rendered": "<h4 class='item'>let __LINE__: int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__FILE__", "title": "__FILE__", "contents": "__LOC__ returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "rendered": "<code>__LOC__</code> returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__FILE__", "title": "__FILE__", "contents": "__FILE__ string", "rendered": "<h4 class='item'>let __FILE__: string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LOC__", "title": "__LOC__", "contents": "__LOC__ returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "rendered": "<code>__LOC__</code> returns the location at which this expression appears in the file currently being parsed by the compiler, with the standard error format of OCaml: &quot;File %S, line %d, characters %d-%d&quot;.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-__LOC__", "title": "__LOC__", "contents": "__LOC__ string", "rendered": "<h4 class='item'>let __LOC__: string</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Debugging", "title": "Debugging", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-or", "title": "or", "contents": "( || ) should be used instead.", "rendered": "( || ) should be used instead.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-or", "title": "or", "contents": "Deprecated: ( || ) should be used instead.\n\n", "rendered": "Deprecated: <p>( || ) should be used instead.</p>\n", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-or", "title": "or", "contents": "or bool bool bool  ", "rendered": "<h4 class='item'>let or: (bool, bool) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-||", "title": "||", "contents": "The boolean &#39;or&#39;. Evaluation is sequential, left-to-right: in e1 || e2, e1 is evaluated first, and if it returns true, e2 is not evaluated at all.", "rendered": "The boolean &#39;or&#39;. Evaluation is sequential, left-to-right: in <code>e1 || e2</code>, <code>e1</code> is evaluated first, and if it returns <code>true</code>, <code>e2</code> is not evaluated at all.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-||", "title": "||", "contents": "|| bool bool bool  ", "rendered": "<h4 class='item'>let ||: (bool, bool) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-&", "title": "&", "contents": "( &amp;&amp; ) should be used instead.", "rendered": "( &amp;&amp; ) should be used instead.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-&", "title": "&", "contents": "Deprecated: ( &amp;&amp; ) should be used instead.\n\n", "rendered": "Deprecated: <p>( &amp;&amp; ) should be used instead.</p>\n", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-&", "title": "&", "contents": "& bool bool bool  ", "rendered": "<h4 class='item'>let &: (bool, bool) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-&&", "title": "&&", "contents": "The boolean &#39;and&#39;. Evaluation is sequential, left-to-right: in e1 &amp;&amp; e2, e1 is evaluated first, and if it returns false, e2 is not evaluated at all.", "rendered": "The boolean &#39;and&#39;. Evaluation is sequential, left-to-right: in <code>e1 &amp;&amp; e2</code>, <code>e1</code> is evaluated first, and if it returns <code>false</code>, <code>e2</code> is not evaluated at all.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-&&", "title": "&&", "contents": "&& bool bool bool  ", "rendered": "<h4 class='item'>let &&: (bool, bool) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-not", "title": "not", "contents": "The boolean negation.", "rendered": "The boolean negation.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-not", "title": "not", "contents": "not bool bool ", "rendered": "<h4 class='item'>let not: bool => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Boolean-operations", "title": "Boolean operations", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-!=", "title": "!=", "contents": "Negation of ( == ).", "rendered": "Negation of ( == ).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-!=", "title": "!=", "contents": "!= bool  ", "rendered": "<h4 class='item'>let !=: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-==", "title": "==", "contents": "e1 == e2 tests for physical equality of e1 and e2. On mutable types such as references, arrays, byte sequences, records with mutable fields and objects with mutable instance variables, e1 == e2 is true if and only if physical modification of e1 also affects e2. On non-mutable types, the behavior of ( == ) is implementation-dependent; however, it is guaranteed that e1 == e2 implies compare e1 e2 = 0.", "rendered": "<code>e1 == e2</code> tests for physical equality of <code>e1</code> and <code>e2</code>. On mutable types such as references, arrays, byte sequences, records with mutable fields and objects with mutable instance variables, <code>e1 == e2</code> is true if and only if physical modification of <code>e1</code> also affects <code>e2</code>. On non-mutable types, the behavior of <code>( == )</code> is implementation-dependent; however, it is guaranteed that <code>e1 == e2</code> implies <code>compare e1 e2 = 0</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-==", "title": "==", "contents": "== bool  ", "rendered": "<h4 class='item'>let ==: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-max", "title": "max", "contents": "max  ", "rendered": "<h4 class='item'>let max: ('a, 'a) => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-min", "title": "min", "contents": "min  ", "rendered": "<h4 class='item'>let min: ('a, 'a) => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-compare", "title": "compare", "contents": "The compare function can be used as the comparison function required by the Make and Make functors, as well as the sort and sort functions.", "rendered": "The <code>compare</code> function can be used as the comparison function required by the Make and Make functors, as well as the sort and sort functions.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-compare", "title": "compare", "contents": "compare applied to functional values may raise Invalid_argument. compare applied to cyclic structures may not terminate.", "rendered": "<code>compare</code> applied to functional values may raise <code>Invalid_argument</code>. <code>compare</code> applied to cyclic structures may not terminate.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-compare", "title": "compare", "contents": "compare x y returns 0 if x is equal to y, a negative integer if x is less than y, and a positive integer if x is greater than y. The ordering implemented by compare is compatible with the comparison predicates =, &lt; and &gt; defined above, with one difference on the treatment of the float value nan. Namely, the comparison predicates treat nan as different from any other float value, including itself; while compare treats nan as equal to itself and less than any other float value. This treatment of nan ensures that compare defines a total ordering relation.", "rendered": "<code>compare x y</code> returns <code>0</code> if <code>x</code> is equal to <code>y</code>, a negative integer if <code>x</code> is less than <code>y</code>, and a positive integer if <code>x</code> is greater than <code>y</code>. The ordering implemented by <code>compare</code> is compatible with the comparison predicates <code>=</code>, <code>&lt;</code> and <code>&gt;</code> defined above, with one difference on the treatment of the float value nan. Namely, the comparison predicates treat <code>nan</code> as different from any other float value, including itself; while <code>compare</code> treats <code>nan</code> as equal to itself and less than any other float value. This treatment of <code>nan</code> ensures that <code>compare</code> defines a total ordering relation.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-compare", "title": "compare", "contents": "compare int  ", "rendered": "<h4 class='item'>let compare: ('a, 'a) => int</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value->=", "title": ">=", "contents": "Structural ordering functions. These functions coincide with the usual orderings over integers, characters, strings, byte sequences and floating-point numbers, and extend them to a total ordering over all types. The ordering is compatible with ( = ). As in the case of ( = ), mutable structures are compared by contents. Comparison between functional values raises Invalid_argument. Comparison between cyclic structures may not terminate.", "rendered": "Structural ordering functions. These functions coincide with the usual orderings over integers, characters, strings, byte sequences and floating-point numbers, and extend them to a total ordering over all types. The ordering is compatible with <code>( = )</code>. As in the case of <code>( = )</code>, mutable structures are compared by contents. Comparison between functional values raises <code>Invalid_argument</code>. Comparison between cyclic structures may not terminate.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value->=", "title": ">=", "contents": ">= bool  ", "rendered": "<h4 class='item'>let >=: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-<=", "title": "<=", "contents": "See ( &gt;= ).", "rendered": "See ( &gt;= ).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-<=", "title": "<=", "contents": "<= bool  ", "rendered": "<h4 class='item'>let <=: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value->", "title": ">", "contents": "See ( &gt;= ).", "rendered": "See ( &gt;= ).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value->", "title": ">", "contents": "> bool  ", "rendered": "<h4 class='item'>let >: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-<", "title": "<", "contents": "See ( &gt;= ).", "rendered": "See ( &gt;= ).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-<", "title": "<", "contents": "< bool  ", "rendered": "<h4 class='item'>let <: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-<>", "title": "<>", "contents": "Negation of ( = ).", "rendered": "Negation of ( = ).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-<>", "title": "<>", "contents": "<> bool  ", "rendered": "<h4 class='item'>let <>: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-=", "title": "=", "contents": "e1 = e2 tests for structural equality of e1 and e2. Mutable structures (e.g. references and arrays) are equal if and only if their current contents are structurally equal, even if the two mutable objects are not the same physical object. Equality between functional values raises Invalid_argument. Equality between cyclic data structures may not terminate.", "rendered": "<code>e1 = e2</code> tests for structural equality of <code>e1</code> and <code>e2</code>. Mutable structures (e.g. references and arrays) are equal if and only if their current contents are structurally equal, even if the two mutable objects are not the same physical object. Equality between functional values raises <code>Invalid_argument</code>. Equality between cyclic data structures may not terminate.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-=", "title": "=", "contents": "= bool  ", "rendered": "<h4 class='item'>let =: ('a, 'a) => bool</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Comparisons", "title": "Comparisons", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-failwith", "title": "failwith", "contents": "Raise exception Failure with the given string.", "rendered": "Raise exception <code>Failure</code> with the given string.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-failwith", "title": "failwith", "contents": "failwith string ", "rendered": "<h4 class='item'>let failwith: string => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-invalid_arg", "title": "invalid_arg", "contents": "Raise exception Invalid_argument with the given string.", "rendered": "Raise exception <code>Invalid_argument</code> with the given string.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-invalid_arg", "title": "invalid_arg", "contents": "invalid_arg string ", "rendered": "<h4 class='item'>let invalid_arg: string => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-raise_notrace", "title": "raise_notrace", "contents": "A faster version raise which does not record the backtrace.", "rendered": "A faster version <code>raise</code> which does not record the backtrace.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-raise_notrace", "title": "raise_notrace", "contents": "raise_notrace exn ", "rendered": "<h4 class='item'>let raise_notrace: exn => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-raise", "title": "raise", "contents": "Raise the given exception value", "rendered": "Raise the given exception value", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#value-raise", "title": "raise", "contents": "raise exn ", "rendered": "<h4 class='item'>let raise: exn => 'a</h4>", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html#Exceptions", "title": "Exceptions", "contents": "", "rendered": "", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "This module is automatically opened at the beginning of each compilation. All components of this module can therefore be referred by their short name, without prefixing them by Pervasives.", "rendered": "This module is automatically opened at the beginning of each compilation. All components of this module can therefore be referred by their short name, without prefixing them by <code>Pervasives</code>.", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "This module provides the basic operations over the built-in types (numbers, booleans, byte sequences, strings, exceptions, references, lists, arrays, input-output channels, ...).", "rendered": "This module provides the basic operations over the built-in types (numbers, booleans, byte sequences, strings, exceptions, references, lists, arrays, input-output channels, ...).", "breadcrumb": "Pervasives"},
{"href": "./api/Pervasives.html", "title": "Pervasives", "contents": "The initially opened module.", "rendered": "The initially opened module.", "breadcrumb": "Pervasives"},
{"href": "./api/CamlinternalLazy.html#value-force_val", "title": "force_val", "contents": "force_val lazy_t ", "rendered": "<h4 class='item'>let force_val: lazy_t('a) => 'a</h4>", "breadcrumb": "CamlinternalLazy"},
{"href": "./api/CamlinternalLazy.html#value-force", "title": "force", "contents": "force lazy_t ", "rendered": "<h4 class='item'>let force: lazy_t('a) => 'a</h4>", "breadcrumb": "CamlinternalLazy"},
{"href": "./api/CamlinternalLazy.html#value-force_val_lazy_block", "title": "force_val_lazy_block", "contents": "force_val_lazy_block lazy_t ", "rendered": "<h4 class='item'>let force_val_lazy_block: lazy_t('a) => 'a</h4>", "breadcrumb": "CamlinternalLazy"},
{"href": "./api/CamlinternalLazy.html#value-force_lazy_block", "title": "force_lazy_block", "contents": "force_lazy_block lazy_t ", "rendered": "<h4 class='item'>let force_lazy_block: lazy_t('a) => 'a</h4>", "breadcrumb": "CamlinternalLazy"},
{"href": "./api/CamlinternalLazy.html", "title": "CamlinternalLazy", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CamlinternalLazy"},
{"href": "./api/CamlinternalLazy.html", "title": "CamlinternalLazy", "contents": "Run-time support for lazy values. All functions in this module are for system use only, not for the casual user.", "rendered": "Run-time support for lazy values. All functions in this module are for system use only, not for the casual user.", "breadcrumb": "CamlinternalLazy"},
{"href": "./api/Int32.html#value-format", "title": "format", "contents": "Do not use this deprecated function. Instead, used sprintf with a %l... format.", "rendered": "Do not use this deprecated function. Instead, used sprintf with a <code>%l...</code> format.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-format", "title": "format", "contents": "format string int32 string  ", "rendered": "<h4 class='item'>let format: (string, int32) => string</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#Deprecated-functions", "title": "Deprecated functions", "contents": "", "rendered": "", "breadcrumb": "Int32"},
{"href": "./api/Int32.html", "title": "Int32", "contents": "/*", "rendered": "/*", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-compare", "title": "compare", "contents": "The comparison function for 32-bit integers, with the same specification as compare. Along with the type t, this function compare allows the module Int32 to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for 32-bit integers, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Int32</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Int32.html#type-t\">t</a>, <a href=\"./api/Int32.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#type-t", "title": "t", "contents": "An alias for the type of 32-bit integers.", "rendered": "An alias for the type of 32-bit integers.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#type-t", "title": "t", "contents": "t int32", "rendered": "<h4 class='item'>type t = int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-float_of_bits", "title": "float_of_bits", "contents": "Return the floating-point number whose internal representation, according to the IEEE 754 floating-point &#39;single format&#39; bit layout, is the given int32.", "rendered": "Return the floating-point number whose internal representation, according to the IEEE 754 floating-point &#39;single format&#39; bit layout, is the given <code>int32</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-float_of_bits", "title": "float_of_bits", "contents": "float_of_bits int32 float ", "rendered": "<h4 class='item'>let float_of_bits: int32 => float</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-bits_of_float", "title": "bits_of_float", "contents": "Return the internal representation of the given float according to the IEEE 754 floating-point &#39;single format&#39; bit layout. Bit 31 of the result represents the sign of the float; bits 30 to 23 represent the (biased) exponent; bits 22 to 0 represent the mantissa.", "rendered": "Return the internal representation of the given float according to the IEEE 754 floating-point &#39;single format&#39; bit layout. Bit 31 of the result represents the sign of the float; bits 30 to 23 represent the (biased) exponent; bits 22 to 0 represent the mantissa.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-bits_of_float", "title": "bits_of_float", "contents": "bits_of_float float int32 ", "rendered": "<h4 class='item'>let bits_of_float: float => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-to_string", "title": "to_string", "contents": "Return the string representation of its argument, in signed decimal.", "rendered": "Return the string representation of its argument, in signed decimal.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-to_string", "title": "to_string", "contents": "to_string int32 string ", "rendered": "<h4 class='item'>let to_string: int32 => string</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-of_string", "title": "of_string", "contents": "Convert the given string to a 32-bit integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with 0x, 0o or 0b respectively. Raise Failure &quot;int_of_string&quot; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type int32.", "rendered": "Convert the given string to a 32-bit integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with <code>0x</code>, <code>0o</code> or <code>0b</code> respectively. Raise <code>Failure &quot;int_of_string&quot;</code> if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type <code>int32</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-of_string", "title": "of_string", "contents": "of_string string int32 ", "rendered": "<h4 class='item'>let of_string: string => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-to_float", "title": "to_float", "contents": "Convert the given 32-bit integer to a floating-point number.", "rendered": "Convert the given 32-bit integer to a floating-point number.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-to_float", "title": "to_float", "contents": "to_float int32 float ", "rendered": "<h4 class='item'>let to_float: int32 => float</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-of_float", "title": "of_float", "contents": "Convert the given floating-point number to a 32-bit integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [min_int, max_int].", "rendered": "Convert the given floating-point number to a 32-bit integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [min_int, max_int].", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-of_float", "title": "of_float", "contents": "of_float float int32 ", "rendered": "<h4 class='item'>let of_float: float => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-to_int", "title": "to_int", "contents": "Convert the given 32-bit integer (type int32) to an integer (type int). On 32-bit platforms, the 32-bit integer is taken modulo 2Superscript, i.e. the high-order bit is lost during the conversion. On 64-bit platforms, the conversion is exact.", "rendered": "Convert the given 32-bit integer (type <code>int32</code>) to an integer (type <code>int</code>). On 32-bit platforms, the 32-bit integer is taken modulo 2Superscript, i.e. the high-order bit is lost during the conversion. On 64-bit platforms, the conversion is exact.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-to_int", "title": "to_int", "contents": "to_int int32 int ", "rendered": "<h4 class='item'>let to_int: int32 => int</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-of_int", "title": "of_int", "contents": "Convert the given integer (type int) to a 32-bit integer (type int32).", "rendered": "Convert the given integer (type <code>int</code>) to a 32-bit integer (type <code>int32</code>).", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-of_int", "title": "of_int", "contents": "of_int int int32 ", "rendered": "<h4 class='item'>let of_int: int => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-shift_right_logical", "title": "shift_right_logical", "contents": "Int32.shift_right_logical x y shifts x to the right by y bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of x. The result is unspecified if y &lt; 0 or y &gt;= 32.", "rendered": "<code>Int32.shift_right_logical x y</code> shifts <code>x</code> to the right by <code>y</code> bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of <code>x</code>. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= 32</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-shift_right_logical", "title": "shift_right_logical", "contents": "shift_right_logical int32 int int32  ", "rendered": "<h4 class='item'>let shift_right_logical: (int32, int) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-shift_right", "title": "shift_right", "contents": "Int32.shift_right x y shifts x to the right by y bits. This is an arithmetic shift: the sign bit of x is replicated and inserted in the vacated bits. The result is unspecified if y &lt; 0 or y &gt;= 32.", "rendered": "<code>Int32.shift_right x y</code> shifts <code>x</code> to the right by <code>y</code> bits. This is an arithmetic shift: the sign bit of <code>x</code> is replicated and inserted in the vacated bits. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= 32</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-shift_right", "title": "shift_right", "contents": "shift_right int32 int int32  ", "rendered": "<h4 class='item'>let shift_right: (int32, int) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-shift_left", "title": "shift_left", "contents": "Int32.shift_left x y shifts x to the left by y bits. The result is unspecified if y &lt; 0 or y &gt;= 32.", "rendered": "<code>Int32.shift_left x y</code> shifts <code>x</code> to the left by <code>y</code> bits. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= 32</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-shift_left", "title": "shift_left", "contents": "shift_left int32 int int32  ", "rendered": "<h4 class='item'>let shift_left: (int32, int) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-lognot", "title": "lognot", "contents": "Bitwise logical negation", "rendered": "Bitwise logical negation", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-lognot", "title": "lognot", "contents": "lognot int32 int32 ", "rendered": "<h4 class='item'>let lognot: int32 => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-logxor", "title": "logxor", "contents": "Bitwise logical exclusive or.", "rendered": "Bitwise logical exclusive or.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-logxor", "title": "logxor", "contents": "logxor int32 int32 int32  ", "rendered": "<h4 class='item'>let logxor: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-logor", "title": "logor", "contents": "Bitwise logical or.", "rendered": "Bitwise logical or.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-logor", "title": "logor", "contents": "logor int32 int32 int32  ", "rendered": "<h4 class='item'>let logor: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-logand", "title": "logand", "contents": "Bitwise logical and.", "rendered": "Bitwise logical and.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-logand", "title": "logand", "contents": "logand int32 int32 int32  ", "rendered": "<h4 class='item'>let logand: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-min_int", "title": "min_int", "contents": "The smallest representable 32-bit integer, -2Superscript.", "rendered": "The smallest representable 32-bit integer, -2Superscript.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-min_int", "title": "min_int", "contents": "min_int int32", "rendered": "<h4 class='item'>let min_int: int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-max_int", "title": "max_int", "contents": "The greatest representable 32-bit integer, 2Superscript - 1.", "rendered": "The greatest representable 32-bit integer, 2Superscript - 1.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-max_int", "title": "max_int", "contents": "max_int int32", "rendered": "<h4 class='item'>let max_int: int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-abs", "title": "abs", "contents": "Return the absolute value of its argument.", "rendered": "Return the absolute value of its argument.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-abs", "title": "abs", "contents": "abs int32 int32 ", "rendered": "<h4 class='item'>let abs: int32 => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-pred", "title": "pred", "contents": "Predecessor. Int32.pred x is Int32.sub x Int32.one.", "rendered": "Predecessor. <code>Int32.pred x</code> is <code>Int32.sub x Int32.one</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-pred", "title": "pred", "contents": "pred int32 int32 ", "rendered": "<h4 class='item'>let pred: int32 => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-succ", "title": "succ", "contents": "Successor. Int32.succ x is Int32.add x Int32.one.", "rendered": "Successor. <code>Int32.succ x</code> is <code>Int32.add x Int32.one</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-succ", "title": "succ", "contents": "succ int32 int32 ", "rendered": "<h4 class='item'>let succ: int32 => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-rem", "title": "rem", "contents": "Integer remainder. If y is not zero, the result of Int32.rem x y satisfies the following property: x = Int32.add (Int32.mul (Int32.div x y) y) (Int32.rem x y). If y = 0, Int32.rem x y raises Division_by_zero.", "rendered": "Integer remainder. If <code>y</code> is not zero, the result of <code>Int32.rem x y</code> satisfies the following property: <code>x = Int32.add (Int32.mul (Int32.div x y) y) (Int32.rem x y)</code>. If <code>y = 0</code>, <code>Int32.rem x y</code> raises <code>Division_by_zero</code>.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-rem", "title": "rem", "contents": "rem int32 int32 int32  ", "rendered": "<h4 class='item'>let rem: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-div", "title": "div", "contents": "Integer division. Raise Division_by_zero if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for (/).", "rendered": "Integer division. Raise <code>Division_by_zero</code> if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for (/).", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-div", "title": "div", "contents": "div int32 int32 int32  ", "rendered": "<h4 class='item'>let div: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-mul", "title": "mul", "contents": "Multiplication.", "rendered": "Multiplication.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-mul", "title": "mul", "contents": "mul int32 int32 int32  ", "rendered": "<h4 class='item'>let mul: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-sub", "title": "sub", "contents": "Subtraction.", "rendered": "Subtraction.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-sub", "title": "sub", "contents": "sub int32 int32 int32  ", "rendered": "<h4 class='item'>let sub: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-add", "title": "add", "contents": "Addition.", "rendered": "Addition.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-add", "title": "add", "contents": "add int32 int32 int32  ", "rendered": "<h4 class='item'>let add: (int32, int32) => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-neg", "title": "neg", "contents": "Unary negation.", "rendered": "Unary negation.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-neg", "title": "neg", "contents": "neg int32 int32 ", "rendered": "<h4 class='item'>let neg: int32 => int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-minus_one", "title": "minus_one", "contents": "The 32-bit integer -1.", "rendered": "The 32-bit integer -1.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-minus_one", "title": "minus_one", "contents": "minus_one int32", "rendered": "<h4 class='item'>let minus_one: int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-one", "title": "one", "contents": "The 32-bit integer 1.", "rendered": "The 32-bit integer 1.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-one", "title": "one", "contents": "one int32", "rendered": "<h4 class='item'>let one: int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-zero", "title": "zero", "contents": "The 32-bit integer 0.", "rendered": "The 32-bit integer 0.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html#value-zero", "title": "zero", "contents": "zero int32", "rendered": "<h4 class='item'>let zero: int32</h4>", "breadcrumb": "Int32"},
{"href": "./api/Int32.html", "title": "Int32", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Int32"},
{"href": "./api/Int32.html", "title": "Int32", "contents": "Performance notice: values of type int32 occupy more memory space than values of type int, and arithmetic operations on int32 are generally slower than those on int. Use int32 only when the application requires exact 32-bit arithmetic.", "rendered": "Performance notice: values of type <code>int32</code> occupy more memory space than values of type <code>int</code>, and arithmetic operations on <code>int32</code> are generally slower than those on <code>int</code>. Use <code>int32</code> only when the application requires exact 32-bit arithmetic.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html", "title": "Int32", "contents": "This module provides operations on the type int32 of signed 32-bit integers. Unlike the built-in int type, the type int32 is guaranteed to be exactly 32-bit wide on all platforms. All arithmetic operations over int32 are taken modulo 2Superscript.", "rendered": "This module provides operations on the type <code>int32</code> of signed 32-bit integers. Unlike the built-in <code>int</code> type, the type <code>int32</code> is guaranteed to be exactly 32-bit wide on all platforms. All arithmetic operations over <code>int32</code> are taken modulo 2Superscript.", "breadcrumb": "Int32"},
{"href": "./api/Int32.html", "title": "Int32", "contents": "32-bit integers.", "rendered": "32-bit integers.", "breadcrumb": "Int32"},
{"href": "./api/Printexc.html#value-exn_slot_name", "title": "exn_slot_name", "contents": "Printexc.exn_slot_id exn returns the internal name of the constructor used to create the exception value exn.", "rendered": "<code>Printexc.exn_slot_id exn</code> returns the internal name of the constructor used to create the exception value <code>exn</code>.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-exn_slot_name", "title": "exn_slot_name", "contents": "exn_slot_name exn string ", "rendered": "<h4 class='item'>let exn_slot_name: exn => string</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-exn_slot_id", "title": "exn_slot_id", "contents": "Printexc.exn_slot_id returns an integer which uniquely identifies the constructor used to create the exception value exn (in the current runtime).", "rendered": "<code>Printexc.exn_slot_id</code> returns an integer which uniquely identifies the constructor used to create the exception value <code>exn</code> (in the current runtime).", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-exn_slot_id", "title": "exn_slot_id", "contents": "exn_slot_id exn int ", "rendered": "<h4 class='item'>let exn_slot_id: exn => int</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#Exception-slots", "title": "Exception slots", "contents": "", "rendered": "", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-convert_raw_backtrace_slot", "title": "convert_raw_backtrace_slot", "contents": "Extracts the user-friendly backtrace_slot from a low-level raw_backtrace_slot.", "rendered": "Extracts the user-friendly <code>backtrace_slot</code> from a low-level <code>raw_backtrace_slot</code>.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-convert_raw_backtrace_slot", "title": "convert_raw_backtrace_slot", "contents": "convert_raw_backtrace_slot raw_backtrace_slot backtrace_slot ", "rendered": "<h4 class='item'>let convert_raw_backtrace_slot: <a href=\"./api/Printexc.html#type-raw_backtrace_slot\">raw_backtrace_slot</a> => <a href=\"./api/Printexc.html#type-backtrace_slot\">backtrace_slot</a></h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_raw_backtrace_slot", "title": "get_raw_backtrace_slot", "contents": "get_slot bckt pos returns the slot in position pos in the backtrace bckt.", "rendered": "<code>get_slot bckt pos</code> returns the slot in position <code>pos</code> in the backtrace <code>bckt</code>.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_raw_backtrace_slot", "title": "get_raw_backtrace_slot", "contents": "get_raw_backtrace_slot raw_backtrace int raw_backtrace_slot  ", "rendered": "<h4 class='item'>let get_raw_backtrace_slot: (\n  <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a>,\n  int\n) => <a href=\"./api/Printexc.html#type-raw_backtrace_slot\">raw_backtrace_slot</a></h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-raw_backtrace_length", "title": "raw_backtrace_length", "contents": "raw_backtrace_length bckt returns the number of slots in the backtrace bckt.", "rendered": "<code>raw_backtrace_length bckt</code> returns the number of slots in the backtrace <code>bckt</code>.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-raw_backtrace_length", "title": "raw_backtrace_length", "contents": "raw_backtrace_length raw_backtrace int ", "rendered": "<h4 class='item'>let raw_backtrace_length: <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a> => int</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace_slot", "title": "raw_backtrace_slot", "contents": "Elements of this type can still be compared and hashed: when two elements are equal, then they represent the same source location (the converse is not necessarily true in presence of inlining, for example).", "rendered": "Elements of this type can still be compared and hashed: when two elements are equal, then they represent the same source location (the converse is not necessarily true in presence of inlining, for example).", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace_slot", "title": "raw_backtrace_slot", "contents": "This type allows direct access to raw backtrace slots, without any conversion in an OCaml-usable data-structure. Being process-specific, they must absolutely not be marshalled, and are unsafe to use for this reason (marshalling them may not fail, but un-marshalling and using the result will result in undefined behavior).", "rendered": "This type allows direct access to raw backtrace slots, without any conversion in an OCaml-usable data-structure. Being process-specific, they must absolutely not be marshalled, and are unsafe to use for this reason (marshalling them may not fail, but un-marshalling and using the result will result in undefined behavior).", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace_slot", "title": "raw_backtrace_slot", "contents": "raw_backtrace_slot ", "rendered": "<h4 class='item'>type raw_backtrace_slot</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#Raw-backtrace-slots", "title": "Raw backtrace slots", "contents": "", "rendered": "", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.format", "title": "Slot.format", "contents": "Whole-backtrace printing functions also skip some uninformative slots; in that case, format pos slot returns None.", "rendered": "Whole-backtrace printing functions also skip some uninformative slots; in that case, <code>format pos slot</code> returns <code>None</code>.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.format", "title": "Slot.format", "contents": "format pos slot returns the string representation of slot as raw_backtrace_to_string would format it, assuming it is the pos-th element of the backtrace: the 0-th element is pretty-printed differently than the others.", "rendered": "<code>format pos slot</code> returns the string representation of <code>slot</code> as <code>raw_backtrace_to_string</code> would format it, assuming it is the <code>pos</code>-th element of the backtrace: the <code>0</code>-th element is pretty-printed differently than the others.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.format", "title": "Slot.format", "contents": "format int t option string  ", "rendered": "<h4 class='item'>let format: (int, <a href=\"./api/Printexc.html#type-Slot.t\">t</a>) => option(string)</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.location", "title": "Slot.location", "contents": "the slot corresponds to a part of the program that has not been compiled with debug information (-g)", "rendered": "the slot corresponds to a part of the program that has not been compiled with debug information (<code>-g</code>)", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.location", "title": "Slot.location", "contents": "the slot corresponds to a compiler-inserted raise", "rendered": "the slot corresponds to a compiler-inserted raise", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.location", "title": "Slot.location", "contents": "Some possible reasons for failing to return a location are as follow:", "rendered": "Some possible reasons for failing to return a location are as follow:", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.location", "title": "Slot.location", "contents": "location slot returns the location information of the slot, if available, and None otherwise.", "rendered": "<code>location slot</code> returns the location information of the slot, if available, and <code>None</code> otherwise.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.location", "title": "Slot.location", "contents": "location t option location ", "rendered": "<h4 class='item'>let location: <a href=\"./api/Printexc.html#type-Slot.t\">t</a> => option(<a href=\"./api/Printexc.html#type-location\">location</a>)</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.is_raise", "title": "Slot.is_raise", "contents": "is_raise slot is true when slot refers to a raising point in the code, and false when it comes from a simple function call.", "rendered": "<code>is_raise slot</code> is <code>true</code> when <code>slot</code> refers to a raising point in the code, and <code>false</code> when it comes from a simple function call.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-Slot.is_raise", "title": "Slot.is_raise", "contents": "is_raise t bool ", "rendered": "<h4 class='item'>let is_raise: <a href=\"./api/Printexc.html#type-Slot.t\">t</a> => bool</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-Slot.t", "title": "Slot.t", "contents": "t backtrace_slot", "rendered": "<h4 class='item'>type t = <a href=\"./api/Printexc.html#type-backtrace_slot\">backtrace_slot</a></h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#module-Slot", "title": "Slot", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#module-Slot", "title": "Slot", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-location", "title": "location", "contents": "The type of location information found in backtraces. start_char and end_char are positions relative to the beginning of the line.", "rendered": "The type of location information found in backtraces. <code>start_char</code> and <code>end_char</code> are positions relative to the beginning of the line.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-location", "title": "location", "contents": "location filename string line_number int start_char int end_char int", "rendered": "<h4 class='item'>type location = {\n  filename: string,\n  line_number: int,\n  start_char: int,\n  end_char: int\n}</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_slots", "title": "backtrace_slots", "contents": "the program is a bytecode program that has not been linked with debug information enabled (ocamlc -g)", "rendered": "the program is a bytecode program that has not been linked with debug information enabled (<code>ocamlc -g</code>)", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_slots", "title": "backtrace_slots", "contents": "none of the slots in the trace come from modules compiled with debug information (-g)", "rendered": "none of the slots in the trace come from modules compiled with debug information (<code>-g</code>)", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_slots", "title": "backtrace_slots", "contents": "Some possible reasons for returning None are as follow:", "rendered": "Some possible reasons for returning <code>None</code> are as follow:", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_slots", "title": "backtrace_slots", "contents": "In the return array, the slot at index 0 corresponds to the most recent function call, raise, or primitive get_backtrace call in the trace.", "rendered": "In the return array, the slot at index <code>0</code> corresponds to the most recent function call, raise, or primitive <code>get_backtrace</code> call in the trace.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_slots", "title": "backtrace_slots", "contents": "Returns the slots of a raw backtrace, or None if none of them contain useful information.", "rendered": "Returns the slots of a raw backtrace, or <code>None</code> if none of them contain useful information.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_slots", "title": "backtrace_slots", "contents": "backtrace_slots raw_backtrace option array backtrace_slot ", "rendered": "<h4 class='item'>let backtrace_slots: <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a> => option(\n  array(<a href=\"./api/Printexc.html#type-backtrace_slot\">backtrace_slot</a>)\n)</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-backtrace_slot", "title": "backtrace_slot", "contents": "The abstract type backtrace_slot represents a single slot of a backtrace.", "rendered": "The abstract type <code>backtrace_slot</code> represents a single slot of a backtrace.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-backtrace_slot", "title": "backtrace_slot", "contents": "backtrace_slot ", "rendered": "<h4 class='item'>type backtrace_slot</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html", "title": "Printexc", "contents": "Those function allow to traverse the slots of a raw backtrace, extract information from them in a programmer-friendly format.", "rendered": "Those function allow to traverse the slots of a raw backtrace, extract information from them in a programmer-friendly format.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#Manipulation-of-backtrace-information", "title": "Manipulation of backtrace information", "contents": "", "rendered": "", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-set_uncaught_exception_handler", "title": "set_uncaught_exception_handler", "contents": "If fn raises an exception, both the exceptions passed to fn and raised by fn will be printed with their respective backtrace.", "rendered": "If <code>fn</code> raises an exception, both the exceptions passed to <code>fn</code> and raised by <code>fn</code> will be printed with their respective backtrace.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-set_uncaught_exception_handler", "title": "set_uncaught_exception_handler", "contents": "Also note that exceptions raised by user code in the interactive toplevel are not passed to this function as they are caught by the toplevel itself.", "rendered": "Also note that exceptions raised by user code in the interactive toplevel are not passed to this function as they are caught by the toplevel itself.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-set_uncaught_exception_handler", "title": "set_uncaught_exception_handler", "contents": "Note that when fn is called all the functions registered with at_exit have already been called. Because of this you must make sure any output channel fn writes on is flushed.", "rendered": "Note that when <code>fn</code> is called all the functions registered with at_exit have already been called. Because of this you must make sure any output channel <code>fn</code> writes on is flushed.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-set_uncaught_exception_handler", "title": "set_uncaught_exception_handler", "contents": "Printexc.set_uncaught_exception_handler fn registers fn as the handler for uncaught exceptions. The default handler prints the exception and backtrace on standard error output.", "rendered": "<code>Printexc.set_uncaught_exception_handler fn</code> registers <code>fn</code> as the handler for uncaught exceptions. The default handler prints the exception and backtrace on standard error output.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-set_uncaught_exception_handler", "title": "set_uncaught_exception_handler", "contents": "set_uncaught_exception_handler exn raw_backtrace unit   unit ", "rendered": "<h4 class='item'>let set_uncaught_exception_handler: (\n  exn,\n  <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a>\n) => unit => unit</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#Uncaught-exceptions", "title": "Uncaught exceptions", "contents": "", "rendered": "", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_callstack", "title": "get_callstack", "contents": "Printexc.get_callstack n returns a description of the top of the call stack on the current program point (for the current thread), with at most n entries. (Note: this function is not related to exceptions at all, despite being part of the Printexc module.)", "rendered": "<code>Printexc.get_callstack n</code> returns a description of the top of the call stack on the current program point (for the current thread), with at most <code>n</code> entries. (Note: this function is not related to exceptions at all, despite being part of the <code>Printexc</code> module.)", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_callstack", "title": "get_callstack", "contents": "get_callstack int raw_backtrace ", "rendered": "<h4 class='item'>let get_callstack: int => <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a></h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#Current-call-stack", "title": "Current call stack", "contents": "", "rendered": "", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-raw_backtrace_to_string", "title": "raw_backtrace_to_string", "contents": "Return a string from a raw backtrace, in the same format Printexc.get_backtrace uses.", "rendered": "Return a string from a raw backtrace, in the same format <code>Printexc.get_backtrace</code> uses.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-raw_backtrace_to_string", "title": "raw_backtrace_to_string", "contents": "raw_backtrace_to_string raw_backtrace string ", "rendered": "<h4 class='item'>let raw_backtrace_to_string: <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a> => string</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-print_raw_backtrace", "title": "print_raw_backtrace", "contents": "Print a raw backtrace in the same format Printexc.print_backtrace uses.", "rendered": "Print a raw backtrace in the same format <code>Printexc.print_backtrace</code> uses.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-print_raw_backtrace", "title": "print_raw_backtrace", "contents": "print_raw_backtrace out_channel raw_backtrace unit  ", "rendered": "<h4 class='item'>let print_raw_backtrace: (\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a>\n) => unit</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_raw_backtrace", "title": "get_raw_backtrace", "contents": "Printexc.get_raw_backtrace () returns the same exception backtrace that Printexc.print_backtrace would print, but in a raw format.", "rendered": "<code>Printexc.get_raw_backtrace ()</code> returns the same exception backtrace that <code>Printexc.print_backtrace</code> would print, but in a raw format.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_raw_backtrace", "title": "get_raw_backtrace", "contents": "get_raw_backtrace unit raw_backtrace ", "rendered": "<h4 class='item'>let get_raw_backtrace: unit => <a href=\"./api/Printexc.html#type-raw_backtrace\">raw_backtrace</a></h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace", "title": "raw_backtrace", "contents": "Raw backtraces cannot be marshalled. If you need marshalling, you should use the array returned by the backtrace_slots function of the next section.", "rendered": "Raw backtraces cannot be marshalled. If you need marshalling, you should use the array returned by the <code>backtrace_slots</code> function of the next section.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace", "title": "raw_backtrace", "contents": "This allows delaying the formatting of backtraces to when they are actually printed, which may be useful if you record more backtraces than you print.", "rendered": "This allows delaying the formatting of backtraces to when they are actually printed, which may be useful if you record more backtraces than you print.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace", "title": "raw_backtrace", "contents": "The abstract type raw_backtrace stores a backtrace in a low-level format, instead of directly exposing them as string as the get_backtrace() function does.", "rendered": "The abstract type <code>raw_backtrace</code> stores a backtrace in a low-level format, instead of directly exposing them as string as the <code>get_backtrace()</code> function does.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#type-raw_backtrace", "title": "raw_backtrace", "contents": "raw_backtrace ", "rendered": "<h4 class='item'>type raw_backtrace</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#Raw-backtraces", "title": "Raw backtraces", "contents": "", "rendered": "", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-register_printer", "title": "register_printer", "contents": "When using this mechanism, one should be aware that an exception backtrace is attached to the thread that saw it raised, rather than to the exception itself. Practically, it means that the code related to fn should not use the backtrace if it has itself raised an exception before.", "rendered": "When using this mechanism, one should be aware that an exception backtrace is attached to the thread that saw it raised, rather than to the exception itself. Practically, it means that the code related to <code>fn</code> should not use the backtrace if it has itself raised an exception before.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-register_printer", "title": "register_printer", "contents": "When converting an exception into a string, the printers will be invoked in the reverse order of their registrations, until a printer returns a Some s value (if no such printer exists, the runtime will use a generic printer).", "rendered": "When converting an exception into a string, the printers will be invoked in the reverse order of their registrations, until a printer returns a <code>Some s</code> value (if no such printer exists, the runtime will use a generic printer).", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-register_printer", "title": "register_printer", "contents": "Printexc.register_printer fn registers fn as an exception printer. The printer should return None or raise an exception if it does not know how to convert the passed exception, and Some\n    s with s the resulting string if it can convert the passed exception. Exceptions raised by the printer are ignored.", "rendered": "<code>Printexc.register_printer fn</code> registers <code>fn</code> as an exception printer. The printer should return <code>None</code> or raise an exception if it does not know how to convert the passed exception, and <code>Some\n    s</code> with <code>s</code> the resulting string if it can convert the passed exception. Exceptions raised by the printer are ignored.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-register_printer", "title": "register_printer", "contents": "register_printer exn option string  unit ", "rendered": "<h4 class='item'>let register_printer: exn => option(string) => unit</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_status", "title": "backtrace_status", "contents": "Printexc.backtrace_status() returns true if exception backtraces are currently recorded, false if not.", "rendered": "<code>Printexc.backtrace_status()</code> returns <code>true</code> if exception backtraces are currently recorded, <code>false</code> if not.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-backtrace_status", "title": "backtrace_status", "contents": "backtrace_status unit bool ", "rendered": "<h4 class='item'>let backtrace_status: unit => bool</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-record_backtrace", "title": "record_backtrace", "contents": "Printexc.record_backtrace b turns recording of exception backtraces on (if b = true) or off (if b = false). Initially, backtraces are not recorded, unless the b flag is given to the program through the OCAMLRUNPARAM variable.", "rendered": "<code>Printexc.record_backtrace b</code> turns recording of exception backtraces on (if <code>b = true</code>) or off (if <code>b = false</code>). Initially, backtraces are not recorded, unless the <code>b</code> flag is given to the program through the <code>OCAMLRUNPARAM</code> variable.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-record_backtrace", "title": "record_backtrace", "contents": "record_backtrace bool unit ", "rendered": "<h4 class='item'>let record_backtrace: bool => unit</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_backtrace", "title": "get_backtrace", "contents": "Printexc.get_backtrace () returns a string containing the same exception backtrace that Printexc.print_backtrace would print.", "rendered": "<code>Printexc.get_backtrace ()</code> returns a string containing the same exception backtrace that <code>Printexc.print_backtrace</code> would print.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-get_backtrace", "title": "get_backtrace", "contents": "get_backtrace unit string ", "rendered": "<h4 class='item'>let get_backtrace: unit => string</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-print_backtrace", "title": "print_backtrace", "contents": "Printexc.print_backtrace oc prints an exception backtrace on the output channel oc. The backtrace lists the program locations where the most-recently raised exception was raised and where it was propagated through function calls.", "rendered": "<code>Printexc.print_backtrace oc</code> prints an exception backtrace on the output channel <code>oc</code>. The backtrace lists the program locations where the most-recently raised exception was raised and where it was propagated through function calls.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-print_backtrace", "title": "print_backtrace", "contents": "print_backtrace out_channel unit ", "rendered": "<h4 class='item'>let print_backtrace: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => unit</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-catch", "title": "catch", "contents": "Printexc.catch fn x is similar to print, but aborts the program with exit code 2 after printing the uncaught exception. This function is deprecated: the runtime system is now able to print uncaught exceptions as precisely as Printexc.catch does. Moreover, calling Printexc.catch makes it harder to track the location of the exception using the debugger or the stack backtrace facility. So, do not use Printexc.catch in new code.", "rendered": "<code>Printexc.catch fn x</code> is similar to print, but aborts the program with exit code 2 after printing the uncaught exception. This function is deprecated: the runtime system is now able to print uncaught exceptions as precisely as <code>Printexc.catch</code> does. Moreover, calling <code>Printexc.catch</code> makes it harder to track the location of the exception using the debugger or the stack backtrace facility. So, do not use <code>Printexc.catch</code> in new code.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-catch", "title": "catch", "contents": "catch   ", "rendered": "<h4 class='item'>let catch: ('a => 'b, 'a) => 'b</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-print", "title": "print", "contents": "Printexc.print fn x applies fn to x and returns the result. If the evaluation of fn x raises any exception, the name of the exception is printed on standard error output, and the exception is raised again. The typical use is to catch and report exceptions that escape a function application.", "rendered": "<code>Printexc.print fn x</code> applies <code>fn</code> to <code>x</code> and returns the result. If the evaluation of <code>fn x</code> raises any exception, the name of the exception is printed on standard error output, and the exception is raised again. The typical use is to catch and report exceptions that escape a function application.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-print", "title": "print", "contents": "print   ", "rendered": "<h4 class='item'>let print: ('a => 'b, 'a) => 'b</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-to_string", "title": "to_string", "contents": "Printexc.to_string e returns a string representation of the exception e.", "rendered": "<code>Printexc.to_string e</code> returns a string representation of the exception <code>e</code>.", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html#value-to_string", "title": "to_string", "contents": "to_string exn string ", "rendered": "<h4 class='item'>let to_string: exn => string</h4>", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html", "title": "Printexc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Printexc"},
{"href": "./api/Printexc.html", "title": "Printexc", "contents": "Facilities for printing exceptions and inspecting current call stack.", "rendered": "Facilities for printing exceptions and inspecting current call stack.", "breadcrumb": "Printexc"},
{"href": "./api/Lexing.html#value-new_engine", "title": "new_engine", "contents": "new_engine lex_tables int lexbuf int   ", "rendered": "<h4 class='item'>let new_engine: (<a href=\"./api/Lexing.html#type-lex_tables\">lex_tables</a>, int, <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>) => int</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-engine", "title": "engine", "contents": "engine lex_tables int lexbuf int   ", "rendered": "<h4 class='item'>let engine: (<a href=\"./api/Lexing.html#type-lex_tables\">lex_tables</a>, int, <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>) => int</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-lex_tables", "title": "lex_tables", "contents": "lex_tables lex_base string lex_backtrk string lex_default string lex_trans string lex_check string lex_base_code string lex_backtrk_code string lex_default_code string lex_trans_code string lex_check_code string lex_code string", "rendered": "<h4 class='item'>type lex_tables = {\n  lex_base: string,\n  lex_backtrk: string,\n  lex_default: string,\n  lex_trans: string,\n  lex_check: string,\n  lex_base_code: string,\n  lex_backtrk_code: string,\n  lex_default_code: string,\n  lex_trans_code: string,\n  lex_check_code: string,\n  lex_code: string\n}</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-sub_lexeme_char_opt", "title": "sub_lexeme_char_opt", "contents": "sub_lexeme_char_opt lexbuf int option char  ", "rendered": "<h4 class='item'>let sub_lexeme_char_opt: (<a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>, int) => option(char)</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-sub_lexeme_char", "title": "sub_lexeme_char", "contents": "sub_lexeme_char lexbuf int char  ", "rendered": "<h4 class='item'>let sub_lexeme_char: (<a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>, int) => char</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-sub_lexeme_opt", "title": "sub_lexeme_opt", "contents": "sub_lexeme_opt lexbuf int int option string   ", "rendered": "<h4 class='item'>let sub_lexeme_opt: (<a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>, int, int) => option(string)</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-sub_lexeme", "title": "sub_lexeme", "contents": "sub_lexeme lexbuf int int string   ", "rendered": "<h4 class='item'>let sub_lexeme: (<a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>, int, int) => string</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html", "title": "Lexing", "contents": "The following definitions are used by the generated scanners only. They are not intended to be used directly by user programs.", "rendered": "The following definitions are used by the generated scanners only. They are not intended to be used directly by user programs.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html", "title": "Lexing", "contents": "/*", "rendered": "/*", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-flush_input", "title": "flush_input", "contents": "Discard the contents of the buffer and reset the current position to 0. The next use of the lexbuf will trigger a refill.", "rendered": "Discard the contents of the buffer and reset the current position to 0. The next use of the lexbuf will trigger a refill.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-flush_input", "title": "flush_input", "contents": "flush_input lexbuf unit ", "rendered": "<h4 class='item'>let flush_input: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => unit</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#Miscellaneous-functions", "title": "Miscellaneous functions", "contents": "", "rendered": "", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-new_line", "title": "new_line", "contents": "Update the lex_curr_p field of the lexbuf to reflect the start of a new line. You can call this function in the semantic action of the rule that matches the end-of-line character.", "rendered": "Update the <code>lex_curr_p</code> field of the lexbuf to reflect the start of a new line. You can call this function in the semantic action of the rule that matches the end-of-line character.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-new_line", "title": "new_line", "contents": "new_line lexbuf unit ", "rendered": "<h4 class='item'>let new_line: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => unit</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_end_p", "title": "lexeme_end_p", "contents": "Like lexeme_end, but return a complete position instead of an offset.", "rendered": "Like <code>lexeme_end</code>, but return a complete <code>position</code> instead of an offset.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_end_p", "title": "lexeme_end_p", "contents": "lexeme_end_p lexbuf position ", "rendered": "<h4 class='item'>let lexeme_end_p: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => <a href=\"./api/Lexing.html#type-position\">position</a></h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_start_p", "title": "lexeme_start_p", "contents": "Like lexeme_start, but return a complete position instead of an offset.", "rendered": "Like <code>lexeme_start</code>, but return a complete <code>position</code> instead of an offset.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_start_p", "title": "lexeme_start_p", "contents": "lexeme_start_p lexbuf position ", "rendered": "<h4 class='item'>let lexeme_start_p: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => <a href=\"./api/Lexing.html#type-position\">position</a></h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_end", "title": "lexeme_end", "contents": "Lexing.lexeme_end lexbuf returns the offset in the input stream of the character following the last character of the matched string. The first character of the stream has offset 0.", "rendered": "<code>Lexing.lexeme_end lexbuf</code> returns the offset in the input stream of the character following the last character of the matched string. The first character of the stream has offset 0.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_end", "title": "lexeme_end", "contents": "lexeme_end lexbuf int ", "rendered": "<h4 class='item'>let lexeme_end: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => int</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_start", "title": "lexeme_start", "contents": "Lexing.lexeme_start lexbuf returns the offset in the input stream of the first character of the matched string. The first character of the stream has offset 0.", "rendered": "<code>Lexing.lexeme_start lexbuf</code> returns the offset in the input stream of the first character of the matched string. The first character of the stream has offset 0.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_start", "title": "lexeme_start", "contents": "lexeme_start lexbuf int ", "rendered": "<h4 class='item'>let lexeme_start: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => int</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_char", "title": "lexeme_char", "contents": "Lexing.lexeme_char lexbuf i returns character number i in the matched string.", "rendered": "<code>Lexing.lexeme_char lexbuf i</code> returns character number <code>i</code> in the matched string.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme_char", "title": "lexeme_char", "contents": "lexeme_char lexbuf int char  ", "rendered": "<h4 class='item'>let lexeme_char: (<a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a>, int) => char</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme", "title": "lexeme", "contents": "Lexing.lexeme lexbuf returns the string matched by the regular expression.", "rendered": "<code>Lexing.lexeme lexbuf</code> returns the string matched by the regular expression.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-lexeme", "title": "lexeme", "contents": "lexeme lexbuf string ", "rendered": "<h4 class='item'>let lexeme: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => string</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html", "title": "Lexing", "contents": "The following functions can be called from the semantic actions of lexer definitions (the ML code enclosed in braces that computes the value returned by lexing functions). They give access to the character string matched by the regular expression associated with the semantic action. These functions must be applied to the argument lexbuf, which, in the code generated by ocamllex, is bound to the lexer buffer passed to the parsing function.", "rendered": "The following functions can be called from the semantic actions of lexer definitions (the ML code enclosed in braces that computes the value returned by lexing functions). They give access to the character string matched by the regular expression associated with the semantic action. These functions must be applied to the argument <code>lexbuf</code>, which, in the code generated by <code>ocamllex</code>, is bound to the lexer buffer passed to the parsing function.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#Functions-for-lexer-semantic-actions", "title": "Functions for lexer semantic actions", "contents": "", "rendered": "", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-from_function", "title": "from_function", "contents": "Create a lexer buffer with the given function as its reading method. When the scanner needs more characters, it will call the given function, giving it a byte sequence s and a byte count n. The function should put n bytes or fewer in s, starting at index 0, and return the number of bytes provided. A return value of 0 means end of input.", "rendered": "Create a lexer buffer with the given function as its reading method. When the scanner needs more characters, it will call the given function, giving it a byte sequence <code>s</code> and a byte count <code>n</code>. The function should put <code>n</code> bytes or fewer in <code>s</code>, starting at index 0, and return the number of bytes provided. A return value of 0 means end of input.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-from_function", "title": "from_function", "contents": "from_function bytes int int   lexbuf ", "rendered": "<h4 class='item'>let from_function: (bytes, int) => int => <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a></h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-from_string", "title": "from_string", "contents": "Create a lexer buffer which reads from the given string. Reading starts from the first character in the string. An end-of-input condition is generated when the end of the string is reached.", "rendered": "Create a lexer buffer which reads from the given string. Reading starts from the first character in the string. An end-of-input condition is generated when the end of the string is reached.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-from_string", "title": "from_string", "contents": "from_string string lexbuf ", "rendered": "<h4 class='item'>let from_string: string => <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a></h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-from_channel", "title": "from_channel", "contents": "Create a lexer buffer on the given input channel. Lexing.from_channel inchan returns a lexer buffer which reads from the input channel inchan, at the current reading position.", "rendered": "Create a lexer buffer on the given input channel. <code>Lexing.from_channel inchan</code> returns a lexer buffer which reads from the input channel <code>inchan</code>, at the current reading position.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-from_channel", "title": "from_channel", "contents": "from_channel in_channel lexbuf ", "rendered": "<h4 class='item'>let from_channel: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a></h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-lexbuf", "title": "lexbuf", "contents": "At each token, the lexing engine will copy lex_curr_p to lex_start_p, then change the pos_cnum field of lex_curr_p by updating it with the number of characters read since the start of the lexbuf. The other fields are left unchanged by the lexing engine. In order to keep them accurate, they must be initialised before the first use of the lexbuf, and updated by the relevant lexer actions (i.e. at each end of line -- see also new_line).", "rendered": "At each token, the lexing engine will copy <code>lex_curr_p</code> to <code>lex_start_p</code>, then change the <code>pos_cnum</code> field of <code>lex_curr_p</code> by updating it with the number of characters read since the start of the <code>lexbuf</code>. The other fields are left unchanged by the lexing engine. In order to keep them accurate, they must be initialised before the first use of the lexbuf, and updated by the relevant lexer actions (i.e. at each end of line -- see also <code>new_line</code>).", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-lexbuf", "title": "lexbuf", "contents": "The type of lexer buffers. A lexer buffer is the argument passed to the scanning functions defined by the generated scanners. The lexer buffer holds the current state of the scanner, plus a function to refill the buffer from the input.", "rendered": "The type of lexer buffers. A lexer buffer is the argument passed to the scanning functions defined by the generated scanners. The lexer buffer holds the current state of the scanner, plus a function to refill the buffer from the input.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-lexbuf", "title": "lexbuf", "contents": "lexbuf refill_buff lexbuf unit  lex_buffer bytes lex_buffer_len int lex_abs_pos int lex_start_pos int lex_curr_pos int lex_last_pos int lex_last_action int lex_eof_reached bool lex_mem array int lex_start_p position lex_curr_p position", "rendered": "<h4 class='item'>type lexbuf = {\n  refill_buff: <a href=\"./api/Lexing.html#type-lexbuf\">lexbuf</a> => unit,\n  mut lex_buffer: bytes,\n  mut lex_buffer_len: int,\n  mut lex_abs_pos: int,\n  mut lex_start_pos: int,\n  mut lex_curr_pos: int,\n  mut lex_last_pos: int,\n  mut lex_last_action: int,\n  mut lex_eof_reached: bool,\n  mut lex_mem: array(int),\n  mut lex_start_p: <a href=\"./api/Lexing.html#type-position\">position</a>,\n  mut lex_curr_p: <a href=\"./api/Lexing.html#type-position\">position</a>\n}</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#Lexer-buffers", "title": "Lexer buffers", "contents": "", "rendered": "", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#value-dummy_pos", "title": "dummy_pos", "contents": "dummy_pos position", "rendered": "<h4 class='item'>let dummy_pos: <a href=\"./api/Lexing.html#type-position\">position</a></h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-position", "title": "position", "contents": "See the documentation of type lexbuf for information about how the lexing engine will manage positions.", "rendered": "See the documentation of type <code>lexbuf</code> for information about how the lexing engine will manage positions.", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-position", "title": "position", "contents": "A value of type position describes a point in a source file. pos_fname is the file name; pos_lnum is the line number; pos_bol is the offset of the beginning of the line (number of characters between the beginning of the lexbuf and the beginning of the line); pos_cnum is the offset of the position (number of characters between the beginning of the lexbuf and the position). The difference between pos_cnum and pos_bol is the character offset within the line (i.e. the column number, assuming each character is one column wide).", "rendered": "A value of type <code>position</code> describes a point in a source file. <code>pos_fname</code> is the file name; <code>pos_lnum</code> is the line number; <code>pos_bol</code> is the offset of the beginning of the line (number of characters between the beginning of the lexbuf and the beginning of the line); <code>pos_cnum</code> is the offset of the position (number of characters between the beginning of the lexbuf and the position). The difference between <code>pos_cnum</code> and <code>pos_bol</code> is the character offset within the line (i.e. the column number, assuming each character is one column wide).", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#type-position", "title": "position", "contents": "position pos_fname string pos_lnum int pos_bol int pos_cnum int", "rendered": "<h4 class='item'>type position = {\n  pos_fname: string,\n  pos_lnum: int,\n  pos_bol: int,\n  pos_cnum: int\n}</h4>", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html#Positions", "title": "Positions", "contents": "", "rendered": "", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html", "title": "Lexing", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Lexing"},
{"href": "./api/Lexing.html", "title": "Lexing", "contents": "The run-time library for lexers generated by ocamllex.", "rendered": "The run-time library for lexers generated by <code>ocamllex</code>.", "breadcrumb": "Lexing"},
{"href": "./api/Char.html#value-unsafe_chr", "title": "unsafe_chr", "contents": "unsafe_chr int char ", "rendered": "<h4 class='item'>let unsafe_chr: int => char</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html", "title": "Char", "contents": "/*", "rendered": "/*", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-compare", "title": "compare", "contents": "The comparison function for characters, with the same specification as compare. Along with the type t, this function compare allows the module Char to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for characters, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Char</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Char.html#type-t\">t</a>, <a href=\"./api/Char.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html#type-t", "title": "t", "contents": "An alias for the type of characters.", "rendered": "An alias for the type of characters.", "breadcrumb": "Char"},
{"href": "./api/Char.html#type-t", "title": "t", "contents": "t char", "rendered": "<h4 class='item'>type t = char</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-uppercase", "title": "uppercase", "contents": "Convert the given character to its equivalent uppercase character.", "rendered": "Convert the given character to its equivalent uppercase character.", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-uppercase", "title": "uppercase", "contents": "uppercase char char ", "rendered": "<h4 class='item'>let uppercase: char => char</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-lowercase", "title": "lowercase", "contents": "Convert the given character to its equivalent lowercase character.", "rendered": "Convert the given character to its equivalent lowercase character.", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-lowercase", "title": "lowercase", "contents": "lowercase char char ", "rendered": "<h4 class='item'>let lowercase: char => char</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-escaped", "title": "escaped", "contents": "Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml.", "rendered": "Return a string representing the given character, with special characters escaped following the lexical conventions of OCaml.", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-escaped", "title": "escaped", "contents": "escaped char string ", "rendered": "<h4 class='item'>let escaped: char => string</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-chr", "title": "chr", "contents": "Return the character with the given ASCII code. Raise Invalid_argument &quot;Char.chr&quot; if the argument is outside the range 0--255.", "rendered": "Return the character with the given ASCII code. Raise <code>Invalid_argument &quot;Char.chr&quot;</code> if the argument is outside the range 0--255.", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-chr", "title": "chr", "contents": "chr int char ", "rendered": "<h4 class='item'>let chr: int => char</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-code", "title": "code", "contents": "Return the ASCII code of the argument.", "rendered": "Return the ASCII code of the argument.", "breadcrumb": "Char"},
{"href": "./api/Char.html#value-code", "title": "code", "contents": "code char int ", "rendered": "<h4 class='item'>let code: char => int</h4>", "breadcrumb": "Char"},
{"href": "./api/Char.html", "title": "Char", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Char"},
{"href": "./api/Char.html", "title": "Char", "contents": "Character operations.", "rendered": "Character operations.", "breadcrumb": "Char"},
{"href": "./api/Array.html#value-unsafe_set", "title": "unsafe_set", "contents": "unsafe_set array int unit   ", "rendered": "<h4 class='item'>let unsafe_set: (array('a), int, 'a) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-unsafe_get", "title": "unsafe_get", "contents": "unsafe_get array int  ", "rendered": "<h4 class='item'>let unsafe_get: (array('a), int) => 'a</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#Undocumented-functions", "title": "Undocumented functions", "contents": "", "rendered": "", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "/*", "rendered": "/*", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fast_sort", "title": "fast_sort", "contents": "Same as sort or stable_sort, whichever is faster on typical input.", "rendered": "Same as sort or stable_sort, whichever is faster on typical input.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fast_sort", "title": "fast_sort", "contents": "fast_sort int   array unit  ", "rendered": "<h4 class='item'>let fast_sort: (('a, 'a) => int, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-stable_sort", "title": "stable_sort", "contents": "The current implementation uses Merge Sort. It uses n/2 words of heap space, where n is the length of the array. It is usually faster than the current implementation of sort.", "rendered": "The current implementation uses Merge Sort. It uses <code>n/2</code> words of heap space, where <code>n</code> is the length of the array. It is usually faster than the current implementation of sort.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-stable_sort", "title": "stable_sort", "contents": "Same as sort, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.", "rendered": "Same as sort, but the sorting algorithm is stable (i.e. elements that compare equal are kept in their original order) and not guaranteed to run in constant heap space.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-stable_sort", "title": "stable_sort", "contents": "stable_sort int   array unit  ", "rendered": "<h4 class='item'>let stable_sort: (('a, 'a) => int, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "if cmp x y &gt;= 0 and cmp y z &gt;= 0 then cmp x z &gt;= 0", "rendered": "if <code>cmp x y</code> &gt;= 0 and <code>cmp y z</code> &gt;= 0 then <code>cmp x z</code> &gt;= 0", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "cmp x y &gt; 0 if and only if cmp y x &lt; 0", "rendered": "<code>cmp x y</code> &gt; 0 if and only if <code>cmp y x</code> &lt; 0", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "cmp a.(i) a.(j) &gt;= 0 if and only if i &gt;= j", "rendered": "<code>cmp a.(i) a.(j)</code> &gt;= 0 if and only if i &gt;= j", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "When Array.sort returns, a contains the same elements as before, reordered in such a way that for all i and j valid indices of a :", "rendered": "When <code>Array.sort</code> returns, <code>a</code> contains the same elements as before, reordered in such a way that for all i and j valid indices of <code>a</code> :", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "Specification of the comparison function: Let a be the array and cmp the comparison function. The following must be true for all x, y, z in a :", "rendered": "Specification of the comparison function: Let <code>a</code> be the array and <code>cmp</code> the comparison function. The following must be true for all x, y, z in a :", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "The current implementation uses Heap Sort. It runs in constant stack space.", "rendered": "The current implementation uses Heap Sort. It runs in constant stack space.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "Sort an array in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, compare is a suitable comparison function, provided there are no floating-point NaN values in the data. After calling Array.sort, the array is sorted in place in increasing order. Array.sort is guaranteed to run in constant heap space and (at most) logarithmic stack space.", "rendered": "Sort an array in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see below for a complete specification). For example, compare is a suitable comparison function, provided there are no floating-point NaN values in the data. After calling <code>Array.sort</code>, the array is sorted in place in increasing order. <code>Array.sort</code> is guaranteed to run in constant heap space and (at most) logarithmic stack space.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sort", "title": "sort", "contents": "sort int   array unit  ", "rendered": "<h4 class='item'>let sort: (('a, 'a) => int, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#Sorting", "title": "Sorting", "contents": "", "rendered": "", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make_float", "title": "make_float", "contents": "Array.make_float n returns a fresh float array of length n, with uninitialized data.", "rendered": "<code>Array.make_float n</code> returns a fresh float array of length <code>n</code>, with uninitialized data.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make_float", "title": "make_float", "contents": "make_float int array float ", "rendered": "<h4 class='item'>let make_float: int => array(float)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fold_right", "title": "fold_right", "contents": "Array.fold_right f a x computes f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...)), where n is the length of the array a.", "rendered": "<code>Array.fold_right f a x</code> computes <code>f a.(0) (f a.(1) ( ... (f a.(n-1) x) ...))</code>, where <code>n</code> is the length of the array <code>a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fold_right", "title": "fold_right", "contents": "fold_right   array   ", "rendered": "<h4 class='item'>let fold_right: (('b, 'a) => 'a, array('b), 'a) => 'a</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fold_left", "title": "fold_left", "contents": "Array.fold_left f x a computes f (... (f (f x a.(0)) a.(1)) ...) a.(n-1), where n is the length of the array a.", "rendered": "<code>Array.fold_left f x a</code> computes <code>f (... (f (f x a.(0)) a.(1)) ...) a.(n-1)</code>, where <code>n</code> is the length of the array <code>a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fold_left", "title": "fold_left", "contents": "fold_left   array   ", "rendered": "<h4 class='item'>let fold_left: (('a, 'b) => 'a, 'a, array('b)) => 'a</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-mapi", "title": "mapi", "contents": "Same as map, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "rendered": "Same as map, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-mapi", "title": "mapi", "contents": "mapi int   array array  ", "rendered": "<h4 class='item'>let mapi: ((int, 'a) => 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the element as first argument, and the element itself as second argument.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-iteri", "title": "iteri", "contents": "iteri int unit   array unit  ", "rendered": "<h4 class='item'>let iteri: ((int, 'a) => unit, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-map", "title": "map", "contents": "Array.map f a applies function f to all the elements of a, and builds an array with the results returned by f: [| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |].", "rendered": "<code>Array.map f a</code> applies function <code>f</code> to all the elements of <code>a</code>, and builds an array with the results returned by <code>f</code>: <code>[| f a.(0); f a.(1); ...; f a.(Array.length a - 1) |]</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-map", "title": "map", "contents": "map  array array  ", "rendered": "<h4 class='item'>let map: ('a => 'b, array('a)) => array('b)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-iter", "title": "iter", "contents": "Array.iter f a applies function f in turn to all the elements of a. It is equivalent to f a.(0); f a.(1); ...; f a.(Array.length a - 1); ().", "rendered": "<code>Array.iter f a</code> applies function <code>f</code> in turn to all the elements of <code>a</code>. It is equivalent to <code>f a.(0); f a.(1); ...; f a.(Array.length a - 1); ()</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-iter", "title": "iter", "contents": "iter unit  array unit  ", "rendered": "<h4 class='item'>let iter: ('a => unit, array('a)) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-of_list", "title": "of_list", "contents": "Array.of_list l returns a fresh array containing the elements of l.", "rendered": "<code>Array.of_list l</code> returns a fresh array containing the elements of <code>l</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-of_list", "title": "of_list", "contents": "of_list list array ", "rendered": "<h4 class='item'>let of_list: list('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-to_list", "title": "to_list", "contents": "Array.to_list a returns the list of all the elements of a.", "rendered": "<code>Array.to_list a</code> returns the list of all the elements of <code>a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-to_list", "title": "to_list", "contents": "to_list array list ", "rendered": "<h4 class='item'>let to_list: array('a) => list('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-blit", "title": "blit", "contents": "Raise Invalid_argument &quot;Array.blit&quot; if o1 and len do not designate a valid subarray of v1, or if o2 and len do not designate a valid subarray of v2.", "rendered": "Raise <code>Invalid_argument &quot;Array.blit&quot;</code> if <code>o1</code> and <code>len</code> do not designate a valid subarray of <code>v1</code>, or if <code>o2</code> and <code>len</code> do not designate a valid subarray of <code>v2</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-blit", "title": "blit", "contents": "Array.blit v1 o1 v2 o2 len copies len elements from array v1, starting at element number o1, to array v2, starting at element number o2. It works correctly even if v1 and v2 are the same array, and the source and destination chunks overlap.", "rendered": "<code>Array.blit v1 o1 v2 o2 len</code> copies <code>len</code> elements from array <code>v1</code>, starting at element number <code>o1</code>, to array <code>v2</code>, starting at element number <code>o2</code>. It works correctly even if <code>v1</code> and <code>v2</code> are the same array, and the source and destination chunks overlap.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-blit", "title": "blit", "contents": "blit array int array int int unit     ", "rendered": "<h4 class='item'>let blit: (array('a), int, array('a), int, int) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fill", "title": "fill", "contents": "Raise Invalid_argument &quot;Array.fill&quot; if ofs and len do not designate a valid subarray of a.", "rendered": "Raise <code>Invalid_argument &quot;Array.fill&quot;</code> if <code>ofs</code> and <code>len</code> do not designate a valid subarray of <code>a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fill", "title": "fill", "contents": "Array.fill a ofs len x modifies the array a in place, storing x in elements number ofs to ofs + len - 1.", "rendered": "<code>Array.fill a ofs len x</code> modifies the array <code>a</code> in place, storing <code>x</code> in elements number <code>ofs</code> to <code>ofs + len - 1</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-fill", "title": "fill", "contents": "fill array int int unit    ", "rendered": "<h4 class='item'>let fill: (array('a), int, int, 'a) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-copy", "title": "copy", "contents": "Array.copy a returns a copy of a, that is, a fresh array containing the same elements as a.", "rendered": "<code>Array.copy a</code> returns a copy of <code>a</code>, that is, a fresh array containing the same elements as <code>a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-copy", "title": "copy", "contents": "copy array array ", "rendered": "<h4 class='item'>let copy: array('a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sub", "title": "sub", "contents": "Raise Invalid_argument &quot;Array.sub&quot; if start and len do not designate a valid subarray of a; that is, if start &lt; 0, or len &lt; 0, or start + len &gt; Array.length a.", "rendered": "Raise <code>Invalid_argument &quot;Array.sub&quot;</code> if <code>start</code> and <code>len</code> do not designate a valid subarray of <code>a</code>; that is, if <code>start &lt; 0</code>, or <code>len &lt; 0</code>, or <code>start + len &gt; Array.length a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sub", "title": "sub", "contents": "Array.sub a start len returns a fresh array of length len, containing the elements number start to start + len - 1 of array a.", "rendered": "<code>Array.sub a start len</code> returns a fresh array of length <code>len</code>, containing the elements number <code>start</code> to <code>start + len - 1</code> of array <code>a</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-sub", "title": "sub", "contents": "sub array int int array   ", "rendered": "<h4 class='item'>let sub: (array('a), int, int) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-concat", "title": "concat", "contents": "Same as Array.append, but concatenates a list of arrays.", "rendered": "Same as <code>Array.append</code>, but concatenates a list of arrays.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-concat", "title": "concat", "contents": "concat list array array ", "rendered": "<h4 class='item'>let concat: list(array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-append", "title": "append", "contents": "Array.append v1 v2 returns a fresh array containing the concatenation of the arrays v1 and v2.", "rendered": "<code>Array.append v1 v2</code> returns a fresh array containing the concatenation of the arrays <code>v1</code> and <code>v2</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-append", "title": "append", "contents": "append array array array  ", "rendered": "<h4 class='item'>let append: (array('a), array('a)) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-create_matrix", "title": "create_matrix", "contents": "Array.create_matrix is an alias for make_matrix.", "rendered": "<code>Array.create_matrix</code> is an alias for make_matrix.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-create_matrix", "title": "create_matrix", "contents": "Deprecated: Array.create_matrix is an alias for make_matrix.\n\n", "rendered": "Deprecated: <p><code>Array.create_matrix</code> is an alias for make_matrix.</p>\n", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-create_matrix", "title": "create_matrix", "contents": "create_matrix int int array array   ", "rendered": "<h4 class='item'>let create_matrix: (int, int, 'a) => array(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make_matrix", "title": "make_matrix", "contents": "Raise Invalid_argument if dimx or dimy is negative or greater than Sys.max_array_length. If the value of e is a floating-point number, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>dimx</code> or <code>dimy</code> is negative or greater than <code>Sys.max_array_length</code>. If the value of <code>e</code> is a floating-point number, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make_matrix", "title": "make_matrix", "contents": "Array.make_matrix dimx dimy e returns a two-dimensional array (an array of arrays) with first dimension dimx and second dimension dimy. All the elements of this new matrix are initially physically equal to e. The element (x,y) of a matrix m is accessed with the notation m.(x).(y).", "rendered": "<code>Array.make_matrix dimx dimy e</code> returns a two-dimensional array (an array of arrays) with first dimension <code>dimx</code> and second dimension <code>dimy</code>. All the elements of this new matrix are initially physically equal to <code>e</code>. The element (<code>x,y</code>) of a matrix <code>m</code> is accessed with the notation <code>m.(x).(y)</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make_matrix", "title": "make_matrix", "contents": "make_matrix int int array array   ", "rendered": "<h4 class='item'>let make_matrix: (int, int, 'a) => array(array('a))</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-init", "title": "init", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; Sys.max_array_length. If the return type of f is float, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; Sys.max_array_length</code>. If the return type of <code>f</code> is <code>float</code>, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-init", "title": "init", "contents": "Array.init n f returns a fresh array of length n, with element number i initialized to the result of f i. In other terms, Array.init n f tabulates the results of f applied to the integers 0 to n-1.", "rendered": "<code>Array.init n f</code> returns a fresh array of length <code>n</code>, with element number <code>i</code> initialized to the result of <code>f i</code>. In other terms, <code>Array.init n f</code> tabulates the results of <code>f</code> applied to the integers <code>0</code> to <code>n-1</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-init", "title": "init", "contents": "init int int  array  ", "rendered": "<h4 class='item'>let init: (int, int => 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-create", "title": "create", "contents": "Array.create is an alias for make.", "rendered": "<code>Array.create</code> is an alias for make.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-create", "title": "create", "contents": "Deprecated: Array.create is an alias for make.\n\n", "rendered": "Deprecated: <p><code>Array.create</code> is an alias for make.</p>\n", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-create", "title": "create", "contents": "create int array  ", "rendered": "<h4 class='item'>let create: (int, 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make", "title": "make", "contents": "Raise Invalid_argument if n &lt; 0 or n &gt; Sys.max_array_length. If the value of x is a floating-point number, then the maximum size is only Sys.max_array_length / 2.", "rendered": "Raise <code>Invalid_argument</code> if <code>n &lt; 0</code> or <code>n &gt; Sys.max_array_length</code>. If the value of <code>x</code> is a floating-point number, then the maximum size is only <code>Sys.max_array_length / 2</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make", "title": "make", "contents": "Array.make n x returns a fresh array of length n, initialized with x. All the elements of this new array are initially physically equal to x (in the sense of the == predicate). Consequently, if x is mutable, it is shared among all elements of the array, and modifying x through one of the array entries will modify all other entries at the same time.", "rendered": "<code>Array.make n x</code> returns a fresh array of length <code>n</code>, initialized with <code>x</code>. All the elements of this new array are initially physically equal to <code>x</code> (in the sense of the <code>==</code> predicate). Consequently, if <code>x</code> is mutable, it is shared among all elements of the array, and modifying <code>x</code> through one of the array entries will modify all other entries at the same time.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-make", "title": "make", "contents": "make int array  ", "rendered": "<h4 class='item'>let make: (int, 'a) => array('a)</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-set", "title": "set", "contents": "Raise Invalid_argument &quot;index out of bounds&quot; if n is outside the range 0 to Array.length a - 1.", "rendered": "Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside the range 0 to <code>Array.length a - 1</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-set", "title": "set", "contents": "Array.set a n x modifies array a in place, replacing element number n with x. You can also write a.(n) &lt;- x instead of Array.set a n x.", "rendered": "<code>Array.set a n x</code> modifies array <code>a</code> in place, replacing element number <code>n</code> with <code>x</code>. You can also write <code>a.(n) &lt;- x</code> instead of <code>Array.set a n x</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-set", "title": "set", "contents": "set array int unit   ", "rendered": "<h4 class='item'>let set: (array('a), int, 'a) => unit</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-get", "title": "get", "contents": "Raise Invalid_argument &quot;index out of bounds&quot; if n is outside the range 0 to (Array.length a - 1).", "rendered": "Raise <code>Invalid_argument &quot;index out of bounds&quot;</code> if <code>n</code> is outside the range 0 to <code>(Array.length a - 1)</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-get", "title": "get", "contents": "Array.get a n returns the element number n of array a. The first element has number 0. The last element has number Array.length a - 1. You can also write a.(n) instead of Array.get a n.", "rendered": "<code>Array.get a n</code> returns the element number <code>n</code> of array <code>a</code>. The first element has number 0. The last element has number <code>Array.length a - 1</code>. You can also write <code>a.(n)</code> instead of <code>Array.get a n</code>.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-get", "title": "get", "contents": "get array int  ", "rendered": "<h4 class='item'>let get: (array('a), int) => 'a</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-length", "title": "length", "contents": "Return the length (number of elements) of the given array.", "rendered": "Return the length (number of elements) of the given array.", "breadcrumb": "Array"},
{"href": "./api/Array.html#value-length", "title": "length", "contents": "length array int ", "rendered": "<h4 class='item'>let length: array('a) => int</h4>", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Array"},
{"href": "./api/Array.html", "title": "Array", "contents": "Array operations.", "rendered": "Array operations.", "breadcrumb": "Array"},
{"href": "./api/Gc.html#value-delete_alarm", "title": "delete_alarm", "contents": "delete_alarm a will stop the calls to the function associated to a. Calling delete_alarm a again has no effect.", "rendered": "<code>delete_alarm a</code> will stop the calls to the function associated to <code>a</code>. Calling <code>delete_alarm a</code> again has no effect.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-delete_alarm", "title": "delete_alarm", "contents": "delete_alarm alarm unit ", "rendered": "<h4 class='item'>let delete_alarm: <a href=\"./api/Gc.html#type-alarm\">alarm</a> => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-create_alarm", "title": "create_alarm", "contents": "create_alarm f will arrange for f to be called at the end of each major GC cycle, starting with the current cycle or the next one. A value of type alarm is returned that you can use to call delete_alarm.", "rendered": "<code>create_alarm f</code> will arrange for <code>f</code> to be called at the end of each major GC cycle, starting with the current cycle or the next one. A value of type <code>alarm</code> is returned that you can use to call <code>delete_alarm</code>.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-create_alarm", "title": "create_alarm", "contents": "create_alarm unit unit  alarm ", "rendered": "<h4 class='item'>let create_alarm: unit => unit => <a href=\"./api/Gc.html#type-alarm\">alarm</a></h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-alarm", "title": "alarm", "contents": "An alarm is a piece of data that calls a user function at the end of each major GC cycle. The following functions are provided to create and delete alarms.", "rendered": "An alarm is a piece of data that calls a user function at the end of each major GC cycle. The following functions are provided to create and delete alarms.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-alarm", "title": "alarm", "contents": "alarm ", "rendered": "<h4 class='item'>type alarm</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise_release", "title": "finalise_release", "contents": "finalise_release unit unit ", "rendered": "<h4 class='item'>let finalise_release: unit => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": " let v = ... in Gc.finalise (fun x -&gt; ... v ...) v ", "rendered": "<code> let v = ... in Gc.finalise (fun x -&gt; ... v ...) v </code>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": " let f = fun x -&gt; ... ;; let v = ... in Gc.finalise f v ", "rendered": "<code> let f = fun x -&gt; ... ;; let v = ... in Gc.finalise f v </code>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "The results of calling make, make, create, make, and ref are guaranteed to be heap-allocated and non-constant except when the length argument is 0.", "rendered": "The results of calling make, make, create, make, and ref are guaranteed to be heap-allocated and non-constant except when the length argument is <code>0</code>.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "finalise will raise Invalid_argument if v is not heap-allocated. Some examples of values that are not heap-allocated are integers, constant constructors, booleans, the empty array, the empty list, the unit value. The exact list of what is heap-allocated or not is implementation-dependent. Some constant values can be heap-allocated but never deallocated during the lifetime of the program, for example a list of integer constants; this is also implementation-dependent. You should also be aware that compiler optimisations may duplicate some immutable values, for example floating-point numbers when stored into arrays, so they can be finalised and collected while another copy is still in use by the program.", "rendered": "<code>finalise</code> will raise <code>Invalid_argument</code> if <code>v</code> is not heap-allocated. Some examples of values that are not heap-allocated are integers, constant constructors, booleans, the empty array, the empty list, the unit value. The exact list of what is heap-allocated or not is implementation-dependent. Some constant values can be heap-allocated but never deallocated during the lifetime of the program, for example a list of integer constants; this is also implementation-dependent. You should also be aware that compiler optimisations may duplicate some immutable values, for example floating-point numbers when stored into arrays, so they can be finalised and collected while another copy is still in use by the program.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "The f function can use all features of OCaml, including assignments that make the value reachable again. It can also loop forever (in this case, the other finalisation functions will not be called during the execution of f, unless it calls finalise_release). It can call finalise on v or other values to register other functions or even itself. It can raise an exception; in this case the exception will interrupt whatever the program was doing when the function was called.", "rendered": "The <code>f</code> function can use all features of OCaml, including assignments that make the value reachable again. It can also loop forever (in this case, the other finalisation functions will not be called during the execution of f, unless it calls <code>finalise_release</code>). It can call <code>finalise</code> on <code>v</code> or other values to register other functions or even itself. It can raise an exception; in this case the exception will interrupt whatever the program was doing when the function was called.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "Instead you should make sure that v is not in the closure of the finalisation function by writing:", "rendered": "Instead you should make sure that <code>v</code> is not in the closure of the finalisation function by writing:", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "Anything reachable from the closure of finalisation functions is considered reachable, so the following code will not work as expected:", "rendered": "Anything reachable from the closure of finalisation functions is considered reachable, so the following code will not work as expected:", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "In the presence of multiple OCaml threads it should be assumed that any particular finaliser may be executed in any of the threads.", "rendered": "In the presence of multiple OCaml threads it should be assumed that any particular finaliser may be executed in any of the threads.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "The GC will call the finalisation functions in the order of deallocation. When several values become unreachable at the same time (i.e. during the same GC cycle), the finalisation functions will be called in the reverse order of the corresponding calls to finalise. If finalise is called in the same order as the values are allocated, that means each value is finalised before the values it depends upon. Of course, this becomes false if additional dependencies are introduced by assignments.", "rendered": "The GC will call the finalisation functions in the order of deallocation. When several values become unreachable at the same time (i.e. during the same GC cycle), the finalisation functions will be called in the reverse order of the corresponding calls to <code>finalise</code>. If <code>finalise</code> is called in the same order as the values are allocated, that means each value is finalised before the values it depends upon. Of course, this becomes false if additional dependencies are introduced by assignments.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "finalise f v registers f as a finalisation function for v. v must be heap-allocated. f will be called with v as argument at some point between the first time v becomes unreachable and the time v is collected by the GC. Several functions can be registered for the same value, or even several instances of the same function. Each instance will be called once (or never, if the program terminates before v becomes unreachable).", "rendered": "<code>finalise f v</code> registers <code>f</code> as a finalisation function for <code>v</code>. <code>v</code> must be heap-allocated. <code>f</code> will be called with <code>v</code> as argument at some point between the first time <code>v</code> becomes unreachable and the time <code>v</code> is collected by the GC. Several functions can be registered for the same value, or even several instances of the same function. Each instance will be called once (or never, if the program terminates before <code>v</code> becomes unreachable).", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-finalise", "title": "finalise", "contents": "finalise unit  unit  ", "rendered": "<h4 class='item'>let finalise: ('a => unit, 'a) => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-allocated_bytes", "title": "allocated_bytes", "contents": "Return the total number of bytes allocated since the program was started. It is returned as a float to avoid overflow problems with int on 32-bit machines.", "rendered": "Return the total number of bytes allocated since the program was started. It is returned as a <code>float</code> to avoid overflow problems with <code>int</code> on 32-bit machines.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-allocated_bytes", "title": "allocated_bytes", "contents": "allocated_bytes unit float ", "rendered": "<h4 class='item'>let allocated_bytes: unit => float</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-print_stat", "title": "print_stat", "contents": "Print the current values of the memory management counters (in human-readable form) into the channel argument.", "rendered": "Print the current values of the memory management counters (in human-readable form) into the channel argument.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-print_stat", "title": "print_stat", "contents": "print_stat out_channel unit ", "rendered": "<h4 class='item'>let print_stat: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-compact", "title": "compact", "contents": "Perform a full major collection and compact the heap. Note that heap compaction is a lengthy operation.", "rendered": "Perform a full major collection and compact the heap. Note that heap compaction is a lengthy operation.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-compact", "title": "compact", "contents": "compact unit unit ", "rendered": "<h4 class='item'>let compact: unit => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-full_major", "title": "full_major", "contents": "Do a minor collection, finish the current major collection cycle, and perform a complete new cycle. This will collect all currently unreachable blocks.", "rendered": "Do a minor collection, finish the current major collection cycle, and perform a complete new cycle. This will collect all currently unreachable blocks.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-full_major", "title": "full_major", "contents": "full_major unit unit ", "rendered": "<h4 class='item'>let full_major: unit => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-major", "title": "major", "contents": "Do a minor collection and finish the current major collection cycle.", "rendered": "Do a minor collection and finish the current major collection cycle.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-major", "title": "major", "contents": "major unit unit ", "rendered": "<h4 class='item'>let major: unit => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-major_slice", "title": "major_slice", "contents": "major_slice int int ", "rendered": "<h4 class='item'>let major_slice: int => int</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-minor", "title": "minor", "contents": "Trigger a minor collection.", "rendered": "Trigger a minor collection.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-minor", "title": "minor", "contents": "minor unit unit ", "rendered": "<h4 class='item'>let minor: unit => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-set", "title": "set", "contents": "set r changes the GC parameters according to the control record r. The normal usage is: Gc.set { (Gc.get()) with Gc.verbose = 0x00d }", "rendered": "<code>set r</code> changes the GC parameters according to the <code>control</code> record <code>r</code>. The normal usage is: <code>Gc.set { (Gc.get()) with Gc.verbose = 0x00d }</code>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-set", "title": "set", "contents": "set control unit ", "rendered": "<h4 class='item'>let set: <a href=\"./api/Gc.html#type-control\">control</a> => unit</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-get", "title": "get", "contents": "Return the current values of the GC parameters in a control record.", "rendered": "Return the current values of the GC parameters in a <code>control</code> record.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-get", "title": "get", "contents": "get unit control ", "rendered": "<h4 class='item'>let get: unit => <a href=\"./api/Gc.html#type-control\">control</a></h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-counters", "title": "counters", "contents": "Return (minor_words, promoted_words, major_words). This function is as fast as quick_stat.", "rendered": "Return <code>(minor_words, promoted_words, major_words)</code>. This function is as fast as <code>quick_stat</code>.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-counters", "title": "counters", "contents": "counters unit float float float ", "rendered": "<h4 class='item'>let counters: unit => (float, float, float)</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-quick_stat", "title": "quick_stat", "contents": "Same as stat except that live_words, live_blocks, free_words, free_blocks, largest_free, and fragments are set to 0. This function is much faster than stat because it does not need to go through the heap.", "rendered": "Same as <code>stat</code> except that <code>live_words</code>, <code>live_blocks</code>, <code>free_words</code>, <code>free_blocks</code>, <code>largest_free</code>, and <code>fragments</code> are set to 0. This function is much faster than <code>stat</code> because it does not need to go through the heap.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-quick_stat", "title": "quick_stat", "contents": "quick_stat unit stat ", "rendered": "<h4 class='item'>let quick_stat: unit => <a href=\"./api/Gc.html#type-stat\">stat</a></h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-stat", "title": "stat", "contents": "Return the current values of the memory management counters in a stat record. This function examines every heap block to get the statistics.", "rendered": "Return the current values of the memory management counters in a <code>stat</code> record. This function examines every heap block to get the statistics.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#value-stat", "title": "stat", "contents": "stat unit stat ", "rendered": "<h4 class='item'>let stat: unit => <a href=\"./api/Gc.html#type-stat\">stat</a></h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-control", "title": "control", "contents": "The GC parameters are given as a control record. Note that these parameters can also be initialised by setting the OCAMLRUNPARAM environment variable. See the documentation of ocamlrun.", "rendered": "The GC parameters are given as a <code>control</code> record. Note that these parameters can also be initialised by setting the OCAMLRUNPARAM environment variable. See the documentation of <code>ocamlrun</code>.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-control", "title": "control", "contents": "control minor_heap_size int major_heap_increment int space_overhead int verbose int max_overhead int stack_limit int allocation_policy int", "rendered": "<h4 class='item'>type control = {\n  mut minor_heap_size: int,\n  mut major_heap_increment: int,\n  mut space_overhead: int,\n  mut verbose: int,\n  mut max_overhead: int,\n  mut stack_limit: int,\n  mut allocation_policy: int\n}</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-stat", "title": "stat", "contents": "The total amount of memory allocated by the program since it was started is (in words) minor_words + major_words - promoted_words. Multiply by the word size (4 on a 32-bit machine, 8 on a 64-bit machine) to get the number of bytes.", "rendered": "The total amount of memory allocated by the program since it was started is (in words) <code>minor_words + major_words - promoted_words</code>. Multiply by the word size (4 on a 32-bit machine, 8 on a 64-bit machine) to get the number of bytes.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-stat", "title": "stat", "contents": "The memory management counters are returned in a stat record.", "rendered": "The memory management counters are returned in a <code>stat</code> record.", "breadcrumb": "Gc"},
{"href": "./api/Gc.html#type-stat", "title": "stat", "contents": "stat minor_words float promoted_words float major_words float minor_collections int major_collections int heap_words int heap_chunks int live_words int live_blocks int free_words int free_blocks int largest_free int fragments int compactions int top_heap_words int stack_size int", "rendered": "<h4 class='item'>type stat = {\n  minor_words: float,\n  promoted_words: float,\n  major_words: float,\n  minor_collections: int,\n  major_collections: int,\n  heap_words: int,\n  heap_chunks: int,\n  live_words: int,\n  live_blocks: int,\n  free_words: int,\n  free_blocks: int,\n  largest_free: int,\n  fragments: int,\n  compactions: int,\n  top_heap_words: int,\n  stack_size: int\n}</h4>", "breadcrumb": "Gc"},
{"href": "./api/Gc.html", "title": "Gc", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Gc"},
{"href": "./api/Gc.html", "title": "Gc", "contents": "Memory management control and statistics; finalised values.", "rendered": "Memory management control and statistics; finalised values.", "breadcrumb": "Gc"},
{"href": "./api/CamlinternalOO.html#value-stats", "title": "stats", "contents": "stats unit stats ", "rendered": "<h4 class='item'>let stats: unit => <a href=\"./api/CamlinternalOO.html#type-stats\">stats</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-stats", "title": "stats", "contents": "stats classes int methods int inst_vars int", "rendered": "<h4 class='item'>type stats = {classes: int, methods: int, inst_vars: int}</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#Statistics", "title": "Statistics", "contents": "", "rendered": "", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-params", "title": "params", "contents": "params params", "rendered": "<h4 class='item'>let params: <a href=\"./api/CamlinternalOO.html#type-params\">params</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-params", "title": "params", "contents": "params compact_table bool copy_parent bool clean_when_copying bool retry_count int bucket_small_size int", "rendered": "<h4 class='item'>type params = {\n  mut compact_table: bool,\n  mut copy_parent: bool,\n  mut clean_when_copying: bool,\n  mut retry_count: int,\n  mut bucket_small_size: int\n}</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#Parameters", "title": "Parameters", "contents": "", "rendered": "", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-impl", "title": "impl", "contents": "impl closure", "rendered": "<h4 class='item'>type impl = \n  | GetConst\n  | GetVar\n  | GetEnv\n  | GetMeth\n  | SetVar\n  | AppConst\n  | AppVar\n  | AppEnv\n  | AppMeth\n  | AppConstConst\n  | AppConstVar\n  | AppConstEnv\n  | AppConstMeth\n  | AppVarConst\n  | AppEnvConst\n  | AppMethConst\n  | MethAppConst\n  | MethAppVar\n  | MethAppEnv\n  | MethAppMeth\n  | SendConst\n  | SendVar\n  | SendEnv\n  | SendMeth\n  | Closure(<a href=\"./api/CamlinternalOO.html#type-closure\">closure</a>)\n</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#Builtins-to-reduce-code-size", "title": "Builtins to reduce code size", "contents": "", "rendered": "", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-lookup_tables", "title": "lookup_tables", "contents": "lookup_tables tables array closure tables  ", "rendered": "<h4 class='item'>let lookup_tables: (<a href=\"./api/CamlinternalOO.html#type-tables\">tables</a>, array(<a href=\"./api/CamlinternalOO.html#type-closure\">closure</a>)) => <a href=\"./api/CamlinternalOO.html#type-tables\">tables</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-tables", "title": "tables", "contents": "tables ", "rendered": "<h4 class='item'>type tables</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#Table-cache", "title": "Table cache", "contents": "", "rendered": "", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-get_public_method", "title": "get_public_method", "contents": "get_public_method obj tag closure  ", "rendered": "<h4 class='item'>let get_public_method: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-tag\">tag</a>) => <a href=\"./api/CamlinternalOO.html#type-closure\">closure</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-sendself", "title": "sendself", "contents": "sendself obj label t  ", "rendered": "<h4 class='item'>let sendself: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-label\">label</a>) => <a href=\"./api/CamlinternalOO.html#type-t\">t</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-sendcache", "title": "sendcache", "contents": "sendcache obj tag t int t    ", "rendered": "<h4 class='item'>let sendcache: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-tag\">tag</a>, <a href=\"./api/CamlinternalOO.html#type-t\">t</a>, int) => <a href=\"./api/CamlinternalOO.html#type-t\">t</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-create_object_and_run_initializers", "title": "create_object_and_run_initializers", "contents": "create_object_and_run_initializers obj table obj  ", "rendered": "<h4 class='item'>let create_object_and_run_initializers: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-table\">table</a>) => <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-run_initializers_opt", "title": "run_initializers_opt", "contents": "run_initializers_opt obj obj table obj   ", "rendered": "<h4 class='item'>let run_initializers_opt: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-table\">table</a>) => <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-run_initializers", "title": "run_initializers", "contents": "run_initializers obj table unit  ", "rendered": "<h4 class='item'>let run_initializers: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-table\">table</a>) => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-create_object_opt", "title": "create_object_opt", "contents": "create_object_opt obj table obj  ", "rendered": "<h4 class='item'>let create_object_opt: (<a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>, <a href=\"./api/CamlinternalOO.html#type-table\">table</a>) => <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-create_object", "title": "create_object", "contents": "create_object table obj ", "rendered": "<h4 class='item'>let create_object: <a href=\"./api/CamlinternalOO.html#type-table\">table</a> => <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-copy", "title": "copy", "contents": "copy ", "rendered": "<h4 class='item'>let copy: &lt; .. &gt; => &lt; .. &gt;</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#Objects", "title": "Objects", "contents": "", "rendered": "", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-make_class_store", "title": "make_class_store", "contents": "make_class_store array string table t  init_table unit   ", "rendered": "<h4 class='item'>let make_class_store: (\n  array(string),\n  <a href=\"./api/CamlinternalOO.html#type-table\">table</a> => <a href=\"./api/CamlinternalOO.html#type-t\">t</a>,\n  <a href=\"./api/CamlinternalOO.html#type-init_table\">init_table</a>\n) => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-init_table", "title": "init_table", "contents": "init_table ", "rendered": "<h4 class='item'>type init_table</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-make_class", "title": "make_class", "contents": "make_class array string table Obj t t   t table Obj t t   Obj t t  Obj t  ", "rendered": "<h4 class='item'>let make_class: (array(string), (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, <a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>) => <a href=\"./api/CamlinternalOO.html#type-t\">t</a>) => (\n  <a href=\"./api/CamlinternalOO.html#type-t\">t</a>,\n  (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, <a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>) => <a href=\"./api/CamlinternalOO.html#type-t\">t</a>,\n  <a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a> => <a href=\"./api/CamlinternalOO.html#type-t\">t</a>,\n  <a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>\n)</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-inherits", "title": "inherits", "contents": "inherits table array string array string array string t table obj Obj t   t obj bool array Obj t      ", "rendered": "<h4 class='item'>let inherits: (\n  <a href=\"./api/CamlinternalOO.html#type-table\">table</a>,\n  array(string),\n  array(string),\n  array(string),\n  (<a href=\"./api/CamlinternalOO.html#type-t\">t</a>, (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>) => <a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>, <a href=\"./api/CamlinternalOO.html#type-t\">t</a>, <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a>),\n  bool\n) => array(<a href=\"./api/Obj.html\">Obj</a>.<a href=\"./api/Obj.html#type-t\">t</a>)</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-init_class", "title": "init_class", "contents": "init_class table unit ", "rendered": "<h4 class='item'>let init_class: <a href=\"./api/CamlinternalOO.html#type-table\">table</a> => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-create_table", "title": "create_table", "contents": "create_table array string table ", "rendered": "<h4 class='item'>let create_table: array(string) => <a href=\"./api/CamlinternalOO.html#type-table\">table</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-dummy_table", "title": "dummy_table", "contents": "dummy_table table", "rendered": "<h4 class='item'>let dummy_table: <a href=\"./api/CamlinternalOO.html#type-table\">table</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-add_initializer", "title": "add_initializer", "contents": "add_initializer table obj unit  unit  ", "rendered": "<h4 class='item'>let add_initializer: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, <a href=\"./api/CamlinternalOO.html#type-obj\">obj</a> => unit) => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-widen", "title": "widen", "contents": "widen table unit ", "rendered": "<h4 class='item'>let widen: <a href=\"./api/CamlinternalOO.html#type-table\">table</a> => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-narrow", "title": "narrow", "contents": "narrow table array string array string array string unit    ", "rendered": "<h4 class='item'>let narrow: (\n  <a href=\"./api/CamlinternalOO.html#type-table\">table</a>,\n  array(string),\n  array(string),\n  array(string)\n) => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-set_methods", "title": "set_methods", "contents": "set_methods table array label unit  ", "rendered": "<h4 class='item'>let set_methods: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, array(<a href=\"./api/CamlinternalOO.html#type-label\">label</a>)) => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-set_method", "title": "set_method", "contents": "set_method table label meth unit   ", "rendered": "<h4 class='item'>let set_method: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, <a href=\"./api/CamlinternalOO.html#type-label\">label</a>, <a href=\"./api/CamlinternalOO.html#type-meth\">meth</a>) => unit</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-get_method", "title": "get_method", "contents": "get_method table label meth  ", "rendered": "<h4 class='item'>let get_method: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, <a href=\"./api/CamlinternalOO.html#type-label\">label</a>) => <a href=\"./api/CamlinternalOO.html#type-meth\">meth</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-get_method_labels", "title": "get_method_labels", "contents": "get_method_labels table array string array label  ", "rendered": "<h4 class='item'>let get_method_labels: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, array(string)) => array(\n  <a href=\"./api/CamlinternalOO.html#type-label\">label</a>\n)</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-get_method_label", "title": "get_method_label", "contents": "get_method_label table string label  ", "rendered": "<h4 class='item'>let get_method_label: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, string) => <a href=\"./api/CamlinternalOO.html#type-label\">label</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-get_variables", "title": "get_variables", "contents": "get_variables table array string array int  ", "rendered": "<h4 class='item'>let get_variables: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, array(string)) => array(int)</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-get_variable", "title": "get_variable", "contents": "get_variable table string int  ", "rendered": "<h4 class='item'>let get_variable: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, string) => int</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-new_methods_variables", "title": "new_methods_variables", "contents": "new_methods_variables table array string array string array label   ", "rendered": "<h4 class='item'>let new_methods_variables: (\n  <a href=\"./api/CamlinternalOO.html#type-table\">table</a>,\n  array(string),\n  array(string)\n) => array(<a href=\"./api/CamlinternalOO.html#type-label\">label</a>)</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-new_variable", "title": "new_variable", "contents": "new_variable table string int  ", "rendered": "<h4 class='item'>let new_variable: (<a href=\"./api/CamlinternalOO.html#type-table\">table</a>, string) => int</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-new_method", "title": "new_method", "contents": "new_method table label ", "rendered": "<h4 class='item'>let new_method: <a href=\"./api/CamlinternalOO.html#type-table\">table</a> => <a href=\"./api/CamlinternalOO.html#type-label\">label</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#value-public_method_label", "title": "public_method_label", "contents": "public_method_label string tag ", "rendered": "<h4 class='item'>let public_method_label: string => <a href=\"./api/CamlinternalOO.html#type-tag\">tag</a></h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-closure", "title": "closure", "contents": "closure ", "rendered": "<h4 class='item'>type closure</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-obj", "title": "obj", "contents": "obj ", "rendered": "<h4 class='item'>type obj</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-meth", "title": "meth", "contents": "meth ", "rendered": "<h4 class='item'>type meth</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-table", "title": "table", "contents": "table ", "rendered": "<h4 class='item'>type table</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-label", "title": "label", "contents": "label ", "rendered": "<h4 class='item'>type label</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#type-tag", "title": "tag", "contents": "tag ", "rendered": "<h4 class='item'>type tag</h4>", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html#Classes", "title": "Classes", "contents": "", "rendered": "", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html", "title": "CamlinternalOO", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CamlinternalOO"},
{"href": "./api/CamlinternalOO.html", "title": "CamlinternalOO", "contents": "Run-time support for objects and classes. All functions in this module are for system use only, not for the casual user.", "rendered": "Run-time support for objects and classes. All functions in this module are for system use only, not for the casual user.", "breadcrumb": "CamlinternalOO"},
{"href": "./api/Lazy.html#value-lazy_is_val", "title": "lazy_is_val", "contents": "lazy_is_val t bool ", "rendered": "<h4 class='item'>let lazy_is_val: <a href=\"./api/Lazy.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-lazy_from_val", "title": "lazy_from_val", "contents": "lazy_from_val t ", "rendered": "<h4 class='item'>let lazy_from_val: 'a => <a href=\"./api/Lazy.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-lazy_from_fun", "title": "lazy_from_fun", "contents": "lazy_from_fun unit  t ", "rendered": "<h4 class='item'>let lazy_from_fun: unit => 'a => <a href=\"./api/Lazy.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-is_val", "title": "is_val", "contents": "is_val t bool ", "rendered": "<h4 class='item'>let is_val: <a href=\"./api/Lazy.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-from_val", "title": "from_val", "contents": "from_val t ", "rendered": "<h4 class='item'>let from_val: 'a => <a href=\"./api/Lazy.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-from_fun", "title": "from_fun", "contents": "from_fun unit  t ", "rendered": "<h4 class='item'>let from_fun: unit => 'a => <a href=\"./api/Lazy.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-force_val", "title": "force_val", "contents": "force_val t ", "rendered": "<h4 class='item'>let force_val: <a href=\"./api/Lazy.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#value-force", "title": "force", "contents": "force t ", "rendered": "<h4 class='item'>let force: <a href=\"./api/Lazy.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html#type-t", "title": "t", "contents": "t lazy_t", "rendered": "<h4 class='item'>type t('a) = lazy_t('a)</h4>", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html", "title": "Lazy", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Lazy"},
{"href": "./api/Lazy.html", "title": "Lazy", "contents": "Deferred computations.", "rendered": "Deferred computations.", "breadcrumb": "Lazy"},
{"href": "./api/Callback.html#value-register_exception", "title": "register_exception", "contents": "Callback.register_exception n exn registers the exception contained in the exception value exn under the name n. C code can later retrieve a handle to the exception by calling caml_named_value(n). The exception value thus obtained is suitable for passing as first argument to raise_constant or raise_with_arg.", "rendered": "<code>Callback.register_exception n exn</code> registers the exception contained in the exception value <code>exn</code> under the name <code>n</code>. C code can later retrieve a handle to the exception by calling <code>caml_named_value(n)</code>. The exception value thus obtained is suitable for passing as first argument to <code>raise_constant</code> or <code>raise_with_arg</code>.", "breadcrumb": "Callback"},
{"href": "./api/Callback.html#value-register_exception", "title": "register_exception", "contents": "register_exception string exn unit  ", "rendered": "<h4 class='item'>let register_exception: (string, exn) => unit</h4>", "breadcrumb": "Callback"},
{"href": "./api/Callback.html#value-register", "title": "register", "contents": "Callback.register n v registers the value v under the name n. C code can later retrieve a handle to v by calling caml_named_value(n).", "rendered": "<code>Callback.register n v</code> registers the value <code>v</code> under the name <code>n</code>. C code can later retrieve a handle to <code>v</code> by calling <code>caml_named_value(n)</code>.", "breadcrumb": "Callback"},
{"href": "./api/Callback.html#value-register", "title": "register", "contents": "register string unit  ", "rendered": "<h4 class='item'>let register: (string, 'a) => unit</h4>", "breadcrumb": "Callback"},
{"href": "./api/Callback.html", "title": "Callback", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Callback"},
{"href": "./api/Callback.html", "title": "Callback", "contents": "This module allows OCaml values to be registered with the C runtime under a symbolic name, so that C code can later call back registered OCaml functions, or raise registered OCaml exceptions.", "rendered": "This module allows OCaml values to be registered with the C runtime under a symbolic name, so that C code can later call back registered OCaml functions, or raise registered OCaml exceptions.", "breadcrumb": "Callback"},
{"href": "./api/Callback.html", "title": "Callback", "contents": "Registering OCaml values with the C runtime.", "rendered": "Registering OCaml values with the C runtime.", "breadcrumb": "Callback"},
{"href": "./api/Stream.html#value-dump", "title": "dump", "contents": "dump unit  t unit  ", "rendered": "<h4 class='item'>let dump: ('a => unit, <a href=\"./api/Stream.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-slazy", "title": "slazy", "contents": "slazy unit t  t ", "rendered": "<h4 class='item'>let slazy: unit => <a href=\"./api/Stream.html#type-t\">t</a>('a) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-sempty", "title": "sempty", "contents": "sempty t", "rendered": "<h4 class='item'>let sempty: <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-lsing", "title": "lsing", "contents": "lsing unit  t ", "rendered": "<h4 class='item'>let lsing: unit => 'a => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-lcons", "title": "lcons", "contents": "lcons unit  t t  ", "rendered": "<h4 class='item'>let lcons: (unit => 'a, <a href=\"./api/Stream.html#type-t\">t</a>('a)) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-lapp", "title": "lapp", "contents": "lapp unit t  t t  ", "rendered": "<h4 class='item'>let lapp: (unit => <a href=\"./api/Stream.html#type-t\">t</a>('a), <a href=\"./api/Stream.html#type-t\">t</a>('a)) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-ising", "title": "ising", "contents": "ising t ", "rendered": "<h4 class='item'>let ising: 'a => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-icons", "title": "icons", "contents": "icons t t  ", "rendered": "<h4 class='item'>let icons: ('a, <a href=\"./api/Stream.html#type-t\">t</a>('a)) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-iapp", "title": "iapp", "contents": "iapp t t t  ", "rendered": "<h4 class='item'>let iapp: (<a href=\"./api/Stream.html#type-t\">t</a>('a), <a href=\"./api/Stream.html#type-t\">t</a>('a)) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html", "title": "Stream", "contents": "/*", "rendered": "/*", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-npeek", "title": "npeek", "contents": "npeek n returns the list of the n first elements of the stream, or all its remaining elements if less than n elements are available.", "rendered": "<code>npeek n</code> returns the list of the <code>n</code> first elements of the stream, or all its remaining elements if less than <code>n</code> elements are available.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-npeek", "title": "npeek", "contents": "npeek int t list  ", "rendered": "<h4 class='item'>let npeek: (int, <a href=\"./api/Stream.html#type-t\">t</a>('a)) => list('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-count", "title": "count", "contents": "Return the current count of the stream elements, i.e. the number of the stream elements discarded.", "rendered": "Return the current count of the stream elements, i.e. the number of the stream elements discarded.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-count", "title": "count", "contents": "count t int ", "rendered": "<h4 class='item'>let count: <a href=\"./api/Stream.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-junk", "title": "junk", "contents": "Remove the first element of the stream, possibly unfreezing it before.", "rendered": "Remove the first element of the stream, possibly unfreezing it before.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-junk", "title": "junk", "contents": "junk t unit ", "rendered": "<h4 class='item'>let junk: <a href=\"./api/Stream.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-peek", "title": "peek", "contents": "Return Some of &quot;the first element&quot; of the stream, or None if the stream is empty.", "rendered": "Return <code>Some</code> of &quot;the first element&quot; of the stream, or <code>None</code> if the stream is empty.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-peek", "title": "peek", "contents": "peek t option ", "rendered": "<h4 class='item'>let peek: <a href=\"./api/Stream.html#type-t\">t</a>('a) => option('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#Useful-functions", "title": "Useful functions", "contents": "", "rendered": "", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-empty", "title": "empty", "contents": "Return () if the stream is empty, else raise Stream.Failure.", "rendered": "Return <code>()</code> if the stream is empty, else raise <code>Stream.Failure</code>.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-empty", "title": "empty", "contents": "empty t unit ", "rendered": "<h4 class='item'>let empty: <a href=\"./api/Stream.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-next", "title": "next", "contents": "Return the first element of the stream and remove it from the stream. Raise Stream.Failure if the stream is empty.", "rendered": "Return the first element of the stream and remove it from the stream. Raise Stream.Failure if the stream is empty.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-next", "title": "next", "contents": "next t ", "rendered": "<h4 class='item'>let next: <a href=\"./api/Stream.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#Predefined-parsers", "title": "Predefined parsers", "contents": "", "rendered": "", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-iter", "title": "iter", "contents": "Stream.iter f s scans the whole stream s, applying function f in turn to each stream element encountered.", "rendered": "<code>Stream.iter f s</code> scans the whole stream s, applying function <code>f</code> in turn to each stream element encountered.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-iter", "title": "iter", "contents": "iter unit  t unit  ", "rendered": "<h4 class='item'>let iter: ('a => unit, <a href=\"./api/Stream.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#Stream-iterator", "title": "Stream iterator", "contents": "", "rendered": "", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_channel", "title": "of_channel", "contents": "Return the stream of the characters read from the input channel.", "rendered": "Return the stream of the characters read from the input channel.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_channel", "title": "of_channel", "contents": "of_channel in_channel t char ", "rendered": "<h4 class='item'>let of_channel: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/Stream.html#type-t\">t</a>(char)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_bytes", "title": "of_bytes", "contents": "Return the stream of the characters of the bytes parameter.", "rendered": "Return the stream of the characters of the bytes parameter.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_bytes", "title": "of_bytes", "contents": "of_bytes bytes t char ", "rendered": "<h4 class='item'>let of_bytes: bytes => <a href=\"./api/Stream.html#type-t\">t</a>(char)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_string", "title": "of_string", "contents": "Return the stream of the characters of the string parameter.", "rendered": "Return the stream of the characters of the string parameter.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_string", "title": "of_string", "contents": "of_string string t char ", "rendered": "<h4 class='item'>let of_string: string => <a href=\"./api/Stream.html#type-t\">t</a>(char)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_list", "title": "of_list", "contents": "Return the stream holding the elements of the list in the same order.", "rendered": "Return the stream holding the elements of the list in the same order.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-of_list", "title": "of_list", "contents": "of_list list t ", "rendered": "<h4 class='item'>let of_list: list('a) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-from", "title": "from", "contents": "Do note that the indices passed to f may not start at 0 in the general case. For example, [&lt; &#39;0; &#39;1; Stream.from f &gt;] would call f the first time with count 2.", "rendered": "Do note that the indices passed to <code>f</code> may not start at <code>0</code> in the general case. For example, <code>[&lt; &#39;0; &#39;1; Stream.from f &gt;]</code> would call <code>f</code> the first time with count <code>2</code>.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-from", "title": "from", "contents": "Stream.from f returns a stream built from the function f. To create a new stream element, the function f is called with the current stream count. The user function f must return either Some &lt;value&gt; for a value or None to specify the end of the stream.", "rendered": "<code>Stream.from f</code> returns a stream built from the function <code>f</code>. To create a new stream element, the function <code>f</code> is called with the current stream count. The user function <code>f</code> must return either <code>Some &lt;value&gt;</code> for a value or <code>None</code> to specify the end of the stream.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#value-from", "title": "from", "contents": "from int option  t ", "rendered": "<h4 class='item'>let from: int => option('a) => <a href=\"./api/Stream.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#Stream-builders", "title": "Stream builders", "contents": "", "rendered": "", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#type-t", "title": "t", "contents": "The type of streams holding values of type &#39;a.", "rendered": "The type of streams holding values of type <code>&#39;a</code>.", "breadcrumb": "Stream"},
{"href": "./api/Stream.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Stream"},
{"href": "./api/Stream.html", "title": "Stream", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Stream"},
{"href": "./api/Stream.html", "title": "Stream", "contents": "Streams and parsers.", "rendered": "Streams and parsers.", "breadcrumb": "Stream"},
{"href": "./api/Random.html#value-set_state", "title": "set_state", "contents": "Set the state of the generator used by the basic functions.", "rendered": "Set the state of the generator used by the basic functions.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-set_state", "title": "set_state", "contents": "set_state State t unit ", "rendered": "<h4 class='item'>let set_state: <a href=\"./api/Random.html#module-State\">State</a>.<a href=\"./api/Random.html#type-State.t\">t</a> => unit</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-get_state", "title": "get_state", "contents": "Return the current state of the generator used by the basic functions.", "rendered": "Return the current state of the generator used by the basic functions.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-get_state", "title": "get_state", "contents": "get_state unit State t ", "rendered": "<h4 class='item'>let get_state: unit => <a href=\"./api/Random.html#module-State\">State</a>.<a href=\"./api/Random.html#type-State.t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.bool", "title": "State.bool", "contents": "These functions are the same as the basic functions, except that they use (and update) the given PRNG state instead of the default one.", "rendered": "These functions are the same as the basic functions, except that they use (and update) the given PRNG state instead of the default one.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.bool", "title": "State.bool", "contents": "bool t bool ", "rendered": "<h4 class='item'>let bool: <a href=\"./api/Random.html#type-State.t\">t</a> => bool</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.float", "title": "State.float", "contents": "float t float float  ", "rendered": "<h4 class='item'>let float: (<a href=\"./api/Random.html#type-State.t\">t</a>, float) => float</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.int64", "title": "State.int64", "contents": "int64 t Int64 t Int64 t  ", "rendered": "<h4 class='item'>let int64: (<a href=\"./api/Random.html#type-State.t\">t</a>, <a href=\"./api/Int64.html\">Int64</a>.<a href=\"./api/Int64.html#type-t\">t</a>) => <a href=\"./api/Int64.html\">Int64</a>.<a href=\"./api/Int64.html#type-t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.nativeint", "title": "State.nativeint", "contents": "nativeint t Nativeint t Nativeint t  ", "rendered": "<h4 class='item'>let nativeint: (<a href=\"./api/Random.html#type-State.t\">t</a>, <a href=\"./api/Nativeint.html\">Nativeint</a>.<a href=\"./api/Nativeint.html#type-t\">t</a>) => <a href=\"./api/Nativeint.html\">Nativeint</a>.<a href=\"./api/Nativeint.html#type-t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.int32", "title": "State.int32", "contents": "int32 t Int32 t Int32 t  ", "rendered": "<h4 class='item'>let int32: (<a href=\"./api/Random.html#type-State.t\">t</a>, <a href=\"./api/Int32.html\">Int32</a>.<a href=\"./api/Int32.html#type-t\">t</a>) => <a href=\"./api/Int32.html\">Int32</a>.<a href=\"./api/Int32.html#type-t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.int", "title": "State.int", "contents": "int t int int  ", "rendered": "<h4 class='item'>let int: (<a href=\"./api/Random.html#type-State.t\">t</a>, int) => int</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.bits", "title": "State.bits", "contents": "bits t int ", "rendered": "<h4 class='item'>let bits: <a href=\"./api/Random.html#type-State.t\">t</a> => int</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.copy", "title": "State.copy", "contents": "Return a copy of the given state.", "rendered": "Return a copy of the given state.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.copy", "title": "State.copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Random.html#type-State.t\">t</a> => <a href=\"./api/Random.html#type-State.t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.make_self_init", "title": "State.make_self_init", "contents": "Create a new state and initialize it with a system-dependent low-entropy seed.", "rendered": "Create a new state and initialize it with a system-dependent low-entropy seed.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.make_self_init", "title": "State.make_self_init", "contents": "make_self_init unit t ", "rendered": "<h4 class='item'>let make_self_init: unit => <a href=\"./api/Random.html#type-State.t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.make", "title": "State.make", "contents": "Create a new state and initialize it with the given seed.", "rendered": "Create a new state and initialize it with the given seed.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-State.make", "title": "State.make", "contents": "make array int t ", "rendered": "<h4 class='item'>let make: array(int) => <a href=\"./api/Random.html#type-State.t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#type-State.t", "title": "State.t", "contents": "The type of PRNG states.", "rendered": "The type of PRNG states.", "breadcrumb": "Random"},
{"href": "./api/Random.html#type-State.t", "title": "State.t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#module-State", "title": "State", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Random"},
{"href": "./api/Random.html#module-State", "title": "State", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Random"},
{"href": "./api/Random.html", "title": "Random", "contents": "The functions from module State manipulate the current state of the random generator explicitly. This allows using one or several deterministic PRNGs, even in a multi-threaded program, without interference from other parts of the program.", "rendered": "The functions from module <code>State</code> manipulate the current state of the random generator explicitly. This allows using one or several deterministic PRNGs, even in a multi-threaded program, without interference from other parts of the program.", "breadcrumb": "Random"},
{"href": "./api/Random.html#Advanced-functions", "title": "Advanced functions", "contents": "", "rendered": "", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-bool", "title": "bool", "contents": "Random.bool () returns true or false with probability 0.5 each.", "rendered": "<code>Random.bool ()</code> returns <code>true</code> or <code>false</code> with probability 0.5 each.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-bool", "title": "bool", "contents": "bool unit bool ", "rendered": "<h4 class='item'>let bool: unit => bool</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-float", "title": "float", "contents": "Random.float bound returns a random floating-point number between 0 and bound (inclusive). If bound is negative, the result is negative or zero. If bound is 0, the result is 0.", "rendered": "<code>Random.float bound</code> returns a random floating-point number between 0 and <code>bound</code> (inclusive). If <code>bound</code> is negative, the result is negative or zero. If <code>bound</code> is 0, the result is 0.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-float", "title": "float", "contents": "float float float ", "rendered": "<h4 class='item'>let float: float => float</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-int64", "title": "int64", "contents": "int64 Int64 t Int64 t ", "rendered": "<h4 class='item'>let int64: <a href=\"./api/Int64.html\">Int64</a>.<a href=\"./api/Int64.html#type-t\">t</a> => <a href=\"./api/Int64.html\">Int64</a>.<a href=\"./api/Int64.html#type-t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-nativeint", "title": "nativeint", "contents": "nativeint Nativeint t Nativeint t ", "rendered": "<h4 class='item'>let nativeint: <a href=\"./api/Nativeint.html\">Nativeint</a>.<a href=\"./api/Nativeint.html#type-t\">t</a> => <a href=\"./api/Nativeint.html\">Nativeint</a>.<a href=\"./api/Nativeint.html#type-t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-int32", "title": "int32", "contents": "int32 Int32 t Int32 t ", "rendered": "<h4 class='item'>let int32: <a href=\"./api/Int32.html\">Int32</a>.<a href=\"./api/Int32.html#type-t\">t</a> => <a href=\"./api/Int32.html\">Int32</a>.<a href=\"./api/Int32.html#type-t\">t</a></h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-int", "title": "int", "contents": "Random.int bound returns a random integer between 0 (inclusive) and bound (exclusive). bound must be greater than 0 and less than 2Superscript.", "rendered": "<code>Random.int bound</code> returns a random integer between 0 (inclusive) and <code>bound</code> (exclusive). <code>bound</code> must be greater than 0 and less than 2Superscript.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-int", "title": "int", "contents": "int int int ", "rendered": "<h4 class='item'>let int: int => int</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-bits", "title": "bits", "contents": "Return 30 random bits in a nonnegative integer.", "rendered": "Return 30 random bits in a nonnegative integer.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-bits", "title": "bits", "contents": "bits unit int ", "rendered": "<h4 class='item'>let bits: unit => int</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-self_init", "title": "self_init", "contents": "Initialize the generator with a random seed chosen in a system-dependent way. If /dev/urandom is available on the host machine, it is used to provide a highly random initial seed. Otherwise, a less random seed is computed from system parameters (current time, process IDs).", "rendered": "Initialize the generator with a random seed chosen in a system-dependent way. If <code>/dev/urandom</code> is available on the host machine, it is used to provide a highly random initial seed. Otherwise, a less random seed is computed from system parameters (current time, process IDs).", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-self_init", "title": "self_init", "contents": "self_init unit unit ", "rendered": "<h4 class='item'>let self_init: unit => unit</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-full_init", "title": "full_init", "contents": "Same as init but takes more data as seed.", "rendered": "Same as init but takes more data as seed.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-full_init", "title": "full_init", "contents": "full_init array int unit ", "rendered": "<h4 class='item'>let full_init: array(int) => unit</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-init", "title": "init", "contents": "Initialize the generator, using the argument as a seed. The same seed will always yield the same sequence of numbers.", "rendered": "Initialize the generator, using the argument as a seed. The same seed will always yield the same sequence of numbers.", "breadcrumb": "Random"},
{"href": "./api/Random.html#value-init", "title": "init", "contents": "init int unit ", "rendered": "<h4 class='item'>let init: int => unit</h4>", "breadcrumb": "Random"},
{"href": "./api/Random.html#Basic-functions", "title": "Basic functions", "contents": "", "rendered": "", "breadcrumb": "Random"},
{"href": "./api/Random.html", "title": "Random", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Random"},
{"href": "./api/Random.html", "title": "Random", "contents": "Pseudo-random number generators (PRNG).", "rendered": "Pseudo-random number generators (PRNG).", "breadcrumb": "Random"},
{"href": "./api/Std_exit.html", "title": "Std_exit", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Std_exit"},
{"href": "./api/Std_exit.html", "title": "Std_exit", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "Std_exit"},
{"href": "./api/Std_exit.html#Std_exit", "title": "Std_exit", "contents": "", "rendered": "", "breadcrumb": "Std_exit"},
{"href": "./api/Obj.html#value-unmarshal", "title": "unmarshal", "contents": "unmarshal bytes int t int  ", "rendered": "<h4 class='item'>let unmarshal: (bytes, int) => (<a href=\"./api/Obj.html#type-t\">t</a>, int)</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-marshal", "title": "marshal", "contents": "marshal t bytes ", "rendered": "<h4 class='item'>let marshal: <a href=\"./api/Obj.html#type-t\">t</a> => bytes</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html", "title": "Obj", "contents": "The following two functions are deprecated. Use module Marshal instead.", "rendered": "The following two functions are deprecated. Use module Marshal instead.", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-extension_slot", "title": "extension_slot", "contents": "extension_slot t ", "rendered": "<h4 class='item'>let extension_slot: 'a => <a href=\"./api/Obj.html#type-t\">t</a></h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-extension_id", "title": "extension_id", "contents": "extension_id int ", "rendered": "<h4 class='item'>let extension_id: 'a => int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-extension_name", "title": "extension_name", "contents": "extension_name string ", "rendered": "<h4 class='item'>let extension_name: 'a => string</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-unaligned_tag", "title": "unaligned_tag", "contents": "unaligned_tag int", "rendered": "<h4 class='item'>let unaligned_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-out_of_heap_tag", "title": "out_of_heap_tag", "contents": "out_of_heap_tag int", "rendered": "<h4 class='item'>let out_of_heap_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-int_tag", "title": "int_tag", "contents": "int_tag int", "rendered": "<h4 class='item'>let int_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-final_tag", "title": "final_tag", "contents": "final_tag int", "rendered": "<h4 class='item'>let final_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-custom_tag", "title": "custom_tag", "contents": "custom_tag int", "rendered": "<h4 class='item'>let custom_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-double_array_tag", "title": "double_array_tag", "contents": "double_array_tag int", "rendered": "<h4 class='item'>let double_array_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-double_tag", "title": "double_tag", "contents": "double_tag int", "rendered": "<h4 class='item'>let double_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-string_tag", "title": "string_tag", "contents": "string_tag int", "rendered": "<h4 class='item'>let string_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-abstract_tag", "title": "abstract_tag", "contents": "abstract_tag int", "rendered": "<h4 class='item'>let abstract_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-no_scan_tag", "title": "no_scan_tag", "contents": "no_scan_tag int", "rendered": "<h4 class='item'>let no_scan_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-forward_tag", "title": "forward_tag", "contents": "forward_tag int", "rendered": "<h4 class='item'>let forward_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-infix_tag", "title": "infix_tag", "contents": "infix_tag int", "rendered": "<h4 class='item'>let infix_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-object_tag", "title": "object_tag", "contents": "object_tag int", "rendered": "<h4 class='item'>let object_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-closure_tag", "title": "closure_tag", "contents": "closure_tag int", "rendered": "<h4 class='item'>let closure_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-lazy_tag", "title": "lazy_tag", "contents": "lazy_tag int", "rendered": "<h4 class='item'>let lazy_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-last_non_constant_constructor_tag", "title": "last_non_constant_constructor_tag", "contents": "last_non_constant_constructor_tag int", "rendered": "<h4 class='item'>let last_non_constant_constructor_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-first_non_constant_constructor_tag", "title": "first_non_constant_constructor_tag", "contents": "first_non_constant_constructor_tag int", "rendered": "<h4 class='item'>let first_non_constant_constructor_tag: int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-add_offset", "title": "add_offset", "contents": "add_offset t Int32 t t  ", "rendered": "<h4 class='item'>let add_offset: (<a href=\"./api/Obj.html#type-t\">t</a>, <a href=\"./api/Int32.html\">Int32</a>.<a href=\"./api/Int32.html#type-t\">t</a>) => <a href=\"./api/Obj.html#type-t\">t</a></h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-truncate", "title": "truncate", "contents": "truncate t int unit  ", "rendered": "<h4 class='item'>let truncate: (<a href=\"./api/Obj.html#type-t\">t</a>, int) => unit</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-dup", "title": "dup", "contents": "dup t t ", "rendered": "<h4 class='item'>let dup: <a href=\"./api/Obj.html#type-t\">t</a> => <a href=\"./api/Obj.html#type-t\">t</a></h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-new_block", "title": "new_block", "contents": "new_block int int t  ", "rendered": "<h4 class='item'>let new_block: (int, int) => <a href=\"./api/Obj.html#type-t\">t</a></h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-set_double_field", "title": "set_double_field", "contents": "set_double_field t int float unit   ", "rendered": "<h4 class='item'>let set_double_field: (<a href=\"./api/Obj.html#type-t\">t</a>, int, float) => unit</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-double_field", "title": "double_field", "contents": "double_field t int float  ", "rendered": "<h4 class='item'>let double_field: (<a href=\"./api/Obj.html#type-t\">t</a>, int) => float</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-set_field", "title": "set_field", "contents": "set_field t int t unit   ", "rendered": "<h4 class='item'>let set_field: (<a href=\"./api/Obj.html#type-t\">t</a>, int, <a href=\"./api/Obj.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-field", "title": "field", "contents": "field t int t  ", "rendered": "<h4 class='item'>let field: (<a href=\"./api/Obj.html#type-t\">t</a>, int) => <a href=\"./api/Obj.html#type-t\">t</a></h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-size", "title": "size", "contents": "size t int ", "rendered": "<h4 class='item'>let size: <a href=\"./api/Obj.html#type-t\">t</a> => int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-set_tag", "title": "set_tag", "contents": "set_tag t int unit  ", "rendered": "<h4 class='item'>let set_tag: (<a href=\"./api/Obj.html#type-t\">t</a>, int) => unit</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-tag", "title": "tag", "contents": "tag t int ", "rendered": "<h4 class='item'>let tag: <a href=\"./api/Obj.html#type-t\">t</a> => int</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-is_int", "title": "is_int", "contents": "is_int t bool ", "rendered": "<h4 class='item'>let is_int: <a href=\"./api/Obj.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-is_block", "title": "is_block", "contents": "is_block t bool ", "rendered": "<h4 class='item'>let is_block: <a href=\"./api/Obj.html#type-t\">t</a> => bool</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-magic", "title": "magic", "contents": "magic ", "rendered": "<h4 class='item'>let magic: 'a => 'b</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-obj", "title": "obj", "contents": "obj t ", "rendered": "<h4 class='item'>let obj: <a href=\"./api/Obj.html#type-t\">t</a> => 'a</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#value-repr", "title": "repr", "contents": "repr t ", "rendered": "<h4 class='item'>let repr: 'a => <a href=\"./api/Obj.html#type-t\">t</a></h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Obj"},
{"href": "./api/Obj.html", "title": "Obj", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Obj"},
{"href": "./api/Obj.html", "title": "Obj", "contents": "Not for the casual user.", "rendered": "Not for the casual user.", "breadcrumb": "Obj"},
{"href": "./api/Obj.html", "title": "Obj", "contents": "Operations on internal representations of values.", "rendered": "Operations on internal representations of values.", "breadcrumb": "Obj"},
{"href": "./api/CamlinternalFormatBasics.html#value-concat_fmt", "title": "concat_fmt", "contents": "concat_fmt fmt fmt fmt  ", "rendered": "<h4 class='item'>let concat_fmt: (\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('f, 'b, 'c, 'e, 'g, 'h)\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'g, 'h)</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#value-erase_rel", "title": "erase_rel", "contents": "erase_rel fmtty_rel fmtty ", "rendered": "<h4 class='item'>let erase_rel: <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f,\n  'g,\n  'h,\n  'i,\n  'j,\n  'k,\n  'l\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\">fmtty</a>('a, 'b, 'c, 'd, 'e, 'f)</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#value-concat_fmtty", "title": "concat_fmtty", "contents": "concat_fmtty fmtty_rel fmtty_rel fmtty_rel  ", "rendered": "<h4 class='item'>let concat_fmtty: (\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'g1,\n    'b1,\n    'c1,\n    'j1,\n    'd1,\n    'a1,\n    'g2,\n    'b2,\n    'c2,\n    'j2,\n    'd2,\n    'a2\n  ),\n  <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n) => <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n  'g1,\n  'b1,\n  'c1,\n  'j1,\n  'e1,\n  'f1,\n  'g2,\n  'b2,\n  'c2,\n  'j2,\n  'e2,\n  'f2\n)</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-format6", "title": "format6", "contents": "format6 fmt string", "rendered": "<h4 class='item'>type format6('a, 'b, 'c, 'd, 'e, 'f) = \n  | Format(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f), string)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-ignored", "title": "ignored", "contents": "ignored ignored ignored pad_option ignored pad_option ignored int_conv pad_option ignored int_conv pad_option ignored int_conv pad_option ignored int_conv pad_option ignored pad_option prec_option ignored ignored pad_option fmtty ignored pad_option fmtty ignored ignored   pad_option char_set ignored counter ignored ignored", "rendered": "<h4 class='item'>type ignored('a, 'b, 'c, 'd, 'e, 'f) = \n  | Ignored_char: <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'd, 'a)\n  | Ignored_caml_char: <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'd, 'a)\n  | Ignored_string(<a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_caml_string(<a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_int(<a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>, <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_int32(<a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>, <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_nativeint(<a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>, <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_int64(<a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>, <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_float(<a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>, <a href=\"./api/CamlinternalFormatBasics.html#type-prec_option\">prec_option</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_bool: <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'd, 'a)\n  | Ignored_format_arg(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\">fmtty</a>('g, 'h, 'i, 'j, 'k, 'l)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'd, 'a)\n  | Ignored_format_subst(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\">fmtty</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'e, 'f)\n  | Ignored_reader: <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'b => 'x => 'd,\n    'd,\n    'a\n  )\n  | Ignored_scan_char_set(<a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>, <a href=\"./api/CamlinternalFormatBasics.html#type-char_set\">char_set</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_scan_get_counter(<a href=\"./api/CamlinternalFormatBasics.html#type-counter\">counter</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'd,\n    'a\n  )\n  | Ignored_scan_next_char: <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'd, 'a)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-fmt", "title": "fmt", "contents": "List of format elements.", "rendered": "List of format elements.", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-fmt", "title": "fmt", "contents": "fmt fmt fmt char  fmt fmt char  padding string  fmt fmt padding string  fmt fmt int_conv padding precision int  fmt fmt int_conv padding precision int32  fmt fmt int_conv padding precision nativeint  fmt fmt int_conv padding precision int64  fmt fmt float_conv padding precision float  fmt fmt fmt fmt bool  fmt fmt string fmt fmt char fmt fmt pad_option fmtty fmt fmt format6  pad_option fmtty_rel fmt fmt format6  fmt fmt     fmt fmt   formatting_lit fmt fmt formatting_gen fmt fmt fmt fmt    pad_option char_set fmt fmt string  counter fmt fmt int  fmt fmt char  ignored fmt fmt custom_arity unit  fmt fmt fmt", "rendered": "<h4 class='item'>type fmt('a, 'b, 'c, 'd, 'e, 'f) = \n  | Char(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    char => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Caml_char(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    char => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | String(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, string => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Caml_string(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, string => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Int(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, 'y),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('y, int => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Int32(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, 'y),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('y, int32 => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Nativeint(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, 'y),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('y, nativeint => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Int64(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-int_conv\">int_conv</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, 'y),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('y, int64 => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Float(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-float_conv\">float_conv</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('x, 'y),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('y, float => 'a),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'd, 'e, 'f)\n  | Bool(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    bool => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Flush(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | String_literal(\n    string,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  | Char_literal(char, <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Format_arg(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\">fmtty</a>('g, 'h, 'i, 'j, 'k, 'l),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('g, 'h, 'i, 'j, 'k, 'l) => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Format_subst(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'g,\n      'h,\n      'i,\n      'j,\n      'k,\n      'l,\n      'g2,\n      'b,\n      'c,\n      'j2,\n      'd,\n      'a\n    ),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('g, 'h, 'i, 'j, 'k, 'l) => 'g2,\n    'b,\n    'c,\n    'j2,\n    'e,\n    'f\n  )\n  | Alpha(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    (('b, 'x) => 'c, 'x) => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Theta(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    'b => 'c => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Formatting_lit(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_lit\">formatting_lit</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  | Formatting_gen(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_gen\">formatting_gen</a>('a1, 'b, 'c, 'd1, 'e1, 'f1),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('f1, 'b, 'c, 'e1, 'e2, 'f2)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a1, 'b, 'c, 'd1, 'e2, 'f2)\n  | Reader(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    'x => 'a,\n    'b,\n    'c,\n    'b => 'x => 'd,\n    'e,\n    'f\n  )\n  | Scan_char_set(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-pad_option\">pad_option</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-char_set\">char_set</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(string => 'a, 'b, 'c, 'd, 'e, 'f)\n  | Scan_get_counter(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-counter\">counter</a>,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(int => 'a, 'b, 'c, 'd, 'e, 'f)\n  | Scan_next_char(<a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>(\n    char => 'a,\n    'b,\n    'c,\n    'd,\n    'e,\n    'f\n  )\n  | Ignored_param(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-ignored\">ignored</a>('a, 'b, 'c, 'd, 'y, 'x),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('x, 'b, 'c, 'y, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  | Custom(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-custom_arity\">custom_arity</a>('a, 'x, 'y),\n    unit => 'x,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('y, 'b, 'c, 'd, 'e, 'f)\n  | End_of_format: <a href=\"./api/CamlinternalFormatBasics.html#type-fmt\">fmt</a>('f, 'b, 'c, 'e, 'e, 'f)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-fmtty_rel", "title": "fmtty_rel", "contents": "fmtty_rel fmtty_rel fmtty_rel char  char  fmtty_rel fmtty_rel string  string  fmtty_rel fmtty_rel int  int  fmtty_rel fmtty_rel int32  int32  fmtty_rel fmtty_rel nativeint  nativeint  fmtty_rel fmtty_rel int64  int64  fmtty_rel fmtty_rel float  float  fmtty_rel fmtty_rel bool  bool  fmtty fmtty_rel fmtty_rel format6  format6  fmtty_rel fmtty_rel fmtty_rel fmtty_rel format6  format6  fmtty_rel fmtty_rel         fmtty_rel fmtty_rel     fmtty_rel fmtty_rel   fmtty_rel fmtty_rel       fmtty_rel fmtty_rel     fmtty_rel", "rendered": "<h4 class='item'>type fmtty_rel(\n  'a1,\n  'b1,\n  'c1,\n  'd1,\n  'e1,\n  'f1,\n  'a2,\n  'b2,\n  'c2,\n  'd2,\n  'e2,\n  'f2\n) = \n  | Char_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    char => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    char => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | String_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    string => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    string => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Int_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    int => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    int => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Int32_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    int32 => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    int32 => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Nativeint_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    nativeint => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    nativeint => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Int64_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    int64 => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    int64 => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Float_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    float => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    float => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Bool_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    bool => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    bool => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Format_arg_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty\">fmtty</a>('g, 'h, 'i, 'j, 'k, 'l),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('g, 'h, 'i, 'j, 'k, 'l) => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('g, 'h, 'i, 'j, 'k, 'l) => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Format_subst_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'g,\n      'h,\n      'i,\n      'j,\n      'k,\n      'l,\n      'g1,\n      'b1,\n      'c1,\n      'j1,\n      'd1,\n      'a1\n    ),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'g,\n      'h,\n      'i,\n      'j,\n      'k,\n      'l,\n      'g2,\n      'b2,\n      'c2,\n      'j2,\n      'd2,\n      'a2\n    ),\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('g, 'h, 'i, 'j, 'k, 'l) => 'g1,\n    'b1,\n    'c1,\n    'j1,\n    'e1,\n    'f1,\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('g, 'h, 'i, 'j, 'k, 'l) => 'g2,\n    'b2,\n    'c2,\n    'j2,\n    'e2,\n    'f2\n  )\n  | Alpha_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    (('b1, 'x) => 'c1, 'x) => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    (('b2, 'x) => 'c2, 'x) => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Theta_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'b1 => 'c1 => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    'b2 => 'c2 => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Any_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'x => 'a1,\n    'b1,\n    'c1,\n    'd1,\n    'e1,\n    'f1,\n    'x => 'a2,\n    'b2,\n    'c2,\n    'd2,\n    'e2,\n    'f2\n  )\n  | Reader_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'x => 'a1,\n    'b1,\n    'c1,\n    'b1 => 'x => 'd1,\n    'e1,\n    'f1,\n    'x => 'a2,\n    'b2,\n    'c2,\n    'b2 => 'x => 'd2,\n    'e2,\n    'f2\n  )\n  | Ignored_reader_ty(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n      'a1,\n      'b1,\n      'c1,\n      'd1,\n      'e1,\n      'f1,\n      'a2,\n      'b2,\n      'c2,\n      'd2,\n      'e2,\n      'f2\n    )\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'a1,\n    'b1,\n    'c1,\n    'b1 => 'x => 'd1,\n    'e1,\n    'f1,\n    'a2,\n    'b2,\n    'c2,\n    'b2 => 'x => 'd2,\n    'e2,\n    'f2\n  )\n  | End_of_fmtty: <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n    'f1,\n    'b1,\n    'c1,\n    'd1,\n    'd1,\n    'f1,\n    'f2,\n    'b2,\n    'c2,\n    'd2,\n    'd2,\n    'f2\n  )\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-fmtty", "title": "fmtty", "contents": "fmtty fmtty_rel", "rendered": "<h4 class='item'>type fmtty('a, 'b, 'c, 'd, 'e, 'f) = <a href=\"./api/CamlinternalFormatBasics.html#type-fmtty_rel\">fmtty_rel</a>(\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f,\n  'a,\n  'b,\n  'c,\n  'd,\n  'e,\n  'f\n)</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-formatting_gen", "title": "formatting_gen", "contents": "formatting_gen format6 formatting_gen format6 formatting_gen", "rendered": "<h4 class='item'>type formatting_gen('a, 'b, 'c, 'd, 'e, 'f) = \n  | Open_tag(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_gen\">formatting_gen</a>('a, 'b, 'c, 'd, 'e, 'f)\n  | Open_box(\n    <a href=\"./api/CamlinternalFormatBasics.html#type-format6\">format6</a>('a, 'b, 'c, 'd, 'e, 'f)\n  ): <a href=\"./api/CamlinternalFormatBasics.html#type-formatting_gen\">formatting_gen</a>('a, 'b, 'c, 'd, 'e, 'f)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-formatting_lit", "title": "formatting_lit", "contents": "formatting_lit string int int string int char", "rendered": "<h4 class='item'>type formatting_lit = \n  | Close_box\n  | Close_tag\n  | Break(string, int, int)\n  | FFlush\n  | Force_newline\n  | Flush_newline\n  | Magic_size(string, int)\n  | Escaped_at\n  | Escaped_percent\n  | Scan_indic(char)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-block_type", "title": "block_type", "contents": "block_type ", "rendered": "<h4 class='item'>type block_type = \n  | Pp_hbox\n  | Pp_vbox\n  | Pp_hvbox\n  | Pp_hovbox\n  | Pp_box\n  | Pp_fits\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-custom_arity", "title": "custom_arity", "contents": "custom_arity custom_arity string custom_arity custom_arity  ", "rendered": "<h4 class='item'>type custom_arity('a, 'b, 'c) = \n  | Custom_zero: <a href=\"./api/CamlinternalFormatBasics.html#type-custom_arity\">custom_arity</a>('a, string, 'a)\n  | Custom_succ(<a href=\"./api/CamlinternalFormatBasics.html#type-custom_arity\">custom_arity</a>('a, 'b, 'c)): <a href=\"./api/CamlinternalFormatBasics.html#type-custom_arity\">custom_arity</a>(\n    'a,\n    'x => 'b,\n    'x => 'c\n  )\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-prec_option", "title": "prec_option", "contents": "prec_option option int", "rendered": "<h4 class='item'>type prec_option = option(int)</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-precision", "title": "precision", "contents": "precision precision int precision precision int ", "rendered": "<h4 class='item'>type precision('a, 'b) = \n  | No_precision: <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('a, 'a)\n  | Lit_precision(int): <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>('a, 'a)\n  | Arg_precision: <a href=\"./api/CamlinternalFormatBasics.html#type-precision\">precision</a>(int => 'a, 'a)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-pad_option", "title": "pad_option", "contents": "pad_option option int", "rendered": "<h4 class='item'>type pad_option = option(int)</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-padding", "title": "padding", "contents": "padding padding padty int padding padty padding int ", "rendered": "<h4 class='item'>type padding('a, 'b) = \n  | No_padding: <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('a, 'a)\n  | Lit_padding(<a href=\"./api/CamlinternalFormatBasics.html#type-padty\">padty</a>, int): <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>('a, 'a)\n  | Arg_padding(<a href=\"./api/CamlinternalFormatBasics.html#type-padty\">padty</a>): <a href=\"./api/CamlinternalFormatBasics.html#type-padding\">padding</a>(int => 'a, 'a)\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-counter", "title": "counter", "contents": "counter ", "rendered": "<h4 class='item'>type counter = | Line_counter | Char_counter | Token_counter\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-char_set", "title": "char_set", "contents": "char_set string", "rendered": "<h4 class='item'>type char_set = string</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-float_conv", "title": "float_conv", "contents": "float_conv ", "rendered": "<h4 class='item'>type float_conv = \n  | Float_f\n  | Float_pf\n  | Float_sf\n  | Float_e\n  | Float_pe\n  | Float_se\n  | Float_E\n  | Float_pE\n  | Float_sE\n  | Float_g\n  | Float_pg\n  | Float_sg\n  | Float_G\n  | Float_pG\n  | Float_sG\n  | Float_F\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-int_conv", "title": "int_conv", "contents": "int_conv ", "rendered": "<h4 class='item'>type int_conv = \n  | Int_d\n  | Int_pd\n  | Int_sd\n  | Int_i\n  | Int_pi\n  | Int_si\n  | Int_x\n  | Int_Cx\n  | Int_X\n  | Int_CX\n  | Int_o\n  | Int_Co\n  | Int_u\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#type-padty", "title": "padty", "contents": "padty ", "rendered": "<h4 class='item'>type padty = | Left | Right | Zeros\n</h4>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html", "title": "CamlinternalFormatBasics", "contents": "@rest", "rendered": "@rest", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html", "title": "CamlinternalFormatBasics", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/CamlinternalFormatBasics.html#CamlinternalFormatBasics", "title": "CamlinternalFormatBasics", "contents": "", "rendered": "", "breadcrumb": "CamlinternalFormatBasics"},
{"href": "./api/Sys.html#value-ocaml_version", "title": "ocaml_version", "contents": "ocaml_version string", "rendered": "<h4 class='item'>let ocaml_version: string</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-catch_break", "title": "catch_break", "contents": "catch_break governs whether interactive interrupt (ctrl-C) terminates the program or raises the Break exception. Call catch_break true to enable raising Break, and catch_break false to let the system terminate the program on user interrupt.", "rendered": "<code>catch_break</code> governs whether interactive interrupt (ctrl-C) terminates the program or raises the <code>Break</code> exception. Call <code>catch_break true</code> to enable raising <code>Break</code>, and <code>catch_break false</code> to let the system terminate the program on user interrupt.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-catch_break", "title": "catch_break", "contents": "catch_break bool unit ", "rendered": "<h4 class='item'>let catch_break: bool => unit</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigprof", "title": "sigprof", "contents": "Profiling interrupt", "rendered": "Profiling interrupt", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigprof", "title": "sigprof", "contents": "sigprof int", "rendered": "<h4 class='item'>let sigprof: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigvtalrm", "title": "sigvtalrm", "contents": "Timeout in virtual time", "rendered": "Timeout in virtual time", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigvtalrm", "title": "sigvtalrm", "contents": "sigvtalrm int", "rendered": "<h4 class='item'>let sigvtalrm: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigttou", "title": "sigttou", "contents": "Terminal write from background process", "rendered": "Terminal write from background process", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigttou", "title": "sigttou", "contents": "sigttou int", "rendered": "<h4 class='item'>let sigttou: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigttin", "title": "sigttin", "contents": "Terminal read from background process", "rendered": "Terminal read from background process", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigttin", "title": "sigttin", "contents": "sigttin int", "rendered": "<h4 class='item'>let sigttin: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigtstp", "title": "sigtstp", "contents": "Interactive stop", "rendered": "Interactive stop", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigtstp", "title": "sigtstp", "contents": "sigtstp int", "rendered": "<h4 class='item'>let sigtstp: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigstop", "title": "sigstop", "contents": "Stop", "rendered": "Stop", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigstop", "title": "sigstop", "contents": "sigstop int", "rendered": "<h4 class='item'>let sigstop: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigcont", "title": "sigcont", "contents": "Continue", "rendered": "Continue", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigcont", "title": "sigcont", "contents": "sigcont int", "rendered": "<h4 class='item'>let sigcont: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigchld", "title": "sigchld", "contents": "Child process terminated", "rendered": "Child process terminated", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigchld", "title": "sigchld", "contents": "sigchld int", "rendered": "<h4 class='item'>let sigchld: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigusr2", "title": "sigusr2", "contents": "Application-defined signal 2", "rendered": "Application-defined signal 2", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigusr2", "title": "sigusr2", "contents": "sigusr2 int", "rendered": "<h4 class='item'>let sigusr2: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigusr1", "title": "sigusr1", "contents": "Application-defined signal 1", "rendered": "Application-defined signal 1", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigusr1", "title": "sigusr1", "contents": "sigusr1 int", "rendered": "<h4 class='item'>let sigusr1: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigterm", "title": "sigterm", "contents": "Termination", "rendered": "Termination", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigterm", "title": "sigterm", "contents": "sigterm int", "rendered": "<h4 class='item'>let sigterm: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigsegv", "title": "sigsegv", "contents": "Invalid memory reference", "rendered": "Invalid memory reference", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigsegv", "title": "sigsegv", "contents": "sigsegv int", "rendered": "<h4 class='item'>let sigsegv: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigquit", "title": "sigquit", "contents": "Interactive termination", "rendered": "Interactive termination", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigquit", "title": "sigquit", "contents": "sigquit int", "rendered": "<h4 class='item'>let sigquit: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigpipe", "title": "sigpipe", "contents": "Broken pipe", "rendered": "Broken pipe", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigpipe", "title": "sigpipe", "contents": "sigpipe int", "rendered": "<h4 class='item'>let sigpipe: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigkill", "title": "sigkill", "contents": "Termination (cannot be ignored)", "rendered": "Termination (cannot be ignored)", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigkill", "title": "sigkill", "contents": "sigkill int", "rendered": "<h4 class='item'>let sigkill: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigint", "title": "sigint", "contents": "Interactive interrupt (ctrl-C)", "rendered": "Interactive interrupt (ctrl-C)", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigint", "title": "sigint", "contents": "sigint int", "rendered": "<h4 class='item'>let sigint: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigill", "title": "sigill", "contents": "Invalid hardware instruction", "rendered": "Invalid hardware instruction", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigill", "title": "sigill", "contents": "sigill int", "rendered": "<h4 class='item'>let sigill: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sighup", "title": "sighup", "contents": "Hangup on controlling terminal", "rendered": "Hangup on controlling terminal", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sighup", "title": "sighup", "contents": "sighup int", "rendered": "<h4 class='item'>let sighup: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigfpe", "title": "sigfpe", "contents": "Arithmetic exception", "rendered": "Arithmetic exception", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigfpe", "title": "sigfpe", "contents": "sigfpe int", "rendered": "<h4 class='item'>let sigfpe: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigalrm", "title": "sigalrm", "contents": "Timeout", "rendered": "Timeout", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigalrm", "title": "sigalrm", "contents": "sigalrm int", "rendered": "<h4 class='item'>let sigalrm: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigabrt", "title": "sigabrt", "contents": "Abnormal termination", "rendered": "Abnormal termination", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-sigabrt", "title": "sigabrt", "contents": "sigabrt int", "rendered": "<h4 class='item'>let sigabrt: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#Signal-numbers-for-the-standard-POSIX-signals.", "title": "Signal numbers for the standard POSIX signals.", "contents": "", "rendered": "", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-set_signal", "title": "set_signal", "contents": "Same as signal but return value is ignored.", "rendered": "Same as signal but return value is ignored.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-set_signal", "title": "set_signal", "contents": "set_signal int signal_behavior unit  ", "rendered": "<h4 class='item'>let set_signal: (int, <a href=\"./api/Sys.html#type-signal_behavior\">signal_behavior</a>) => unit</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-signal", "title": "signal", "contents": "Set the behavior of the system on receipt of a given signal. The first argument is the signal number. Return the behavior previously associated with the signal. If the signal number is invalid (or not available on your system), an Invalid_argument exception is raised.", "rendered": "Set the behavior of the system on receipt of a given signal. The first argument is the signal number. Return the behavior previously associated with the signal. If the signal number is invalid (or not available on your system), an <code>Invalid_argument</code> exception is raised.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-signal", "title": "signal", "contents": "signal int signal_behavior signal_behavior  ", "rendered": "<h4 class='item'>let signal: (int, <a href=\"./api/Sys.html#type-signal_behavior\">signal_behavior</a>) => <a href=\"./api/Sys.html#type-signal_behavior\">signal_behavior</a></h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#type-signal_behavior", "title": "signal_behavior", "contents": "Signal_handle f: call function f, giving it the signal number as argument.", "rendered": "<code>Signal_handle f</code>: call function <code>f</code>, giving it the signal number as argument.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#type-signal_behavior", "title": "signal_behavior", "contents": "Signal_ignore: ignore the signal", "rendered": "<code>Signal_ignore</code>: ignore the signal", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#type-signal_behavior", "title": "signal_behavior", "contents": "Signal_default: take the default behavior (usually: abort the program)", "rendered": "<code>Signal_default</code>: take the default behavior (usually: abort the program)", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#type-signal_behavior", "title": "signal_behavior", "contents": "What to do when receiving a signal:", "rendered": "What to do when receiving a signal:", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#type-signal_behavior", "title": "signal_behavior", "contents": "signal_behavior int unit ", "rendered": "<h4 class='item'>type signal_behavior = \n  | Signal_default\n  | Signal_ignore\n  | Signal_handle(int => unit)\n</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#Signal-handling", "title": "Signal handling", "contents": "", "rendered": "", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-max_array_length", "title": "max_array_length", "contents": "Maximum length of a normal array. The maximum length of a float array is max_array_length/2 on 32-bit machines and max_array_length on 64-bit machines.", "rendered": "Maximum length of a normal array. The maximum length of a float array is <code>max_array_length/2</code> on 32-bit machines and <code>max_array_length</code> on 64-bit machines.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-max_array_length", "title": "max_array_length", "contents": "max_array_length int", "rendered": "<h4 class='item'>let max_array_length: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-max_string_length", "title": "max_string_length", "contents": "True if compiled against Javascript backend", "rendered": "True if compiled against Javascript backend", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-max_string_length", "title": "max_string_length", "contents": "max_string_length int", "rendered": "<h4 class='item'>let max_string_length: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-is_js", "title": "is_js", "contents": "True if compiled against Javascript backend", "rendered": "True if compiled against Javascript backend", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-is_js", "title": "is_js", "contents": "is_js bool", "rendered": "<h4 class='item'>let is_js: bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-big_endian", "title": "big_endian", "contents": "Whether the machine currently executing the Caml program is big-endian.", "rendered": "Whether the machine currently executing the Caml program is big-endian.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-big_endian", "title": "big_endian", "contents": "big_endian bool", "rendered": "<h4 class='item'>let big_endian: bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-word_size", "title": "word_size", "contents": "Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64.", "rendered": "Size of one word on the machine currently executing the OCaml program, in bits: 32 or 64.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-word_size", "title": "word_size", "contents": "word_size int", "rendered": "<h4 class='item'>let word_size: int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-cygwin", "title": "cygwin", "contents": "True if Sys.os_type = &quot;Cygwin&quot;.", "rendered": "True if <code>Sys.os_type = &quot;Cygwin&quot;</code>.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-cygwin", "title": "cygwin", "contents": "cygwin bool", "rendered": "<h4 class='item'>let cygwin: bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-win32", "title": "win32", "contents": "True if Sys.os_type = &quot;Win32&quot;.", "rendered": "True if <code>Sys.os_type = &quot;Win32&quot;</code>.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-win32", "title": "win32", "contents": "win32 bool", "rendered": "<h4 class='item'>let win32: bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-unix", "title": "unix", "contents": "True if Sys.os_type = &quot;Unix&quot;.", "rendered": "True if <code>Sys.os_type = &quot;Unix&quot;</code>.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-unix", "title": "unix", "contents": "unix bool", "rendered": "<h4 class='item'>let unix: bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-os_type", "title": "os_type", "contents": "&quot;Cygwin&quot; (for MS-Windows, OCaml compiled with Cygwin).", "rendered": "<code>&quot;Cygwin&quot;</code> (for MS-Windows, OCaml compiled with Cygwin).", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-os_type", "title": "os_type", "contents": "&quot;Win32&quot; (for MS-Windows, OCaml compiled with MSVC++ or Mingw),", "rendered": "<code>&quot;Win32&quot;</code> (for MS-Windows, OCaml compiled with MSVC++ or Mingw),", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-os_type", "title": "os_type", "contents": "&quot;Unix&quot; (for all Unix versions, including Linux and Mac OS X),", "rendered": "<code>&quot;Unix&quot;</code> (for all Unix versions, including Linux and Mac OS X),", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-os_type", "title": "os_type", "contents": "Operating system currently executing the OCaml program. One of", "rendered": "Operating system currently executing the OCaml program. One of", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-os_type", "title": "os_type", "contents": "os_type string", "rendered": "<h4 class='item'>let os_type: string</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-interactive", "title": "interactive", "contents": "This reference is initially set to false in standalone programs and to true if the code is being executed under the interactive toplevel system ocaml.", "rendered": "This reference is initially set to <code>false</code> in standalone programs and to <code>true</code> if the code is being executed under the interactive toplevel system <code>ocaml</code>.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-interactive", "title": "interactive", "contents": "interactive ref bool", "rendered": "<h4 class='item'>let interactive: <a href=\"./api/Pervasives.html#type-ref\" title=\"Pervasives.ref\">ref</a>(bool)</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-readdir", "title": "readdir", "contents": "Return the names of all files present in the given directory. Names denoting the current directory and the parent directory (&quot;.&quot; and &quot;..&quot; in Unix) are not returned. Each string in the result is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order.", "rendered": "Return the names of all files present in the given directory. Names denoting the current directory and the parent directory (<code>&quot;.&quot;</code> and <code>&quot;..&quot;</code> in Unix) are not returned. Each string in the result is a file name rather than a complete path. There is no guarantee that the name strings in the resulting array will appear in any specific order; they are not, in particular, guaranteed to appear in alphabetical order.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-readdir", "title": "readdir", "contents": "readdir string array string ", "rendered": "<h4 class='item'>let readdir: string => array(string)</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-getcwd", "title": "getcwd", "contents": "Return the current working directory of the process.", "rendered": "Return the current working directory of the process.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-getcwd", "title": "getcwd", "contents": "getcwd unit string ", "rendered": "<h4 class='item'>let getcwd: unit => string</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-chdir", "title": "chdir", "contents": "Change the current working directory of the process.", "rendered": "Change the current working directory of the process.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-chdir", "title": "chdir", "contents": "chdir string unit ", "rendered": "<h4 class='item'>let chdir: string => unit</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-time", "title": "time", "contents": "Return the processor time, in seconds, used by the program since the beginning of execution.", "rendered": "Return the processor time, in seconds, used by the program since the beginning of execution.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-time", "title": "time", "contents": "time unit float ", "rendered": "<h4 class='item'>let time: unit => float</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-command", "title": "command", "contents": "Execute the given shell command and return its exit code.", "rendered": "Execute the given shell command and return its exit code.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-command", "title": "command", "contents": "command string int ", "rendered": "<h4 class='item'>let command: string => int</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-getenv", "title": "getenv", "contents": "Return the value associated to a variable in the process environment. Raise Not_found if the variable is unbound.", "rendered": "Return the value associated to a variable in the process environment. Raise <code>Not_found</code> if the variable is unbound.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-getenv", "title": "getenv", "contents": "getenv string string ", "rendered": "<h4 class='item'>let getenv: string => string</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-rename", "title": "rename", "contents": "Rename a file. The first argument is the old name and the second is the new name. If there is already another file under the new name, rename may replace it, or raise an exception, depending on your operating system.", "rendered": "Rename a file. The first argument is the old name and the second is the new name. If there is already another file under the new name, <code>rename</code> may replace it, or raise an exception, depending on your operating system.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-rename", "title": "rename", "contents": "rename string string unit  ", "rendered": "<h4 class='item'>let rename: (string, string) => unit</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-remove", "title": "remove", "contents": "Remove the given file name from the file system.", "rendered": "Remove the given file name from the file system.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-remove", "title": "remove", "contents": "remove string unit ", "rendered": "<h4 class='item'>let remove: string => unit</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-is_directory", "title": "is_directory", "contents": "Returns true if the given name refers to a directory, false if it refers to another kind of file. Raise Sys_error if no file exists with the given name.", "rendered": "Returns <code>true</code> if the given name refers to a directory, <code>false</code> if it refers to another kind of file. Raise <code>Sys_error</code> if no file exists with the given name.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-is_directory", "title": "is_directory", "contents": "is_directory string bool ", "rendered": "<h4 class='item'>let is_directory: string => bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-file_exists", "title": "file_exists", "contents": "Test if a file with the given name exists.", "rendered": "Test if a file with the given name exists.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-file_exists", "title": "file_exists", "contents": "file_exists string bool ", "rendered": "<h4 class='item'>let file_exists: string => bool</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-executable_name", "title": "executable_name", "contents": "The name of the file containing the executable currently running.", "rendered": "The name of the file containing the executable currently running.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-executable_name", "title": "executable_name", "contents": "executable_name string", "rendered": "<h4 class='item'>let executable_name: string</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-argv", "title": "argv", "contents": "The command line arguments given to the process. The first element is the command name used to invoke the program. The following elements are the command-line arguments given to the program.", "rendered": "The command line arguments given to the process. The first element is the command name used to invoke the program. The following elements are the command-line arguments given to the program.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html#value-argv", "title": "argv", "contents": "argv array string", "rendered": "<h4 class='item'>let argv: array(string)</h4>", "breadcrumb": "Sys"},
{"href": "./api/Sys.html", "title": "Sys", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Sys"},
{"href": "./api/Sys.html", "title": "Sys", "contents": "Every function in this module raises Sys_error with an informative message when the underlying system call signal an error.", "rendered": "Every function in this module raises <code>Sys_error</code> with an informative message when the underlying system call signal an error.", "breadcrumb": "Sys"},
{"href": "./api/Sys.html", "title": "Sys", "contents": "System interface.", "rendered": "System interface.", "breadcrumb": "Sys"},
{"href": "./api/Stack.html#value-iter", "title": "iter", "contents": "iter f s applies f in turn to all elements of s, from the element at the top of the stack to the element at the bottom of the stack. The stack itself is unchanged.", "rendered": "<code>iter f s</code> applies <code>f</code> in turn to all elements of <code>s</code>, from the element at the top of the stack to the element at the bottom of the stack. The stack itself is unchanged.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-iter", "title": "iter", "contents": "iter unit  t unit  ", "rendered": "<h4 class='item'>let iter: ('a => unit, <a href=\"./api/Stack.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-length", "title": "length", "contents": "Return the number of elements in a stack.", "rendered": "Return the number of elements in a stack.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Stack.html#type-t\">t</a>('a) => int</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-is_empty", "title": "is_empty", "contents": "Return true if the given stack is empty, false otherwise.", "rendered": "Return <code>true</code> if the given stack is empty, <code>false</code> otherwise.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-is_empty", "title": "is_empty", "contents": "is_empty t bool ", "rendered": "<h4 class='item'>let is_empty: <a href=\"./api/Stack.html#type-t\">t</a>('a) => bool</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-copy", "title": "copy", "contents": "Return a copy of the given stack.", "rendered": "Return a copy of the given stack.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-copy", "title": "copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/Stack.html#type-t\">t</a>('a) => <a href=\"./api/Stack.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-clear", "title": "clear", "contents": "Discard all elements from a stack.", "rendered": "Discard all elements from a stack.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Stack.html#type-t\">t</a>('a) => unit</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-top", "title": "top", "contents": "top s returns the topmost element in stack s, or raises Empty if the stack is empty.", "rendered": "<code>top s</code> returns the topmost element in stack <code>s</code>, or raises <code>Empty</code> if the stack is empty.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-top", "title": "top", "contents": "top t ", "rendered": "<h4 class='item'>let top: <a href=\"./api/Stack.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-pop", "title": "pop", "contents": "pop s removes and returns the topmost element in stack s, or raises Empty if the stack is empty.", "rendered": "<code>pop s</code> removes and returns the topmost element in stack <code>s</code>, or raises <code>Empty</code> if the stack is empty.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-pop", "title": "pop", "contents": "pop t ", "rendered": "<h4 class='item'>let pop: <a href=\"./api/Stack.html#type-t\">t</a>('a) => 'a</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-push", "title": "push", "contents": "push x s adds the element x at the top of stack s.", "rendered": "<code>push x s</code> adds the element <code>x</code> at the top of stack <code>s</code>.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-push", "title": "push", "contents": "push t unit  ", "rendered": "<h4 class='item'>let push: ('a, <a href=\"./api/Stack.html#type-t\">t</a>('a)) => unit</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-create", "title": "create", "contents": "Return a new stack, initially empty.", "rendered": "Return a new stack, initially empty.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#value-create", "title": "create", "contents": "create unit t ", "rendered": "<h4 class='item'>let create: unit => <a href=\"./api/Stack.html#type-t\">t</a>('a)</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#type-t", "title": "t", "contents": "The type of stacks containing elements of type &#39;a.", "rendered": "The type of stacks containing elements of type <code>&#39;a</code>.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Stack"},
{"href": "./api/Stack.html", "title": "Stack", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Stack"},
{"href": "./api/Stack.html", "title": "Stack", "contents": "This module implements stacks (LIFOs), with in-place modification.", "rendered": "This module implements stacks (LIFOs), with in-place modification.", "breadcrumb": "Stack"},
{"href": "./api/Stack.html", "title": "Stack", "contents": "Last-in first-out stacks.", "rendered": "Last-in first-out stacks.", "breadcrumb": "Stack"},
{"href": "./api/Printf.html#value-kprintf", "title": "kprintf", "contents": "A deprecated synonym for ksprintf.", "rendered": "A deprecated synonym for <code>ksprintf</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-kprintf", "title": "kprintf", "contents": "kprintf string  format4 unit string  ", "rendered": "<h4 class='item'>let kprintf: (\n  string => 'a,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, unit, string, 'a)\n) => 'b</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html", "title": "Printf", "contents": "Deprecated", "rendered": "Deprecated", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-kbprintf", "title": "kbprintf", "contents": "Same as bprintf, but instead of returning immediately, passes the buffer to its first argument at the end of printing.", "rendered": "Same as <code>bprintf</code>, but instead of returning immediately, passes the buffer to its first argument at the end of printing.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-kbprintf", "title": "kbprintf", "contents": "kbprintf Buffer t  Buffer t format4 Buffer t unit   ", "rendered": "<h4 class='item'>let kbprintf: (\n  <a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a> => 'a,\n  <a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, <a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, unit, 'a)\n) => 'b</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-ksprintf", "title": "ksprintf", "contents": "Same as sprintf above, but instead of returning the string, passes it to the first argument.", "rendered": "Same as <code>sprintf</code> above, but instead of returning the string, passes it to the first argument.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-ksprintf", "title": "ksprintf", "contents": "ksprintf string  format4 unit string  ", "rendered": "<h4 class='item'>let ksprintf: (\n  string => 'a,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, unit, string, 'a)\n) => 'b</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-ikfprintf", "title": "ikfprintf", "contents": "Same as kfprintf above, but does not print anything. Useful to ignore some material when conditionally printing.", "rendered": "Same as <code>kfprintf</code> above, but does not print anything. Useful to ignore some material when conditionally printing.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-ikfprintf", "title": "ikfprintf", "contents": "ikfprintf out_channel  out_channel format4 out_channel unit   ", "rendered": "<h4 class='item'>let ikfprintf: (\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => 'a,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, unit, 'a)\n) => 'b</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-kfprintf", "title": "kfprintf", "contents": "Same as fprintf, but instead of returning immediately, passes the out channel to its first argument at the end of printing.", "rendered": "Same as <code>fprintf</code>, but instead of returning immediately, passes the out channel to its first argument at the end of printing.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-kfprintf", "title": "kfprintf", "contents": "kfprintf out_channel  out_channel format4 out_channel unit   ", "rendered": "<h4 class='item'>let kfprintf: (\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => 'a,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-format4\" title=\"Pervasives.format4\">format4</a>('b, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, unit, 'a)\n) => 'b</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html", "title": "Printf", "contents": "Formatted output functions with continuations.", "rendered": "Formatted output functions with continuations.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-ifprintf", "title": "ifprintf", "contents": "Same as fprintf, but does not print anything. Useful to ignore some material when conditionally printing.", "rendered": "Same as fprintf, but does not print anything. Useful to ignore some material when conditionally printing.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-ifprintf", "title": "ifprintf", "contents": "ifprintf format unit  ", "rendered": "<h4 class='item'>let ifprintf: ('a, <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('b, 'a, unit)) => 'b</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-bprintf", "title": "bprintf", "contents": "Same as fprintf, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module Buffer).", "rendered": "Same as fprintf, but instead of printing on an output channel, append the formatted arguments to the given extensible buffer (see module Buffer).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-bprintf", "title": "bprintf", "contents": "bprintf Buffer t format Buffer t unit  ", "rendered": "<h4 class='item'>let bprintf: (<a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Buffer.html\">Buffer</a>.<a href=\"./api/Buffer.html#type-t\">t</a>, unit)) => 'a</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-sprintf", "title": "sprintf", "contents": "Same as fprintf, but instead of printing on an output channel, return a string containing the result of formatting the arguments.", "rendered": "Same as fprintf, but instead of printing on an output channel, return a string containing the result of formatting the arguments.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-sprintf", "title": "sprintf", "contents": "sprintf format unit string ", "rendered": "<h4 class='item'>let sprintf: <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, unit, string) => 'a</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-eprintf", "title": "eprintf", "contents": "Same as fprintf, but output on stderr.", "rendered": "Same as fprintf, but output on <code>stderr</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-eprintf", "title": "eprintf", "contents": "eprintf format out_channel unit ", "rendered": "<h4 class='item'>let eprintf: <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, unit) => 'a</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-printf", "title": "printf", "contents": "Same as fprintf, but output on stdout.", "rendered": "Same as fprintf, but output on <code>stdout</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-printf", "title": "printf", "contents": "printf format out_channel unit ", "rendered": "<h4 class='item'>let printf: <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, unit) => 'a</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": ",: take no argument and output nothing: a no-op delimiter for conversion specifications.", "rendered": "<code>,</code>: take no argument and output nothing: a no-op delimiter for conversion specifications.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "\\@: take no argument and output one \\@ character.", "rendered": "<code>\\@</code>: take no argument and output one <code>\\@</code> character.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "%: take no argument and output one % character.", "rendered": "<code>%</code>: take no argument and output one <code>%</code> character.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "!: take no argument and flush the output.", "rendered": "<code>!</code>: take no argument and flush the output.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "( fmt %): format string substitution. Take a format string argument and substitute it to the internal format string fmt to print following arguments. The argument must have the same type as the internal format string fmt.", "rendered": "<code>( fmt %)</code>: format string substitution. Take a format string argument and substitute it to the internal format string <code>fmt</code> to print following arguments. The argument must have the same type as the internal format string <code>fmt</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "\\{ fmt %\\}: convert a format string argument to its type digest. The argument must have the same type as the internal format string fmt.", "rendered": "<code>\\{ fmt %\\}</code>: convert a format string argument to its type digest. The argument must have the same type as the internal format string <code>fmt</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "t: same as %a, but take only one argument (with type out_channel -&gt; unit) and apply it to outchan.", "rendered": "<code>t</code>: same as <code>%a</code>, but take only one argument (with type <code>out_channel -&gt; unit</code>) and apply it to <code>outchan</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "a: user-defined printer. Take two arguments and apply the first one to outchan (the current output channel) and to the second argument. The first argument must therefore have type out_channel -&gt; &#39;b -&gt; unit and the second &#39;b. The output produced by the function is inserted in the output of fprintf at the current point.", "rendered": "<code>a</code>: user-defined printer. Take two arguments and apply the first one to <code>outchan</code> (the current output channel) and to the second argument. The first argument must therefore have type <code>out_channel -&gt; &#39;b -&gt; unit</code> and the second <code>&#39;b</code>. The output produced by the function is inserted in the output of <code>fprintf</code> at the current point.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "Ld, Li, Lu, Lx, LX, Lo: convert an int64 argument to the format specified by the second letter.", "rendered": "<code>Ld</code>, <code>Li</code>, <code>Lu</code>, <code>Lx</code>, <code>LX</code>, <code>Lo</code>: convert an <code>int64</code> argument to the format specified by the second letter.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "nd, ni, nu, nx, nX, no: convert a nativeint argument to the format specified by the second letter.", "rendered": "<code>nd</code>, <code>ni</code>, <code>nu</code>, <code>nx</code>, <code>nX</code>, <code>no</code>: convert a <code>nativeint</code> argument to the format specified by the second letter.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "ld, li, lu, lx, lX, lo: convert an int32 argument to the format specified by the second letter (decimal, hexadecimal, etc).", "rendered": "<code>ld</code>, <code>li</code>, <code>lu</code>, <code>lx</code>, <code>lX</code>, <code>lo</code>: convert an <code>int32</code> argument to the format specified by the second letter (decimal, hexadecimal, etc).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "b: convert a boolean argument (deprecated; do not use in new programs).", "rendered": "<code>b</code>: convert a boolean argument (deprecated; do not use in new programs).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "B: convert a boolean argument to the string true or false", "rendered": "<code>B</code>: convert a boolean argument to the string <code>true</code> or <code>false</code>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "g or G: convert a floating-point argument to decimal notation, in style f or e, E (whichever is more compact).", "rendered": "<code>g</code> or <code>G</code>: convert a floating-point argument to decimal notation, in style <code>f</code> or <code>e</code>, <code>E</code> (whichever is more compact).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "e or E: convert a floating-point argument to decimal notation, in the style d.ddd e+-dd (mantissa and exponent).", "rendered": "<code>e</code> or <code>E</code>: convert a floating-point argument to decimal notation, in the style <code>d.ddd e+-dd</code> (mantissa and exponent).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "F: convert a floating-point argument to OCaml syntax (dddd. or dddd.ddd or d.ddd e+-dd).", "rendered": "<code>F</code>: convert a floating-point argument to OCaml syntax (<code>dddd.</code> or <code>dddd.ddd</code> or <code>d.ddd e+-dd</code>).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "f: convert a floating-point argument to decimal notation, in the style dddd.ddd.", "rendered": "<code>f</code>: convert a floating-point argument to decimal notation, in the style <code>dddd.ddd</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "C: convert a character argument to OCaml syntax (single quotes, escapes).", "rendered": "<code>C</code>: convert a character argument to OCaml syntax (single quotes, escapes).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "c: insert a character argument.", "rendered": "<code>c</code>: insert a character argument.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "S: convert a string argument to OCaml syntax (double quotes, escapes).", "rendered": "<code>S</code>: convert a string argument to OCaml syntax (double quotes, escapes).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "s: insert a string argument.", "rendered": "<code>s</code>: insert a string argument.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "o: convert an integer argument to unsigned octal.", "rendered": "<code>o</code>: convert an integer argument to unsigned octal.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "X: convert an integer argument to unsigned hexadecimal, using uppercase letters.", "rendered": "<code>X</code>: convert an integer argument to unsigned hexadecimal, using uppercase letters.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "x: convert an integer argument to unsigned hexadecimal, using lowercase letters.", "rendered": "<code>x</code>: convert an integer argument to unsigned hexadecimal, using lowercase letters.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "u, n, l, L, or N: convert an integer argument to unsigned decimal. Warning: n, l, L, and N are used for scanf, and should not be used for printf.", "rendered": "<code>u</code>, <code>n</code>, <code>l</code>, <code>L</code>, or <code>N</code>: convert an integer argument to unsigned decimal. Warning: <code>n</code>, <code>l</code>, <code>L</code>, and <code>N</code> are used for <code>scanf</code>, and should not be used for <code>printf</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "d, i: convert an integer argument to signed decimal.", "rendered": "<code>d</code>, <code>i</code>: convert an integer argument to signed decimal.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "#: request an alternate formatting style for the hexadecimal and octal integer types (x, X, o, lx, lX, lo, Lx, LX, Lo).", "rendered": "<code>#</code>: request an alternate formatting style for the hexadecimal and octal integer types (<code>x</code>, <code>X</code>, <code>o</code>, <code>lx</code>, <code>lX</code>, <code>lo</code>, <code>Lx</code>, <code>LX</code>, <code>Lo</code>).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "space: for signed numerical conversions, prefix number with a space if positive.", "rendered": "space: for signed numerical conversions, prefix number with a space if positive.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "+: for signed numerical conversions, prefix number with a + sign if positive.", "rendered": "<code>+</code>: for signed numerical conversions, prefix number with a <code>+</code> sign if positive.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "0: for numerical conversions, pad with zeroes instead of spaces.", "rendered": "<code>0</code>: for numerical conversions, pad with zeroes instead of spaces.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "-: left-justify the output (default is right justification).", "rendered": "<code>-</code>: left-justify the output (default is right justification).", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "The integer in a width or precision can also be specified as *, in which case an extra integer argument is taken to specify the corresponding width or precision. This integer argument precedes immediately the argument to print. For instance, %.*f prints a float with as many fractional digits as the value of the argument given before the float.", "rendered": "The integer in a <code>width</code> or <code>precision</code> can also be specified as <code>*</code>, in which case an extra integer argument is taken to specify the corresponding <code>width</code> or <code>precision</code>. This integer argument precedes immediately the argument to print. For instance, <code>%.*f</code> prints a <code>float</code> with as many fractional digits as the value of the argument given before the float.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "The optional precision is a dot . followed by an integer indicating how many digits follow the decimal point in the %f, %e, and %E conversions. For instance, %.4f prints a float with 4 fractional digits.", "rendered": "The optional <code>precision</code> is a dot <code>.</code> followed by an integer indicating how many digits follow the decimal point in the <code>%f</code>, <code>%e</code>, and <code>%E</code> conversions. For instance, <code>%.4f</code> prints a <code>float</code> with 4 fractional digits.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "The optional width is an integer indicating the minimal width of the result. For instance, %6d prints an integer, prefixing it with spaces to fill at least 6 characters.", "rendered": "The optional <code>width</code> is an integer indicating the minimal width of the result. For instance, <code>%6d</code> prints an integer, prefixing it with spaces to fill at least 6 characters.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "The optional flags are:", "rendered": "The optional <code>flags</code> are:", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "The types and their meanings are:", "rendered": "The types and their meanings are:", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "In short, a conversion specification consists in the % character, followed by optional modifiers and a type which is made of one or two characters.", "rendered": "In short, a conversion specification consists in the <code>%</code> character, followed by optional modifiers and a type which is made of one or two characters.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "% [flags] [width] [.precision] type", "rendered": "<code>% [flags] [width] [.precision] type</code>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "Conversion specifications have the following form:", "rendered": "Conversion specifications have the following form:", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "The format string is a character string which contains two types of objects: plain characters, which are simply copied to the output channel, and conversion specifications, each of which causes conversion and printing of arguments.", "rendered": "The format string is a character string which contains two types of objects: plain characters, which are simply copied to the output channel, and conversion specifications, each of which causes conversion and printing of arguments.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "fprintf outchan format arg1 ... argN formats the arguments arg1 to argN according to the format string format, and outputs the resulting string on the channel outchan.", "rendered": "<code>fprintf outchan format arg1 ... argN</code> formats the arguments <code>arg1</code> to <code>argN</code> according to the format string <code>format</code>, and outputs the resulting string on the channel <code>outchan</code>.", "breadcrumb": "Printf"},
{"href": "./api/Printf.html#value-fprintf", "title": "fprintf", "contents": "fprintf out_channel format out_channel unit  ", "rendered": "<h4 class='item'>let fprintf: (\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-format\" title=\"Pervasives.format\">format</a>('a, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, unit)\n) => 'a</h4>", "breadcrumb": "Printf"},
{"href": "./api/Printf.html", "title": "Printf", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Printf"},
{"href": "./api/Printf.html", "title": "Printf", "contents": "Formatted output functions.", "rendered": "Formatted output functions.", "breadcrumb": "Printf"},
{"href": "./api/Filename.html#value-quote", "title": "quote", "contents": "Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters. Warning: under Windows, the output is only suitable for use with programs that follow the standard Windows quoting conventions.", "rendered": "Return a quoted version of a file name, suitable for use as one argument in a command line, escaping all meta-characters. Warning: under Windows, the output is only suitable for use with programs that follow the standard Windows quoting conventions.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-quote", "title": "quote", "contents": "quote string string ", "rendered": "<h4 class='item'>let quote: string => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-temp_dir_name", "title": "temp_dir_name", "contents": "You should use get_temp_dir_name instead.", "rendered": "You should use get_temp_dir_name instead.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-temp_dir_name", "title": "temp_dir_name", "contents": "Deprecated: You should use get_temp_dir_name instead.\n\n", "rendered": "Deprecated: <p>You should use get_temp_dir_name instead.</p>\n", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-temp_dir_name", "title": "temp_dir_name", "contents": "The name of the initial temporary directory: Under Unix, the value of the TMPDIR environment variable, or &quot;/tmp&quot; if the variable is not set. Under Windows, the value of the TEMP environment variable, or &quot;.&quot; if the variable is not set.", "rendered": "The name of the initial temporary directory: Under Unix, the value of the <code>TMPDIR</code> environment variable, or &quot;/tmp&quot; if the variable is not set. Under Windows, the value of the <code>TEMP</code> environment variable, or &quot;.&quot; if the variable is not set.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-temp_dir_name", "title": "temp_dir_name", "contents": "temp_dir_name string", "rendered": "<h4 class='item'>let temp_dir_name: string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-set_temp_dir_name", "title": "set_temp_dir_name", "contents": "Change the temporary directory returned by get_temp_dir_name and used by temp_file and open_temp_file.", "rendered": "Change the temporary directory returned by get_temp_dir_name and used by temp_file and open_temp_file.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-set_temp_dir_name", "title": "set_temp_dir_name", "contents": "set_temp_dir_name string unit ", "rendered": "<h4 class='item'>let set_temp_dir_name: string => unit</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-get_temp_dir_name", "title": "get_temp_dir_name", "contents": "The name of the temporary directory: Under Unix, the value of the TMPDIR environment variable, or &quot;/tmp&quot; if the variable is not set. Under Windows, the value of the TEMP environment variable, or &quot;.&quot; if the variable is not set. The temporary directory can be changed with set_temp_dir_name.", "rendered": "The name of the temporary directory: Under Unix, the value of the <code>TMPDIR</code> environment variable, or &quot;/tmp&quot; if the variable is not set. Under Windows, the value of the <code>TEMP</code> environment variable, or &quot;.&quot; if the variable is not set. The temporary directory can be changed with set_temp_dir_name.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-get_temp_dir_name", "title": "get_temp_dir_name", "contents": "get_temp_dir_name unit string ", "rendered": "<h4 class='item'>let get_temp_dir_name: unit => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-open_temp_file", "title": "open_temp_file", "contents": "Same as temp_file, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. This function is more secure than temp_file: there is no risk that the temporary file will be modified (e.g. replaced by a symbolic link) before the program opens it. The optional argument mode is a list of additional flags to control the opening of the file. It can contain one or several of Open_append, Open_binary, and Open_text. The default is [Open_text] (open in text mode). Raise Sys_error if the file could not be opened.", "rendered": "Same as temp_file, but returns both the name of a fresh temporary file, and an output channel opened (atomically) on this file. This function is more secure than <code>temp_file</code>: there is no risk that the temporary file will be modified (e.g. replaced by a symbolic link) before the program opens it. The optional argument <code>mode</code> is a list of additional flags to control the opening of the file. It can contain one or several of <code>Open_append</code>, <code>Open_binary</code>, and <code>Open_text</code>. The default is <code>[Open_text]</code> (open in text mode). Raise <code>Sys_error</code> if the file could not be opened.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-open_temp_file", "title": "open_temp_file", "contents": "open_temp_file option list open_flag option string string string string out_channel mode temp_dir  ", "rendered": "<h4 class='item'>let open_temp_file: (\n  ~?mode: option(list(<a href=\"./api/Pervasives.html#type-open_flag\" title=\"Pervasives.open_flag\">open_flag</a>)),\n  ~?temp_dir: option(string),\n  string,\n  string\n) => (string, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>)</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-temp_file", "title": "temp_file", "contents": "temp_file prefix suffix returns the name of a fresh temporary file in the temporary directory. The base name of the temporary file is formed by concatenating prefix, then a suitably chosen integer number, then suffix. The optional argument temp_dir indicates the temporary directory to use, defaulting to the current result of get_temp_dir_name. The temporary file is created empty, with permissions 0o600 (readable and writable only by the file owner). The file is guaranteed to be different from any other file that existed when temp_file was called. Raise Sys_error if the file could not be created.", "rendered": "<code>temp_file prefix suffix</code> returns the name of a fresh temporary file in the temporary directory. The base name of the temporary file is formed by concatenating <code>prefix</code>, then a suitably chosen integer number, then <code>suffix</code>. The optional argument <code>temp_dir</code> indicates the temporary directory to use, defaulting to the current result of get_temp_dir_name. The temporary file is created empty, with permissions <code>0o600</code> (readable and writable only by the file owner). The file is guaranteed to be different from any other file that existed when <code>temp_file</code> was called. Raise <code>Sys_error</code> if the file could not be created.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-temp_file", "title": "temp_file", "contents": "temp_file option string string string string temp_dir  ", "rendered": "<h4 class='item'>let temp_file: (\n  ~?temp_dir: option(string),\n  string,\n  string\n) => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-dirname", "title": "dirname", "contents": "See basename. This function conforms to the specification of POSIX.1-2008 for the dirname utility.", "rendered": "See basename. This function conforms to the specification of POSIX.1-2008 for the <code>dirname</code> utility.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-dirname", "title": "dirname", "contents": "dirname string string ", "rendered": "<h4 class='item'>let dirname: string => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-basename", "title": "basename", "contents": "This function conforms to the specification of POSIX.1-2008 for the basename utility.", "rendered": "This function conforms to the specification of POSIX.1-2008 for the <code>basename</code> utility.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-basename", "title": "basename", "contents": "Split a file name into directory name / base file name. If name is a valid file name, then concat (dirname name) (basename name) returns a file name which is equivalent to name. Moreover, after setting the current directory to dirname name (with chdir), references to basename name (which is a relative file name) designate the same file as name before the call to chdir.", "rendered": "Split a file name into directory name / base file name. If <code>name</code> is a valid file name, then <code>concat (dirname name) (basename name)</code> returns a file name which is equivalent to <code>name</code>. Moreover, after setting the current directory to <code>dirname name</code> (with chdir), references to <code>basename name</code> (which is a relative file name) designate the same file as <code>name</code> before the call to chdir.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-basename", "title": "basename", "contents": "basename string string ", "rendered": "<h4 class='item'>let basename: string => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-chop_extension", "title": "chop_extension", "contents": "Raise Invalid_argument if the given name does not contain an extension.", "rendered": "Raise <code>Invalid_argument</code> if the given name does not contain an extension.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-chop_extension", "title": "chop_extension", "contents": "Return the given file name without its extension. The extension is the shortest suffix starting with a period and not including a directory separator, .xyz for instance.", "rendered": "Return the given file name without its extension. The extension is the shortest suffix starting with a period and not including a directory separator, <code>.xyz</code> for instance.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-chop_extension", "title": "chop_extension", "contents": "chop_extension string string ", "rendered": "<h4 class='item'>let chop_extension: string => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-chop_suffix", "title": "chop_suffix", "contents": "chop_suffix name suff removes the suffix suff from the filename name. The behavior is undefined if name does not end with the suffix suff.", "rendered": "<code>chop_suffix name suff</code> removes the suffix <code>suff</code> from the filename <code>name</code>. The behavior is undefined if <code>name</code> does not end with the suffix <code>suff</code>.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-chop_suffix", "title": "chop_suffix", "contents": "chop_suffix string string string  ", "rendered": "<h4 class='item'>let chop_suffix: (string, string) => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-check_suffix", "title": "check_suffix", "contents": "check_suffix name suff returns true if the filename name ends with the suffix suff.", "rendered": "<code>check_suffix name suff</code> returns <code>true</code> if the filename <code>name</code> ends with the suffix <code>suff</code>.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-check_suffix", "title": "check_suffix", "contents": "check_suffix string string bool  ", "rendered": "<h4 class='item'>let check_suffix: (string, string) => bool</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-is_implicit", "title": "is_implicit", "contents": "Return true if the file name is relative and does not start with an explicit reference to the current directory (./ or ../ in Unix), false if it starts with an explicit reference to the root directory or the current directory.", "rendered": "Return <code>true</code> if the file name is relative and does not start with an explicit reference to the current directory (<code>./</code> or <code>../</code> in Unix), <code>false</code> if it starts with an explicit reference to the root directory or the current directory.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-is_implicit", "title": "is_implicit", "contents": "is_implicit string bool ", "rendered": "<h4 class='item'>let is_implicit: string => bool</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-is_relative", "title": "is_relative", "contents": "Return true if the file name is relative to the current directory, false if it is absolute (i.e. in Unix, starts with /).", "rendered": "Return <code>true</code> if the file name is relative to the current directory, <code>false</code> if it is absolute (i.e. in Unix, starts with <code>/</code>).", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-is_relative", "title": "is_relative", "contents": "is_relative string bool ", "rendered": "<h4 class='item'>let is_relative: string => bool</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-concat", "title": "concat", "contents": "concat dir file returns a file name that designates file file in directory dir.", "rendered": "<code>concat dir file</code> returns a file name that designates file <code>file</code> in directory <code>dir</code>.", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-concat", "title": "concat", "contents": "concat string string string  ", "rendered": "<h4 class='item'>let concat: (string, string) => string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-dir_sep", "title": "dir_sep", "contents": "dir_sep string", "rendered": "<h4 class='item'>let dir_sep: string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-parent_dir_name", "title": "parent_dir_name", "contents": "The conventional name for the parent of the current directory (e.g. .. in Unix).", "rendered": "The conventional name for the parent of the current directory (e.g. <code>..</code> in Unix).", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-parent_dir_name", "title": "parent_dir_name", "contents": "parent_dir_name string", "rendered": "<h4 class='item'>let parent_dir_name: string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-current_dir_name", "title": "current_dir_name", "contents": "The conventional name for the current directory (e.g. . in Unix).", "rendered": "The conventional name for the current directory (e.g. <code>.</code> in Unix).", "breadcrumb": "Filename"},
{"href": "./api/Filename.html#value-current_dir_name", "title": "current_dir_name", "contents": "current_dir_name string", "rendered": "<h4 class='item'>let current_dir_name: string</h4>", "breadcrumb": "Filename"},
{"href": "./api/Filename.html", "title": "Filename", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Filename"},
{"href": "./api/Filename.html", "title": "Filename", "contents": "Operations on file names.", "rendered": "Operations on file names.", "breadcrumb": "Filename"},
{"href": "./api/UnixLabels.html#value-setsid", "title": "setsid", "contents": "Put the calling process in a new session and detach it from its controlling terminal.", "rendered": "Put the calling process in a new session and detach it from its controlling terminal.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsid", "title": "setsid", "contents": "setsid unit int ", "rendered": "<h4 class='item'>let setsid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcflow", "title": "tcflow", "contents": "Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: TCOOFF suspends output, TCOON restarts output, TCIOFF transmits a STOP character to suspend input, and TCION transmits a START character to restart input.", "rendered": "Suspend or restart reception or transmission of data on the given file descriptor, depending on the second argument: <code>TCOOFF</code> suspends output, <code>TCOON</code> restarts output, <code>TCIOFF</code> transmits a STOP character to suspend input, and <code>TCION</code> transmits a START character to restart input.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcflow", "title": "tcflow", "contents": "tcflow file_descr flow_action unit  mode", "rendered": "<h4 class='item'>let tcflow: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~mode: <a href=\"./api/UnixLabels.html#type-flow_action\">flow_action</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-flow_action", "title": "flow_action", "contents": "flow_action flow_action", "rendered": "<h4 class='item'>type flow_action = | TCOOFF | TCOON | TCIOFF | TCION\n = <a href=\"./api/Unix.html#type-flow_action\" title=\"Unix.flow_action\">flow_action</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcflush", "title": "tcflush", "contents": "Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: TCIFLUSH flushes data received but not read, TCOFLUSH flushes data written but not transmitted, and TCIOFLUSH flushes both.", "rendered": "Discard data written on the given file descriptor but not yet transmitted, or data received but not yet read, depending on the second argument: <code>TCIFLUSH</code> flushes data received but not read, <code>TCOFLUSH</code> flushes data written but not transmitted, and <code>TCIOFLUSH</code> flushes both.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcflush", "title": "tcflush", "contents": "tcflush file_descr flush_queue unit  mode", "rendered": "<h4 class='item'>let tcflush: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~mode: <a href=\"./api/UnixLabels.html#type-flush_queue\">flush_queue</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-flush_queue", "title": "flush_queue", "contents": "flush_queue flush_queue", "rendered": "<h4 class='item'>type flush_queue = | TCIFLUSH | TCOFLUSH | TCIOFLUSH\n = <a href=\"./api/Unix.html#type-flush_queue\" title=\"Unix.flush_queue\">flush_queue</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcdrain", "title": "tcdrain", "contents": "Waits until all output written on the given file descriptor has been transmitted.", "rendered": "Waits until all output written on the given file descriptor has been transmitted.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcdrain", "title": "tcdrain", "contents": "tcdrain file_descr unit ", "rendered": "<h4 class='item'>let tcdrain: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcsendbreak", "title": "tcsendbreak", "contents": "Send a break condition on the given file descriptor. The second argument is the duration of the break, in 0.1s units; 0 means standard duration (0.25s).", "rendered": "Send a break condition on the given file descriptor. The second argument is the duration of the break, in 0.1s units; 0 means standard duration (0.25s).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcsendbreak", "title": "tcsendbreak", "contents": "tcsendbreak file_descr int unit  duration", "rendered": "<h4 class='item'>let tcsendbreak: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~duration: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcsetattr", "title": "tcsetattr", "contents": "Set the status of the terminal referred to by the given file descriptor. The second argument indicates when the status change takes place: immediately (TCSANOW), when all pending output has been transmitted (TCSADRAIN), or after flushing all input that has been received but not read (TCSAFLUSH). TCSADRAIN is recommended when changing the output parameters; TCSAFLUSH, when changing the input parameters.", "rendered": "Set the status of the terminal referred to by the given file descriptor. The second argument indicates when the status change takes place: immediately (<code>TCSANOW</code>), when all pending output has been transmitted (<code>TCSADRAIN</code>), or after flushing all input that has been received but not read (<code>TCSAFLUSH</code>). <code>TCSADRAIN</code> is recommended when changing the output parameters; <code>TCSAFLUSH</code>, when changing the input parameters.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcsetattr", "title": "tcsetattr", "contents": "tcsetattr file_descr setattr_when terminal_io unit  mode ", "rendered": "<h4 class='item'>let tcsetattr: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~mode: <a href=\"./api/UnixLabels.html#type-setattr_when\">setattr_when</a>,\n  <a href=\"./api/UnixLabels.html#type-terminal_io\">terminal_io</a>\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-setattr_when", "title": "setattr_when", "contents": "setattr_when setattr_when", "rendered": "<h4 class='item'>type setattr_when = | TCSANOW | TCSADRAIN | TCSAFLUSH\n = <a href=\"./api/Unix.html#type-setattr_when\" title=\"Unix.setattr_when\">setattr_when</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcgetattr", "title": "tcgetattr", "contents": "Return the status of the terminal referred to by the given file descriptor.", "rendered": "Return the status of the terminal referred to by the given file descriptor.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-tcgetattr", "title": "tcgetattr", "contents": "tcgetattr file_descr terminal_io ", "rendered": "<h4 class='item'>let tcgetattr: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/UnixLabels.html#type-terminal_io\">terminal_io</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-terminal_io", "title": "terminal_io", "contents": "terminal_io c_ignbrk bool c_brkint bool c_ignpar bool c_parmrk bool c_inpck bool c_istrip bool c_inlcr bool c_igncr bool c_icrnl bool c_ixon bool c_ixoff bool c_opost bool c_obaud int c_ibaud int c_csize int c_cstopb int c_cread bool c_parenb bool c_parodd bool c_hupcl bool c_clocal bool c_isig bool c_icanon bool c_noflsh bool c_echo bool c_echoe bool c_echok bool c_echonl bool c_vintr char c_vquit char c_verase char c_vkill char c_veof char c_veol char c_vmin int c_vtime int c_vstart char c_vstop char terminal_io", "rendered": "<h4 class='item'>type terminal_io = {\n  mut c_ignbrk: bool,\n  mut c_brkint: bool,\n  mut c_ignpar: bool,\n  mut c_parmrk: bool,\n  mut c_inpck: bool,\n  mut c_istrip: bool,\n  mut c_inlcr: bool,\n  mut c_igncr: bool,\n  mut c_icrnl: bool,\n  mut c_ixon: bool,\n  mut c_ixoff: bool,\n  mut c_opost: bool,\n  mut c_obaud: int,\n  mut c_ibaud: int,\n  mut c_csize: int,\n  mut c_cstopb: int,\n  mut c_cread: bool,\n  mut c_parenb: bool,\n  mut c_parodd: bool,\n  mut c_hupcl: bool,\n  mut c_clocal: bool,\n  mut c_isig: bool,\n  mut c_icanon: bool,\n  mut c_noflsh: bool,\n  mut c_echo: bool,\n  mut c_echoe: bool,\n  mut c_echok: bool,\n  mut c_echonl: bool,\n  mut c_vintr: char,\n  mut c_vquit: char,\n  mut c_verase: char,\n  mut c_vkill: char,\n  mut c_veof: char,\n  mut c_veol: char,\n  mut c_vmin: int,\n  mut c_vtime: int,\n  mut c_vstart: char,\n  mut c_vstop: char\n} = <a href=\"./api/Unix.html#type-terminal_io\" title=\"Unix.terminal_io\">terminal_io</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html", "title": "UnixLabels", "contents": "The following functions implement the POSIX standard terminal interface. They provide control over asynchronous communication ports and pseudo-terminals. Refer to the termios man page for a complete description.", "rendered": "The following functions implement the POSIX standard terminal interface. They provide control over asynchronous communication ports and pseudo-terminals. Refer to the <code>termios</code> man page for a complete description.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Terminal-interface", "title": "Terminal interface", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getnameinfo", "title": "getnameinfo", "contents": "getnameinfo addr opts returns the host name and service name corresponding to the socket address addr. opts is a possibly empty list of options that governs how these names are obtained. Raise Not_found if an error occurs.", "rendered": "<code>getnameinfo addr opts</code> returns the host name and service name corresponding to the socket address <code>addr</code>. <code>opts</code> is a possibly empty list of options that governs how these names are obtained. Raise <code>Not_found</code> if an error occurs.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getnameinfo", "title": "getnameinfo", "contents": "getnameinfo sockaddr list getnameinfo_option name_info  ", "rendered": "<h4 class='item'>let getnameinfo: (\n  <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>,\n  list(<a href=\"./api/UnixLabels.html#type-getnameinfo_option\">getnameinfo_option</a>)\n) => <a href=\"./api/UnixLabels.html#type-name_info\">name_info</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-getnameinfo_option", "title": "getnameinfo_option", "contents": "Options to getnameinfo.", "rendered": "Options to getnameinfo.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-getnameinfo_option", "title": "getnameinfo_option", "contents": "getnameinfo_option ", "rendered": "<h4 class='item'>type getnameinfo_option = \n  | NI_NOFQDN\n  | NI_NUMERICHOST\n  | NI_NAMEREQD\n  | NI_NUMERICSERV\n  | NI_DGRAM\n</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-name_info", "title": "name_info", "contents": "Name of service or port number", "rendered": "Name of service or port number", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-name_info", "title": "name_info", "contents": "name_info ni_hostname string ni_service string", "rendered": "<h4 class='item'>type name_info = {ni_hostname: string, ni_service: string}</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getaddrinfo", "title": "getaddrinfo", "contents": "host is either a host name or the string representation of an IP address. host can be given as the empty string; in this case, the ``any&#39;&#39; address or the ``loopback&#39;&#39; address are used, depending whether opts contains AI_PASSIVE. service is either a service name or the string representation of a port number. service can be given as the empty string; in this case, the port field of the returned addresses is set to 0. opts is a possibly empty list of options that allows the caller to force a particular socket domain (e.g. IPv6 only or IPv4 only) or a particular socket type (e.g. TCP only or UDP only).", "rendered": "<code>host</code> is either a host name or the string representation of an IP address. <code>host</code> can be given as the empty string; in this case, the ``any&#39;&#39; address or the ``loopback&#39;&#39; address are used, depending whether <code>opts</code> contains <code>AI_PASSIVE</code>. <code>service</code> is either a service name or the string representation of a port number. <code>service</code> can be given as the empty string; in this case, the port field of the returned addresses is set to 0. <code>opts</code> is a possibly empty list of options that allows the caller to force a particular socket domain (e.g. IPv6 only or IPv4 only) or a particular socket type (e.g. TCP only or UDP only).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getaddrinfo", "title": "getaddrinfo", "contents": "getaddrinfo host service opts returns a list of addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. The empty list is returned if the host or service names are unknown, or the constraints expressed in opts cannot be satisfied.", "rendered": "<code>getaddrinfo host service opts</code> returns a list of addr_info records describing socket parameters and addresses suitable for communicating with the given host and service. The empty list is returned if the host or service names are unknown, or the constraints expressed in <code>opts</code> cannot be satisfied.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getaddrinfo", "title": "getaddrinfo", "contents": "getaddrinfo string string list getaddrinfo_option list addr_info   ", "rendered": "<h4 class='item'>let getaddrinfo: (\n  string,\n  string,\n  list(<a href=\"./api/UnixLabels.html#type-getaddrinfo_option\">getaddrinfo_option</a>)\n) => list(<a href=\"./api/UnixLabels.html#type-addr_info\">addr_info</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-getaddrinfo_option", "title": "getaddrinfo_option", "contents": "Options to getaddrinfo.", "rendered": "Options to getaddrinfo.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-getaddrinfo_option", "title": "getaddrinfo_option", "contents": "getaddrinfo_option socket_domain socket_type int", "rendered": "<h4 class='item'>type getaddrinfo_option = \n  | AI_FAMILY(<a href=\"./api/UnixLabels.html#type-socket_domain\">socket_domain</a>)\n  | AI_SOCKTYPE(<a href=\"./api/UnixLabels.html#type-socket_type\">socket_type</a>)\n  | AI_PROTOCOL(int)\n  | AI_NUMERICHOST\n  | AI_CANONNAME\n  | AI_PASSIVE\n</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-addr_info", "title": "addr_info", "contents": "Address information returned by getaddrinfo.", "rendered": "Address information returned by getaddrinfo.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-addr_info", "title": "addr_info", "contents": "addr_info ai_family socket_domain ai_socktype socket_type ai_protocol int ai_addr sockaddr ai_canonname string", "rendered": "<h4 class='item'>type addr_info = {\n  ai_family: <a href=\"./api/UnixLabels.html#type-socket_domain\">socket_domain</a>,\n  ai_socktype: <a href=\"./api/UnixLabels.html#type-socket_type\">socket_type</a>,\n  ai_protocol: int,\n  ai_addr: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>,\n  ai_canonname: string\n}</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getservbyport", "title": "getservbyport", "contents": "Find an entry in services with the given service number, or raise Not_found.", "rendered": "Find an entry in <code>services</code> with the given service number, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getservbyport", "title": "getservbyport", "contents": "getservbyport int string service_entry  protocol", "rendered": "<h4 class='item'>let getservbyport: (int, ~protocol: string) => <a href=\"./api/UnixLabels.html#type-service_entry\">service_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getservbyname", "title": "getservbyname", "contents": "Find an entry in services with the given name, or raise Not_found.", "rendered": "Find an entry in <code>services</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getservbyname", "title": "getservbyname", "contents": "getservbyname string string service_entry  protocol", "rendered": "<h4 class='item'>let getservbyname: (\n  string,\n  ~protocol: string\n) => <a href=\"./api/UnixLabels.html#type-service_entry\">service_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getprotobynumber", "title": "getprotobynumber", "contents": "Find an entry in protocols with the given protocol number, or raise Not_found.", "rendered": "Find an entry in <code>protocols</code> with the given protocol number, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getprotobynumber", "title": "getprotobynumber", "contents": "getprotobynumber int protocol_entry ", "rendered": "<h4 class='item'>let getprotobynumber: int => <a href=\"./api/UnixLabels.html#type-protocol_entry\">protocol_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getprotobyname", "title": "getprotobyname", "contents": "Find an entry in protocols with the given name, or raise Not_found.", "rendered": "Find an entry in <code>protocols</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getprotobyname", "title": "getprotobyname", "contents": "getprotobyname string protocol_entry ", "rendered": "<h4 class='item'>let getprotobyname: string => <a href=\"./api/UnixLabels.html#type-protocol_entry\">protocol_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gethostbyaddr", "title": "gethostbyaddr", "contents": "Find an entry in hosts with the given address, or raise Not_found.", "rendered": "Find an entry in <code>hosts</code> with the given address, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gethostbyaddr", "title": "gethostbyaddr", "contents": "gethostbyaddr inet_addr host_entry ", "rendered": "<h4 class='item'>let gethostbyaddr: <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a> => <a href=\"./api/UnixLabels.html#type-host_entry\">host_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gethostbyname", "title": "gethostbyname", "contents": "Find an entry in hosts with the given name, or raise Not_found.", "rendered": "Find an entry in <code>hosts</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gethostbyname", "title": "gethostbyname", "contents": "gethostbyname string host_entry ", "rendered": "<h4 class='item'>let gethostbyname: string => <a href=\"./api/UnixLabels.html#type-host_entry\">host_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gethostname", "title": "gethostname", "contents": "Return the name of the local host.", "rendered": "Return the name of the local host.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gethostname", "title": "gethostname", "contents": "gethostname unit string ", "rendered": "<h4 class='item'>let gethostname: unit => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-service_entry", "title": "service_entry", "contents": "Structure of entries in the services database.", "rendered": "Structure of entries in the <code>services</code> database.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-service_entry", "title": "service_entry", "contents": "service_entry s_name string s_aliases array string s_port int s_proto string service_entry", "rendered": "<h4 class='item'>type service_entry = {\n  s_name: string,\n  s_aliases: array(string),\n  s_port: int,\n  s_proto: string\n} = <a href=\"./api/Unix.html#type-service_entry\" title=\"Unix.service_entry\">service_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-protocol_entry", "title": "protocol_entry", "contents": "Structure of entries in the protocols database.", "rendered": "Structure of entries in the <code>protocols</code> database.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-protocol_entry", "title": "protocol_entry", "contents": "protocol_entry p_name string p_aliases array string p_proto int protocol_entry", "rendered": "<h4 class='item'>type protocol_entry = {\n  p_name: string,\n  p_aliases: array(string),\n  p_proto: int\n} = <a href=\"./api/Unix.html#type-protocol_entry\" title=\"Unix.protocol_entry\">protocol_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-host_entry", "title": "host_entry", "contents": "Structure of entries in the hosts database.", "rendered": "Structure of entries in the <code>hosts</code> database.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-host_entry", "title": "host_entry", "contents": "host_entry h_name string h_aliases array string h_addrtype socket_domain h_addr_list array inet_addr host_entry", "rendered": "<h4 class='item'>type host_entry = {\n  h_name: string,\n  h_aliases: array(string),\n  h_addrtype: <a href=\"./api/UnixLabels.html#type-socket_domain\">socket_domain</a>,\n  h_addr_list: array(<a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a>)\n} = <a href=\"./api/Unix.html#type-host_entry\" title=\"Unix.host_entry\">host_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Host-and-protocol-databases", "title": "Host and protocol databases", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-establish_server", "title": "establish_server", "contents": "Establish a server on the given address. The function given as first argument is called for each connection with two buffered channels connected to the client. A new process is created for each connection. The function establish_server never returns normally.", "rendered": "Establish a server on the given address. The function given as first argument is called for each connection with two buffered channels connected to the client. A new process is created for each connection. The function establish_server never returns normally.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-establish_server", "title": "establish_server", "contents": "establish_server in_channel out_channel unit   sockaddr unit  addr", "rendered": "<h4 class='item'>let establish_server: (\n  (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>) => unit,\n  ~addr: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-shutdown_connection", "title": "shutdown_connection", "contents": "``Shut down&#39;&#39; a connection established with open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection.", "rendered": "``Shut down&#39;&#39; a connection established with open_connection; that is, transmit an end-of-file condition to the server reading on the other side of the connection.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-shutdown_connection", "title": "shutdown_connection", "contents": "shutdown_connection in_channel unit ", "rendered": "<h4 class='item'>let shutdown_connection: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_connection", "title": "open_connection", "contents": "Connect to a server at the given address. Return a pair of buffered channels connected to the server. Remember to call flush on the output channel at the right times to ensure correct synchronization.", "rendered": "Connect to a server at the given address. Return a pair of buffered channels connected to the server. Remember to call flush on the output channel at the right times to ensure correct synchronization.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_connection", "title": "open_connection", "contents": "open_connection sockaddr in_channel out_channel ", "rendered": "<h4 class='item'>let open_connection: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a> => (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#High-level-network-connection-functions", "title": "High-level network connection functions", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_error", "title": "getsockopt_error", "contents": "Return the error condition associated with the given socket, and clear it.", "rendered": "Return the error condition associated with the given socket, and clear it.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_error", "title": "getsockopt_error", "contents": "getsockopt_error file_descr option error ", "rendered": "<h4 class='item'>let getsockopt_error: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => option(<a href=\"./api/UnixLabels.html#type-error\">error</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt_float", "title": "setsockopt_float", "contents": "Same as setsockopt for a socket option whose value is a floating-point number.", "rendered": "Same as setsockopt for a socket option whose value is a floating-point number.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt_float", "title": "setsockopt_float", "contents": "setsockopt_float file_descr socket_float_option float unit   ", "rendered": "<h4 class='item'>let setsockopt_float: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/UnixLabels.html#type-socket_float_option\">socket_float_option</a>,\n  float\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_float", "title": "getsockopt_float", "contents": "Same as getsockopt for a socket option whose value is a floating-point number.", "rendered": "Same as getsockopt for a socket option whose value is a floating-point number.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_float", "title": "getsockopt_float", "contents": "getsockopt_float file_descr socket_float_option float  ", "rendered": "<h4 class='item'>let getsockopt_float: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/UnixLabels.html#type-socket_float_option\">socket_float_option</a>\n) => float</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt_optint", "title": "setsockopt_optint", "contents": "Same as setsockopt for a socket option whose value is an int option.", "rendered": "Same as setsockopt for a socket option whose value is an <code>int option</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt_optint", "title": "setsockopt_optint", "contents": "setsockopt_optint file_descr socket_optint_option option int unit   ", "rendered": "<h4 class='item'>let setsockopt_optint: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/UnixLabels.html#type-socket_optint_option\">socket_optint_option</a>,\n  option(int)\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_optint", "title": "getsockopt_optint", "contents": "Same as getsockopt for a socket option whose value is an int option.", "rendered": "Same as getsockopt for a socket option whose value is an <code>int option</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_optint", "title": "getsockopt_optint", "contents": "getsockopt_optint file_descr socket_optint_option option int  ", "rendered": "<h4 class='item'>let getsockopt_optint: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/UnixLabels.html#type-socket_optint_option\">socket_optint_option</a>\n) => option(int)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt_int", "title": "setsockopt_int", "contents": "Same as setsockopt for an integer-valued socket option.", "rendered": "Same as setsockopt for an integer-valued socket option.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt_int", "title": "setsockopt_int", "contents": "setsockopt_int file_descr socket_int_option int unit   ", "rendered": "<h4 class='item'>let setsockopt_int: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/UnixLabels.html#type-socket_int_option\">socket_int_option</a>,\n  int\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_int", "title": "getsockopt_int", "contents": "Same as getsockopt for an integer-valued socket option.", "rendered": "Same as getsockopt for an integer-valued socket option.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt_int", "title": "getsockopt_int", "contents": "getsockopt_int file_descr socket_int_option int  ", "rendered": "<h4 class='item'>let getsockopt_int: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, <a href=\"./api/UnixLabels.html#type-socket_int_option\">socket_int_option</a>) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt", "title": "setsockopt", "contents": "Set or clear a boolean-valued option in the given socket.", "rendered": "Set or clear a boolean-valued option in the given socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setsockopt", "title": "setsockopt", "contents": "setsockopt file_descr socket_bool_option bool unit   ", "rendered": "<h4 class='item'>let setsockopt: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  <a href=\"./api/UnixLabels.html#type-socket_bool_option\">socket_bool_option</a>,\n  bool\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt", "title": "getsockopt", "contents": "Return the current status of a boolean-valued option in the given socket.", "rendered": "Return the current status of a boolean-valued option in the given socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockopt", "title": "getsockopt", "contents": "getsockopt file_descr socket_bool_option bool  ", "rendered": "<h4 class='item'>let getsockopt: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, <a href=\"./api/UnixLabels.html#type-socket_bool_option\">socket_bool_option</a>) => bool</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_float_option", "title": "socket_float_option", "contents": "The socket options that can be consulted with getsockopt_float and modified with setsockopt_float. These options have a floating-point value representing a time in seconds. The value 0 means infinite timeout.", "rendered": "The socket options that can be consulted with getsockopt_float and modified with setsockopt_float. These options have a floating-point value representing a time in seconds. The value 0 means infinite timeout.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_float_option", "title": "socket_float_option", "contents": "socket_float_option ", "rendered": "<h4 class='item'>type socket_float_option = | SO_RCVTIMEO | SO_SNDTIMEO\n</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_optint_option", "title": "socket_optint_option", "contents": "The socket options that can be consulted with getsockopt_optint and modified with setsockopt_optint. These options have a value of type int option, with None meaning ``disabled&#39;&#39;.", "rendered": "The socket options that can be consulted with getsockopt_optint and modified with setsockopt_optint. These options have a value of type <code>int option</code>, with <code>None</code> meaning ``disabled&#39;&#39;.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_optint_option", "title": "socket_optint_option", "contents": "socket_optint_option ", "rendered": "<h4 class='item'>type socket_optint_option = | SO_LINGER\n</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_int_option", "title": "socket_int_option", "contents": "The socket options that can be consulted with getsockopt_int and modified with setsockopt_int. These options have an integer value.", "rendered": "The socket options that can be consulted with getsockopt_int and modified with setsockopt_int. These options have an integer value.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_int_option", "title": "socket_int_option", "contents": "socket_int_option ", "rendered": "<h4 class='item'>type socket_int_option = \n  | SO_SNDBUF\n  | SO_RCVBUF\n  | SO_ERROR\n  | SO_TYPE\n  | SO_RCVLOWAT\n  | SO_SNDLOWAT\n</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_bool_option", "title": "socket_bool_option", "contents": "The socket options that can be consulted with getsockopt and modified with setsockopt. These options have a boolean (true/false) value.", "rendered": "The socket options that can be consulted with getsockopt and modified with setsockopt. These options have a boolean (<code>true</code>/<code>false</code>) value.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_bool_option", "title": "socket_bool_option", "contents": "socket_bool_option ", "rendered": "<h4 class='item'>type socket_bool_option = \n  | SO_DEBUG\n  | SO_BROADCAST\n  | SO_REUSEADDR\n  | SO_KEEPALIVE\n  | SO_DONTROUTE\n  | SO_OOBINLINE\n  | SO_ACCEPTCONN\n  | TCP_NODELAY\n  | IPV6_ONLY\n</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Socket-options", "title": "Socket options", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sendto_substring", "title": "sendto_substring", "contents": "Same as sendto, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>sendto</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sendto_substring", "title": "sendto_substring", "contents": "sendto_substring file_descr string int int list msg_flag sockaddr int  bug pos len mode ", "rendered": "<h4 class='item'>let sendto_substring: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~bug: string,\n  ~pos: int,\n  ~len: int,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-msg_flag\">msg_flag</a>),\n  <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sendto", "title": "sendto", "contents": "Send data over an unconnected socket.", "rendered": "Send data over an unconnected socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sendto", "title": "sendto", "contents": "sendto file_descr bytes int int list msg_flag sockaddr int  buf pos len mode addr", "rendered": "<h4 class='item'>let sendto: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-msg_flag\">msg_flag</a>),\n  ~addr: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-send_substring", "title": "send_substring", "contents": "Same as send, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>send</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-send_substring", "title": "send_substring", "contents": "send_substring file_descr string int int list msg_flag int  buf pos len mode", "rendered": "<h4 class='item'>let send_substring: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: string,\n  ~pos: int,\n  ~len: int,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-msg_flag\">msg_flag</a>)\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-send", "title": "send", "contents": "Send data over a connected socket.", "rendered": "Send data over a connected socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-send", "title": "send", "contents": "send file_descr bytes int int list msg_flag int  buf pos len mode", "rendered": "<h4 class='item'>let send: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-msg_flag\">msg_flag</a>)\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-recvfrom", "title": "recvfrom", "contents": "Receive data from an unconnected socket.", "rendered": "Receive data from an unconnected socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-recvfrom", "title": "recvfrom", "contents": "recvfrom file_descr bytes int int list msg_flag int sockaddr  buf pos len mode", "rendered": "<h4 class='item'>let recvfrom: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-msg_flag\">msg_flag</a>)\n) => (int, <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-recv", "title": "recv", "contents": "Receive data from a connected socket.", "rendered": "Receive data from a connected socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-recv", "title": "recv", "contents": "recv file_descr bytes int int list msg_flag int  buf pos len mode", "rendered": "<h4 class='item'>let recv: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-msg_flag\">msg_flag</a>)\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-msg_flag", "title": "msg_flag", "contents": "msg_flag msg_flag", "rendered": "<h4 class='item'>type msg_flag = | MSG_OOB | MSG_DONTROUTE | MSG_PEEK\n = <a href=\"./api/Unix.html#type-msg_flag\" title=\"Unix.msg_flag\">msg_flag</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpeername", "title": "getpeername", "contents": "Return the address of the host connected to the given socket.", "rendered": "Return the address of the host connected to the given socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpeername", "title": "getpeername", "contents": "getpeername file_descr sockaddr ", "rendered": "<h4 class='item'>let getpeername: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockname", "title": "getsockname", "contents": "Return the address of the given socket.", "rendered": "Return the address of the given socket.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getsockname", "title": "getsockname", "contents": "getsockname file_descr sockaddr ", "rendered": "<h4 class='item'>let getsockname: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-shutdown", "title": "shutdown", "contents": "Shutdown a socket connection. SHUTDOWN_SEND as second argument causes reads on the other end of the connection to return an end-of-file condition. SHUTDOWN_RECEIVE causes writes on the other end of the connection to return a closed pipe condition (SIGPIPE signal).", "rendered": "Shutdown a socket connection. <code>SHUTDOWN_SEND</code> as second argument causes reads on the other end of the connection to return an end-of-file condition. <code>SHUTDOWN_RECEIVE</code> causes writes on the other end of the connection to return a closed pipe condition (<code>SIGPIPE</code> signal).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-shutdown", "title": "shutdown", "contents": "shutdown file_descr shutdown_command unit  mode", "rendered": "<h4 class='item'>let shutdown: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~mode: <a href=\"./api/UnixLabels.html#type-shutdown_command\">shutdown_command</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-shutdown_command", "title": "shutdown_command", "contents": "The type of commands for shutdown.", "rendered": "The type of commands for <code>shutdown</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-shutdown_command", "title": "shutdown_command", "contents": "shutdown_command shutdown_command", "rendered": "<h4 class='item'>type shutdown_command = \n  | SHUTDOWN_RECEIVE\n  | SHUTDOWN_SEND\n  | SHUTDOWN_ALL\n = <a href=\"./api/Unix.html#type-shutdown_command\" title=\"Unix.shutdown_command\">shutdown_command</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-listen", "title": "listen", "contents": "Set up a socket for receiving connection requests. The integer argument is the maximal number of pending requests.", "rendered": "Set up a socket for receiving connection requests. The integer argument is the maximal number of pending requests.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-listen", "title": "listen", "contents": "listen file_descr int unit  max", "rendered": "<h4 class='item'>let listen: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~max: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-connect", "title": "connect", "contents": "Connect a socket to an address.", "rendered": "Connect a socket to an address.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-connect", "title": "connect", "contents": "connect file_descr sockaddr unit  addr", "rendered": "<h4 class='item'>let connect: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~addr: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-bind", "title": "bind", "contents": "Bind a socket to an address.", "rendered": "Bind a socket to an address.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-bind", "title": "bind", "contents": "bind file_descr sockaddr unit  addr", "rendered": "<h4 class='item'>let bind: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~addr: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-accept", "title": "accept", "contents": "Accept connections on the given socket. The returned descriptor is a socket connected to the client; the returned address is the address of the connecting client.", "rendered": "Accept connections on the given socket. The returned descriptor is a socket connected to the client; the returned address is the address of the connecting client.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-accept", "title": "accept", "contents": "accept file_descr file_descr sockaddr ", "rendered": "<h4 class='item'>let accept: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-socketpair", "title": "socketpair", "contents": "Create a pair of unnamed sockets, connected together.", "rendered": "Create a pair of unnamed sockets, connected together.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-socketpair", "title": "socketpair", "contents": "socketpair socket_domain socket_type int file_descr file_descr domain kind protocol", "rendered": "<h4 class='item'>let socketpair: (\n  ~domain: <a href=\"./api/UnixLabels.html#type-socket_domain\">socket_domain</a>,\n  ~kind: <a href=\"./api/UnixLabels.html#type-socket_type\">socket_type</a>,\n  ~protocol: int\n) => (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-domain_of_sockaddr", "title": "domain_of_sockaddr", "contents": "Return the socket domain adequate for the given socket address.", "rendered": "Return the socket domain adequate for the given socket address.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-domain_of_sockaddr", "title": "domain_of_sockaddr", "contents": "domain_of_sockaddr sockaddr socket_domain ", "rendered": "<h4 class='item'>let domain_of_sockaddr: <a href=\"./api/UnixLabels.html#type-sockaddr\">sockaddr</a> => <a href=\"./api/UnixLabels.html#type-socket_domain\">socket_domain</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-socket", "title": "socket", "contents": "Create a new socket in the given domain, and with the given kind. The third argument is the protocol type; 0 selects the default protocol for that kind of sockets.", "rendered": "Create a new socket in the given domain, and with the given kind. The third argument is the protocol type; 0 selects the default protocol for that kind of sockets.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-socket", "title": "socket", "contents": "socket socket_domain socket_type int file_descr domain kind protocol", "rendered": "<h4 class='item'>let socket: (\n  ~domain: <a href=\"./api/UnixLabels.html#type-socket_domain\">socket_domain</a>,\n  ~kind: <a href=\"./api/UnixLabels.html#type-socket_type\">socket_type</a>,\n  ~protocol: int\n) => <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-sockaddr", "title": "sockaddr", "contents": "sockaddr string inet_addr int sockaddr", "rendered": "<h4 class='item'>type sockaddr = \n  | ADDR_UNIX(string)\n  | ADDR_INET(<a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a>, int)\n = <a href=\"./api/Unix.html#type-sockaddr\" title=\"Unix.sockaddr\">sockaddr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_type", "title": "socket_type", "contents": "The type of socket kinds, specifying the semantics of communications.", "rendered": "The type of socket kinds, specifying the semantics of communications.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_type", "title": "socket_type", "contents": "socket_type socket_type", "rendered": "<h4 class='item'>type socket_type = \n  | SOCK_STREAM\n  | SOCK_DGRAM\n  | SOCK_RAW\n  | SOCK_SEQPACKET\n = <a href=\"./api/Unix.html#type-socket_type\" title=\"Unix.socket_type\">socket_type</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_domain", "title": "socket_domain", "contents": "The type of socket domains. Not all platforms support IPv6 sockets (type PF_INET6).", "rendered": "The type of socket domains. Not all platforms support IPv6 sockets (type <code>PF_INET6</code>).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-socket_domain", "title": "socket_domain", "contents": "socket_domain socket_domain", "rendered": "<h4 class='item'>type socket_domain = | PF_UNIX | PF_INET | PF_INET6\n = <a href=\"./api/Unix.html#type-socket_domain\" title=\"Unix.socket_domain\">socket_domain</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Sockets", "title": "Sockets", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet6_addr_loopback", "title": "inet6_addr_loopback", "contents": "A special IPv6 address representing the host machine (::1).", "rendered": "A special IPv6 address representing the host machine (<code>::1</code>).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet6_addr_loopback", "title": "inet6_addr_loopback", "contents": "inet6_addr_loopback inet_addr", "rendered": "<h4 class='item'>let inet6_addr_loopback: <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet6_addr_any", "title": "inet6_addr_any", "contents": "A special IPv6 address, for use only with bind, representing all the Internet addresses that the host machine possesses.", "rendered": "A special IPv6 address, for use only with <code>bind</code>, representing all the Internet addresses that the host machine possesses.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet6_addr_any", "title": "inet6_addr_any", "contents": "inet6_addr_any inet_addr", "rendered": "<h4 class='item'>let inet6_addr_any: <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet_addr_loopback", "title": "inet_addr_loopback", "contents": "A special IPv4 address representing the host machine (127.0.0.1).", "rendered": "A special IPv4 address representing the host machine (<code>127.0.0.1</code>).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet_addr_loopback", "title": "inet_addr_loopback", "contents": "inet_addr_loopback inet_addr", "rendered": "<h4 class='item'>let inet_addr_loopback: <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet_addr_any", "title": "inet_addr_any", "contents": "A special IPv4 address, for use only with bind, representing all the Internet addresses that the host machine possesses.", "rendered": "A special IPv4 address, for use only with <code>bind</code>, representing all the Internet addresses that the host machine possesses.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet_addr_any", "title": "inet_addr_any", "contents": "inet_addr_any inet_addr", "rendered": "<h4 class='item'>let inet_addr_any: <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-string_of_inet_addr", "title": "string_of_inet_addr", "contents": "Return the printable representation of the given Internet address. See inet_addr_of_string for a description of the printable representation.", "rendered": "Return the printable representation of the given Internet address. See inet_addr_of_string for a description of the printable representation.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-string_of_inet_addr", "title": "string_of_inet_addr", "contents": "string_of_inet_addr inet_addr string ", "rendered": "<h4 class='item'>let string_of_inet_addr: <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a> => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet_addr_of_string", "title": "inet_addr_of_string", "contents": "Conversion from the printable representation of an Internet address to its internal representation. The argument string consists of 4 numbers separated by periods (XXX.YYY.ZZZ.TTT) for IPv4 addresses, and up to 8 numbers separated by colons for IPv6 addresses. Raise Failure when given a string that does not match these formats.", "rendered": "Conversion from the printable representation of an Internet address to its internal representation. The argument string consists of 4 numbers separated by periods (<code>XXX.YYY.ZZZ.TTT</code>) for IPv4 addresses, and up to 8 numbers separated by colons for IPv6 addresses. Raise <code>Failure</code> when given a string that does not match these formats.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-inet_addr_of_string", "title": "inet_addr_of_string", "contents": "inet_addr_of_string string inet_addr ", "rendered": "<h4 class='item'>let inet_addr_of_string: string => <a href=\"./api/UnixLabels.html#type-inet_addr\">inet_addr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-inet_addr", "title": "inet_addr", "contents": "The abstract type of Internet addresses.", "rendered": "The abstract type of Internet addresses.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-inet_addr", "title": "inet_addr", "contents": "inet_addr inet_addr", "rendered": "<h4 class='item'>type inet_addr = <a href=\"./api/Unix.html#type-inet_addr\" title=\"Unix.inet_addr\">inet_addr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Internet-addresses", "title": "Internet addresses", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgrgid", "title": "getgrgid", "contents": "Find an entry in group with the given group id, or raise Not_found.", "rendered": "Find an entry in <code>group</code> with the given group id, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgrgid", "title": "getgrgid", "contents": "getgrgid int group_entry ", "rendered": "<h4 class='item'>let getgrgid: int => <a href=\"./api/UnixLabels.html#type-group_entry\">group_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpwuid", "title": "getpwuid", "contents": "Find an entry in passwd with the given user id, or raise Not_found.", "rendered": "Find an entry in <code>passwd</code> with the given user id, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpwuid", "title": "getpwuid", "contents": "getpwuid int passwd_entry ", "rendered": "<h4 class='item'>let getpwuid: int => <a href=\"./api/UnixLabels.html#type-passwd_entry\">passwd_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgrnam", "title": "getgrnam", "contents": "Find an entry in group with the given name, or raise Not_found.", "rendered": "Find an entry in <code>group</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgrnam", "title": "getgrnam", "contents": "getgrnam string group_entry ", "rendered": "<h4 class='item'>let getgrnam: string => <a href=\"./api/UnixLabels.html#type-group_entry\">group_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpwnam", "title": "getpwnam", "contents": "Find an entry in passwd with the given name, or raise Not_found.", "rendered": "Find an entry in <code>passwd</code> with the given name, or raise <code>Not_found</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpwnam", "title": "getpwnam", "contents": "getpwnam string passwd_entry ", "rendered": "<h4 class='item'>let getpwnam: string => <a href=\"./api/UnixLabels.html#type-passwd_entry\">passwd_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getlogin", "title": "getlogin", "contents": "Return the login name of the user executing the process.", "rendered": "Return the login name of the user executing the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getlogin", "title": "getlogin", "contents": "getlogin unit string ", "rendered": "<h4 class='item'>let getlogin: unit => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-group_entry", "title": "group_entry", "contents": "Structure of entries in the groups database.", "rendered": "Structure of entries in the <code>groups</code> database.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-group_entry", "title": "group_entry", "contents": "group_entry gr_name string gr_passwd string gr_gid int gr_mem array string group_entry", "rendered": "<h4 class='item'>type group_entry = {\n  gr_name: string,\n  gr_passwd: string,\n  gr_gid: int,\n  gr_mem: array(string)\n} = <a href=\"./api/Unix.html#type-group_entry\" title=\"Unix.group_entry\">group_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-passwd_entry", "title": "passwd_entry", "contents": "Structure of entries in the passwd database.", "rendered": "Structure of entries in the <code>passwd</code> database.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-passwd_entry", "title": "passwd_entry", "contents": "passwd_entry pw_name string pw_passwd string pw_uid int pw_gid int pw_gecos string pw_dir string pw_shell string passwd_entry", "rendered": "<h4 class='item'>type passwd_entry = {\n  pw_name: string,\n  pw_passwd: string,\n  pw_uid: int,\n  pw_gid: int,\n  pw_gecos: string,\n  pw_dir: string,\n  pw_shell: string\n} = <a href=\"./api/Unix.html#type-passwd_entry\" title=\"Unix.passwd_entry\">passwd_entry</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-initgroups", "title": "initgroups", "contents": "initgroups user group initializes the group access list by reading the group database /etc/group and using all groups of which user is a member. The additional group group is also added to the list.", "rendered": "<code>initgroups user group</code> initializes the group access list by reading the group database /etc/group and using all groups of which <code>user</code> is a member. The additional group <code>group</code> is also added to the list.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-initgroups", "title": "initgroups", "contents": "initgroups string int unit  ", "rendered": "<h4 class='item'>let initgroups: (string, int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setgroups", "title": "setgroups", "contents": "setgroups groups sets the supplementary group IDs for the calling process. Appropriate privileges are required.", "rendered": "<code>setgroups groups</code> sets the supplementary group IDs for the calling process. Appropriate privileges are required.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setgroups", "title": "setgroups", "contents": "setgroups array int unit ", "rendered": "<h4 class='item'>let setgroups: array(int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgroups", "title": "getgroups", "contents": "Return the list of groups to which the user executing the process belongs.", "rendered": "Return the list of groups to which the user executing the process belongs.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgroups", "title": "getgroups", "contents": "getgroups unit array int ", "rendered": "<h4 class='item'>let getgroups: unit => array(int)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setgid", "title": "setgid", "contents": "Set the real group id and effective group id for the process.", "rendered": "Set the real group id and effective group id for the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setgid", "title": "setgid", "contents": "setgid int unit ", "rendered": "<h4 class='item'>let setgid: int => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getegid", "title": "getegid", "contents": "Return the effective group id under which the process runs.", "rendered": "Return the effective group id under which the process runs.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getegid", "title": "getegid", "contents": "getegid unit int ", "rendered": "<h4 class='item'>let getegid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgid", "title": "getgid", "contents": "Return the group id of the user executing the process.", "rendered": "Return the group id of the user executing the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getgid", "title": "getgid", "contents": "getgid unit int ", "rendered": "<h4 class='item'>let getgid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setuid", "title": "setuid", "contents": "Set the real user id and effective user id for the process.", "rendered": "Set the real user id and effective user id for the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setuid", "title": "setuid", "contents": "setuid int unit ", "rendered": "<h4 class='item'>let setuid: int => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-geteuid", "title": "geteuid", "contents": "Return the effective user id under which the process runs.", "rendered": "Return the effective user id under which the process runs.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-geteuid", "title": "geteuid", "contents": "geteuid unit int ", "rendered": "<h4 class='item'>let geteuid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getuid", "title": "getuid", "contents": "Return the user id of the user executing the process.", "rendered": "Return the user id of the user executing the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getuid", "title": "getuid", "contents": "getuid unit int ", "rendered": "<h4 class='item'>let getuid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#User-id--group-id", "title": "User id, group id", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setitimer", "title": "setitimer", "contents": "setitimer t s sets the interval timer t and returns its previous status. The s argument is interpreted as follows: s.it_value, if nonzero, is the time to the next timer expiration; s.it_interval, if nonzero, specifies a value to be used in reloading it_value when the timer expires. Setting s.it_value to zero disable the timer. Setting s.it_interval to zero causes the timer to be disabled after its next expiration.", "rendered": "<code>setitimer t s</code> sets the interval timer <code>t</code> and returns its previous status. The <code>s</code> argument is interpreted as follows: <code>s.it_value</code>, if nonzero, is the time to the next timer expiration; <code>s.it_interval</code>, if nonzero, specifies a value to be used in reloading it_value when the timer expires. Setting <code>s.it_value</code> to zero disable the timer. Setting <code>s.it_interval</code> to zero causes the timer to be disabled after its next expiration.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-setitimer", "title": "setitimer", "contents": "setitimer interval_timer interval_timer_status interval_timer_status  ", "rendered": "<h4 class='item'>let setitimer: (\n  <a href=\"./api/UnixLabels.html#type-interval_timer\">interval_timer</a>,\n  <a href=\"./api/UnixLabels.html#type-interval_timer_status\">interval_timer_status</a>\n) => <a href=\"./api/UnixLabels.html#type-interval_timer_status\">interval_timer_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getitimer", "title": "getitimer", "contents": "Return the current status of the given interval timer.", "rendered": "Return the current status of the given interval timer.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getitimer", "title": "getitimer", "contents": "getitimer interval_timer interval_timer_status ", "rendered": "<h4 class='item'>let getitimer: <a href=\"./api/UnixLabels.html#type-interval_timer\">interval_timer</a> => <a href=\"./api/UnixLabels.html#type-interval_timer_status\">interval_timer_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-interval_timer_status", "title": "interval_timer_status", "contents": "The type describing the status of an interval timer", "rendered": "The type describing the status of an interval timer", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-interval_timer_status", "title": "interval_timer_status", "contents": "interval_timer_status it_interval float it_value float interval_timer_status", "rendered": "<h4 class='item'>type interval_timer_status = {\n  it_interval: float,\n  it_value: float\n} = <a href=\"./api/Unix.html#type-interval_timer_status\" title=\"Unix.interval_timer_status\">interval_timer_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-interval_timer", "title": "interval_timer", "contents": "The three kinds of interval timers.", "rendered": "The three kinds of interval timers.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-interval_timer", "title": "interval_timer", "contents": "interval_timer interval_timer", "rendered": "<h4 class='item'>type interval_timer = \n  | ITIMER_REAL\n  | ITIMER_VIRTUAL\n  | ITIMER_PROF\n = <a href=\"./api/Unix.html#type-interval_timer\" title=\"Unix.interval_timer\">interval_timer</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-utimes", "title": "utimes", "contents": "Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. A time of 0.0 is interpreted as the current time.", "rendered": "Set the last access time (second arg) and last modification time (third arg) for a file. Times are expressed in seconds from 00:00:00 GMT, Jan. 1, 1970. A time of <code>0.0</code> is interpreted as the current time.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-utimes", "title": "utimes", "contents": "utimes string float float unit  access modif", "rendered": "<h4 class='item'>let utimes: (string, ~access: float, ~modif: float) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-times", "title": "times", "contents": "Return the execution times of the process.", "rendered": "Return the execution times of the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-times", "title": "times", "contents": "times unit process_times ", "rendered": "<h4 class='item'>let times: unit => <a href=\"./api/UnixLabels.html#type-process_times\">process_times</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sleep", "title": "sleep", "contents": "Stop execution for the given number of seconds.", "rendered": "Stop execution for the given number of seconds.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sleep", "title": "sleep", "contents": "sleep int unit ", "rendered": "<h4 class='item'>let sleep: int => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-alarm", "title": "alarm", "contents": "Schedule a SIGALRM signal after the given number of seconds.", "rendered": "Schedule a <code>SIGALRM</code> signal after the given number of seconds.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-alarm", "title": "alarm", "contents": "alarm int int ", "rendered": "<h4 class='item'>let alarm: int => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-mktime", "title": "mktime", "contents": "Convert a date and time, specified by the tm argument, into a time in seconds, as returned by time. The tm_isdst, tm_wday and tm_yday fields of tm are ignored. Also return a normalized copy of the given tm record, with the tm_wday, tm_yday, and tm_isdst fields recomputed from the other fields, and the other fields normalized (so that, e.g., 40 October is changed into 9 November). The tm argument is interpreted in the local time zone.", "rendered": "Convert a date and time, specified by the <code>tm</code> argument, into a time in seconds, as returned by time. The <code>tm_isdst</code>, <code>tm_wday</code> and <code>tm_yday</code> fields of <code>tm</code> are ignored. Also return a normalized copy of the given <code>tm</code> record, with the <code>tm_wday</code>, <code>tm_yday</code>, and <code>tm_isdst</code> fields recomputed from the other fields, and the other fields normalized (so that, e.g., 40 October is changed into 9 November). The <code>tm</code> argument is interpreted in the local time zone.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-mktime", "title": "mktime", "contents": "mktime tm float tm ", "rendered": "<h4 class='item'>let mktime: <a href=\"./api/UnixLabels.html#type-tm\">tm</a> => (float, <a href=\"./api/UnixLabels.html#type-tm\">tm</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-localtime", "title": "localtime", "contents": "Convert a time in seconds, as returned by time, into a date and a time. Assumes the local time zone.", "rendered": "Convert a time in seconds, as returned by time, into a date and a time. Assumes the local time zone.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-localtime", "title": "localtime", "contents": "localtime float tm ", "rendered": "<h4 class='item'>let localtime: float => <a href=\"./api/UnixLabels.html#type-tm\">tm</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gmtime", "title": "gmtime", "contents": "Convert a time in seconds, as returned by time, into a date and a time. Assumes UTC (Coordinated Universal Time), also known as GMT.", "rendered": "Convert a time in seconds, as returned by time, into a date and a time. Assumes UTC (Coordinated Universal Time), also known as GMT.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gmtime", "title": "gmtime", "contents": "gmtime float tm ", "rendered": "<h4 class='item'>let gmtime: float => <a href=\"./api/UnixLabels.html#type-tm\">tm</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gettimeofday", "title": "gettimeofday", "contents": "Same as time, but with resolution better than 1 second.", "rendered": "Same as time, but with resolution better than 1 second.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-gettimeofday", "title": "gettimeofday", "contents": "gettimeofday unit float ", "rendered": "<h4 class='item'>let gettimeofday: unit => float</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-time", "title": "time", "contents": "Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.", "rendered": "Return the current time since 00:00:00 GMT, Jan. 1, 1970, in seconds.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-time", "title": "time", "contents": "time unit float ", "rendered": "<h4 class='item'>let time: unit => float</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-tm", "title": "tm", "contents": "The type representing wallclock time and calendar date.", "rendered": "The type representing wallclock time and calendar date.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-tm", "title": "tm", "contents": "tm tm_sec int tm_min int tm_hour int tm_mday int tm_mon int tm_year int tm_wday int tm_yday int tm_isdst bool tm", "rendered": "<h4 class='item'>type tm = {\n  tm_sec: int,\n  tm_min: int,\n  tm_hour: int,\n  tm_mday: int,\n  tm_mon: int,\n  tm_year: int,\n  tm_wday: int,\n  tm_yday: int,\n  tm_isdst: bool\n} = <a href=\"./api/Unix.html#type-tm\" title=\"Unix.tm\">tm</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-process_times", "title": "process_times", "contents": "The execution times (CPU times) of a process.", "rendered": "The execution times (CPU times) of a process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-process_times", "title": "process_times", "contents": "process_times tms_utime float tms_stime float tms_cutime float tms_cstime float process_times", "rendered": "<h4 class='item'>type process_times = {\n  tms_utime: float,\n  tms_stime: float,\n  tms_cutime: float,\n  tms_cstime: float\n} = <a href=\"./api/Unix.html#type-process_times\" title=\"Unix.process_times\">process_times</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Time-functions", "title": "Time functions", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-pause", "title": "pause", "contents": "Wait until a non-ignored, non-blocked signal is delivered.", "rendered": "Wait until a non-ignored, non-blocked signal is delivered.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-pause", "title": "pause", "contents": "pause unit unit ", "rendered": "<h4 class='item'>let pause: unit => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sigsuspend", "title": "sigsuspend", "contents": "sigsuspend sigs atomically sets the blocked signals to sigs and waits for a non-ignored, non-blocked signal to be delivered. On return, the blocked signals are reset to their initial value.", "rendered": "<code>sigsuspend sigs</code> atomically sets the blocked signals to <code>sigs</code> and waits for a non-ignored, non-blocked signal to be delivered. On return, the blocked signals are reset to their initial value.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sigsuspend", "title": "sigsuspend", "contents": "sigsuspend list int unit ", "rendered": "<h4 class='item'>let sigsuspend: list(int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sigpending", "title": "sigpending", "contents": "Return the set of blocked signals that are currently pending.", "rendered": "Return the set of blocked signals that are currently pending.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sigpending", "title": "sigpending", "contents": "sigpending unit list int ", "rendered": "<h4 class='item'>let sigpending: unit => list(int)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sigprocmask", "title": "sigprocmask", "contents": "sigprocmask cmd sigs changes the set of blocked signals. If cmd is SIG_SETMASK, blocked signals are set to those in the list sigs. If cmd is SIG_BLOCK, the signals in sigs are added to the set of blocked signals. If cmd is SIG_UNBLOCK, the signals in sigs are removed from the set of blocked signals. sigprocmask returns the set of previously blocked signals.", "rendered": "<code>sigprocmask cmd sigs</code> changes the set of blocked signals. If <code>cmd</code> is <code>SIG_SETMASK</code>, blocked signals are set to those in the list <code>sigs</code>. If <code>cmd</code> is <code>SIG_BLOCK</code>, the signals in <code>sigs</code> are added to the set of blocked signals. If <code>cmd</code> is <code>SIG_UNBLOCK</code>, the signals in <code>sigs</code> are removed from the set of blocked signals. <code>sigprocmask</code> returns the set of previously blocked signals.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-sigprocmask", "title": "sigprocmask", "contents": "sigprocmask sigprocmask_command list int list int mode ", "rendered": "<h4 class='item'>let sigprocmask: (\n  ~mode: <a href=\"./api/UnixLabels.html#type-sigprocmask_command\">sigprocmask_command</a>,\n  list(int)\n) => list(int)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-sigprocmask_command", "title": "sigprocmask_command", "contents": "sigprocmask_command sigprocmask_command", "rendered": "<h4 class='item'>type sigprocmask_command = \n  | SIG_SETMASK\n  | SIG_BLOCK\n  | SIG_UNBLOCK\n = <a href=\"./api/Unix.html#type-sigprocmask_command\" title=\"Unix.sigprocmask_command\">sigprocmask_command</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-kill", "title": "kill", "contents": "kill pid sig sends signal number sig to the process with id pid.", "rendered": "<code>kill pid sig</code> sends signal number <code>sig</code> to the process with id <code>pid</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-kill", "title": "kill", "contents": "kill int int unit pid signal", "rendered": "<h4 class='item'>let kill: (~pid: int, ~signal: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html", "title": "UnixLabels", "contents": "Note: installation of signal handlers is performed via the functions signal and set_signal.", "rendered": "Note: installation of signal handlers is performed via the functions signal and set_signal.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Signals", "title": "Signals", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lockf", "title": "lockf", "contents": "The F_LOCK and F_TLOCK commands attempts to put a write lock on the specified region. The F_RLOCK and F_TRLOCK commands attempts to put a read lock on the specified region. If one or several locks put by another process prevent the current process from acquiring the lock, F_LOCK and F_RLOCK block until these locks are removed, while F_TLOCK and F_TRLOCK fail immediately with an exception. The F_ULOCK removes whatever locks the current process has on the specified region. Finally, the F_TEST command tests whether a write lock can be acquired on the specified region, without actually putting a lock. It returns immediately if successful, or fails otherwise.", "rendered": "The <code>F_LOCK</code> and <code>F_TLOCK</code> commands attempts to put a write lock on the specified region. The <code>F_RLOCK</code> and <code>F_TRLOCK</code> commands attempts to put a read lock on the specified region. If one or several locks put by another process prevent the current process from acquiring the lock, <code>F_LOCK</code> and <code>F_RLOCK</code> block until these locks are removed, while <code>F_TLOCK</code> and <code>F_TRLOCK</code> fail immediately with an exception. The <code>F_ULOCK</code> removes whatever locks the current process has on the specified region. Finally, the <code>F_TEST</code> command tests whether a write lock can be acquired on the specified region, without actually putting a lock. It returns immediately if successful, or fails otherwise.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lockf", "title": "lockf", "contents": "lockf fd cmd size puts a lock on a region of the file opened as fd. The region starts at the current read/write position for fd (as set by lseek), and extends size bytes forward if size is positive, size bytes backwards if size is negative, or to the end of the file if size is zero. A write lock prevents any other process from acquiring a read or write lock on the region. A read lock prevents any other process from acquiring a write lock on the region, but lets other processes acquire read locks on it.", "rendered": "<code>lockf fd cmd size</code> puts a lock on a region of the file opened as <code>fd</code>. The region starts at the current read/write position for <code>fd</code> (as set by lseek), and extends <code>size</code> bytes forward if <code>size</code> is positive, <code>size</code> bytes backwards if <code>size</code> is negative, or to the end of the file if <code>size</code> is zero. A write lock prevents any other process from acquiring a read or write lock on the region. A read lock prevents any other process from acquiring a write lock on the region, but lets other processes acquire read locks on it.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lockf", "title": "lockf", "contents": "lockf file_descr lock_command int unit  mode len", "rendered": "<h4 class='item'>let lockf: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~mode: <a href=\"./api/UnixLabels.html#type-lock_command\">lock_command</a>,\n  ~len: int\n) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-lock_command", "title": "lock_command", "contents": "Commands for lockf.", "rendered": "Commands for lockf.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-lock_command", "title": "lock_command", "contents": "lock_command lock_command", "rendered": "<h4 class='item'>type lock_command = \n  | F_ULOCK\n  | F_LOCK\n  | F_TLOCK\n  | F_TEST\n  | F_RLOCK\n  | F_TRLOCK\n = <a href=\"./api/Unix.html#type-lock_command\" title=\"Unix.lock_command\">lock_command</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Locking", "title": "Locking", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-select", "title": "select", "contents": "Wait until some input/output operations become possible on some channels. The three list arguments are, respectively, a set of descriptors to check for reading (first argument), for writing (second argument), or for exceptional conditions (third argument). The fourth argument is the maximal timeout, in seconds; a negative fourth argument means no timeout (unbounded wait). The result is composed of three sets of descriptors: those ready for reading (first component), ready for writing (second component), and over which an exceptional condition is pending (third component).", "rendered": "Wait until some input/output operations become possible on some channels. The three list arguments are, respectively, a set of descriptors to check for reading (first argument), for writing (second argument), or for exceptional conditions (third argument). The fourth argument is the maximal timeout, in seconds; a negative fourth argument means no timeout (unbounded wait). The result is composed of three sets of descriptors: those ready for reading (first component), ready for writing (second component), and over which an exceptional condition is pending (third component).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-select", "title": "select", "contents": "select list file_descr list file_descr list file_descr float list file_descr list file_descr list file_descr read write except timeout", "rendered": "<h4 class='item'>let select: (\n  ~read: list(<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>),\n  ~write: list(<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>),\n  ~except: list(<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>),\n  ~timeout: float\n) => (list(<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>), list(<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>), list(<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>))</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Polling", "title": "Polling", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-readlink", "title": "readlink", "contents": "Read the contents of a link.", "rendered": "Read the contents of a link.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-readlink", "title": "readlink", "contents": "readlink string string ", "rendered": "<h4 class='item'>let readlink: string => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-symlink", "title": "symlink", "contents": "symlink source dest creates the file dest as a symbolic link to the file source.", "rendered": "<code>symlink source dest</code> creates the file <code>dest</code> as a symbolic link to the file <code>source</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-symlink", "title": "symlink", "contents": "symlink string string unit src dst", "rendered": "<h4 class='item'>let symlink: (~src: string, ~dst: string) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Symbolic-links", "title": "Symbolic links", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process_full", "title": "close_process_full", "contents": "Close channels opened by open_process_full, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process_full, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process_full", "title": "close_process_full", "contents": "close_process_full in_channel out_channel in_channel process_status ", "rendered": "<h4 class='item'>let close_process_full: (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>\n) => <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process", "title": "close_process", "contents": "Close channels opened by open_process, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process", "title": "close_process", "contents": "close_process in_channel out_channel process_status ", "rendered": "<h4 class='item'>let close_process: (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>\n) => <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process_out", "title": "close_process_out", "contents": "Close channels opened by open_process_out, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process_out, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process_out", "title": "close_process_out", "contents": "close_process_out out_channel process_status ", "rendered": "<h4 class='item'>let close_process_out: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process_in", "title": "close_process_in", "contents": "Close channels opened by open_process_in, wait for the associated command to terminate, and return its termination status.", "rendered": "Close channels opened by open_process_in, wait for the associated command to terminate, and return its termination status.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close_process_in", "title": "close_process_in", "contents": "close_process_in in_channel process_status ", "rendered": "<h4 class='item'>let close_process_in: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process_full", "title": "open_process_full", "contents": "Similar to open_process, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.", "rendered": "Similar to open_process, but the second argument specifies the environment passed to the command. The result is a triple of channels connected respectively to the standard output, standard input, and standard error of the command.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process_full", "title": "open_process_full", "contents": "open_process_full string array string in_channel out_channel in_channel  env", "rendered": "<h4 class='item'>let open_process_full: (string, ~env: array(string)) => (\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>,\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>\n)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process", "title": "open_process", "contents": "Same as open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.", "rendered": "Same as open_process_out, but redirects both the standard input and standard output of the command to pipes connected to the two returned channels. The input channel is connected to the output of the command, and the output channel to the input of the command.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process", "title": "open_process", "contents": "open_process string in_channel out_channel ", "rendered": "<h4 class='item'>let open_process: string => (<a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process_out", "title": "open_process_out", "contents": "Same as open_process_in, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call flush at the right times to ensure correct synchronization.", "rendered": "Same as open_process_in, but redirect the standard input of the command to a pipe. Data written to the returned output channel is sent to the standard input of the command. Warning: writes on output channels are buffered, hence be careful to call flush at the right times to ensure correct synchronization.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process_out", "title": "open_process_out", "contents": "open_process_out string out_channel ", "rendered": "<h4 class='item'>let open_process_out: string => <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process_in", "title": "open_process_in", "contents": "High-level pipe and process management. This function runs the given command in parallel with the program. The standard output of the command is redirected to a pipe, which can be read via the returned input channel. The command is interpreted by the shell /bin/sh (cf. system).", "rendered": "High-level pipe and process management. This function runs the given command in parallel with the program. The standard output of the command is redirected to a pipe, which can be read via the returned input channel. The command is interpreted by the shell <code>/bin/sh</code> (cf. <code>system</code>).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-open_process_in", "title": "open_process_in", "contents": "open_process_in string in_channel ", "rendered": "<h4 class='item'>let open_process_in: string => <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-create_process_env", "title": "create_process_env", "contents": "create_process_env prog args env new_stdin new_stdout new_stderr works as create_process, except that the extra argument env specifies the environment passed to the program.", "rendered": "<code>create_process_env prog args env new_stdin new_stdout new_stderr</code> works as create_process, except that the extra argument <code>env</code> specifies the environment passed to the program.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-create_process_env", "title": "create_process_env", "contents": "create_process_env string array string array string file_descr file_descr file_descr int prog args env stdin stdout stderr", "rendered": "<h4 class='item'>let create_process_env: (\n  ~prog: string,\n  ~args: array(string),\n  ~env: array(string),\n  ~stdin: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~stdout: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~stderr: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-create_process", "title": "create_process", "contents": "create_process prog args new_stdin new_stdout new_stderr forks a new process that executes the program in file prog, with arguments args. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors new_stdin, new_stdout and new_stderr. Passing e.g. stdout for new_stdout prevents the redirection and causes the new process to have the same standard output as the current process. The executable file prog is searched in the path. The new process has the same environment as the current process.", "rendered": "<code>create_process prog args new_stdin new_stdout new_stderr</code> forks a new process that executes the program in file <code>prog</code>, with arguments <code>args</code>. The pid of the new process is returned immediately; the new process executes concurrently with the current process. The standard input and outputs of the new process are connected to the descriptors <code>new_stdin</code>, <code>new_stdout</code> and <code>new_stderr</code>. Passing e.g. <code>stdout</code> for <code>new_stdout</code> prevents the redirection and causes the new process to have the same standard output as the current process. The executable file <code>prog</code> is searched in the path. The new process has the same environment as the current process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-create_process", "title": "create_process", "contents": "create_process string array string file_descr file_descr file_descr int prog args stdin stdout stderr", "rendered": "<h4 class='item'>let create_process: (\n  ~prog: string,\n  ~args: array(string),\n  ~stdin: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~stdout: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~stderr: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#High-level-process-and-redirection-management", "title": "High-level process and redirection management", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-mkfifo", "title": "mkfifo", "contents": "Create a named pipe with the given permissions.", "rendered": "Create a named pipe with the given permissions.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-mkfifo", "title": "mkfifo", "contents": "mkfifo string file_perm unit  perm", "rendered": "<h4 class='item'>let mkfifo: (string, ~perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-pipe", "title": "pipe", "contents": "Create a pipe. The first component of the result is opened for reading, that&#39;s the exit to the pipe. The second component is opened for writing, that&#39;s the entrance to the pipe.", "rendered": "Create a pipe. The first component of the result is opened for reading, that&#39;s the exit to the pipe. The second component is opened for writing, that&#39;s the entrance to the pipe.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-pipe", "title": "pipe", "contents": "pipe unit file_descr file_descr ", "rendered": "<h4 class='item'>let pipe: unit => (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Pipes-and-redirections", "title": "Pipes and redirections", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-closedir", "title": "closedir", "contents": "Close a directory descriptor.", "rendered": "Close a directory descriptor.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-closedir", "title": "closedir", "contents": "closedir dir_handle unit ", "rendered": "<h4 class='item'>let closedir: <a href=\"./api/UnixLabels.html#type-dir_handle\">dir_handle</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-rewinddir", "title": "rewinddir", "contents": "Reposition the descriptor to the beginning of the directory", "rendered": "Reposition the descriptor to the beginning of the directory", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-rewinddir", "title": "rewinddir", "contents": "rewinddir dir_handle unit ", "rendered": "<h4 class='item'>let rewinddir: <a href=\"./api/UnixLabels.html#type-dir_handle\">dir_handle</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-readdir", "title": "readdir", "contents": "when the end of the directory has been reached.", "rendered": "when the end of the directory has been reached.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-readdir", "title": "readdir", "contents": "Raises: End_of_filewhen the end of the directory has been reached.\n\n", "rendered": "Raises: End_of_file<p>when the end of the directory has been reached.</p>\n", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-readdir", "title": "readdir", "contents": "Return the next entry in a directory.", "rendered": "Return the next entry in a directory.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-readdir", "title": "readdir", "contents": "readdir dir_handle string ", "rendered": "<h4 class='item'>let readdir: <a href=\"./api/UnixLabels.html#type-dir_handle\">dir_handle</a> => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-opendir", "title": "opendir", "contents": "Open a descriptor on a directory", "rendered": "Open a descriptor on a directory", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-opendir", "title": "opendir", "contents": "opendir string dir_handle ", "rendered": "<h4 class='item'>let opendir: string => <a href=\"./api/UnixLabels.html#type-dir_handle\">dir_handle</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-dir_handle", "title": "dir_handle", "contents": "The type of descriptors over opened directories.", "rendered": "The type of descriptors over opened directories.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-dir_handle", "title": "dir_handle", "contents": "dir_handle dir_handle", "rendered": "<h4 class='item'>type dir_handle = <a href=\"./api/Unix.html#type-dir_handle\" title=\"Unix.dir_handle\">dir_handle</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chroot", "title": "chroot", "contents": "Change the process root directory.", "rendered": "Change the process root directory.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chroot", "title": "chroot", "contents": "chroot string unit ", "rendered": "<h4 class='item'>let chroot: string => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getcwd", "title": "getcwd", "contents": "Return the name of the current working directory.", "rendered": "Return the name of the current working directory.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getcwd", "title": "getcwd", "contents": "getcwd unit string ", "rendered": "<h4 class='item'>let getcwd: unit => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chdir", "title": "chdir", "contents": "Change the process working directory.", "rendered": "Change the process working directory.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chdir", "title": "chdir", "contents": "chdir string unit ", "rendered": "<h4 class='item'>let chdir: string => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-rmdir", "title": "rmdir", "contents": "Remove an empty directory.", "rendered": "Remove an empty directory.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-rmdir", "title": "rmdir", "contents": "rmdir string unit ", "rendered": "<h4 class='item'>let rmdir: string => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-mkdir", "title": "mkdir", "contents": "Create a directory with the given permissions.", "rendered": "Create a directory with the given permissions.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-mkdir", "title": "mkdir", "contents": "mkdir string file_perm unit  perm", "rendered": "<h4 class='item'>let mkdir: (string, ~perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Directories", "title": "Directories", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-clear_close_on_exec", "title": "clear_close_on_exec", "contents": "Clear the ``close-on-exec&#39;&#39; flag on the given descriptor. See set_close_on_exec.", "rendered": "Clear the ``close-on-exec&#39;&#39; flag on the given descriptor. See set_close_on_exec.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-clear_close_on_exec", "title": "clear_close_on_exec", "contents": "clear_close_on_exec file_descr unit ", "rendered": "<h4 class='item'>let clear_close_on_exec: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-set_close_on_exec", "title": "set_close_on_exec", "contents": "Set the ``close-on-exec&#39;&#39; flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the exec functions.", "rendered": "Set the ``close-on-exec&#39;&#39; flag on the given descriptor. A descriptor with the close-on-exec flag is automatically closed when the current process starts another program with one of the <code>exec</code> functions.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-set_close_on_exec", "title": "set_close_on_exec", "contents": "set_close_on_exec file_descr unit ", "rendered": "<h4 class='item'>let set_close_on_exec: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-clear_nonblock", "title": "clear_nonblock", "contents": "Clear the ``non-blocking&#39;&#39; flag on the given descriptor. See set_nonblock.", "rendered": "Clear the ``non-blocking&#39;&#39; flag on the given descriptor. See set_nonblock.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-clear_nonblock", "title": "clear_nonblock", "contents": "clear_nonblock file_descr unit ", "rendered": "<h4 class='item'>let clear_nonblock: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-set_nonblock", "title": "set_nonblock", "contents": "Set the ``non-blocking&#39;&#39; flag on the given descriptor. When the non-blocking flag is set, reading on a descriptor on which there is temporarily no data available raises the EAGAIN or EWOULDBLOCK error instead of blocking; writing on a descriptor on which there is temporarily no room for writing also raises EAGAIN or EWOULDBLOCK.", "rendered": "Set the ``non-blocking&#39;&#39; flag on the given descriptor. When the non-blocking flag is set, reading on a descriptor on which there is temporarily no data available raises the <code>EAGAIN</code> or <code>EWOULDBLOCK</code> error instead of blocking; writing on a descriptor on which there is temporarily no room for writing also raises <code>EAGAIN</code> or <code>EWOULDBLOCK</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-set_nonblock", "title": "set_nonblock", "contents": "set_nonblock file_descr unit ", "rendered": "<h4 class='item'>let set_nonblock: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-dup2", "title": "dup2", "contents": "dup2 fd1 fd2 duplicates fd1 to fd2, closing fd2 if already opened.", "rendered": "<code>dup2 fd1 fd2</code> duplicates <code>fd1</code> to <code>fd2</code>, closing <code>fd2</code> if already opened.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-dup2", "title": "dup2", "contents": "dup2 file_descr file_descr unit src dst", "rendered": "<h4 class='item'>let dup2: (~src: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~dst: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-dup", "title": "dup", "contents": "Return a new file descriptor referencing the same file as the given descriptor.", "rendered": "Return a new file descriptor referencing the same file as the given descriptor.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-dup", "title": "dup", "contents": "dup file_descr file_descr ", "rendered": "<h4 class='item'>let dup: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Operations-on-file-descriptors", "title": "Operations on file descriptors", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-access", "title": "access", "contents": "Check that the process has the given permissions over the named file. Raise Unix_error otherwise.", "rendered": "Check that the process has the given permissions over the named file. Raise <code>Unix_error</code> otherwise.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-access", "title": "access", "contents": "access string list access_permission unit  perm", "rendered": "<h4 class='item'>let access: (string, ~perm: list(<a href=\"./api/UnixLabels.html#type-access_permission\">access_permission</a>)) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-umask", "title": "umask", "contents": "Set the process&#39;s file mode creation mask, and return the previous mask.", "rendered": "Set the process&#39;s file mode creation mask, and return the previous mask.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-umask", "title": "umask", "contents": "umask int int ", "rendered": "<h4 class='item'>let umask: int => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fchown", "title": "fchown", "contents": "Change the owner uid and owner gid of an opened file.", "rendered": "Change the owner uid and owner gid of an opened file.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fchown", "title": "fchown", "contents": "fchown file_descr int int unit  uid gid", "rendered": "<h4 class='item'>let fchown: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~uid: int, ~gid: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chown", "title": "chown", "contents": "Change the owner uid and owner gid of the named file.", "rendered": "Change the owner uid and owner gid of the named file.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chown", "title": "chown", "contents": "chown string int int unit  uid gid", "rendered": "<h4 class='item'>let chown: (string, ~uid: int, ~gid: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fchmod", "title": "fchmod", "contents": "Change the permissions of an opened file.", "rendered": "Change the permissions of an opened file.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fchmod", "title": "fchmod", "contents": "fchmod file_descr file_perm unit  perm", "rendered": "<h4 class='item'>let fchmod: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chmod", "title": "chmod", "contents": "Change the permissions of the named file.", "rendered": "Change the permissions of the named file.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-chmod", "title": "chmod", "contents": "chmod string file_perm unit  perm", "rendered": "<h4 class='item'>let chmod: (string, ~perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-access_permission", "title": "access_permission", "contents": "Flags for the access call.", "rendered": "Flags for the access call.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-access_permission", "title": "access_permission", "contents": "access_permission access_permission", "rendered": "<h4 class='item'>type access_permission = | R_OK | W_OK | X_OK | F_OK\n = <a href=\"./api/Unix.html#type-access_permission\" title=\"Unix.access_permission\">access_permission</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#File-permissions-and-ownership", "title": "File permissions and ownership", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-link", "title": "link", "contents": "link source dest creates a hard link named dest to the file named source.", "rendered": "<code>link source dest</code> creates a hard link named <code>dest</code> to the file named <code>source</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-link", "title": "link", "contents": "link string string unit src dst", "rendered": "<h4 class='item'>let link: (~src: string, ~dst: string) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-rename", "title": "rename", "contents": "rename old new changes the name of a file from old to new.", "rendered": "<code>rename old new</code> changes the name of a file from <code>old</code> to <code>new</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-rename", "title": "rename", "contents": "rename string string unit src dst", "rendered": "<h4 class='item'>let rename: (~src: string, ~dst: string) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-unlink", "title": "unlink", "contents": "Removes the named file", "rendered": "Removes the named file", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-unlink", "title": "unlink", "contents": "unlink string unit ", "rendered": "<h4 class='item'>let unlink: string => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Operations-on-file-names", "title": "Operations on file names", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-LargeFile.fstat", "title": "LargeFile.fstat", "contents": "fstat file_descr stats ", "rendered": "<h4 class='item'>let fstat: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/UnixLabels.html#type-LargeFile.stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-LargeFile.lstat", "title": "LargeFile.lstat", "contents": "lstat string stats ", "rendered": "<h4 class='item'>let lstat: string => <a href=\"./api/UnixLabels.html#type-LargeFile.stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-LargeFile.stat", "title": "LargeFile.stat", "contents": "stat string stats ", "rendered": "<h4 class='item'>let stat: string => <a href=\"./api/UnixLabels.html#type-LargeFile.stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-LargeFile.stats", "title": "LargeFile.stats", "contents": "stats st_dev int st_ino int st_kind file_kind st_perm file_perm st_nlink int st_uid int st_gid int st_rdev int st_size int64 st_atime float st_mtime float st_ctime float stats", "rendered": "<h4 class='item'>type stats = {\n  st_dev: int,\n  st_ino: int,\n  st_kind: <a href=\"./api/UnixLabels.html#type-file_kind\">file_kind</a>,\n  st_perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>,\n  st_nlink: int,\n  st_uid: int,\n  st_gid: int,\n  st_rdev: int,\n  st_size: int64,\n  st_atime: float,\n  st_mtime: float,\n  st_ctime: float\n} = <a href=\"./api/Unix.html#type-LargeFile.stats\" title=\"Unix.LargeFile.stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-LargeFile.ftruncate", "title": "LargeFile.ftruncate", "contents": "ftruncate file_descr int64 unit  len", "rendered": "<h4 class='item'>let ftruncate: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~len: int64) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-LargeFile.truncate", "title": "LargeFile.truncate", "contents": "truncate string int64 unit  len", "rendered": "<h4 class='item'>let truncate: (string, ~len: int64) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-LargeFile.lseek", "title": "LargeFile.lseek", "contents": "lseek file_descr int64 seek_command int64   mode", "rendered": "<h4 class='item'>let lseek: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, int64, ~mode: <a href=\"./api/UnixLabels.html#type-seek_command\">seek_command</a>) => int64</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#module-LargeFile", "title": "LargeFile", "contents": "@rest", "rendered": "@rest", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#module-LargeFile", "title": "LargeFile", "contents": "File operations on large files. This sub-module provides 64-bit variants of the functions lseek (for positioning a file descriptor), truncate and ftruncate (for changing the size of a file), and stat, lstat and fstat (for obtaining information on files). These alternate functions represent positions and sizes by 64-bit integers (type int64) instead of regular integers (type int), thus allowing operating on files whose sizes are greater than max_int.", "rendered": "File operations on large files. This sub-module provides 64-bit variants of the functions lseek (for positioning a file descriptor), truncate and ftruncate (for changing the size of a file), and stat, lstat and fstat (for obtaining information on files). These alternate functions represent positions and sizes by 64-bit integers (type <code>int64</code>) instead of regular integers (type <code>int</code>), thus allowing operating on files whose sizes are greater than <code>max_int</code>.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#File-operations-on-large-files", "title": "File operations on large files", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-isatty", "title": "isatty", "contents": "Return true if the given file descriptor refers to a terminal or console window, false otherwise.", "rendered": "Return <code>true</code> if the given file descriptor refers to a terminal or console window, <code>false</code> otherwise.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-isatty", "title": "isatty", "contents": "isatty file_descr bool ", "rendered": "<h4 class='item'>let isatty: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => bool</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fstat", "title": "fstat", "contents": "Return the information for the file associated with the given descriptor.", "rendered": "Return the information for the file associated with the given descriptor.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fstat", "title": "fstat", "contents": "fstat file_descr stats ", "rendered": "<h4 class='item'>let fstat: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/UnixLabels.html#type-stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lstat", "title": "lstat", "contents": "Same as stat, but in case the file is a symbolic link, return the information for the link itself.", "rendered": "Same as stat, but in case the file is a symbolic link, return the information for the link itself.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lstat", "title": "lstat", "contents": "lstat string stats ", "rendered": "<h4 class='item'>let lstat: string => <a href=\"./api/UnixLabels.html#type-stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stat", "title": "stat", "contents": "Return the information for the named file.", "rendered": "Return the information for the named file.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stat", "title": "stat", "contents": "stat string stats ", "rendered": "<h4 class='item'>let stat: string => <a href=\"./api/UnixLabels.html#type-stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-stats", "title": "stats", "contents": "The information returned by the stat calls.", "rendered": "The information returned by the stat calls.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-stats", "title": "stats", "contents": "stats st_dev int st_ino int st_kind file_kind st_perm file_perm st_nlink int st_uid int st_gid int st_rdev int st_size int st_atime float st_mtime float st_ctime float stats", "rendered": "<h4 class='item'>type stats = {\n  st_dev: int,\n  st_ino: int,\n  st_kind: <a href=\"./api/UnixLabels.html#type-file_kind\">file_kind</a>,\n  st_perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>,\n  st_nlink: int,\n  st_uid: int,\n  st_gid: int,\n  st_rdev: int,\n  st_size: int,\n  st_atime: float,\n  st_mtime: float,\n  st_ctime: float\n} = <a href=\"./api/Unix.html#type-stats\" title=\"Unix.stats\">stats</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-file_kind", "title": "file_kind", "contents": "file_kind file_kind", "rendered": "<h4 class='item'>type file_kind = \n  | S_REG\n  | S_DIR\n  | S_CHR\n  | S_BLK\n  | S_LNK\n  | S_FIFO\n  | S_SOCK\n = <a href=\"./api/Unix.html#type-file_kind\" title=\"Unix.file_kind\">file_kind</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#File-status", "title": "File status", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-ftruncate", "title": "ftruncate", "contents": "Truncates the file corresponding to the given descriptor to the given size.", "rendered": "Truncates the file corresponding to the given descriptor to the given size.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-ftruncate", "title": "ftruncate", "contents": "ftruncate file_descr int unit  len", "rendered": "<h4 class='item'>let ftruncate: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, ~len: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-truncate", "title": "truncate", "contents": "Truncates the named file to the given size.", "rendered": "Truncates the named file to the given size.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-truncate", "title": "truncate", "contents": "truncate string int unit  len", "rendered": "<h4 class='item'>let truncate: (string, ~len: int) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lseek", "title": "lseek", "contents": "Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).", "rendered": "Set the current position for a file descriptor, and return the resulting offset (from the beginning of the file).", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-lseek", "title": "lseek", "contents": "lseek file_descr int seek_command int   mode", "rendered": "<h4 class='item'>let lseek: (<a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>, int, ~mode: <a href=\"./api/UnixLabels.html#type-seek_command\">seek_command</a>) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-seek_command", "title": "seek_command", "contents": "Positioning modes for lseek.", "rendered": "Positioning modes for lseek.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-seek_command", "title": "seek_command", "contents": "seek_command seek_command", "rendered": "<h4 class='item'>type seek_command = | SEEK_SET | SEEK_CUR | SEEK_END\n = <a href=\"./api/Unix.html#type-seek_command\" title=\"Unix.seek_command\">seek_command</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Seeking-and-truncating", "title": "Seeking and truncating", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-descr_of_out_channel", "title": "descr_of_out_channel", "contents": "Return the descriptor corresponding to an output channel.", "rendered": "Return the descriptor corresponding to an output channel.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-descr_of_out_channel", "title": "descr_of_out_channel", "contents": "descr_of_out_channel out_channel file_descr ", "rendered": "<h4 class='item'>let descr_of_out_channel: <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a> => <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-descr_of_in_channel", "title": "descr_of_in_channel", "contents": "Return the descriptor corresponding to an input channel.", "rendered": "Return the descriptor corresponding to an input channel.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-descr_of_in_channel", "title": "descr_of_in_channel", "contents": "descr_of_in_channel in_channel file_descr ", "rendered": "<h4 class='item'>let descr_of_in_channel: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-out_channel_of_descr", "title": "out_channel_of_descr", "contents": "Create an output channel writing on the given descriptor. The channel is initially in binary mode; use set_binary_mode_out oc false if text mode is desired.", "rendered": "Create an output channel writing on the given descriptor. The channel is initially in binary mode; use <code>set_binary_mode_out oc false</code> if text mode is desired.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-out_channel_of_descr", "title": "out_channel_of_descr", "contents": "out_channel_of_descr file_descr out_channel ", "rendered": "<h4 class='item'>let out_channel_of_descr: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-in_channel_of_descr", "title": "in_channel_of_descr", "contents": "Create an input channel reading from the given descriptor. The channel is initially in binary mode; use set_binary_mode_in ic false if text mode is desired.", "rendered": "Create an input channel reading from the given descriptor. The channel is initially in binary mode; use <code>set_binary_mode_in ic false</code> if text mode is desired.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-in_channel_of_descr", "title": "in_channel_of_descr", "contents": "in_channel_of_descr file_descr in_channel ", "rendered": "<h4 class='item'>let in_channel_of_descr: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Interfacing-with-the-standard-input-output-library", "title": "Interfacing with the standard input/output library", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-single_write_substring", "title": "single_write_substring", "contents": "Same as single_write, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>single_write</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-single_write_substring", "title": "single_write_substring", "contents": "single_write_substring file_descr string int int int  buf pos len", "rendered": "<h4 class='item'>let single_write_substring: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: string,\n  ~pos: int,\n  ~len: int\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-write_substring", "title": "write_substring", "contents": "Same as write, but take the data from a string instead of a byte sequence.", "rendered": "Same as <code>write</code>, but take the data from a string instead of a byte sequence.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-write_substring", "title": "write_substring", "contents": "write_substring file_descr string int int int  buf pos len", "rendered": "<h4 class='item'>let write_substring: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: string,\n  ~pos: int,\n  ~len: int\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-single_write", "title": "single_write", "contents": "Same as write, but attempts to write only once. Thus, if an error occurs, single_write guarantees that no data has been written.", "rendered": "Same as <code>write</code>, but attempts to write only once. Thus, if an error occurs, <code>single_write</code> guarantees that no data has been written.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-single_write", "title": "single_write", "contents": "single_write file_descr bytes int int int  buf pos len", "rendered": "<h4 class='item'>let single_write: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-write", "title": "write", "contents": "write fd buff ofs len writes len bytes to descriptor fd, taking them from byte sequence buff, starting at position ofs in buff. Return the number of bytes actually written. write repeats the writing operation until all bytes have been written or an error occurs.", "rendered": "<code>write fd buff ofs len</code> writes <code>len</code> bytes to descriptor <code>fd</code>, taking them from byte sequence <code>buff</code>, starting at position <code>ofs</code> in <code>buff</code>. Return the number of bytes actually written. <code>write</code> repeats the writing operation until all bytes have been written or an error occurs.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-write", "title": "write", "contents": "write file_descr bytes int int int  buf pos len", "rendered": "<h4 class='item'>let write: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-read", "title": "read", "contents": "read fd buff ofs len reads len bytes from descriptor fd, storing them in byte sequence buff, starting at position ofs in buff. Return the number of bytes actually read.", "rendered": "<code>read fd buff ofs len</code> reads <code>len</code> bytes from descriptor <code>fd</code>, storing them in byte sequence <code>buff</code>, starting at position <code>ofs</code> in <code>buff</code>. Return the number of bytes actually read.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-read", "title": "read", "contents": "read file_descr bytes int int int  buf pos len", "rendered": "<h4 class='item'>let read: (\n  <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a>,\n  ~buf: bytes,\n  ~pos: int,\n  ~len: int\n) => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close", "title": "close", "contents": "Close a file descriptor.", "rendered": "Close a file descriptor.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-close", "title": "close", "contents": "close file_descr unit ", "rendered": "<h4 class='item'>let close: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a> => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-openfile", "title": "openfile", "contents": "Open the named file with the given flags. Third argument is the permissions to give to the file if it is created. Return a file descriptor on the named file.", "rendered": "Open the named file with the given flags. Third argument is the permissions to give to the file if it is created. Return a file descriptor on the named file.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-openfile", "title": "openfile", "contents": "openfile string list open_flag file_perm file_descr  mode perm", "rendered": "<h4 class='item'>let openfile: (\n  string,\n  ~mode: list(<a href=\"./api/UnixLabels.html#type-open_flag\">open_flag</a>),\n  ~perm: <a href=\"./api/UnixLabels.html#type-file_perm\">file_perm</a>\n) => <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-file_perm", "title": "file_perm", "contents": "The type of file access rights, e.g. 0o640 is read and write for user, read for group, none for others", "rendered": "The type of file access rights, e.g. <code>0o640</code> is read and write for user, read for group, none for others", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-file_perm", "title": "file_perm", "contents": "file_perm int", "rendered": "<h4 class='item'>type file_perm = int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-open_flag", "title": "open_flag", "contents": "The flags to openfile.", "rendered": "The flags to openfile.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-open_flag", "title": "open_flag", "contents": "open_flag open_flag", "rendered": "<h4 class='item'>type open_flag = \n  | O_RDONLY\n  | O_WRONLY\n  | O_RDWR\n  | O_NONBLOCK\n  | O_APPEND\n  | O_CREAT\n  | O_TRUNC\n  | O_EXCL\n  | O_NOCTTY\n  | O_DSYNC\n  | O_SYNC\n  | O_RSYNC\n  | O_SHARE_DELETE\n  | O_CLOEXEC\n = <a href=\"./api/Unix.html#type-open_flag\" title=\"Unix.open_flag\">open_flag</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stderr", "title": "stderr", "contents": "File descriptor for standard error.", "rendered": "File descriptor for standard error.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stderr", "title": "stderr", "contents": "stderr file_descr", "rendered": "<h4 class='item'>let stderr: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stdout", "title": "stdout", "contents": "File descriptor for standard output.", "rendered": "File descriptor for standard output.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stdout", "title": "stdout", "contents": "stdout file_descr", "rendered": "<h4 class='item'>let stdout: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stdin", "title": "stdin", "contents": "File descriptor for standard input.", "rendered": "File descriptor for standard input.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-stdin", "title": "stdin", "contents": "stdin file_descr", "rendered": "<h4 class='item'>let stdin: <a href=\"./api/UnixLabels.html#type-file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-file_descr", "title": "file_descr", "contents": "The abstract type of file descriptors.", "rendered": "The abstract type of file descriptors.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-file_descr", "title": "file_descr", "contents": "file_descr file_descr", "rendered": "<h4 class='item'>type file_descr = <a href=\"./api/Unix.html#type-file_descr\" title=\"Unix.file_descr\">file_descr</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Basic-file-input-output", "title": "Basic file input/output", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-nice", "title": "nice", "contents": "Change the process priority. The integer argument is added to the ``nice&#39;&#39; value. (Higher values of the ``nice&#39;&#39; value mean lower priorities.) Return the new nice value.", "rendered": "Change the process priority. The integer argument is added to the ``nice&#39;&#39; value. (Higher values of the ``nice&#39;&#39; value mean lower priorities.) Return the new nice value.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-nice", "title": "nice", "contents": "nice int int ", "rendered": "<h4 class='item'>let nice: int => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getppid", "title": "getppid", "contents": "Return the pid of the parent process.", "rendered": "Return the pid of the parent process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getppid", "title": "getppid", "contents": "getppid unit int ", "rendered": "<h4 class='item'>let getppid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpid", "title": "getpid", "contents": "Return the pid of the process.", "rendered": "Return the pid of the process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getpid", "title": "getpid", "contents": "getpid unit int ", "rendered": "<h4 class='item'>let getpid: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-system", "title": "system", "contents": "Execute the given command, wait until it terminates, and return its termination status. The string is interpreted by the shell /bin/sh and therefore can contain redirections, quotes, variables, etc. The result WEXITED 127 indicates that the shell couldn&#39;t be executed.", "rendered": "Execute the given command, wait until it terminates, and return its termination status. The string is interpreted by the shell <code>/bin/sh</code> and therefore can contain redirections, quotes, variables, etc. The result <code>WEXITED 127</code> indicates that the shell couldn&#39;t be executed.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-system", "title": "system", "contents": "system string process_status ", "rendered": "<h4 class='item'>let system: string => <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-waitpid", "title": "waitpid", "contents": "Same as wait, but waits for the child process whose pid is given. A pid of -1 means wait for any child. A pid of 0 means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether waitpid should return immediately without waiting, or also report stopped children.", "rendered": "Same as wait, but waits for the child process whose pid is given. A pid of <code>-1</code> means wait for any child. A pid of <code>0</code> means wait for any child in the same process group as the current process. Negative pid arguments represent process groups. The list of options indicates whether <code>waitpid</code> should return immediately without waiting, or also report stopped children.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-waitpid", "title": "waitpid", "contents": "waitpid list wait_flag int int process_status mode ", "rendered": "<h4 class='item'>let waitpid: (~mode: list(<a href=\"./api/UnixLabels.html#type-wait_flag\">wait_flag</a>), int) => (\n  int,\n  <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a>\n)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-wait", "title": "wait", "contents": "Wait until one of the children processes die, and return its pid and termination status.", "rendered": "Wait until one of the children processes die, and return its pid and termination status.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-wait", "title": "wait", "contents": "wait unit int process_status ", "rendered": "<h4 class='item'>let wait: unit => (int, <a href=\"./api/UnixLabels.html#type-process_status\">process_status</a>)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fork", "title": "fork", "contents": "Fork a new process. The returned integer is 0 for the child process, the pid of the child process for the parent process.", "rendered": "Fork a new process. The returned integer is 0 for the child process, the pid of the child process for the parent process.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-fork", "title": "fork", "contents": "fork unit int ", "rendered": "<h4 class='item'>let fork: unit => int</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execvpe", "title": "execvpe", "contents": "Same as execve, except that the program is searched in the path.", "rendered": "Same as execve, except that the program is searched in the path.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execvpe", "title": "execvpe", "contents": "execvpe string array string array string prog args env", "rendered": "<h4 class='item'>let execvpe: (\n  ~prog: string,\n  ~args: array(string),\n  ~env: array(string)\n) => 'a</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execvp", "title": "execvp", "contents": "Same as execv, except that the program is searched in the path.", "rendered": "Same as execv, except that the program is searched in the path.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execvp", "title": "execvp", "contents": "execvp string array string prog args", "rendered": "<h4 class='item'>let execvp: (~prog: string, ~args: array(string)) => 'a</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execve", "title": "execve", "contents": "Same as execv, except that the third argument provides the environment to the program executed.", "rendered": "Same as execv, except that the third argument provides the environment to the program executed.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execve", "title": "execve", "contents": "execve string array string array string prog args env", "rendered": "<h4 class='item'>let execve: (\n  ~prog: string,\n  ~args: array(string),\n  ~env: array(string)\n) => 'a</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execv", "title": "execv", "contents": "execv prog args execute the program in file prog, with the arguments args, and the current process environment. These execv* functions never return: on success, the current program is replaced by the new one; on failure, a Unix_error exception is raised.", "rendered": "<code>execv prog args</code> execute the program in file <code>prog</code>, with the arguments <code>args</code>, and the current process environment. These <code>execv*</code> functions never return: on success, the current program is replaced by the new one; on failure, a Unix_error exception is raised.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-execv", "title": "execv", "contents": "execv string array string prog args", "rendered": "<h4 class='item'>let execv: (~prog: string, ~args: array(string)) => 'a</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-wait_flag", "title": "wait_flag", "contents": "Flags for waitpid.", "rendered": "Flags for waitpid.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-wait_flag", "title": "wait_flag", "contents": "wait_flag wait_flag", "rendered": "<h4 class='item'>type wait_flag = | WNOHANG | WUNTRACED\n = <a href=\"./api/Unix.html#type-wait_flag\" title=\"Unix.wait_flag\">wait_flag</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-process_status", "title": "process_status", "contents": "The termination status of a process. See module Sys for the definitions of the standard signal numbers. Note that they are not the numbers used by the OS.", "rendered": "The termination status of a process. See module Sys for the definitions of the standard signal numbers. Note that they are not the numbers used by the OS.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-process_status", "title": "process_status", "contents": "process_status int int int process_status", "rendered": "<h4 class='item'>type process_status = \n  | WEXITED(int)\n  | WSIGNALED(int)\n  | WSTOPPED(int)\n = <a href=\"./api/Unix.html#type-process_status\" title=\"Unix.process_status\">process_status</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Process-handling", "title": "Process handling", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-putenv", "title": "putenv", "contents": "Unix.putenv name value sets the value associated to a variable in the process environment. name is the name of the environment variable, and value its new associated value.", "rendered": "<code>Unix.putenv name value</code> sets the value associated to a variable in the process environment. <code>name</code> is the name of the environment variable, and <code>value</code> its new associated value.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-putenv", "title": "putenv", "contents": "putenv string string unit  ", "rendered": "<h4 class='item'>let putenv: (string, string) => unit</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getenv", "title": "getenv", "contents": "Return the value associated to a variable in the process environment. Raise Not_found if the variable is unbound. (This function is identical to Sys.getenv.)", "rendered": "Return the value associated to a variable in the process environment. Raise <code>Not_found</code> if the variable is unbound. (This function is identical to <code>Sys.getenv</code>.)", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-getenv", "title": "getenv", "contents": "getenv string string ", "rendered": "<h4 class='item'>let getenv: string => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-environment", "title": "environment", "contents": "Return the process environment, as an array of strings with the format ``variable=value&#39;&#39;.", "rendered": "Return the process environment, as an array of strings with the format ``variable=value&#39;&#39;.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-environment", "title": "environment", "contents": "environment unit array string ", "rendered": "<h4 class='item'>let environment: unit => array(string)</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Access-to-the-process-environment", "title": "Access to the process environment", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-handle_unix_error", "title": "handle_unix_error", "contents": "handle_unix_error f x applies f to x and returns the result. If the exception Unix_error is raised, it prints a message describing the error and exits with code 2.", "rendered": "<code>handle_unix_error f x</code> applies <code>f</code> to <code>x</code> and returns the result. If the exception <code>Unix_error</code> is raised, it prints a message describing the error and exits with code 2.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-handle_unix_error", "title": "handle_unix_error", "contents": "handle_unix_error   ", "rendered": "<h4 class='item'>let handle_unix_error: ('a => 'b, 'a) => 'b</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-error_message", "title": "error_message", "contents": "Return a string describing the given error code.", "rendered": "Return a string describing the given error code.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#value-error_message", "title": "error_message", "contents": "error_message error string ", "rendered": "<h4 class='item'>let error_message: <a href=\"./api/UnixLabels.html#type-error\">error</a> => string</h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-error", "title": "error", "contents": "The type of error codes. Errors defined in the POSIX standard and additional errors from UNIX98 and BSD. All other errors are mapped to EUNKNOWNERR.", "rendered": "The type of error codes. Errors defined in the POSIX standard and additional errors from UNIX98 and BSD. All other errors are mapped to EUNKNOWNERR.", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#type-error", "title": "error", "contents": "error int error", "rendered": "<h4 class='item'>type error = \n  | E2BIG\n  | EACCES\n  | EAGAIN\n  | EBADF\n  | EBUSY\n  | ECHILD\n  | EDEADLK\n  | EDOM\n  | EEXIST\n  | EFAULT\n  | EFBIG\n  | EINTR\n  | EINVAL\n  | EIO\n  | EISDIR\n  | EMFILE\n  | EMLINK\n  | ENAMETOOLONG\n  | ENFILE\n  | ENODEV\n  | ENOENT\n  | ENOEXEC\n  | ENOLCK\n  | ENOMEM\n  | ENOSPC\n  | ENOSYS\n  | ENOTDIR\n  | ENOTEMPTY\n  | ENOTTY\n  | ENXIO\n  | EPERM\n  | EPIPE\n  | ERANGE\n  | EROFS\n  | ESPIPE\n  | ESRCH\n  | EXDEV\n  | EWOULDBLOCK\n  | EINPROGRESS\n  | EALREADY\n  | ENOTSOCK\n  | EDESTADDRREQ\n  | EMSGSIZE\n  | EPROTOTYPE\n  | ENOPROTOOPT\n  | EPROTONOSUPPORT\n  | ESOCKTNOSUPPORT\n  | EOPNOTSUPP\n  | EPFNOSUPPORT\n  | EAFNOSUPPORT\n  | EADDRINUSE\n  | EADDRNOTAVAIL\n  | ENETDOWN\n  | ENETUNREACH\n  | ENETRESET\n  | ECONNABORTED\n  | ECONNRESET\n  | ENOBUFS\n  | EISCONN\n  | ENOTCONN\n  | ESHUTDOWN\n  | ETOOMANYREFS\n  | ETIMEDOUT\n  | ECONNREFUSED\n  | EHOSTDOWN\n  | EHOSTUNREACH\n  | ELOOP\n  | EOVERFLOW\n  | EUNKNOWNERR(int)\n = <a href=\"./api/Unix.html#type-error\" title=\"Unix.error\">error</a></h4>", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html#Error-report", "title": "Error report", "contents": "", "rendered": "", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html", "title": "UnixLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "UnixLabels"},
{"href": "./api/UnixLabels.html", "title": "UnixLabels", "contents": "Interface to the Unix system. To use as replacement to default Unix module, add module Unix = UnixLabels in your implementation.", "rendered": "Interface to the Unix system. To use as replacement to default Unix module, add <code>module Unix = UnixLabels</code> in your implementation.", "breadcrumb": "UnixLabels"},
{"href": "./api/Genlex.html#value-make_lexer", "title": "make_lexer", "contents": "Construct the lexer function. The first argument is the list of keywords. An identifier s is returned as Kwd s if s belongs to this list, and as Ident s otherwise. A special character s is returned as Kwd s if s belongs to this list, and cause a lexical error (exception Stream.Error with the offending lexeme as its parameter) otherwise. Blanks and newlines are skipped. Comments delimited by (* and *) are skipped as well, and can be nested. A Stream.Failure exception is raised if end of stream is unexpectedly reached.", "rendered": "Construct the lexer function. The first argument is the list of keywords. An identifier <code>s</code> is returned as <code>Kwd s</code> if <code>s</code> belongs to this list, and as <code>Ident s</code> otherwise. A special character <code>s</code> is returned as <code>Kwd s</code> if <code>s</code> belongs to this list, and cause a lexical error (exception <code>Stream.Error</code> with the offending lexeme as its parameter) otherwise. Blanks and newlines are skipped. Comments delimited by <code>(*</code> and <code>*)</code> are skipped as well, and can be nested. A <code>Stream.Failure</code> exception is raised if end of stream is unexpectedly reached.", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html#value-make_lexer", "title": "make_lexer", "contents": "make_lexer list string Stream t char Stream t token  ", "rendered": "<h4 class='item'>let make_lexer: (list(string), <a href=\"./api/Stream.html\">Stream</a>.<a href=\"./api/Stream.html#type-t\">t</a>(char)) => <a href=\"./api/Stream.html\">Stream</a>.<a href=\"./api/Stream.html#type-t\">t</a>(\n  <a href=\"./api/Genlex.html#type-token\">token</a>\n)</h4>", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html#type-token", "title": "token", "contents": "The type of tokens. The lexical classes are: Int and Float for integer and floating-point numbers; String for string literals, enclosed in double quotes; Char for character literals, enclosed in single quotes; Ident for identifiers (either sequences of letters, digits, underscores and quotes, or sequences of &#39;operator characters&#39; such as +, *, etc); and Kwd for keywords (either identifiers or single &#39;special characters&#39; such as (, }, etc).", "rendered": "The type of tokens. The lexical classes are: <code>Int</code> and <code>Float</code> for integer and floating-point numbers; <code>String</code> for string literals, enclosed in double quotes; <code>Char</code> for character literals, enclosed in single quotes; <code>Ident</code> for identifiers (either sequences of letters, digits, underscores and quotes, or sequences of &#39;operator characters&#39; such as <code>+</code>, <code>*</code>, etc); and <code>Kwd</code> for keywords (either identifiers or single &#39;special characters&#39; such as <code>(</code>, <code>}</code>, etc).", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html#type-token", "title": "token", "contents": "token string string int float string char", "rendered": "<h4 class='item'>type token = \n  | Kwd(string)\n  | Ident(string)\n  | Int(int)\n  | Float(float)\n  | String(string)\n  | Char(char)\n</h4>", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "Genlex", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "Genlex", "contents": "One should notice that the use of the parser keyword and associated notation for streams are only available through camlp4 extensions. This means that one has to preprocess its sources e. g. by using the &quot;-pp&quot; command-line switch of the compilers.", "rendered": "One should notice that the use of the <code>parser</code> keyword and associated notation for streams are only available through camlp4 extensions. This means that one has to preprocess its sources <em>e. g.</em> by using the <code>&quot;-pp&quot;</code> command-line switch of the compilers.", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "code block", "contents": "let rec parse_expr = parser\n  | [< n1 = parse_atom; n2 = parse_remainder n1 >] -> n2\nand parse_atom = parser\n  | [< 'Int n >] -> n\n  | [< 'Kwd \"(\"; n = parse_expr; 'Kwd \")\" >] -> n\nand parse_remainder n1 = parser\n  | [< 'Kwd \"+\"; n2 = parse_expr >] -> n1+n2\n  | [< >] -> n1", "rendered": "<pre><code>let rec parse_expr = parser\n  | [< n1 = parse_atom; n2 = parse_remainder n1 >] -> n2\nand parse_atom = parser\n  | [< 'Int n >] -> n\n  | [< 'Kwd \"(\"; n = parse_expr; 'Kwd \")\" >] -> n\nand parse_remainder n1 = parser\n  | [< 'Kwd \"+\"; n2 = parse_expr >] -> n1+n2\n  | [< >] -> n1</code></pre>", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "Genlex", "contents": "The associated parser would be a function from token stream to, for instance, int, and would have rules such as:", "rendered": "The associated parser would be a function from <code>token stream</code> to, for instance, <code>int</code>, and would have rules such as:", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "code block", "contents": "let lexer = make_lexer [\"+\";\"-\";\"*\";\"/\";\"let\";\"=\"; \"(\"; \")\"]  ", "rendered": "<pre><code>let lexer = make_lexer [\"+\";\"-\";\"*\";\"/\";\"let\";\"=\"; \"(\"; \")\"]  </code></pre>", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "Genlex", "contents": "Example: a lexer suitable for a desk calculator is obtained by", "rendered": "Example: a lexer suitable for a desk calculator is obtained by", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "Genlex", "contents": "This module implements a simple &#39;standard&#39; lexical analyzer, presented as a function from character streams to token streams. It implements roughly the lexical conventions of OCaml, but is parameterized by the set of keywords of your language.", "rendered": "This module implements a simple &#39;standard&#39; lexical analyzer, presented as a function from character streams to token streams. It implements roughly the lexical conventions of OCaml, but is parameterized by the set of keywords of your language.", "breadcrumb": "Genlex"},
{"href": "./api/Genlex.html", "title": "Genlex", "contents": "A generic lexical analyzer.", "rendered": "A generic lexical analyzer.", "breadcrumb": "Genlex"},
{"href": "./api/Complex.html#value-pow", "title": "pow", "contents": "Power function. pow z1 z2 returns z1 to the z2 power.", "rendered": "Power function. <code>pow z1 z2</code> returns <code>z1</code> to the <code>z2</code> power.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-pow", "title": "pow", "contents": "pow t t t  ", "rendered": "<h4 class='item'>let pow: (<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Complex.html#type-t\">t</a>) => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-log", "title": "log", "contents": "Natural logarithm (in base e).", "rendered": "Natural logarithm (in base <code>e</code>).", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-log", "title": "log", "contents": "log t t ", "rendered": "<h4 class='item'>let log: <a href=\"./api/Complex.html#type-t\">t</a> => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-exp", "title": "exp", "contents": "Exponentiation. exp z returns e to the z power.", "rendered": "Exponentiation. <code>exp z</code> returns <code>e</code> to the <code>z</code> power.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-exp", "title": "exp", "contents": "exp t t ", "rendered": "<h4 class='item'>let exp: <a href=\"./api/Complex.html#type-t\">t</a> => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-polar", "title": "polar", "contents": "polar norm arg returns the complex having norm norm and argument arg.", "rendered": "<code>polar norm arg</code> returns the complex having norm <code>norm</code> and argument <code>arg</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-polar", "title": "polar", "contents": "polar float float t  ", "rendered": "<h4 class='item'>let polar: (float, float) => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-arg", "title": "arg", "contents": "Argument. The argument of a complex number is the angle in the complex plane between the positive real axis and a line passing through zero and the number. This angle ranges from -pi to pi. This function has a discontinuity along the negative real axis.", "rendered": "Argument. The argument of a complex number is the angle in the complex plane between the positive real axis and a line passing through zero and the number. This angle ranges from <code>-pi</code> to <code>pi</code>. This function has a discontinuity along the negative real axis.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-arg", "title": "arg", "contents": "arg t float ", "rendered": "<h4 class='item'>let arg: <a href=\"./api/Complex.html#type-t\">t</a> => float</h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-norm", "title": "norm", "contents": "Norm: given x + i.y, returns sqrt(x^2 + y^2).", "rendered": "Norm: given <code>x + i.y</code>, returns <code>sqrt(x^2 + y^2)</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-norm", "title": "norm", "contents": "norm t float ", "rendered": "<h4 class='item'>let norm: <a href=\"./api/Complex.html#type-t\">t</a> => float</h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-norm2", "title": "norm2", "contents": "Norm squared: given x + i.y, returns x^2 + y^2.", "rendered": "Norm squared: given <code>x + i.y</code>, returns <code>x^2 + y^2</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-norm2", "title": "norm2", "contents": "norm2 t float ", "rendered": "<h4 class='item'>let norm2: <a href=\"./api/Complex.html#type-t\">t</a> => float</h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-sqrt", "title": "sqrt", "contents": "Square root. The result x + i.y is such that x &gt; 0 or x = 0 and y &gt;= 0. This function has a discontinuity along the negative real axis.", "rendered": "Square root. The result <code>x + i.y</code> is such that <code>x &gt; 0</code> or <code>x = 0</code> and <code>y &gt;= 0</code>. This function has a discontinuity along the negative real axis.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-sqrt", "title": "sqrt", "contents": "sqrt t t ", "rendered": "<h4 class='item'>let sqrt: <a href=\"./api/Complex.html#type-t\">t</a> => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-div", "title": "div", "contents": "Division", "rendered": "Division", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-div", "title": "div", "contents": "div t t t  ", "rendered": "<h4 class='item'>let div: (<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Complex.html#type-t\">t</a>) => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-inv", "title": "inv", "contents": "Multiplicative inverse (1/z).", "rendered": "Multiplicative inverse (<code>1/z</code>).", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-inv", "title": "inv", "contents": "inv t t ", "rendered": "<h4 class='item'>let inv: <a href=\"./api/Complex.html#type-t\">t</a> => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-mul", "title": "mul", "contents": "Multiplication", "rendered": "Multiplication", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-mul", "title": "mul", "contents": "mul t t t  ", "rendered": "<h4 class='item'>let mul: (<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Complex.html#type-t\">t</a>) => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-sub", "title": "sub", "contents": "Subtraction", "rendered": "Subtraction", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-sub", "title": "sub", "contents": "sub t t t  ", "rendered": "<h4 class='item'>let sub: (<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Complex.html#type-t\">t</a>) => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-add", "title": "add", "contents": "Addition", "rendered": "Addition", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-add", "title": "add", "contents": "add t t t  ", "rendered": "<h4 class='item'>let add: (<a href=\"./api/Complex.html#type-t\">t</a>, <a href=\"./api/Complex.html#type-t\">t</a>) => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-conj", "title": "conj", "contents": "Conjugate: given the complex x + i.y, returns x - i.y.", "rendered": "Conjugate: given the complex <code>x + i.y</code>, returns <code>x - i.y</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-conj", "title": "conj", "contents": "conj t t ", "rendered": "<h4 class='item'>let conj: <a href=\"./api/Complex.html#type-t\">t</a> => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-neg", "title": "neg", "contents": "Unary negation.", "rendered": "Unary negation.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-neg", "title": "neg", "contents": "neg t t ", "rendered": "<h4 class='item'>let neg: <a href=\"./api/Complex.html#type-t\">t</a> => <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-i", "title": "i", "contents": "The complex number i.", "rendered": "The complex number <code>i</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-i", "title": "i", "contents": "i t", "rendered": "<h4 class='item'>let i: <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-one", "title": "one", "contents": "The complex number 1.", "rendered": "The complex number <code>1</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-one", "title": "one", "contents": "one t", "rendered": "<h4 class='item'>let one: <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-zero", "title": "zero", "contents": "The complex number 0.", "rendered": "The complex number <code>0</code>.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#value-zero", "title": "zero", "contents": "zero t", "rendered": "<h4 class='item'>let zero: <a href=\"./api/Complex.html#type-t\">t</a></h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#type-t", "title": "t", "contents": "The type of complex numbers. re is the real part and im the imaginary part.", "rendered": "The type of complex numbers. <code>re</code> is the real part and <code>im</code> the imaginary part.", "breadcrumb": "Complex"},
{"href": "./api/Complex.html#type-t", "title": "t", "contents": "t re float im float", "rendered": "<h4 class='item'>type t = {re: float, im: float}</h4>", "breadcrumb": "Complex"},
{"href": "./api/Complex.html", "title": "Complex", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Complex"},
{"href": "./api/Complex.html", "title": "Complex", "contents": "This module provides arithmetic operations on complex numbers. Complex numbers are represented by their real and imaginary parts (cartesian representation). Each part is represented by a double-precision floating-point number (type float).", "rendered": "This module provides arithmetic operations on complex numbers. Complex numbers are represented by their real and imaginary parts (cartesian representation). Each part is represented by a double-precision floating-point number (type <code>float</code>).", "breadcrumb": "Complex"},
{"href": "./api/Complex.html", "title": "Complex", "contents": "Complex numbers.", "rendered": "Complex numbers.", "breadcrumb": "Complex"},
{"href": "./api/Nativeint.html#value-format", "title": "format", "contents": "Nativeint.format fmt n return the string representation of the native integer n in the format specified by fmt. fmt is a Printf-style format consisting of exactly one %d, %i, %u, %x, %X or %o conversion specification. This function is deprecated; use sprintf with a %nx format instead.", "rendered": "<code>Nativeint.format fmt n</code> return the string representation of the native integer <code>n</code> in the format specified by <code>fmt</code>. <code>fmt</code> is a <code>Printf</code>-style format consisting of exactly one <code>%d</code>, <code>%i</code>, <code>%u</code>, <code>%x</code>, <code>%X</code> or <code>%o</code> conversion specification. This function is deprecated; use sprintf with a <code>%nx</code> format instead.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-format", "title": "format", "contents": "format string nativeint string  ", "rendered": "<h4 class='item'>let format: (string, nativeint) => string</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#Deprecated-functions", "title": "Deprecated functions", "contents": "", "rendered": "", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html", "title": "Nativeint", "contents": "/*", "rendered": "/*", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-compare", "title": "compare", "contents": "The comparison function for native integers, with the same specification as compare. Along with the type t, this function compare allows the module Nativeint to be passed as argument to the functors Make and Make.", "rendered": "The comparison function for native integers, with the same specification as compare. Along with the type <code>t</code>, this function <code>compare</code> allows the module <code>Nativeint</code> to be passed as argument to the functors Make and Make.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-compare", "title": "compare", "contents": "compare t t int  ", "rendered": "<h4 class='item'>let compare: (<a href=\"./api/Nativeint.html#type-t\">t</a>, <a href=\"./api/Nativeint.html#type-t\">t</a>) => int</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#type-t", "title": "t", "contents": "An alias for the type of native integers.", "rendered": "An alias for the type of native integers.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#type-t", "title": "t", "contents": "t nativeint", "rendered": "<h4 class='item'>type t = nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_string", "title": "to_string", "contents": "Return the string representation of its argument, in decimal.", "rendered": "Return the string representation of its argument, in decimal.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_string", "title": "to_string", "contents": "to_string nativeint string ", "rendered": "<h4 class='item'>let to_string: nativeint => string</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_string", "title": "of_string", "contents": "Convert the given string to a native integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with 0x, 0o or 0b respectively. Raise Failure &quot;int_of_string&quot; if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type nativeint.", "rendered": "Convert the given string to a native integer. The string is read in decimal (by default) or in hexadecimal, octal or binary if the string begins with <code>0x</code>, <code>0o</code> or <code>0b</code> respectively. Raise <code>Failure &quot;int_of_string&quot;</code> if the given string is not a valid representation of an integer, or if the integer represented exceeds the range of integers representable in type <code>nativeint</code>.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_string", "title": "of_string", "contents": "of_string string nativeint ", "rendered": "<h4 class='item'>let of_string: string => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_int32", "title": "to_int32", "contents": "Convert the given native integer to a 32-bit integer (type int32). On 64-bit platforms, the 64-bit native integer is taken modulo 2Superscript, i.e. the top 32 bits are lost. On 32-bit platforms, the conversion is exact.", "rendered": "Convert the given native integer to a 32-bit integer (type <code>int32</code>). On 64-bit platforms, the 64-bit native integer is taken modulo 2Superscript, i.e. the top 32 bits are lost. On 32-bit platforms, the conversion is exact.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_int32", "title": "to_int32", "contents": "to_int32 nativeint int32 ", "rendered": "<h4 class='item'>let to_int32: nativeint => int32</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_int32", "title": "of_int32", "contents": "Convert the given 32-bit integer (type int32) to a native integer.", "rendered": "Convert the given 32-bit integer (type <code>int32</code>) to a native integer.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_int32", "title": "of_int32", "contents": "of_int32 int32 nativeint ", "rendered": "<h4 class='item'>let of_int32: int32 => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_float", "title": "to_float", "contents": "Convert the given native integer to a floating-point number.", "rendered": "Convert the given native integer to a floating-point number.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_float", "title": "to_float", "contents": "to_float nativeint float ", "rendered": "<h4 class='item'>let to_float: nativeint => float</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_float", "title": "of_float", "contents": "Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [min_int, max_int].", "rendered": "Convert the given floating-point number to a native integer, discarding the fractional part (truncate towards 0). The result of the conversion is undefined if, after truncation, the number is outside the range [min_int, max_int].", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_float", "title": "of_float", "contents": "of_float float nativeint ", "rendered": "<h4 class='item'>let of_float: float => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_int", "title": "to_int", "contents": "Convert the given native integer (type nativeint) to an integer (type int). The high-order bit is lost during the conversion.", "rendered": "Convert the given native integer (type <code>nativeint</code>) to an integer (type <code>int</code>). The high-order bit is lost during the conversion.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-to_int", "title": "to_int", "contents": "to_int nativeint int ", "rendered": "<h4 class='item'>let to_int: nativeint => int</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_int", "title": "of_int", "contents": "Convert the given integer (type int) to a native integer (type nativeint).", "rendered": "Convert the given integer (type <code>int</code>) to a native integer (type <code>nativeint</code>).", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-of_int", "title": "of_int", "contents": "of_int int nativeint ", "rendered": "<h4 class='item'>let of_int: int => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-shift_right_logical", "title": "shift_right_logical", "contents": "Nativeint.shift_right_logical x y shifts x to the right by y bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of x. The result is unspecified if y &lt; 0 or y &gt;= bitsize.", "rendered": "<code>Nativeint.shift_right_logical x y</code> shifts <code>x</code> to the right by <code>y</code> bits. This is a logical shift: zeroes are inserted in the vacated bits regardless of the sign of <code>x</code>. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= bitsize</code>.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-shift_right_logical", "title": "shift_right_logical", "contents": "shift_right_logical nativeint int nativeint  ", "rendered": "<h4 class='item'>let shift_right_logical: (nativeint, int) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-shift_right", "title": "shift_right", "contents": "Nativeint.shift_right x y shifts x to the right by y bits. This is an arithmetic shift: the sign bit of x is replicated and inserted in the vacated bits. The result is unspecified if y &lt; 0 or y &gt;= bitsize.", "rendered": "<code>Nativeint.shift_right x y</code> shifts <code>x</code> to the right by <code>y</code> bits. This is an arithmetic shift: the sign bit of <code>x</code> is replicated and inserted in the vacated bits. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= bitsize</code>.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-shift_right", "title": "shift_right", "contents": "shift_right nativeint int nativeint  ", "rendered": "<h4 class='item'>let shift_right: (nativeint, int) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-shift_left", "title": "shift_left", "contents": "Nativeint.shift_left x y shifts x to the left by y bits. The result is unspecified if y &lt; 0 or y &gt;= bitsize, where bitsize is 32 on a 32-bit platform and 64 on a 64-bit platform.", "rendered": "<code>Nativeint.shift_left x y</code> shifts <code>x</code> to the left by <code>y</code> bits. The result is unspecified if <code>y &lt; 0</code> or <code>y &gt;= bitsize</code>, where <code>bitsize</code> is <code>32</code> on a 32-bit platform and <code>64</code> on a 64-bit platform.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-shift_left", "title": "shift_left", "contents": "shift_left nativeint int nativeint  ", "rendered": "<h4 class='item'>let shift_left: (nativeint, int) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-lognot", "title": "lognot", "contents": "Bitwise logical negation", "rendered": "Bitwise logical negation", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-lognot", "title": "lognot", "contents": "lognot nativeint nativeint ", "rendered": "<h4 class='item'>let lognot: nativeint => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-logxor", "title": "logxor", "contents": "Bitwise logical exclusive or.", "rendered": "Bitwise logical exclusive or.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-logxor", "title": "logxor", "contents": "logxor nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let logxor: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-logor", "title": "logor", "contents": "Bitwise logical or.", "rendered": "Bitwise logical or.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-logor", "title": "logor", "contents": "logor nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let logor: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-logand", "title": "logand", "contents": "Bitwise logical and.", "rendered": "Bitwise logical and.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-logand", "title": "logand", "contents": "logand nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let logand: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-min_int", "title": "min_int", "contents": "The greatest representable native integer, either -2Superscript on a 32-bit platform, or -2Superscript on a 64-bit platform.", "rendered": "The greatest representable native integer, either -2Superscript on a 32-bit platform, or -2Superscript on a 64-bit platform.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-min_int", "title": "min_int", "contents": "min_int nativeint", "rendered": "<h4 class='item'>let min_int: nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-max_int", "title": "max_int", "contents": "The greatest representable native integer, either 2Superscript - 1 on a 32-bit platform, or 2Superscript - 1 on a 64-bit platform.", "rendered": "The greatest representable native integer, either 2Superscript - 1 on a 32-bit platform, or 2Superscript - 1 on a 64-bit platform.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-max_int", "title": "max_int", "contents": "max_int nativeint", "rendered": "<h4 class='item'>let max_int: nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-size", "title": "size", "contents": "The size in bits of a native integer. This is equal to 32 on a 32-bit platform and to 64 on a 64-bit platform.", "rendered": "The size in bits of a native integer. This is equal to <code>32</code> on a 32-bit platform and to <code>64</code> on a 64-bit platform.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-size", "title": "size", "contents": "size int", "rendered": "<h4 class='item'>let size: int</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-abs", "title": "abs", "contents": "Return the absolute value of its argument.", "rendered": "Return the absolute value of its argument.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-abs", "title": "abs", "contents": "abs nativeint nativeint ", "rendered": "<h4 class='item'>let abs: nativeint => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-pred", "title": "pred", "contents": "Predecessor. Nativeint.pred x is Nativeint.sub x Nativeint.one.", "rendered": "Predecessor. <code>Nativeint.pred x</code> is <code>Nativeint.sub x Nativeint.one</code>.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-pred", "title": "pred", "contents": "pred nativeint nativeint ", "rendered": "<h4 class='item'>let pred: nativeint => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-succ", "title": "succ", "contents": "Successor. Nativeint.succ x is Nativeint.add x Nativeint.one.", "rendered": "Successor. <code>Nativeint.succ x</code> is <code>Nativeint.add x Nativeint.one</code>.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-succ", "title": "succ", "contents": "succ nativeint nativeint ", "rendered": "<h4 class='item'>let succ: nativeint => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-rem", "title": "rem", "contents": "Integer remainder. If y is not zero, the result of Nativeint.rem x y satisfies the following properties: Nativeint.zero &lt;= Nativeint.rem x y &lt; Nativeint.abs y and x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y)\n                      (Nativeint.rem x y). If y = 0, Nativeint.rem x y raises Division_by_zero.", "rendered": "Integer remainder. If <code>y</code> is not zero, the result of <code>Nativeint.rem x y</code> satisfies the following properties: <code>Nativeint.zero &lt;= Nativeint.rem x y &lt; Nativeint.abs y</code> and <code>x = Nativeint.add (Nativeint.mul (Nativeint.div x y) y)\n                      (Nativeint.rem x y)</code>. If <code>y = 0</code>, <code>Nativeint.rem x y</code> raises <code>Division_by_zero</code>.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-rem", "title": "rem", "contents": "rem nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let rem: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-div", "title": "div", "contents": "Integer division. Raise Division_by_zero if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for (/).", "rendered": "Integer division. Raise <code>Division_by_zero</code> if the second argument is zero. This division rounds the real quotient of its arguments towards zero, as specified for (/).", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-div", "title": "div", "contents": "div nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let div: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-mul", "title": "mul", "contents": "Multiplication.", "rendered": "Multiplication.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-mul", "title": "mul", "contents": "mul nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let mul: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-sub", "title": "sub", "contents": "Subtraction.", "rendered": "Subtraction.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-sub", "title": "sub", "contents": "sub nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let sub: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-add", "title": "add", "contents": "Addition.", "rendered": "Addition.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-add", "title": "add", "contents": "add nativeint nativeint nativeint  ", "rendered": "<h4 class='item'>let add: (nativeint, nativeint) => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-neg", "title": "neg", "contents": "Unary negation.", "rendered": "Unary negation.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-neg", "title": "neg", "contents": "neg nativeint nativeint ", "rendered": "<h4 class='item'>let neg: nativeint => nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-minus_one", "title": "minus_one", "contents": "The native integer -1.", "rendered": "The native integer -1.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-minus_one", "title": "minus_one", "contents": "minus_one nativeint", "rendered": "<h4 class='item'>let minus_one: nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-one", "title": "one", "contents": "The native integer 1.", "rendered": "The native integer 1.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-one", "title": "one", "contents": "one nativeint", "rendered": "<h4 class='item'>let one: nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-zero", "title": "zero", "contents": "The native integer 0.", "rendered": "The native integer 0.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html#value-zero", "title": "zero", "contents": "zero nativeint", "rendered": "<h4 class='item'>let zero: nativeint</h4>", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html", "title": "Nativeint", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html", "title": "Nativeint", "contents": "Performance notice: values of type nativeint occupy more memory space than values of type int, and arithmetic operations on nativeint are generally slower than those on int. Use nativeint only when the application requires the extra bit of precision over the int type.", "rendered": "Performance notice: values of type <code>nativeint</code> occupy more memory space than values of type <code>int</code>, and arithmetic operations on <code>nativeint</code> are generally slower than those on <code>int</code>. Use <code>nativeint</code> only when the application requires the extra bit of precision over the <code>int</code> type.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html", "title": "Nativeint", "contents": "This module provides operations on the type nativeint of signed 32-bit integers (on 32-bit platforms) or signed 64-bit integers (on 64-bit platforms). This integer type has exactly the same width as that of a pointer type in the C compiler. All arithmetic operations over nativeint are taken modulo 2Superscript or 2Superscript depending on the word size of the architecture.", "rendered": "This module provides operations on the type <code>nativeint</code> of signed 32-bit integers (on 32-bit platforms) or signed 64-bit integers (on 64-bit platforms). This integer type has exactly the same width as that of a pointer type in the C compiler. All arithmetic operations over <code>nativeint</code> are taken modulo 2Superscript or 2Superscript depending on the word size of the architecture.", "breadcrumb": "Nativeint"},
{"href": "./api/Nativeint.html", "title": "Nativeint", "contents": "Processor-native integers.", "rendered": "Processor-native integers.", "breadcrumb": "Nativeint"},
{"href": "./api/Set.html#module-Make", "title": "Make", "contents": "Functor building an implementation of the set structure given a totally ordered type.", "rendered": "Functor building an implementation of the set structure given a totally ordered type.", "breadcrumb": "Set"},
{"href": "./api/Set.html", "title": "Set", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Set"},
{"href": "./api/Set.html", "title": "Set", "contents": "This creates a new module PairsSet, with a new type PairsSet.t of sets of int * int.", "rendered": "This creates a new module <code>PairsSet</code>, with a new type <code>PairsSet.t</code> of sets of <code>int * int</code>.", "breadcrumb": "Set"},
{"href": "./api/Set.html", "title": "code block", "contents": "module IntPairs =\n  struct\n    type t = int * int\n    let compare (x0,y0) (x1,y1) =\n      match Pervasives.compare x0 x1 with\n          0 -> Pervasives.compare y0 y1\n        | c -> c\n  end\n\nmodule PairsSet = Set.Make(IntPairs)\n\nlet m = PairsSet.(empty |> add (2,3) |> add (5,7) |> add (11,13))", "rendered": "<pre><code>module IntPairs =\n  struct\n    type t = int * int\n    let compare (x0,y0) (x1,y1) =\n      match Pervasives.compare x0 x1 with\n          0 -> Pervasives.compare y0 y1\n        | c -> c\n  end\n\nmodule PairsSet = Set.Make(IntPairs)\n\nlet m = PairsSet.(empty |> add (2,3) |> add (5,7) |> add (11,13))</code></pre>", "breadcrumb": "Set"},
{"href": "./api/Set.html", "title": "Set", "contents": "The Make functor constructs implementations for any type, given a compare function. For instance:", "rendered": "The <code>Make</code> functor constructs implementations for any type, given a <code>compare</code> function. For instance:", "breadcrumb": "Set"},
{"href": "./api/Set.html", "title": "Set", "contents": "This module implements the set data structure, given a total ordering function over the set elements. All operations over sets are purely applicative (no side-effects). The implementation uses balanced binary trees, and is therefore reasonably efficient: insertion and membership take time logarithmic in the size of the set, for instance.", "rendered": "This module implements the set data structure, given a total ordering function over the set elements. All operations over sets are purely applicative (no side-effects). The implementation uses balanced binary trees, and is therefore reasonably efficient: insertion and membership take time logarithmic in the size of the set, for instance.", "breadcrumb": "Set"},
{"href": "./api/Set.html", "title": "Set", "contents": "Sets over ordered types.", "rendered": "Sets over ordered types.", "breadcrumb": "Set"},
{"href": "./api/MoreLabels.html#module-Set", "title": "Set", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#module-Set", "title": "Set", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#module-Map", "title": "Map", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#module-Map", "title": "Map", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.seeded_hash_param", "title": "Hashtbl.seeded_hash_param", "contents": "seeded_hash_param int int int int    ", "rendered": "<h4 class='item'>let seeded_hash_param: (int, int, int, 'a) => int</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.hash_param", "title": "Hashtbl.hash_param", "contents": "hash_param int int int   ", "rendered": "<h4 class='item'>let hash_param: (int, int, 'a) => int</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.seeded_hash", "title": "Hashtbl.seeded_hash", "contents": "seeded_hash int int  ", "rendered": "<h4 class='item'>let seeded_hash: (int, 'a) => int</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.hash", "title": "Hashtbl.hash", "contents": "hash int ", "rendered": "<h4 class='item'>let hash: 'a => int</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.stats", "title": "Hashtbl.stats", "contents": "stats t statistics ", "rendered": "<h4 class='item'>let stats: <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b) => <a href=\"./api/MoreLabels.html#type-Hashtbl.statistics\">statistics</a></h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#type-Hashtbl.statistics", "title": "Hashtbl.statistics", "contents": "statistics statistics", "rendered": "<h4 class='item'>type statistics = <a href=\"./api/Hashtbl.html#type-statistics\" title=\"Hashtbl.statistics\">statistics</a></h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.randomize", "title": "Hashtbl.randomize", "contents": "randomize unit unit ", "rendered": "<h4 class='item'>let randomize: unit => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.length", "title": "Hashtbl.length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b) => int</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.fold", "title": "Hashtbl.fold", "contents": "fold key data  t f  init", "rendered": "<h4 class='item'>let fold: (\n  ~f: (~key: 'a, ~data: 'b, 'c) => 'c,\n  <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b),\n  ~init: 'c\n) => 'c</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.iter", "title": "Hashtbl.iter", "contents": "iter unit key data t unit f ", "rendered": "<h4 class='item'>let iter: (\n  ~f: (~key: 'a, ~data: 'b) => unit,\n  <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b)\n) => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.replace", "title": "Hashtbl.replace", "contents": "replace t unit  key data", "rendered": "<h4 class='item'>let replace: (<a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b), ~key: 'a, ~data: 'b) => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.remove", "title": "Hashtbl.remove", "contents": "remove t unit  ", "rendered": "<h4 class='item'>let remove: (<a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b), 'a) => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.mem", "title": "Hashtbl.mem", "contents": "mem t bool  ", "rendered": "<h4 class='item'>let mem: (<a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b), 'a) => bool</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.find_all", "title": "Hashtbl.find_all", "contents": "find_all t list  ", "rendered": "<h4 class='item'>let find_all: (<a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b), 'a) => list('b)</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.find", "title": "Hashtbl.find", "contents": "find t  ", "rendered": "<h4 class='item'>let find: (<a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b), 'a) => 'b</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.add", "title": "Hashtbl.add", "contents": "add t unit  key data", "rendered": "<h4 class='item'>let add: (<a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b), ~key: 'a, ~data: 'b) => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.copy", "title": "Hashtbl.copy", "contents": "copy t t ", "rendered": "<h4 class='item'>let copy: <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b) => <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b)</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.reset", "title": "Hashtbl.reset", "contents": "reset t unit ", "rendered": "<h4 class='item'>let reset: <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b) => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.clear", "title": "Hashtbl.clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b) => unit</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#value-Hashtbl.create", "title": "Hashtbl.create", "contents": "create option bool int t random ", "rendered": "<h4 class='item'>let create: (~?random: option(bool), int) => <a href=\"./api/MoreLabels.html#type-Hashtbl.t\">t</a>('a, 'b)</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#type-Hashtbl.t", "title": "Hashtbl.t", "contents": "t Hashtbl t", "rendered": "<h4 class='item'>type t('a, 'b) = <a href=\"./api/Hashtbl.html\">Hashtbl</a>.<a href=\"./api/Hashtbl.html#type-t\">t</a>('a, 'b)</h4>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#module-Hashtbl", "title": "Hashtbl", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html#module-Hashtbl", "title": "Hashtbl", "contents": "This module does not have a toplevel documentation block.", "rendered": "<span class='missing'>This module does not have a toplevel documentation block.</span>", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html", "title": "MoreLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html", "title": "MoreLabels", "contents": "They only differ by their labels. They are provided to help porting from previous versions of OCaml. The contents of this module are subject to change.", "rendered": "They only differ by their labels. They are provided to help porting from previous versions of OCaml. The contents of this module are subject to change.", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html", "title": "MoreLabels", "contents": "This meta-module provides labelized version of the Hashtbl, Map and Set modules.", "rendered": "This meta-module provides labelized version of the Hashtbl, Map and Set modules.", "breadcrumb": "MoreLabels"},
{"href": "./api/MoreLabels.html", "title": "MoreLabels", "contents": "Extra labeled libraries.", "rendered": "Extra labeled libraries.", "breadcrumb": "MoreLabels"},
{"href": "./api/Buffer.html#value-output_buffer", "title": "output_buffer", "contents": "output_buffer oc b writes the current contents of buffer b on the output channel oc.", "rendered": "<code>output_buffer oc b</code> writes the current contents of buffer <code>b</code> on the output channel <code>oc</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-output_buffer", "title": "output_buffer", "contents": "output_buffer out_channel t unit  ", "rendered": "<h4 class='item'>let output_buffer: (<a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>, <a href=\"./api/Buffer.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_channel", "title": "add_channel", "contents": "add_channel b ic n reads exactly n character from the input channel ic and stores them at the end of buffer b. Raise End_of_file if the channel contains fewer than n characters.", "rendered": "<code>add_channel b ic n</code> reads exactly <code>n</code> character from the input channel <code>ic</code> and stores them at the end of buffer <code>b</code>. Raise <code>End_of_file</code> if the channel contains fewer than <code>n</code> characters.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_channel", "title": "add_channel", "contents": "add_channel t in_channel int unit   ", "rendered": "<h4 class='item'>let add_channel: (<a href=\"./api/Buffer.html#type-t\">t</a>, <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a>, int) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_buffer", "title": "add_buffer", "contents": "add_buffer b1 b2 appends the current contents of buffer b2 at the end of buffer b1. b2 is not modified.", "rendered": "<code>add_buffer b1 b2</code> appends the current contents of buffer <code>b2</code> at the end of buffer <code>b1</code>. <code>b2</code> is not modified.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_buffer", "title": "add_buffer", "contents": "add_buffer t t unit  ", "rendered": "<h4 class='item'>let add_buffer: (<a href=\"./api/Buffer.html#type-t\">t</a>, <a href=\"./api/Buffer.html#type-t\">t</a>) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_substitute", "title": "add_substitute", "contents": "an arbitrary sequence of characters enclosed by a pair of matching parentheses or curly brackets. An escaped $ character is a $ that immediately follows a backslash character; it then stands for a plain $. Raise Not_found if the closing character of a parenthesized variable cannot be found.", "rendered": "an arbitrary sequence of characters enclosed by a pair of matching parentheses or curly brackets. An escaped <code>$</code> character is a <code>$</code> that immediately follows a backslash character; it then stands for a plain <code>$</code>. Raise <code>Not_found</code> if the closing character of a parenthesized variable cannot be found.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_substitute", "title": "add_substitute", "contents": "a non empty sequence of alphanumeric or _ characters,", "rendered": "a non empty sequence of alphanumeric or <code>_</code> characters,", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_substitute", "title": "add_substitute", "contents": "add_substitute b f s appends the string pattern s at the end of the buffer b with substitution. The substitution process looks for variables into the pattern and substitutes each variable name by its value, as obtained by applying the mapping f to the variable name. Inside the string pattern, a variable name immediately follows a non-escaped $ character and is one of the following:", "rendered": "<code>add_substitute b f s</code> appends the string pattern <code>s</code> at the end of the buffer <code>b</code> with substitution. The substitution process looks for variables into the pattern and substitutes each variable name by its value, as obtained by applying the mapping <code>f</code> to the variable name. Inside the string pattern, a variable name immediately follows a non-escaped <code>$</code> character and is one of the following:", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_substitute", "title": "add_substitute", "contents": "add_substitute t string string  string unit   ", "rendered": "<h4 class='item'>let add_substitute: (<a href=\"./api/Buffer.html#type-t\">t</a>, string => string, string) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_subbytes", "title": "add_subbytes", "contents": "add_substring b s ofs len takes len characters from offset ofs in byte sequence s and appends them at the end of the buffer b.", "rendered": "<code>add_substring b s ofs len</code> takes <code>len</code> characters from offset <code>ofs</code> in byte sequence <code>s</code> and appends them at the end of the buffer <code>b</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_subbytes", "title": "add_subbytes", "contents": "add_subbytes t bytes int int unit    ", "rendered": "<h4 class='item'>let add_subbytes: (<a href=\"./api/Buffer.html#type-t\">t</a>, bytes, int, int) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_substring", "title": "add_substring", "contents": "add_substring b s ofs len takes len characters from offset ofs in string s and appends them at the end of the buffer b.", "rendered": "<code>add_substring b s ofs len</code> takes <code>len</code> characters from offset <code>ofs</code> in string <code>s</code> and appends them at the end of the buffer <code>b</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_substring", "title": "add_substring", "contents": "add_substring t string int int unit    ", "rendered": "<h4 class='item'>let add_substring: (<a href=\"./api/Buffer.html#type-t\">t</a>, string, int, int) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_bytes", "title": "add_bytes", "contents": "add_string b s appends the string s at the end of the buffer b.", "rendered": "<code>add_string b s</code> appends the string <code>s</code> at the end of the buffer <code>b</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_bytes", "title": "add_bytes", "contents": "add_bytes t bytes unit  ", "rendered": "<h4 class='item'>let add_bytes: (<a href=\"./api/Buffer.html#type-t\">t</a>, bytes) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_string", "title": "add_string", "contents": "add_string b s appends the string s at the end of the buffer b.", "rendered": "<code>add_string b s</code> appends the string <code>s</code> at the end of the buffer <code>b</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_string", "title": "add_string", "contents": "add_string t string unit  ", "rendered": "<h4 class='item'>let add_string: (<a href=\"./api/Buffer.html#type-t\">t</a>, string) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_char", "title": "add_char", "contents": "add_char b c appends the character c at the end of the buffer b.", "rendered": "<code>add_char b c</code> appends the character <code>c</code> at the end of the buffer <code>b</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-add_char", "title": "add_char", "contents": "add_char t char unit  ", "rendered": "<h4 class='item'>let add_char: (<a href=\"./api/Buffer.html#type-t\">t</a>, char) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-reset", "title": "reset", "contents": "Empty the buffer and deallocate the internal byte sequence holding the buffer contents, replacing it with the initial internal byte sequence of length n that was allocated by create n. For long-lived buffers that may have grown a lot, reset allows faster reclamation of the space used by the buffer.", "rendered": "Empty the buffer and deallocate the internal byte sequence holding the buffer contents, replacing it with the initial internal byte sequence of length <code>n</code> that was allocated by create <code>n</code>. For long-lived buffers that may have grown a lot, <code>reset</code> allows faster reclamation of the space used by the buffer.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-reset", "title": "reset", "contents": "reset t unit ", "rendered": "<h4 class='item'>let reset: <a href=\"./api/Buffer.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-clear", "title": "clear", "contents": "Empty the buffer.", "rendered": "Empty the buffer.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-clear", "title": "clear", "contents": "clear t unit ", "rendered": "<h4 class='item'>let clear: <a href=\"./api/Buffer.html#type-t\">t</a> => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-length", "title": "length", "contents": "Return the number of characters currently contained in the buffer.", "rendered": "Return the number of characters currently contained in the buffer.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-length", "title": "length", "contents": "length t int ", "rendered": "<h4 class='item'>let length: <a href=\"./api/Buffer.html#type-t\">t</a> => int</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-nth", "title": "nth", "contents": "get the n-th character of the buffer. Raise Invalid_argument if index out of bounds", "rendered": "get the n-th character of the buffer. Raise <code>Invalid_argument</code> if index out of bounds", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-nth", "title": "nth", "contents": "nth t int char  ", "rendered": "<h4 class='item'>let nth: (<a href=\"./api/Buffer.html#type-t\">t</a>, int) => char</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-blit", "title": "blit", "contents": "Raise Invalid_argument if srcoff and len do not designate a valid range of src, or if dstoff and len do not designate a valid range of dst.", "rendered": "Raise <code>Invalid_argument</code> if <code>srcoff</code> and <code>len</code> do not designate a valid range of <code>src</code>, or if <code>dstoff</code> and <code>len</code> do not designate a valid range of <code>dst</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-blit", "title": "blit", "contents": "Buffer.blit src srcoff dst dstoff len copies len characters from the current contents of the buffer src, starting at offset srcoff to dst, starting at character dstoff.", "rendered": "<code>Buffer.blit src srcoff dst dstoff len</code> copies <code>len</code> characters from the current contents of the buffer <code>src</code>, starting at offset <code>srcoff</code> to <code>dst</code>, starting at character <code>dstoff</code>.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-blit", "title": "blit", "contents": "blit t int bytes int int unit     ", "rendered": "<h4 class='item'>let blit: (<a href=\"./api/Buffer.html#type-t\">t</a>, int, bytes, int, int) => unit</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-sub", "title": "sub", "contents": "Buffer.sub b off len returns (a copy of) the bytes from the current contents of the buffer b starting at offset off of length len bytes. May raise Invalid_argument if out of bounds request. The buffer itself is unaffected.", "rendered": "<code>Buffer.sub b off len</code> returns (a copy of) the bytes from the current contents of the buffer <code>b</code> starting at offset <code>off</code> of length <code>len</code> bytes. May raise <code>Invalid_argument</code> if out of bounds request. The buffer itself is unaffected.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-sub", "title": "sub", "contents": "sub t int int string   ", "rendered": "<h4 class='item'>let sub: (<a href=\"./api/Buffer.html#type-t\">t</a>, int, int) => string</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-to_bytes", "title": "to_bytes", "contents": "Return a copy of the current contents of the buffer. The buffer itself is unchanged.", "rendered": "Return a copy of the current contents of the buffer. The buffer itself is unchanged.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-to_bytes", "title": "to_bytes", "contents": "to_bytes t bytes ", "rendered": "<h4 class='item'>let to_bytes: <a href=\"./api/Buffer.html#type-t\">t</a> => bytes</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-contents", "title": "contents", "contents": "Return a copy of the current contents of the buffer. The buffer itself is unchanged.", "rendered": "Return a copy of the current contents of the buffer. The buffer itself is unchanged.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-contents", "title": "contents", "contents": "contents t string ", "rendered": "<h4 class='item'>let contents: <a href=\"./api/Buffer.html#type-t\">t</a> => string</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-create", "title": "create", "contents": "create n returns a fresh buffer, initially empty. The n parameter is the initial size of the internal byte sequence that holds the buffer contents. That byte sequence is automatically reallocated when more than n characters are stored in the buffer, but shrinks back to n characters when reset is called. For best performance, n should be of the same order of magnitude as the number of characters that are expected to be stored in the buffer (for instance, 80 for a buffer that holds one output line). Nothing bad will happen if the buffer grows beyond that limit, however. In doubt, take n = 16 for instance. If n is not between 1 and max_string_length, it will be clipped to that interval.", "rendered": "<code>create n</code> returns a fresh buffer, initially empty. The <code>n</code> parameter is the initial size of the internal byte sequence that holds the buffer contents. That byte sequence is automatically reallocated when more than <code>n</code> characters are stored in the buffer, but shrinks back to <code>n</code> characters when <code>reset</code> is called. For best performance, <code>n</code> should be of the same order of magnitude as the number of characters that are expected to be stored in the buffer (for instance, 80 for a buffer that holds one output line). Nothing bad will happen if the buffer grows beyond that limit, however. In doubt, take <code>n = 16</code> for instance. If <code>n</code> is not between 1 and max_string_length, it will be clipped to that interval.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#value-create", "title": "create", "contents": "create int t ", "rendered": "<h4 class='item'>let create: int => <a href=\"./api/Buffer.html#type-t\">t</a></h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#type-t", "title": "t", "contents": "The abstract type of buffers.", "rendered": "The abstract type of buffers.", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t</h4>", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html", "title": "Buffer", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html", "title": "Buffer", "contents": "This module implements buffers that automatically expand as necessary. It provides accumulative concatenation of strings in quasi-linear time (instead of quadratic time when strings are concatenated pairwise).", "rendered": "This module implements buffers that automatically expand as necessary. It provides accumulative concatenation of strings in quasi-linear time (instead of quadratic time when strings are concatenated pairwise).", "breadcrumb": "Buffer"},
{"href": "./api/Buffer.html", "title": "Buffer", "contents": "Extensible buffers.", "rendered": "Extensible buffers.", "breadcrumb": "Buffer"},
{"href": "./api/ListLabels.html#value-merge", "title": "merge", "contents": "Merge two lists: Assuming that l1 and l2 are sorted according to the comparison function cmp, merge cmp l1 l2 will return a sorted list containting all the elements of l1 and l2. If several elements compare equal, the elements of l1 will be before the elements of l2. Not tail-recursive (sum of the lengths of the arguments).", "rendered": "Merge two lists: Assuming that <code>l1</code> and <code>l2</code> are sorted according to the comparison function <code>cmp</code>, <code>merge cmp l1 l2</code> will return a sorted list containting all the elements of <code>l1</code> and <code>l2</code>. If several elements compare equal, the elements of <code>l1</code> will be before the elements of <code>l2</code>. Not tail-recursive (sum of the lengths of the arguments).", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-merge", "title": "merge", "contents": "merge int   list list list cmp  ", "rendered": "<h4 class='item'>let merge: (\n  ~cmp: ('a, 'a) => int,\n  list('a),\n  list('a)\n) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fast_sort", "title": "fast_sort", "contents": "Same as sort or stable_sort, whichever is faster on typical input.", "rendered": "Same as sort or stable_sort, whichever is faster on typical input.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fast_sort", "title": "fast_sort", "contents": "fast_sort int   list list cmp ", "rendered": "<h4 class='item'>let fast_sort: (~cmp: ('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-stable_sort", "title": "stable_sort", "contents": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "rendered": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-stable_sort", "title": "stable_sort", "contents": "Same as sort, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .", "rendered": "Same as sort, but the sorting algorithm is guaranteed to be stable (i.e. elements that compare equal are kept in their original order) .", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-stable_sort", "title": "stable_sort", "contents": "stable_sort int   list list cmp ", "rendered": "<h4 class='item'>let stable_sort: (~cmp: ('a, 'a) => int, list('a)) => list(\n  'a\n)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-sort", "title": "sort", "contents": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "rendered": "The current implementation uses Merge Sort. It runs in constant heap space and logarithmic stack space.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-sort", "title": "sort", "contents": "Sort a list in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see Array.sort for a complete specification). For example, compare is a suitable comparison function. The resulting list is sorted in increasing order. ListLabels.sort is guaranteed to run in constant heap space (in addition to the size of the result list) and logarithmic stack space.", "rendered": "Sort a list in increasing order according to a comparison function. The comparison function must return 0 if its arguments compare as equal, a positive integer if the first is greater, and a negative integer if the first is smaller (see Array.sort for a complete specification). For example, compare is a suitable comparison function. The resulting list is sorted in increasing order. <code>ListLabels.sort</code> is guaranteed to run in constant heap space (in addition to the size of the result list) and logarithmic stack space.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-sort", "title": "sort", "contents": "sort int   list list cmp ", "rendered": "<h4 class='item'>let sort: (~cmp: ('a, 'a) => int, list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#Sorting", "title": "Sorting", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-combine", "title": "combine", "contents": "Transform a pair of lists into a list of pairs: combine [a1; ...; an] [b1; ...; bn] is [(a1,b1); ...; (an,bn)]. Raise Invalid_argument if the two lists have different lengths. Not tail-recursive.", "rendered": "Transform a pair of lists into a list of pairs: <code>combine [a1; ...; an] [b1; ...; bn]</code> is <code>[(a1,b1); ...; (an,bn)]</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-combine", "title": "combine", "contents": "combine list list list  ", "rendered": "<h4 class='item'>let combine: (list('a), list('b)) => list(('a, 'b))</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-split", "title": "split", "contents": "Transform a list of pairs into a pair of lists: split [(a1,b1); ...; (an,bn)] is ([a1; ...; an], [b1; ...; bn]). Not tail-recursive.", "rendered": "Transform a list of pairs into a pair of lists: <code>split [(a1,b1); ...; (an,bn)]</code> is <code>([a1; ...; an], [b1; ...; bn])</code>. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-split", "title": "split", "contents": "split list list list ", "rendered": "<h4 class='item'>let split: list(('a, 'b)) => (list('a), list('b))</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#Lists-of-pairs", "title": "Lists of pairs", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-remove_assq", "title": "remove_assq", "contents": "Same as remove_assoc, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.", "rendered": "Same as remove_assoc, but uses physical equality instead of structural equality to compare keys. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-remove_assq", "title": "remove_assq", "contents": "remove_assq list list  ", "rendered": "<h4 class='item'>let remove_assq: ('a, list(('a, 'b))) => list(('a, 'b))</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-remove_assoc", "title": "remove_assoc", "contents": "remove_assoc a l returns the list of pairs l without the first pair with key a, if any. Not tail-recursive.", "rendered": "<code>remove_assoc a l</code> returns the list of pairs <code>l</code> without the first pair with key <code>a</code>, if any. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-remove_assoc", "title": "remove_assoc", "contents": "remove_assoc list list  ", "rendered": "<h4 class='item'>let remove_assoc: ('a, list(('a, 'b))) => list(('a, 'b))</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mem_assq", "title": "mem_assq", "contents": "Same as mem_assoc, but uses physical equality instead of structural equality to compare keys.", "rendered": "Same as mem_assoc, but uses physical equality instead of structural equality to compare keys.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mem_assq", "title": "mem_assq", "contents": "mem_assq list bool  map", "rendered": "<h4 class='item'>let mem_assq: ('a, ~map: list(('a, 'b))) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mem_assoc", "title": "mem_assoc", "contents": "Same as assoc, but simply return true if a binding exists, and false if no bindings exist for the given key.", "rendered": "Same as assoc, but simply return true if a binding exists, and false if no bindings exist for the given key.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mem_assoc", "title": "mem_assoc", "contents": "mem_assoc list bool  map", "rendered": "<h4 class='item'>let mem_assoc: ('a, ~map: list(('a, 'b))) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-assq", "title": "assq", "contents": "Same as assoc, but uses physical equality instead of structural equality to compare keys.", "rendered": "Same as assoc, but uses physical equality instead of structural equality to compare keys.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-assq", "title": "assq", "contents": "assq list  ", "rendered": "<h4 class='item'>let assq: ('a, list(('a, 'b))) => 'b</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-assoc", "title": "assoc", "contents": "assoc a l returns the value associated with key a in the list of pairs l. That is, assoc a [ ...; (a,b); ...] = b if (a,b) is the leftmost binding of a in list l. Raise Not_found if there is no value associated with a in the list l.", "rendered": "<code>assoc a l</code> returns the value associated with key <code>a</code> in the list of pairs <code>l</code>. That is, <code>assoc a [ ...; (a,b); ...] = b</code> if <code>(a,b)</code> is the leftmost binding of <code>a</code> in list <code>l</code>. Raise <code>Not_found</code> if there is no value associated with <code>a</code> in the list <code>l</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-assoc", "title": "assoc", "contents": "assoc list  ", "rendered": "<h4 class='item'>let assoc: ('a, list(('a, 'b))) => 'b</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#Association-lists", "title": "Association lists", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-partition", "title": "partition", "contents": "partition p l returns a pair of lists (l1, l2), where l1 is the list of all the elements of l that satisfy the predicate p, and l2 is the list of all the elements of l that do not satisfy p. The order of the elements in the input list is preserved.", "rendered": "<code>partition p l</code> returns a pair of lists <code>(l1, l2)</code>, where <code>l1</code> is the list of all the elements of <code>l</code> that satisfy the predicate <code>p</code>, and <code>l2</code> is the list of all the elements of <code>l</code> that do not satisfy <code>p</code>. The order of the elements in the input list is preserved.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-partition", "title": "partition", "contents": "partition bool  list list list f ", "rendered": "<h4 class='item'>let partition: (~f: 'a => bool, list('a)) => (\n  list('a),\n  list('a)\n)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-find_all", "title": "find_all", "contents": "find_all is another name for filter.", "rendered": "<code>find_all</code> is another name for filter.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-find_all", "title": "find_all", "contents": "find_all bool  list list f ", "rendered": "<h4 class='item'>let find_all: (~f: 'a => bool, list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-filter", "title": "filter", "contents": "filter p l returns all the elements of the list l that satisfy the predicate p. The order of the elements in the input list is preserved.", "rendered": "<code>filter p l</code> returns all the elements of the list <code>l</code> that satisfy the predicate <code>p</code>. The order of the elements in the input list is preserved.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-filter", "title": "filter", "contents": "filter bool  list list f ", "rendered": "<h4 class='item'>let filter: (~f: 'a => bool, list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-find", "title": "find", "contents": "find p l returns the first element of the list l that satisfies the predicate p. Raise Not_found if there is no value that satisfies p in the list l.", "rendered": "<code>find p l</code> returns the first element of the list <code>l</code> that satisfies the predicate <code>p</code>. Raise <code>Not_found</code> if there is no value that satisfies <code>p</code> in the list <code>l</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-find", "title": "find", "contents": "find bool  list f ", "rendered": "<h4 class='item'>let find: (~f: 'a => bool, list('a)) => 'a</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#List-searching", "title": "List searching", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-memq", "title": "memq", "contents": "Same as mem, but uses physical equality instead of structural equality to compare list elements.", "rendered": "Same as mem, but uses physical equality instead of structural equality to compare list elements.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-memq", "title": "memq", "contents": "memq list bool  set", "rendered": "<h4 class='item'>let memq: ('a, ~set: list('a)) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mem", "title": "mem", "contents": "mem a l is true if and only if a is equal to an element of l.", "rendered": "<code>mem a l</code> is true if and only if <code>a</code> is equal to an element of <code>l</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mem", "title": "mem", "contents": "mem list bool  set", "rendered": "<h4 class='item'>let mem: ('a, ~set: list('a)) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-exists2", "title": "exists2", "contents": "Same as exists, but for a two-argument predicate. Raise Invalid_argument if the two lists have different lengths.", "rendered": "Same as exists, but for a two-argument predicate. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-exists2", "title": "exists2", "contents": "exists2 bool   list list bool f  ", "rendered": "<h4 class='item'>let exists2: (\n  ~f: ('a, 'b) => bool,\n  list('a),\n  list('b)\n) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-for_all2", "title": "for_all2", "contents": "Same as for_all, but for a two-argument predicate. Raise Invalid_argument if the two lists have different lengths.", "rendered": "Same as for_all, but for a two-argument predicate. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-for_all2", "title": "for_all2", "contents": "for_all2 bool   list list bool f  ", "rendered": "<h4 class='item'>let for_all2: (\n  ~f: ('a, 'b) => bool,\n  list('a),\n  list('b)\n) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-exists", "title": "exists", "contents": "exists p [a1; ...; an] checks if at least one element of the list satisfies the predicate p. That is, it returns (p a1) || (p a2) || ... || (p an).", "rendered": "<code>exists p [a1; ...; an]</code> checks if at least one element of the list satisfies the predicate <code>p</code>. That is, it returns <code>(p a1) || (p a2) || ... || (p an)</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-exists", "title": "exists", "contents": "exists bool  list bool f ", "rendered": "<h4 class='item'>let exists: (~f: 'a => bool, list('a)) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-for_all", "title": "for_all", "contents": "for_all p [a1; ...; an] checks if all elements of the list satisfy the predicate p. That is, it returns (p a1) &amp;&amp; (p a2) &amp;&amp; ... &amp;&amp; (p an).", "rendered": "<code>for_all p [a1; ...; an]</code> checks if all elements of the list satisfy the predicate <code>p</code>. That is, it returns <code>(p a1) &amp;&amp; (p a2) &amp;&amp; ... &amp;&amp; (p an)</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-for_all", "title": "for_all", "contents": "for_all bool  list bool f ", "rendered": "<h4 class='item'>let for_all: (~f: 'a => bool, list('a)) => bool</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#List-scanning", "title": "List scanning", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_right2", "title": "fold_right2", "contents": "ListLabels.fold_right2 f [a1; ...; an] [b1; ...; bn] c is f a1 b1 (f a2 b2 (... (f an bn c) ...)). Raise Invalid_argument if the two lists have different lengths. Not tail-recursive.", "rendered": "<code>ListLabels.fold_right2 f [a1; ...; an] [b1; ...; bn] c</code> is <code>f a1 b1 (f a2 b2 (... (f an bn c) ...))</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_right2", "title": "fold_right2", "contents": "fold_right2    list list f   init", "rendered": "<h4 class='item'>let fold_right2: (\n  ~f: ('a, 'b, 'c) => 'c,\n  list('a),\n  list('b),\n  ~init: 'c\n) => 'c</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_left2", "title": "fold_left2", "contents": "ListLabels.fold_left2 f a [b1; ...; bn] [c1; ...; cn] is f (... (f (f a b1 c1) b2 c2) ...) bn cn. Raise Invalid_argument if the two lists have different lengths.", "rendered": "<code>ListLabels.fold_left2 f a [b1; ...; bn] [c1; ...; cn]</code> is <code>f (... (f (f a b1 c1) b2 c2) ...) bn cn</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_left2", "title": "fold_left2", "contents": "fold_left2    list list f init  ", "rendered": "<h4 class='item'>let fold_left2: (\n  ~f: ('a, 'b, 'c) => 'a,\n  ~init: 'a,\n  list('b),\n  list('c)\n) => 'a</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev_map2", "title": "rev_map2", "contents": "ListLabels.rev_map2 f l1 l2 gives the same result as rev (map2 f l1 l2), but is tail-recursive and more efficient.", "rendered": "<code>ListLabels.rev_map2 f l1 l2</code> gives the same result as rev<code> (</code>map2<code> f l1 l2)</code>, but is tail-recursive and more efficient.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev_map2", "title": "rev_map2", "contents": "rev_map2   list list list f  ", "rendered": "<h4 class='item'>let rev_map2: (\n  ~f: ('a, 'b) => 'c,\n  list('a),\n  list('b)\n) => list('c)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-map2", "title": "map2", "contents": "ListLabels.map2 f [a1; ...; an] [b1; ...; bn] is [f a1 b1; ...; f an bn]. Raise Invalid_argument if the two lists have different lengths. Not tail-recursive.", "rendered": "<code>ListLabels.map2 f [a1; ...; an] [b1; ...; bn]</code> is <code>[f a1 b1; ...; f an bn]</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-map2", "title": "map2", "contents": "map2   list list list f  ", "rendered": "<h4 class='item'>let map2: (~f: ('a, 'b) => 'c, list('a), list('b)) => list(\n  'c\n)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-iter2", "title": "iter2", "contents": "ListLabels.iter2 f [a1; ...; an] [b1; ...; bn] calls in turn f a1 b1; ...; f an bn. Raise Invalid_argument if the two lists have different lengths.", "rendered": "<code>ListLabels.iter2 f [a1; ...; an] [b1; ...; bn]</code> calls in turn <code>f a1 b1; ...; f an bn</code>. Raise <code>Invalid_argument</code> if the two lists have different lengths.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-iter2", "title": "iter2", "contents": "iter2 unit   list list unit f  ", "rendered": "<h4 class='item'>let iter2: (\n  ~f: ('a, 'b) => unit,\n  list('a),\n  list('b)\n) => unit</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#Iterators-on-two-lists", "title": "Iterators on two lists", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_right", "title": "fold_right", "contents": "ListLabels.fold_right f [a1; ...; an] b is f a1 (f a2 (... (f an b) ...)). Not tail-recursive.", "rendered": "<code>ListLabels.fold_right f [a1; ...; an] b</code> is <code>f a1 (f a2 (... (f an b) ...))</code>. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_right", "title": "fold_right", "contents": "fold_right   list f  init", "rendered": "<h4 class='item'>let fold_right: (\n  ~f: ('a, 'b) => 'b,\n  list('a),\n  ~init: 'b\n) => 'b</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_left", "title": "fold_left", "contents": "ListLabels.fold_left f a [b1; ...; bn] is f (... (f (f a b1) b2) ...) bn.", "rendered": "<code>ListLabels.fold_left f a [b1; ...; bn]</code> is <code>f (... (f (f a b1) b2) ...) bn</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-fold_left", "title": "fold_left", "contents": "fold_left   list f init ", "rendered": "<h4 class='item'>let fold_left: (\n  ~f: ('a, 'b) => 'a,\n  ~init: 'a,\n  list('b)\n) => 'a</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev_map", "title": "rev_map", "contents": "ListLabels.rev_map f l gives the same result as rev (map f l), but is tail-recursive and more efficient.", "rendered": "<code>ListLabels.rev_map f l</code> gives the same result as rev<code> (</code>map<code> f l)</code>, but is tail-recursive and more efficient.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev_map", "title": "rev_map", "contents": "rev_map  list list f ", "rendered": "<h4 class='item'>let rev_map: (~f: 'a => 'b, list('a)) => list('b)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mapi", "title": "mapi", "contents": "Same as map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.", "rendered": "Same as map, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-mapi", "title": "mapi", "contents": "mapi int   list list f ", "rendered": "<h4 class='item'>let mapi: (~f: (int, 'a) => 'b, list('a)) => list('b)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-map", "title": "map", "contents": "ListLabels.map f [a1; ...; an] applies function f to a1, ..., an, and builds the list [f a1; ...; f an] with the results returned by f. Not tail-recursive.", "rendered": "<code>ListLabels.map f [a1; ...; an]</code> applies function <code>f</code> to <code>a1, ..., an</code>, and builds the list <code>[f a1; ...; f an]</code> with the results returned by <code>f</code>. Not tail-recursive.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-map", "title": "map", "contents": "map  list list f ", "rendered": "<h4 class='item'>let map: (~f: 'a => 'b, list('a)) => list('b)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-iteri", "title": "iteri", "contents": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.", "rendered": "Same as iter, but the function is applied to the index of the element as first argument (counting from 0), and the element itself as second argument.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-iteri", "title": "iteri", "contents": "iteri int unit   list unit f ", "rendered": "<h4 class='item'>let iteri: (~f: (int, 'a) => unit, list('a)) => unit</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-iter", "title": "iter", "contents": "ListLabels.iter f [a1; ...; an] applies function f in turn to a1; ...; an. It is equivalent to begin f a1; f a2; ...; f an; () end.", "rendered": "<code>ListLabels.iter f [a1; ...; an]</code> applies function <code>f</code> in turn to <code>a1; ...; an</code>. It is equivalent to <code>begin f a1; f a2; ...; f an; () end</code>.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-iter", "title": "iter", "contents": "iter unit  list unit f ", "rendered": "<h4 class='item'>let iter: (~f: 'a => unit, list('a)) => unit</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#Iterators", "title": "Iterators", "contents": "", "rendered": "", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-flatten", "title": "flatten", "contents": "Same as concat. Not tail-recursive (length of the argument + length of the longest sub-list).", "rendered": "Same as <code>concat</code>. Not tail-recursive (length of the argument + length of the longest sub-list).", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-flatten", "title": "flatten", "contents": "flatten list list list ", "rendered": "<h4 class='item'>let flatten: list(list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-concat", "title": "concat", "contents": "Concatenate a list of lists. The elements of the argument are all concatenated together (in the same order) to give the result. Not tail-recursive (length of the argument + length of the longest sub-list).", "rendered": "Concatenate a list of lists. The elements of the argument are all concatenated together (in the same order) to give the result. Not tail-recursive (length of the argument + length of the longest sub-list).", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-concat", "title": "concat", "contents": "concat list list list ", "rendered": "<h4 class='item'>let concat: list(list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev_append", "title": "rev_append", "contents": "ListLabels.rev_append l1 l2 reverses l1 and concatenates it to l2. This is equivalent to rev l1 @ l2, but rev_append is tail-recursive and more efficient.", "rendered": "<code>ListLabels.rev_append l1 l2</code> reverses <code>l1</code> and concatenates it to <code>l2</code>. This is equivalent to rev<code> l1 @ l2</code>, but <code>rev_append</code> is tail-recursive and more efficient.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev_append", "title": "rev_append", "contents": "rev_append list list list  ", "rendered": "<h4 class='item'>let rev_append: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-append", "title": "append", "contents": "Catenate two lists. Same function as the infix operator @. Not tail-recursive (length of the first argument). The @ operator is not tail-recursive either.", "rendered": "Catenate two lists. Same function as the infix operator <code>@</code>. Not tail-recursive (length of the first argument). The <code>@</code> operator is not tail-recursive either.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-append", "title": "append", "contents": "append list list list  ", "rendered": "<h4 class='item'>let append: (list('a), list('a)) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev", "title": "rev", "contents": "List reversal.", "rendered": "List reversal.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-rev", "title": "rev", "contents": "rev list list ", "rendered": "<h4 class='item'>let rev: list('a) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-nth", "title": "nth", "contents": "Return the n-th element of the given list. The first element (head of the list) is at position 0. Raise Failure &quot;nth&quot; if the list is too short. Raise Invalid_argument &quot;List.nth&quot; if n is negative.", "rendered": "Return the <code>n</code>-th element of the given list. The first element (head of the list) is at position 0. Raise <code>Failure &quot;nth&quot;</code> if the list is too short. Raise <code>Invalid_argument &quot;List.nth&quot;</code> if <code>n</code> is negative.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-nth", "title": "nth", "contents": "nth list int  ", "rendered": "<h4 class='item'>let nth: (list('a), int) => 'a</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-tl", "title": "tl", "contents": "Return the given list without its first element. Raise Failure &quot;tl&quot; if the list is empty.", "rendered": "Return the given list without its first element. Raise <code>Failure &quot;tl&quot;</code> if the list is empty.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-tl", "title": "tl", "contents": "tl list list ", "rendered": "<h4 class='item'>let tl: list('a) => list('a)</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-hd", "title": "hd", "contents": "Return the first element of the given list. Raise Failure &quot;hd&quot; if the list is empty.", "rendered": "Return the first element of the given list. Raise <code>Failure &quot;hd&quot;</code> if the list is empty.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-hd", "title": "hd", "contents": "hd list ", "rendered": "<h4 class='item'>let hd: list('a) => 'a</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-length", "title": "length", "contents": "Return the length (number of elements) of the given list.", "rendered": "Return the length (number of elements) of the given list.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html#value-length", "title": "length", "contents": "length list int ", "rendered": "<h4 class='item'>let length: list('a) => int</h4>", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html", "title": "ListLabels", "contents": "@rest", "rendered": "@rest", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html", "title": "ListLabels", "contents": "The above considerations can usually be ignored if your lists are not longer than about 10000 elements.", "rendered": "The above considerations can usually be ignored if your lists are not longer than about 10000 elements.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html", "title": "ListLabels", "contents": "Some functions are flagged as not tail-recursive. A tail-recursive function uses constant stack space, while a non-tail-recursive function uses stack space proportional to the length of its list argument, which can be a problem with very long lists. When the function takes several list arguments, an approximate formula giving stack usage (in some unspecified constant unit) is shown in parentheses.", "rendered": "Some functions are flagged as not tail-recursive. A tail-recursive function uses constant stack space, while a non-tail-recursive function uses stack space proportional to the length of its list argument, which can be a problem with very long lists. When the function takes several list arguments, an approximate formula giving stack usage (in some unspecified constant unit) is shown in parentheses.", "breadcrumb": "ListLabels"},
{"href": "./api/ListLabels.html", "title": "ListLabels", "contents": "List operations.", "rendered": "List operations.", "breadcrumb": "ListLabels"},
{"href": "./api/Marshal.html#value-total_size", "title": "total_size", "contents": "See header_size.", "rendered": "See header_size.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-total_size", "title": "total_size", "contents": "total_size bytes int int  ", "rendered": "<h4 class='item'>let total_size: (bytes, int) => int</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-data_size", "title": "data_size", "contents": "See header_size.", "rendered": "See header_size.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-data_size", "title": "data_size", "contents": "data_size bytes int int  ", "rendered": "<h4 class='item'>let data_size: (bytes, int) => int</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-header_size", "title": "header_size", "contents": "To read the byte representation of a marshaled value into a byte sequence, the program needs to read first header_size bytes into the sequence, then determine the length of the remainder of the representation using data_size, make sure the sequence is large enough to hold the remaining data, then read it, and finally call from_bytes to unmarshal the value.", "rendered": "To read the byte representation of a marshaled value into a byte sequence, the program needs to read first header_size bytes into the sequence, then determine the length of the remainder of the representation using data_size, make sure the sequence is large enough to hold the remaining data, then read it, and finally call from_bytes to unmarshal the value.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-header_size", "title": "header_size", "contents": "The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header. header_size is the size, in bytes, of the header. data_size buff ofs is the size, in bytes, of the data part, assuming a valid header is stored in buff starting at position ofs. Finally, total_size buff ofs is the total size, in bytes, of the marshaled value. Both data_size and total_size raise Failure if buff, ofs does not contain a valid header.", "rendered": "The bytes representing a marshaled value are composed of a fixed-size header and a variable-sized data part, whose size can be determined from the header. header_size is the size, in bytes, of the header. data_size<code> buff ofs</code> is the size, in bytes, of the data part, assuming a valid header is stored in <code>buff</code> starting at position <code>ofs</code>. Finally, total_size <code>buff ofs</code> is the total size, in bytes, of the marshaled value. Both data_size and total_size raise <code>Failure</code> if <code>buff</code>, <code>ofs</code> does not contain a valid header.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-header_size", "title": "header_size", "contents": "header_size int", "rendered": "<h4 class='item'>let header_size: int</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-from_string", "title": "from_string", "contents": "Same as from_bytes but take a string as argument instead of a byte sequence.", "rendered": "Same as <code>from_bytes</code> but take a string as argument instead of a byte sequence.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-from_string", "title": "from_string", "contents": "from_string string int  ", "rendered": "<h4 class='item'>let from_string: (string, int) => 'a</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-from_bytes", "title": "from_bytes", "contents": "Marshal.from_bytes buff ofs unmarshals a structured value like from_channel does, except that the byte representation is not read from a channel, but taken from the byte sequence buff, starting at position ofs. The byte sequence is not mutated.", "rendered": "<code>Marshal.from_bytes buff ofs</code> unmarshals a structured value like from_channel does, except that the byte representation is not read from a channel, but taken from the byte sequence <code>buff</code>, starting at position <code>ofs</code>. The byte sequence is not mutated.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-from_bytes", "title": "from_bytes", "contents": "from_bytes bytes int  ", "rendered": "<h4 class='item'>let from_bytes: (bytes, int) => 'a</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-from_channel", "title": "from_channel", "contents": "Marshal.from_channel chan reads from channel chan the byte representation of a structured value, as produced by one of the Marshal.to_* functions, and reconstructs and returns the corresponding value.", "rendered": "<code>Marshal.from_channel chan</code> reads from channel <code>chan</code> the byte representation of a structured value, as produced by one of the <code>Marshal.to_*</code> functions, and reconstructs and returns the corresponding value.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-from_channel", "title": "from_channel", "contents": "from_channel in_channel ", "rendered": "<h4 class='item'>let from_channel: <a href=\"./api/Pervasives.html#type-in_channel\" title=\"Pervasives.in_channel\">in_channel</a> => 'a</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_buffer", "title": "to_buffer", "contents": "Marshal.to_buffer buff ofs len v flags marshals the value v, storing its byte representation in the sequence buff, starting at index ofs, and writing at most len bytes. It returns the number of bytes actually written to the sequence. If the byte representation of v does not fit in len characters, the exception Failure is raised.", "rendered": "<code>Marshal.to_buffer buff ofs len v flags</code> marshals the value <code>v</code>, storing its byte representation in the sequence <code>buff</code>, starting at index <code>ofs</code>, and writing at most <code>len</code> bytes. It returns the number of bytes actually written to the sequence. If the byte representation of <code>v</code> does not fit in <code>len</code> characters, the exception <code>Failure</code> is raised.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_buffer", "title": "to_buffer", "contents": "to_buffer bytes int int list extern_flags int     ", "rendered": "<h4 class='item'>let to_buffer: (\n  bytes,\n  int,\n  int,\n  'a,\n  list(<a href=\"./api/Marshal.html#type-extern_flags\">extern_flags</a>)\n) => int</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_string", "title": "to_string", "contents": "Same as to_bytes but return the result as a string instead of a byte sequence.", "rendered": "Same as <code>to_bytes</code> but return the result as a string instead of a byte sequence.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_string", "title": "to_string", "contents": "to_string list extern_flags string  ", "rendered": "<h4 class='item'>let to_string: ('a, list(<a href=\"./api/Marshal.html#type-extern_flags\">extern_flags</a>)) => string</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_bytes", "title": "to_bytes", "contents": "Marshal.to_bytes v flags returns a byte sequence containing the representation of v. The flags argument has the same meaning as for to_channel.", "rendered": "<code>Marshal.to_bytes v flags</code> returns a byte sequence containing the representation of <code>v</code>. The <code>flags</code> argument has the same meaning as for to_channel.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_bytes", "title": "to_bytes", "contents": "to_bytes list extern_flags bytes  ", "rendered": "<h4 class='item'>let to_bytes: ('a, list(<a href=\"./api/Marshal.html#type-extern_flags\">extern_flags</a>)) => bytes</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_channel", "title": "to_channel", "contents": "If flags contains Marshal.Compat_32, marshaling fails when it encounters an integer value outside the range [-2{^30}, 2{^30}-1] of integers that are representable on a 32-bit platform. This ensures that marshaled data generated on a 64-bit platform can be safely read back on a 32-bit platform. If flags does not contain Marshal.Compat_32, integer values outside the range [-2{^30}, 2{^30}-1] are marshaled, and can be read back on a 64-bit platform, but will cause an error at un-marshaling time when read back on a 32-bit platform. The Mashal.Compat_32 flag only matters when marshaling is performed on a 64-bit platform; it has no effect if marshaling is performed on a 32-bit platform.", "rendered": "If <code>flags</code> contains <code>Marshal.Compat_32</code>, marshaling fails when it encounters an integer value outside the range <code>[-2{^30}, 2{^30}-1]</code> of integers that are representable on a 32-bit platform. This ensures that marshaled data generated on a 64-bit platform can be safely read back on a 32-bit platform. If <code>flags</code> does not contain <code>Marshal.Compat_32</code>, integer values outside the range <code>[-2{^30}, 2{^30}-1]</code> are marshaled, and can be read back on a 64-bit platform, but will cause an error at un-marshaling time when read back on a 32-bit platform. The <code>Mashal.Compat_32</code> flag only matters when marshaling is performed on a 64-bit platform; it has no effect if marshaling is performed on a 32-bit platform.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_channel", "title": "to_channel", "contents": "The exact definition of which free variables are captured in a closure is not specified and can very between bytecode and native code (and according to optimization flags). In particular, a function value accessing a global reference may or may not include the reference in its closure. If it does, unmarshaling the corresponding closure will create a new reference, different from the global one.", "rendered": "The exact definition of which free variables are captured in a closure is not specified and can very between bytecode and native code (and according to optimization flags). In particular, a function value accessing a global reference may or may not include the reference in its closure. If it does, unmarshaling the corresponding closure will create a new reference, different from the global one.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_channel", "title": "to_channel", "contents": "If flags does not contain Marshal.Closures, marshaling fails when it encounters a functional value inside v: only &#39;pure&#39; data structures, containing neither functions nor objects, can safely be transmitted between different programs. If flags contains Marshal.Closures, functional values will be marshaled as a the position in the code of the program together with the values corresponding to the free variables captured in the closure. In this case, the output of marshaling can only be read back in processes that run exactly the same program, with exactly the same compiled code. (This is checked at un-marshaling time, using an MD5 digest of the code transmitted along with the code position.)", "rendered": "If <code>flags</code> does not contain <code>Marshal.Closures</code>, marshaling fails when it encounters a functional value inside <code>v</code>: only &#39;pure&#39; data structures, containing neither functions nor objects, can safely be transmitted between different programs. If <code>flags</code> contains <code>Marshal.Closures</code>, functional values will be marshaled as a the position in the code of the program together with the values corresponding to the free variables captured in the closure. In this case, the output of marshaling can only be read back in processes that run exactly the same program, with exactly the same compiled code. (This is checked at un-marshaling time, using an MD5 digest of the code transmitted along with the code position.)", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_channel", "title": "to_channel", "contents": "If flags does not contain Marshal.No_sharing, circularities and sharing inside the value v are detected and preserved in the sequence of bytes produced. In particular, this guarantees that marshaling always terminates. Sharing between values marshaled by successive calls to Marshal.to_channel is neither detected nor preserved, though. If flags contains Marshal.No_sharing, sharing is ignored. This results in faster marshaling if v contains no shared substructures, but may cause slower marshaling and larger byte representations if v actually contains sharing, or even non-termination if v contains cycles.", "rendered": "If <code>flags</code> does not contain <code>Marshal.No_sharing</code>, circularities and sharing inside the value <code>v</code> are detected and preserved in the sequence of bytes produced. In particular, this guarantees that marshaling always terminates. Sharing between values marshaled by successive calls to <code>Marshal.to_channel</code> is neither detected nor preserved, though. If <code>flags</code> contains <code>Marshal.No_sharing</code>, sharing is ignored. This results in faster marshaling if <code>v</code> contains no shared substructures, but may cause slower marshaling and larger byte representations if <code>v</code> actually contains sharing, or even non-termination if <code>v</code> contains cycles.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_channel", "title": "to_channel", "contents": "Marshal.to_channel chan v flags writes the representation of v on channel chan. The flags argument is a possibly empty list of flags that governs the marshaling behavior with respect to sharing, functional values, and compatibility between 32- and 64-bit platforms.", "rendered": "<code>Marshal.to_channel chan v flags</code> writes the representation of <code>v</code> on channel <code>chan</code>. The <code>flags</code> argument is a possibly empty list of flags that governs the marshaling behavior with respect to sharing, functional values, and compatibility between 32- and 64-bit platforms.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#value-to_channel", "title": "to_channel", "contents": "to_channel out_channel list extern_flags unit   ", "rendered": "<h4 class='item'>let to_channel: (\n  <a href=\"./api/Pervasives.html#type-out_channel\" title=\"Pervasives.out_channel\">out_channel</a>,\n  'a,\n  list(<a href=\"./api/Marshal.html#type-extern_flags\">extern_flags</a>)\n) => unit</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#type-extern_flags", "title": "extern_flags", "contents": "The flags to the Marshal.to_* functions below.", "rendered": "The flags to the <code>Marshal.to_*</code> functions below.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html#type-extern_flags", "title": "extern_flags", "contents": "extern_flags ", "rendered": "<h4 class='item'>type extern_flags = | No_sharing | Closures | Compat_32\n</h4>", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "(Marshal.from_channel chan : type). Anything can happen at run-time if the object in the file does not belong to the given type.", "rendered": "<code>(Marshal.from_channel chan : type)</code>. Anything can happen at run-time if the object in the file does not belong to the given type.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "The representation of marshaled values is not human-readable, and uses bytes that are not printable characters. Therefore, input and output channels used in conjunction with Marshal.to_channel and Marshal.from_channel must be opened in binary mode, using e.g. open_out_bin or open_in_bin; channels opened in text mode will cause unmarshaling errors on platforms where text channels behave differently than binary channels, e.g. Windows.", "rendered": "The representation of marshaled values is not human-readable, and uses bytes that are not printable characters. Therefore, input and output channels used in conjunction with <code>Marshal.to_channel</code> and <code>Marshal.from_channel</code> must be opened in binary mode, using e.g. <code>open_out_bin</code> or <code>open_in_bin</code>; channels opened in text mode will cause unmarshaling errors on platforms where text channels behave differently than binary channels, e.g. Windows.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "Values of extensible variant types, for example exceptions (of extensible type exn), returned by the unmarhsaller should not be pattern-matched over through match ... with or try ... with, because unmarshalling does not preserve the information required for matching their constructors. Structural equalities with other extensible variant values does not work either. Most other uses such as Printexc.to_string, will still work as expected.", "rendered": "Values of extensible variant types, for example exceptions (of extensible type <code>exn</code>), returned by the unmarhsaller should not be pattern-matched over through <code>match ... with</code> or <code>try ... with</code>, because unmarshalling does not preserve the information required for matching their constructors. Structural equalities with other extensible variant values does not work either. Most other uses such as Printexc.to_string, will still work as expected.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "Warning: marshaling is currently not type-safe. The type of marshaled data is not transmitted along the value of the data, making it impossible to check that the data read back possesses the type expected by the context. In particular, the result type of the Marshal.from_* functions is given as &#39;a, but this is misleading: the returned OCaml value does not possess type &#39;a for all &#39;a; it has one, unique type which cannot be determined at compile-type. The programmer should explicitly give the expected type of the returned value, using the following syntax:", "rendered": "Warning: marshaling is currently not type-safe. The type of marshaled data is not transmitted along the value of the data, making it impossible to check that the data read back possesses the type expected by the context. In particular, the result type of the <code>Marshal.from_*</code> functions is given as <code>&#39;a</code>, but this is misleading: the returned OCaml value does not possess type <code>&#39;a</code> for all <code>&#39;a</code>; it has one, unique type which cannot be determined at compile-type. The programmer should explicitly give the expected type of the returned value, using the following syntax:", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "This module provides functions to encode arbitrary data structures as sequences of bytes, which can then be written on a file or sent over a pipe or network connection. The bytes can then be read back later, possibly in another process, and decoded back into a data structure. The format for the byte sequences is compatible across all machines for a given version of OCaml.", "rendered": "This module provides functions to encode arbitrary data structures as sequences of bytes, which can then be written on a file or sent over a pipe or network connection. The bytes can then be read back later, possibly in another process, and decoded back into a data structure. The format for the byte sequences is compatible across all machines for a given version of OCaml.", "breadcrumb": "Marshal"},
{"href": "./api/Marshal.html", "title": "Marshal", "contents": "Marshaling of data structures.", "rendered": "Marshaling of data structures.", "breadcrumb": "Marshal"},
{"href": "./api/Js.html#module-List", "title": "List", "contents": "Provide utilities for list", "rendered": "Provide utilities for list", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Result", "title": "Result", "contents": "Define the interface for result", "rendered": "Define the interface for result", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Option", "title": "Option", "contents": "Provide utilities for option", "rendered": "Provide utilities for option", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Int", "title": "Int", "contents": "Provide utilities for JS float", "rendered": "Provide utilities for JS float", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Float", "title": "Float", "contents": "Provide utilities for manipulating JS types", "rendered": "Provide utilities for manipulating JS types", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Types", "title": "Types", "contents": "Provide utilities for manipulating JS types", "rendered": "Provide utilities for manipulating JS types", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Typed_array", "title": "Typed_array", "contents": "Provide bindings for JS typed array", "rendered": "Provide bindings for JS typed array", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Obj", "title": "Obj", "contents": "Provide utilities for t", "rendered": "Provide utilities for t", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Math", "title": "Math", "contents": "Provide bindings for JS Math object", "rendered": "Provide bindings for JS <code>Math</code> object", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Json", "title": "Json", "contents": "Provide utilities for json", "rendered": "Provide utilities for json", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Global", "title": "Global", "contents": "Provide bindings to JS global functions in global namespace", "rendered": "Provide bindings to JS global functions in global namespace", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Dict", "title": "Dict", "contents": "Provide utilities for JS dictionary object", "rendered": "Provide utilities for JS dictionary object", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Date", "title": "Date", "contents": "Provide bindings for JS Date", "rendered": "Provide bindings for JS Date", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Promise", "title": "Promise", "contents": "Provide bindings to JS promise", "rendered": "Provide bindings to JS promise", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Re", "title": "Re", "contents": "Provide bindings to Js regex expression", "rendered": "Provide bindings to Js regex expression", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Boolean", "title": "Boolean", "contents": "Provide bindings to JS string", "rendered": "Provide bindings to JS string", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-String", "title": "String", "contents": "Provide bindings to Js array", "rendered": "Provide bindings to Js array", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Array", "title": "Array", "contents": "Provide bindings to Js array", "rendered": "Provide bindings to Js array", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Exn", "title": "Exn", "contents": "Provide utilities for dealing with Js exceptions", "rendered": "Provide utilities for dealing with Js exceptions", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Null_undefined", "title": "Null_undefined", "contents": "Provide utilities around null_undefined", "rendered": "Provide utilities around null_undefined", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Nullable", "title": "Nullable", "contents": "Provide utilities around undefined", "rendered": "Provide utilities around undefined", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Undefined", "title": "Undefined", "contents": "Provide utilities around undefined", "rendered": "Provide utilities around undefined", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Null", "title": "Null", "contents": "Provide utilities around &#39;a null", "rendered": "Provide utilities around <code>&#39;a null</code>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_ge", "title": "unsafe_ge", "contents": "unsafe_gt a b will be compiled as a &gt; b. See also unsafe_lt", "rendered": "<code>unsafe_gt a b</code> will be compiled as <code>a &gt; b</code>. See also unsafe_lt", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_ge", "title": "unsafe_ge", "contents": "unsafe_ge bool  ", "rendered": "<h4 class='item'>let unsafe_ge: ('a, 'a) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_gt", "title": "unsafe_gt", "contents": "unsafe_le a b will be compiled as a &lt;= b. See also unsafe_lt", "rendered": "<code>unsafe_le a b</code> will be compiled as <code>a &lt;= b</code>. See also unsafe_lt", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_gt", "title": "unsafe_gt", "contents": "unsafe_gt bool  ", "rendered": "<h4 class='item'>let unsafe_gt: ('a, 'a) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_le", "title": "unsafe_le", "contents": "unsafe_lt a b will be compiled as a &lt; b. It is marked as unsafe, since it is impossible to give a proper semantics for comparision which applies to any type", "rendered": "<code>unsafe_lt a b</code> will be compiled as <code>a &lt; b</code>. It is marked as unsafe, since it is impossible to give a proper semantics for comparision which applies to any type", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_le", "title": "unsafe_le", "contents": "unsafe_le bool  ", "rendered": "<h4 class='item'>let unsafe_le: ('a, 'a) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_lt", "title": "unsafe_lt", "contents": "unsafe_lt a b will be compiled as a &lt; b. It is marked as unsafe, since it is impossible to give a proper semantics for comparision which applies to any type", "rendered": "<code>unsafe_lt a b</code> will be compiled as <code>a &lt; b</code>. It is marked as unsafe, since it is impossible to give a proper semantics for comparision which applies to any type", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-unsafe_lt", "title": "unsafe_lt", "contents": "unsafe_lt bool  ", "rendered": "<h4 class='item'>let unsafe_lt: ('a, 'a) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#operators", "title": "operators", "contents": "", "rendered": "", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-eqNullable", "title": "eqNullable", "contents": "eqNullable nullable bool  ", "rendered": "<h4 class='item'>let eqNullable: ('a, <a href=\"./api/Js.html#type-nullable\">nullable</a>('a)) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-eqUndefined", "title": "eqUndefined", "contents": "eqUndefined undefined bool  ", "rendered": "<h4 class='item'>let eqUndefined: ('a, <a href=\"./api/Js.html#type-undefined\">undefined</a>('a)) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-eqNull", "title": "eqNull", "contents": "eqNull null bool  ", "rendered": "<h4 class='item'>let eqNull: ('a, <a href=\"./api/Js.html#type-null\">null</a>('a)) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-logMany", "title": "logMany", "contents": "A convenience function to log more than 4 arguments", "rendered": "A convenience function to log more than 4 arguments", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-logMany", "title": "logMany", "contents": "logMany array unit ", "rendered": "<h4 class='item'>let logMany: array('a) => unit</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-log4", "title": "log4", "contents": "A convenience function to log everything", "rendered": "A convenience function to log everything", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-log4", "title": "log4", "contents": "log4 unit    ", "rendered": "<h4 class='item'>let log4: ('a, 'b, 'c, 'd) => unit</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-log3", "title": "log3", "contents": "log3 unit   ", "rendered": "<h4 class='item'>let log3: ('a, 'b, 'c) => unit</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-log2", "title": "log2", "contents": "log2 unit  ", "rendered": "<h4 class='item'>let log2: ('a, 'b) => unit</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-log", "title": "log", "contents": "log unit ", "rendered": "<h4 class='item'>let log: 'a => unit</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-typeof", "title": "typeof", "contents": "typeof x will be compiled as typeof x in JS Please consider functions in Types for a type safe way of reflection", "rendered": "<code>typeof x</code> will be compiled as <code>typeof x</code> in JS Please consider functions in Types for a type safe way of reflection", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-typeof", "title": "typeof", "contents": "typeof string ", "rendered": "<h4 class='item'>let typeof: 'a => string</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-to_bool", "title": "to_bool", "contents": "convert Js boolean to OCaml bool", "rendered": "convert Js boolean to OCaml bool", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-to_bool", "title": "to_bool", "contents": "to_bool bool bool ", "rendered": "<h4 class='item'>let to_bool: bool => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-undefined", "title": "undefined", "contents": "The same as empty Undefined will be compiled as undefined", "rendered": "The same as <code>empty</code> Undefined will be compiled as <code>undefined</code>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-undefined", "title": "undefined", "contents": "undefined undefined", "rendered": "<h4 class='item'>let undefined: <a href=\"./api/Js.html#type-undefined\">undefined</a>('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-null", "title": "null", "contents": "The same as empty in Null will be compiled as null", "rendered": "The same as <code>empty</code> in Null will be compiled as <code>null</code>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-null", "title": "null", "contents": "null null", "rendered": "<h4 class='item'>let null: <a href=\"./api/Js.html#type-null\">null</a>('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-false_", "title": "false_", "contents": "false_ bool", "rendered": "<h4 class='item'>let false_: bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-true_", "title": "true_", "contents": "true_ bool", "rendered": "<h4 class='item'>let true_: bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-promise", "title": "promise", "contents": "please use Promise", "rendered": "please use Promise", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-promise", "title": "promise", "contents": "Deprecated: please use Promise\n\n", "rendered": "Deprecated: <p>please use Promise</p>\n", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-promise", "title": "promise", "contents": "The promise type, defined here for interoperation across packages", "rendered": "The promise type, defined here for interoperation across packages", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-promise", "title": "promise", "contents": "promise ", "rendered": "<h4 class='item'>type promise('a, 'e)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-boolean", "title": "boolean", "contents": "The value could be either true_ or false_. Note in BuckleScript, boolean has different representation from OCaml&#39;s bool, see conversion functions in Boolean", "rendered": "The value could be either true_ or false_. Note in BuckleScript, <code>boolean</code> has different representation from OCaml&#39;s <code>bool</code>, see conversion functions in Boolean", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-boolean", "title": "boolean", "contents": "boolean bool", "rendered": "<h4 class='item'>type boolean = bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-testAny", "title": "testAny", "contents": "The same as test except that it is more permissive on the types of input", "rendered": "The same as test except that it is more permissive on the types of input", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-testAny", "title": "testAny", "contents": "testAny bool ", "rendered": "<h4 class='item'>let testAny: 'a => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-test", "title": "test", "contents": "test nullable bool ", "rendered": "<h4 class='item'>let test: <a href=\"./api/Js.html#type-nullable\">nullable</a>('a) => bool</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-nullToOption", "title": "nullToOption", "contents": "nullToOption null option ", "rendered": "<h4 class='item'>let nullToOption: <a href=\"./api/Js.html#type-null\">null</a>('a) => option('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-undefinedToOption", "title": "undefinedToOption", "contents": "undefinedToOption undefined option ", "rendered": "<h4 class='item'>let undefinedToOption: <a href=\"./api/Js.html#type-undefined\">undefined</a>('a) => option('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#value-toOption", "title": "toOption", "contents": "toOption nullable option ", "rendered": "<h4 class='item'>let toOption: <a href=\"./api/Js.html#type-nullable\">nullable</a>('a) => option('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-null_undefined", "title": "null_undefined", "contents": "null_undefined nullable", "rendered": "<h4 class='item'>type null_undefined('a) = <a href=\"./api/Js.html#type-nullable\">nullable</a>('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-nullable", "title": "nullable", "contents": "value of this type can be undefined, null or &#39;a this type is the same as type t n Null_undefined", "rendered": "value of this type can be <code>undefined</code>, <code>null</code> or <code>&#39;a</code> this type is the same as type <code>t</code> n Null_undefined", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-nullable", "title": "nullable", "contents": "nullable ", "rendered": "<h4 class='item'>type nullable('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-undefined", "title": "undefined", "contents": "value of this type can be either undefined or &#39;a this type is the same as type t in Undefined", "rendered": "value of this type can be either <code>undefined</code> or <code>&#39;a</code> this type is the same as type <code>t</code> in Undefined", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-undefined", "title": "undefined", "contents": "undefined ", "rendered": "<h4 class='item'>type undefined('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-null", "title": "null", "contents": "nullable, value of this type can be either null or &#39;a this type is the same as type t in Null", "rendered": "nullable, value of this type can be either <code>null</code> or <code>&#39;a</code> this type is the same as type <code>t</code> in Null", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-null", "title": "null", "contents": "null ", "rendered": "<h4 class='item'>type null('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html", "title": "code block", "contents": "let x : < x : int ; y : int > Js.t =\n    [%obj{ x = 1 ; y = 2}]\n", "rendered": "<pre><code>let x : < x : int ; y : int > Js.t =\n    [%obj{ x = 1 ; y = 2}]\n</code></pre>", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-t", "title": "t", "contents": "Js object type.", "rendered": "Js object type.", "breadcrumb": "Js"},
{"href": "./api/Js.html#type-t", "title": "t", "contents": "t ", "rendered": "<h4 class='item'>type t('a)</h4>", "breadcrumb": "Js"},
{"href": "./api/Js.html", "title": "Js", "contents": "Types for JS objects", "rendered": "Types for JS objects", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-Internal", "title": "Internal", "contents": "/*", "rendered": "/*", "breadcrumb": "Js"},
{"href": "./api/Js.html#module-MapperRt", "title": "MapperRt", "contents": "/*", "rendered": "/*", "breadcrumb": "Js"},
{"href": "./api/Js.html", "title": "Js", "contents": "@rest", "rendered": "@rest", "breadcrumb": "Js"},
{"href": "./api/Js.html", "title": "code block", "contents": "[| 1;2;3;4|]\n|> Js.Array.map (fun x -> x + 1 )\n|> Js.Array.reduce (+) 0\n|> Js.log \n", "rendered": "<pre><code>[| 1;2;3;4|]\n|> Js.Array.map (fun x -> x + 1 )\n|> Js.Array.reduce (+) 0\n|> Js.log \n</code></pre>", "breadcrumb": "Js"},
{"href": "./api/Js.html", "title": "Js", "contents": "This library provides bindings and necessary support for JS FFI. It contains all bindings into Js namespace.", "rendered": "This library provides bindings and necessary support for JS FFI. It contains all bindings into <code>Js</code> namespace.", "breadcrumb": "Js"}]